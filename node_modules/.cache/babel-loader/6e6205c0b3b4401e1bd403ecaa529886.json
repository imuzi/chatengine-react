{"ast":null,"code":"/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nexport function getBadgeSelectedColor(rgb) {\n  var primaryHLS = RGBToHSL(rgb);\n  primaryHLS.l += 15;\n  return \"hsl(\".concat(primaryHLS.h, \", \").concat(primaryHLS.s, \"%, \").concat(primaryHLS.l, \"%)\");\n}\nexport function RGBToHSL(rgb) {\n  var r = 0,\n      g = 0,\n      b = 0; // 3 digits\n\n  if (rgb.length === 4) {\n    r = Number.parseInt(rgb[1] + rgb[1], 16);\n    g = Number.parseInt(rgb[2] + rgb[2], 16);\n    b = Number.parseInt(rgb[3] + rgb[3], 16); // 6 digits\n  } else if (rgb.length === 7) {\n    r = Number.parseInt(rgb[1] + rgb[2], 16);\n    g = Number.parseInt(rgb[3] + rgb[4], 16);\n    b = Number.parseInt(rgb[5] + rgb[6], 16);\n  } // Make r, g, and b fractions of 1\n\n\n  r /= 255;\n  g /= 255;\n  b /= 255; // Find greatest and smallest channel values\n\n  var cmin = Math.min(r, g, b),\n      cmax = Math.max(r, g, b),\n      delta = cmax - cmin,\n      h = 0,\n      s = 0,\n      l = 0; // Calculate hue\n  // No difference\n\n  if (delta === 0) h = 0; // Red is max\n  else if (cmax === r) h = (g - b) / delta % 6; // Green is max\n    else if (cmax === g) h = (b - r) / delta + 2; // Blue is max\n      else h = (r - g) / delta + 4;\n  h = Math.round(h * 60); // Make negative hues positive behind 360°\n\n  if (h < 0) h += 360; // Calculate lightness\n\n  l = (cmax + cmin) / 2; // Calculate saturation\n\n  s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1)); // Multiply l and s by 100\n\n  s = +(s * 100).toFixed(1);\n  l = +(l * 100).toFixed(1); //return \"hsl(\" + h + \",\" + s + \"%,\" + l + \"%)\";\n\n  return {\n    h: h,\n    s: s,\n    l: l\n  };\n}","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Utils/Color.js"],"names":["getBadgeSelectedColor","rgb","primaryHLS","RGBToHSL","l","h","s","r","g","b","length","Number","parseInt","cmin","Math","min","cmax","max","delta","round","abs","toFixed"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport function getBadgeSelectedColor(rgb) {\n    const primaryHLS = RGBToHSL(rgb);\n    primaryHLS.l += 15;\n\n    return `hsl(${primaryHLS.h}, ${primaryHLS.s}%, ${primaryHLS.l}%)`;\n}\n\nexport function RGBToHSL(rgb) {\n    let r = 0, g = 0, b = 0;\n\n    // 3 digits\n    if (rgb.length === 4) {\n        r = Number.parseInt(rgb[1] + rgb[1], 16);\n        g = Number.parseInt(rgb[2] + rgb[2], 16);\n        b = Number.parseInt(rgb[3] + rgb[3], 16);\n\n        // 6 digits\n    } else if (rgb.length === 7) {\n        r = Number.parseInt(rgb[1] + rgb[2], 16);\n        g = Number.parseInt(rgb[3] + rgb[4], 16);\n        b = Number.parseInt(rgb[5] + rgb[6], 16);\n    }\n\n    // Make r, g, and b fractions of 1\n    r /= 255;\n    g /= 255;\n    b /= 255;\n\n    // Find greatest and smallest channel values\n    let cmin = Math.min(r,g,b),\n        cmax = Math.max(r,g,b),\n        delta = cmax - cmin,\n        h = 0,\n        s = 0,\n        l = 0;\n\n    // Calculate hue\n    // No difference\n    if (delta === 0)\n        h = 0;\n    // Red is max\n    else if (cmax === r)\n        h = ((g - b) / delta) % 6;\n    // Green is max\n    else if (cmax === g)\n        h = (b - r) / delta + 2;\n    // Blue is max\n    else\n        h = (r - g) / delta + 4;\n\n    h = Math.round(h * 60);\n\n    // Make negative hues positive behind 360°\n    if (h < 0)\n        h += 360;\n\n    // Calculate lightness\n    l = (cmax + cmin) / 2;\n\n    // Calculate saturation\n    s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n\n    // Multiply l and s by 100\n    s = +(s * 100).toFixed(1);\n    l = +(l * 100).toFixed(1);\n\n    //return \"hsl(\" + h + \",\" + s + \"%,\" + l + \"%)\";\n    return { h, s, l }\n}"]},"metadata":{},"sourceType":"module"}