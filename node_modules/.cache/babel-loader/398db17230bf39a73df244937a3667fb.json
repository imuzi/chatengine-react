{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Message/Status.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ErrorIcon from '../../Assets/Icons/Error';\nimport PendingIcon from '../../Assets/Icons/Pending';\nimport SentIcon from '../../Assets/Icons/Sent';\nimport SucceededIcon from '../../Assets/Icons/Succeeded';\nimport { isMessageUnread } from '../../Utils/Message';\nimport ChatStore from '../../Stores/ChatStore';\nimport MessageStore from '../../Stores/MessageStore';\nimport './Status.css';\n\nvar Status =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Status, _React$Component);\n\n  function Status() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Status);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Status)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {};\n\n    _this.onUpdateMessageSend = function (update) {\n      var _this$props = _this.props,\n          chatId = _this$props.chatId,\n          messageId = _this$props.messageId;\n      var old_message_id = update.old_message_id,\n          message = update.message;\n      if (messageId !== old_message_id) return;\n      if (!message) return;\n      var chat_id = message.chat_id,\n          id = message.id,\n          sending_state = message.sending_state;\n      if (chatId !== chat_id) return;\n      _this.newMessageId = id;\n\n      _this.setState({\n        sendingState: sending_state\n      });\n    };\n\n    _this.onUpdateChatReadOutbox = function (update) {\n      var _this$props2 = _this.props,\n          chatId = _this$props2.chatId,\n          messageId = _this$props2.messageId;\n      var chat_id = update.chat_id,\n          last_read_outbox_message_id = update.last_read_outbox_message_id;\n\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          newMessageId = _assertThisInitialize.newMessageId;\n\n      if (chatId !== chat_id) return;\n\n      if (newMessageId && newMessageId <= last_read_outbox_message_id || messageId <= last_read_outbox_message_id) {\n        _this.setState({\n          sendingState: null,\n          unread: false\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Status, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      ChatStore.on('updateChatReadOutbox', this.onUpdateChatReadOutbox);\n      MessageStore.on('updateMessageSendFailed', this.onUpdateMessageSend);\n      MessageStore.on('updateMessageSendSucceeded', this.onUpdateMessageSend);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      ChatStore.off('updateChatReadOutbox', this.onUpdateChatReadOutbox);\n      MessageStore.off('updateMessageSendFailed', this.onUpdateMessageSend);\n      MessageStore.off('updateMessageSendSucceeded', this.onUpdateMessageSend);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          sendingState = _this$state.sendingState,\n          unread = _this$state.unread;\n\n      if (!unread) {\n        return React.createElement(SucceededIcon, {\n          className: \"status\",\n          viewBox: \"0 0 17 10\",\n          style: {\n            width: 16,\n            height: 9\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        });\n      }\n\n      if (sendingState) {\n        return sendingState['@type'] === 'messageSendingStateFailed' ? React.createElement(ErrorIcon, {\n          className: \"status\",\n          viewBox: \"0 0 14 14\",\n          style: {\n            width: 16,\n            height: 12,\n            transform: 'translate(0, 1px)'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }) : React.createElement(PendingIcon, {\n          className: \"status\",\n          viewBox: \"0 0 14 14\",\n          style: {\n            width: 16,\n            height: 12,\n            transform: 'translate(0, 1px)',\n            stroke: 'currentColor'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(SentIcon, {\n        className: \"status\",\n        viewBox: \"0 0 12 10\",\n        style: {\n          width: 16,\n          height: 9\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var chatId = props.chatId,\n          messageId = props.messageId;\n      var message = MessageStore.get(chatId, messageId);\n      var sendingState = message ? message.sending_state : null;\n\n      if (chatId !== state.prevChatId || messageId !== state.prevMessageId) {\n        return {\n          prevChatId: chatId,\n          prevMessageId: messageId,\n          sendingState: sendingState,\n          unread: isMessageUnread(chatId, messageId)\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Status;\n}(React.Component);\n\nStatus.propTypes = {\n  chatId: PropTypes.number.isRequired,\n  messageId: PropTypes.number.isRequired\n};\nexport default Status;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Message/Status.js"],"names":["React","PropTypes","ErrorIcon","PendingIcon","SentIcon","SucceededIcon","isMessageUnread","ChatStore","MessageStore","Status","state","onUpdateMessageSend","update","props","chatId","messageId","old_message_id","message","chat_id","id","sending_state","newMessageId","setState","sendingState","onUpdateChatReadOutbox","last_read_outbox_message_id","unread","on","off","width","height","transform","stroke","get","prevChatId","prevMessageId","Component","propTypes","number","isRequired"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ErrorIcon from '../../Assets/Icons/Error';\nimport PendingIcon from '../../Assets/Icons/Pending';\nimport SentIcon from '../../Assets/Icons/Sent';\nimport SucceededIcon from '../../Assets/Icons/Succeeded';\nimport { isMessageUnread } from '../../Utils/Message';\nimport ChatStore from '../../Stores/ChatStore';\nimport MessageStore from '../../Stores/MessageStore';\nimport './Status.css';\n\nclass Status extends React.Component {\n    state = {};\n\n    static getDerivedStateFromProps(props, state) {\n        const { chatId, messageId } = props;\n\n        const message = MessageStore.get(chatId, messageId);\n        const sendingState = message ? message.sending_state : null;\n\n        if (chatId !== state.prevChatId || messageId !== state.prevMessageId) {\n            return {\n                prevChatId: chatId,\n                prevMessageId: messageId,\n                sendingState,\n                unread: isMessageUnread(chatId, messageId)\n            };\n        }\n\n        return null;\n    }\n\n    componentDidMount() {\n        ChatStore.on('updateChatReadOutbox', this.onUpdateChatReadOutbox);\n\n        MessageStore.on('updateMessageSendFailed', this.onUpdateMessageSend);\n        MessageStore.on('updateMessageSendSucceeded', this.onUpdateMessageSend);\n    }\n\n    componentWillUnmount() {\n        ChatStore.off('updateChatReadOutbox', this.onUpdateChatReadOutbox);\n\n        MessageStore.off('updateMessageSendFailed', this.onUpdateMessageSend);\n        MessageStore.off('updateMessageSendSucceeded', this.onUpdateMessageSend);\n    }\n\n    onUpdateMessageSend = update => {\n        const { chatId, messageId } = this.props;\n        const { old_message_id, message } = update;\n\n        if (messageId !== old_message_id) return;\n        if (!message) return;\n\n        const { chat_id, id, sending_state } = message;\n        if (chatId !== chat_id) return;\n\n        this.newMessageId = id;\n        this.setState({ sendingState: sending_state });\n    };\n\n    onUpdateChatReadOutbox = update => {\n        const { chatId, messageId } = this.props;\n        const { chat_id, last_read_outbox_message_id } = update;\n        const { newMessageId } = this;\n\n        if (chatId !== chat_id) return;\n\n        if ((newMessageId && newMessageId <= last_read_outbox_message_id) || messageId <= last_read_outbox_message_id) {\n            this.setState({ sendingState: null, unread: false });\n        }\n    };\n\n    render() {\n        const { sendingState, unread } = this.state;\n        if (!unread) {\n            return <SucceededIcon className='status' viewBox='0 0 17 10' style={{ width: 16, height: 9 }} />;\n        }\n\n        if (sendingState) {\n            return sendingState['@type'] === 'messageSendingStateFailed' ? (\n                <ErrorIcon\n                    className='status'\n                    viewBox='0 0 14 14'\n                    style={{ width: 16, height: 12, transform: 'translate(0, 1px)' }}\n                />\n            ) : (\n                <PendingIcon\n                    className='status'\n                    viewBox='0 0 14 14'\n                    style={{ width: 16, height: 12, transform: 'translate(0, 1px)', stroke: 'currentColor' }}\n                />\n            );\n        }\n\n        return <SentIcon className='status' viewBox='0 0 12 10' style={{ width: 16, height: 9 }} />;\n    }\n}\n\nStatus.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    messageId: PropTypes.number.isRequired\n};\n\nexport default Status;\n"]},"metadata":{},"sourceType":"module"}