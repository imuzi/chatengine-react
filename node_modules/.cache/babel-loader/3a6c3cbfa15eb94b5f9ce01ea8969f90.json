{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Auth/Caption.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport { ReactComponent as Logo } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../Assets/telegram-logo.svg\"; // import Lottie from '../Viewer/Lottie';\n\nimport AuthStore from '../../Stores/AuthorizationStore';\nimport './Caption.css';\nvar Lottie = React.lazy(function () {\n  return import('../Viewer/Lottie');\n});\n\nvar Caption =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Caption, _React$Component);\n\n  function Caption(props) {\n    var _this;\n\n    _classCallCheck(this, Caption);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Caption).call(this, props));\n    _this.loadData =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var closeData, requests, results, _ref2, _ref3, _closeData, idleData, peekData, trackingData;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              closeData = _this.state.closeData;\n\n              if (!closeData) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              _context.prev = 3;\n              requests = [fetch('data/TwoFactorSetupMonkeyClose.json'), fetch('data/TwoFactorSetupMonkeyIdle.json'), fetch('data/TwoFactorSetupMonkeyPeek.json'), fetch('data/TwoFactorSetupMonkeyTracking.json')];\n              _context.next = 7;\n              return Promise.all(requests);\n\n            case 7:\n              results = _context.sent;\n              _context.next = 10;\n              return Promise.all(results.map(function (x) {\n                return x.json();\n              }));\n\n            case 10:\n              _ref2 = _context.sent;\n              _ref3 = _slicedToArray(_ref2, 4);\n              _closeData = _ref3[0];\n              idleData = _ref3[1];\n              peekData = _ref3[2];\n              trackingData = _ref3[3];\n\n              _this.setState({\n                closeData: _closeData,\n                idleData: idleData,\n                peekData: peekData,\n                trackingData: trackingData\n              }, function () {\n                var lastUpdate = _this.state.lastUpdate;\n\n                if (lastUpdate) {\n                  switch (lastUpdate['@type']) {\n                    case 'clientUpdateMonkeyIdle':\n                      {\n                        _this.onClientUpdateMonkeyIdle(lastUpdate);\n\n                        break;\n                      }\n\n                    case 'clientUpdateMonkeyTracking':\n                      {\n                        _this.onClientUpdateMonkeyTracking(lastUpdate);\n\n                        break;\n                      }\n\n                    case 'clientUpdateMonkeyClose':\n                      {\n                        _this.onClientUpdateMonkeyClose(lastUpdate);\n\n                        break;\n                      }\n\n                    case 'clientUpdateMonkeyPeek':\n                      {\n                        _this.onClientUpdateMonkeyPeek(lastUpdate);\n\n                        break;\n                      }\n                  }\n                }\n              });\n\n              _context.next = 22;\n              break;\n\n            case 19:\n              _context.prev = 19;\n              _context.t0 = _context[\"catch\"](3);\n              console.error(_context.t0);\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 19]]);\n    }));\n\n    _this.onClientUpdateMonkeyIdle = function (update) {\n      var idleData = _this.state.idleData;\n\n      _this.setState({\n        data: idleData,\n        lastUpdate: update\n      }, function () {\n        var current = _this.lottieRef.current;\n        if (!current) return;\n        current.anim.playSegments([0, 180], true);\n      });\n    };\n\n    _this.onClientUpdateMonkeyTracking = function (update) {\n      var code = update.code,\n          prevCode = update.prevCode;\n      var trackingData = _this.state.trackingData;\n      var from = Math.min(15 * prevCode.length, 180);\n      var to = Math.min(15 * code.length, 180);\n\n      _this.setState({\n        data: trackingData,\n        lastUpdate: update\n      }, function () {\n        var current = _this.lottieRef.current;\n        if (!current) return;\n        current.anim.playSegments([from, to], true);\n      });\n    };\n\n    _this.onClientUpdateMonkeyClose = function (update) {\n      var closeData = _this.state.closeData;\n\n      _this.setState({\n        data: closeData,\n        lastUpdate: update\n      }, function () {\n        var current = _this.lottieRef.current;\n        if (!current) return;\n        current.anim.playSegments([0, 49], true);\n      });\n    };\n\n    _this.onClientUpdateMonkeyPeek = function (update) {\n      var peek = update.peek;\n      var _this$state = _this.state,\n          peekData = _this$state.peekData,\n          lastUpdate = _this$state.lastUpdate;\n\n      if (lastUpdate && lastUpdate['@type'] === 'clientUpdateMonkeyPeek' && lastUpdate.peek === peek) {\n        return;\n      }\n\n      _this.setState({\n        data: peekData,\n        lastUpdate: update\n      }, function () {\n        var current = _this.lottieRef.current;\n        if (!current) return;\n\n        if (peek) {\n          current.anim.playSegments([0, 15], true);\n        } else {\n          current.anim.playSegments([15, 33], true);\n        }\n      });\n    };\n\n    _this.state = {\n      data: null,\n      lastUpdate: null\n    };\n    _this.lottieRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(Caption, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                setTimeout(this.loadData, 100);\n                AuthStore.on('clientUpdateMonkeyIdle', this.onClientUpdateMonkeyIdle);\n                AuthStore.on('clientUpdateMonkeyTracking', this.onClientUpdateMonkeyTracking);\n                AuthStore.on('clientUpdateMonkeyClose', this.onClientUpdateMonkeyClose);\n                AuthStore.on('clientUpdateMonkeyPeek', this.onClientUpdateMonkeyPeek);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      AuthStore.off('clientUpdateMonkeyIdle', this.onClientUpdateMonkeyIdle);\n      AuthStore.off('clientUpdateMonkeyTracking', this.onClientUpdateMonkeyTracking);\n      AuthStore.off('clientUpdateMonkeyClose', this.onClientUpdateMonkeyClose);\n      AuthStore.off('clientUpdateMonkeyPeek', this.onClientUpdateMonkeyPeek);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var state = this.props.state;\n      var data = this.state.data;\n      var control = null;\n\n      switch (state['@type']) {\n        case 'authorizationStateWaitPhoneNumber':\n        case 'authorizationStateWaitEncryptionKey':\n        case 'authorizationStateWaitTdlibParameters':\n        case 'authorizationStateWaitTdlib':\n          {\n            control = React.createElement(Logo, {\n              className: \"auth-caption-telegram-logo\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 187\n              },\n              __self: this\n            });\n            break;\n          }\n\n        case 'authorizationStateWaitCode':\n        case 'authorizationStateWaitPassword':\n          {\n            control = React.createElement(\"div\", {\n              className: \"auth-caption-telegram-logo\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 193\n              },\n              __self: this\n            }, React.createElement(React.Suspense, {\n              fallback: null,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 194\n              },\n              __self: this\n            }, React.createElement(Lottie, {\n              ref: this.lottieRef,\n              options: {\n                autoplay: false,\n                loop: false,\n                animationData: data,\n                renderer: 'svg',\n                rendererSettings: {\n                  preserveAspectRatio: 'xMinYMin slice',\n                  // Supports the same options as the svg element's preserveAspectRatio property\n                  clearCanvas: false,\n                  progressiveLoad: true,\n                  // Boolean, only svg renderer, loads dom elements when needed. Might speed up initialization for large number of elements.\n                  hideOnTransparent: true,\n                  //Boolean, only svg renderer, hides elements when opacity reaches 0 (defaults to true)\n                  className: 'auth-caption-lottie'\n                }\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 195\n              },\n              __self: this\n            })));\n            break;\n          }\n\n        default:\n          break;\n      }\n\n      return React.createElement(\"div\", {\n        className: \"auth-caption\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, control);\n    }\n  }]);\n\n  return Caption;\n}(React.Component);\n\nexport default Caption;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Auth/Caption.js"],"names":["React","AuthStore","Lottie","lazy","Caption","props","loadData","closeData","state","requests","fetch","Promise","all","results","map","x","json","idleData","peekData","trackingData","setState","lastUpdate","onClientUpdateMonkeyIdle","onClientUpdateMonkeyTracking","onClientUpdateMonkeyClose","onClientUpdateMonkeyPeek","console","error","update","data","current","lottieRef","anim","playSegments","code","prevCode","from","Math","min","length","to","peek","createRef","setTimeout","on","off","control","autoplay","loop","animationData","renderer","rendererSettings","preserveAspectRatio","clearCanvas","progressiveLoad","hideOnTransparent","className","Component"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport { ReactComponent as Logo } from '../../Assets/telegram-logo.svg';\n// import Lottie from '../Viewer/Lottie';\nimport AuthStore from '../../Stores/AuthorizationStore';\nimport './Caption.css';\n\nconst Lottie = React.lazy(() => import('../Viewer/Lottie'));\n\nclass Caption extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: null,\n            lastUpdate: null\n        };\n\n        this.lottieRef = React.createRef();\n    }\n\n    loadData = async () => {\n        const { closeData } = this.state;\n        if (closeData) return;\n\n        try {\n            const requests = [\n                fetch('data/TwoFactorSetupMonkeyClose.json'),\n                fetch('data/TwoFactorSetupMonkeyIdle.json'),\n                fetch('data/TwoFactorSetupMonkeyPeek.json'),\n                fetch('data/TwoFactorSetupMonkeyTracking.json')\n            ];\n\n            const results = await Promise.all(requests);\n\n            const [closeData, idleData, peekData, trackingData] = await Promise.all(results.map(x => x.json()));\n\n            this.setState(\n                {\n                    closeData,\n                    idleData,\n                    peekData,\n                    trackingData\n                },\n                () => {\n                    const { lastUpdate } = this.state;\n                    if (lastUpdate) {\n                        switch (lastUpdate['@type']) {\n                            case 'clientUpdateMonkeyIdle': {\n                                this.onClientUpdateMonkeyIdle(lastUpdate);\n                                break;\n                            }\n                            case 'clientUpdateMonkeyTracking': {\n                                this.onClientUpdateMonkeyTracking(lastUpdate);\n                                break;\n                            }\n                            case 'clientUpdateMonkeyClose': {\n                                this.onClientUpdateMonkeyClose(lastUpdate);\n                                break;\n                            }\n                            case 'clientUpdateMonkeyPeek': {\n                                this.onClientUpdateMonkeyPeek(lastUpdate);\n                                break;\n                            }\n                        }\n                    }\n                }\n            );\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    async componentDidMount() {\n        setTimeout(this.loadData, 100);\n\n        AuthStore.on('clientUpdateMonkeyIdle', this.onClientUpdateMonkeyIdle);\n        AuthStore.on('clientUpdateMonkeyTracking', this.onClientUpdateMonkeyTracking);\n        AuthStore.on('clientUpdateMonkeyClose', this.onClientUpdateMonkeyClose);\n        AuthStore.on('clientUpdateMonkeyPeek', this.onClientUpdateMonkeyPeek);\n    }\n\n    componentWillUnmount() {\n        AuthStore.off('clientUpdateMonkeyIdle', this.onClientUpdateMonkeyIdle);\n        AuthStore.off('clientUpdateMonkeyTracking', this.onClientUpdateMonkeyTracking);\n        AuthStore.off('clientUpdateMonkeyClose', this.onClientUpdateMonkeyClose);\n        AuthStore.off('clientUpdateMonkeyPeek', this.onClientUpdateMonkeyPeek);\n    }\n\n    onClientUpdateMonkeyIdle = update => {\n        const { idleData } = this.state;\n\n        this.setState(\n            {\n                data: idleData,\n                lastUpdate: update\n            },\n            () => {\n                const { current } = this.lottieRef;\n                if (!current) return;\n\n                current.anim.playSegments([0, 180], true);\n            }\n        );\n    };\n\n    onClientUpdateMonkeyTracking = update => {\n        const { code, prevCode } = update;\n        const { trackingData } = this.state;\n\n        const from = Math.min(15 * prevCode.length, 180);\n        const to = Math.min(15 * code.length, 180);\n\n        this.setState(\n            {\n                data: trackingData,\n                lastUpdate: update\n            },\n            () => {\n                const { current } = this.lottieRef;\n                if (!current) return;\n\n                current.anim.playSegments([from, to], true);\n            }\n        );\n    };\n\n    onClientUpdateMonkeyClose = update => {\n        const { closeData } = this.state;\n\n        this.setState(\n            {\n                data: closeData,\n                lastUpdate: update\n            },\n            () => {\n                const { current } = this.lottieRef;\n                if (!current) return;\n\n                current.anim.playSegments([0, 49], true);\n            }\n        );\n    };\n\n    onClientUpdateMonkeyPeek = update => {\n        const { peek } = update;\n        const { peekData, lastUpdate } = this.state;\n\n        if (lastUpdate && lastUpdate['@type'] === 'clientUpdateMonkeyPeek' && lastUpdate.peek === peek) {\n            return;\n        }\n\n        this.setState(\n            {\n                data: peekData,\n                lastUpdate: update\n            },\n            () => {\n                const { current } = this.lottieRef;\n                if (!current) return;\n\n                if (peek) {\n                    current.anim.playSegments([0, 15], true);\n                } else {\n                    current.anim.playSegments([15, 33], true);\n                }\n            }\n        );\n    };\n\n    render() {\n        const { state } = this.props;\n        const { data } = this.state;\n\n        let control = null;\n        switch (state['@type']) {\n            case 'authorizationStateWaitPhoneNumber':\n            case 'authorizationStateWaitEncryptionKey':\n            case 'authorizationStateWaitTdlibParameters':\n            case 'authorizationStateWaitTdlib': {\n                control = <Logo className='auth-caption-telegram-logo' />;\n                break;\n            }\n            case 'authorizationStateWaitCode':\n            case 'authorizationStateWaitPassword': {\n                control = (\n                    <div className='auth-caption-telegram-logo'>\n                        <React.Suspense fallback={null}>\n                            <Lottie\n                                ref={this.lottieRef}\n                                options={{\n                                    autoplay: false,\n                                    loop: false,\n                                    animationData: data,\n                                    renderer: 'svg',\n                                    rendererSettings: {\n                                        preserveAspectRatio: 'xMinYMin slice', // Supports the same options as the svg element's preserveAspectRatio property\n                                        clearCanvas: false,\n                                        progressiveLoad: true, // Boolean, only svg renderer, loads dom elements when needed. Might speed up initialization for large number of elements.\n                                        hideOnTransparent: true, //Boolean, only svg renderer, hides elements when opacity reaches 0 (defaults to true)\n                                        className: 'auth-caption-lottie'\n                                    }\n                                }}\n                            />\n                        </React.Suspense>\n                    </div>\n                );\n                break;\n            }\n            default:\n                break;\n        }\n\n        return <div className='auth-caption'>{control}</div>;\n    }\n}\n\nexport default Caption;\n"]},"metadata":{},"sourceType":"module"}