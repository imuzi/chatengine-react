{"ast":null,"code":"/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport ChatStore from '../Stores/ChatStore';\nimport NotificationStore from '../Stores/NotificationStore';\nimport SupergroupStore from '../Stores/SupergroupStore';\n\nfunction isChatMuted(chatId) {\n  return getChatMuteFor(chatId) > 0;\n}\n\nfunction getChatMuteFor(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return 0;\n  var notification_settings = chat.notification_settings;\n  if (!notification_settings) return 0;\n  var use_default_mute_for = notification_settings.use_default_mute_for,\n      mute_for = notification_settings.mute_for;\n\n  if (use_default_mute_for) {\n    var settings = getScopeNotificationSettings(chatId);\n    return settings ? settings.mute_for : false;\n  }\n\n  return mute_for;\n}\n\nfunction isChannelChat(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  if (!chat.type) return false;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeSupergroup':\n      {\n        var supergroup = SupergroupStore.get(chat.type.supergroup_id);\n        return supergroup && supergroup.is_channel;\n      }\n\n    case 'chatTypeBasicGroup':\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        return false;\n      }\n  }\n\n  return false;\n}\n\nfunction getScopeNotificationSettings(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return null;\n\n  switch (chat.type['@type']) {\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        return NotificationStore.settings.get('notificationSettingsScopePrivateChats');\n      }\n\n    case 'chatTypeBasicGroup':\n    case 'chatTypeSupergroup':\n      {\n        var settings = null;\n\n        if (isChannelChat(chatId)) {\n          settings = NotificationStore.settings.get('notificationSettingsScopeChannelChats');\n        } else {\n          settings = NotificationStore.settings.get('notificationSettingsScopeGroupChats');\n        }\n\n        return settings;\n      }\n  }\n\n  return null;\n}\n\nfunction getChatDisablePinnedMessageNotifications(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  var notification_settings = chat.notification_settings;\n  if (!chat) return false;\n  var use_default_disable_pinned_message_notifications = notification_settings.use_default_disable_pinned_message_notifications,\n      disable_pinned_message_notifications = notification_settings.disable_pinned_message_notifications;\n\n  if (use_default_disable_pinned_message_notifications) {\n    var settings = getScopeNotificationSettings(chatId);\n    return settings ? settings.disable_pinned_message_notifications : false;\n  }\n\n  return disable_pinned_message_notifications;\n}\n\nfunction getChatDisableMentionNotifications(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  var notification_settings = chat.notification_settings;\n  if (!notification_settings) return false;\n  var use_default_disable_mention_notifications = notification_settings.use_default_disable_mention_notifications,\n      disable_mention_notifications = notification_settings.disable_mention_notifications;\n\n  if (use_default_disable_mention_notifications) {\n    var settings = getScopeNotificationSettings(chatId);\n    return settings ? settings.disable_mention_notifications : false;\n  }\n\n  return disable_mention_notifications;\n}\n\nfunction hasMention(message) {\n  return message && message.contains_unread_mention;\n}\n\nfunction hasPinnedMessage(message) {\n  return message && message.content['@type'] === 'messagePinMessage';\n}\n\nexport function isMessageMuted(message) {\n  var chat_id = message.chat_id;\n\n  if (hasMention(message)) {\n    return getChatDisableMentionNotifications(chat_id);\n  }\n\n  if (hasPinnedMessage(message)) {\n    return getChatDisablePinnedMessageNotifications(chat_id);\n  }\n\n  return isChatMuted(chat_id);\n}","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Utils/Store.js"],"names":["ChatStore","NotificationStore","SupergroupStore","isChatMuted","chatId","getChatMuteFor","chat","get","notification_settings","use_default_mute_for","mute_for","settings","getScopeNotificationSettings","isChannelChat","type","supergroup","supergroup_id","is_channel","getChatDisablePinnedMessageNotifications","use_default_disable_pinned_message_notifications","disable_pinned_message_notifications","getChatDisableMentionNotifications","use_default_disable_mention_notifications","disable_mention_notifications","hasMention","message","contains_unread_mention","hasPinnedMessage","content","isMessageMuted","chat_id"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport ChatStore from '../Stores/ChatStore';\nimport NotificationStore from '../Stores/NotificationStore';\nimport SupergroupStore from '../Stores/SupergroupStore';\n\nfunction isChatMuted(chatId) {\n    return getChatMuteFor(chatId) > 0;\n}\n\nfunction getChatMuteFor(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return 0;\n\n    const { notification_settings } = chat;\n    if (!notification_settings) return 0;\n\n    const { use_default_mute_for, mute_for } = notification_settings;\n\n    if (use_default_mute_for) {\n        const settings = getScopeNotificationSettings(chatId);\n\n        return settings ? settings.mute_for : false;\n    }\n\n    return mute_for;\n}\n\nfunction isChannelChat(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n    if (!chat.type) return false;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeSupergroup': {\n            const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n\n            return supergroup && supergroup.is_channel;\n        }\n        case 'chatTypeBasicGroup':\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            return false;\n        }\n    }\n\n    return false;\n}\n\nfunction getScopeNotificationSettings(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return null;\n\n    switch (chat.type['@type']) {\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            return NotificationStore.settings.get('notificationSettingsScopePrivateChats');\n        }\n        case 'chatTypeBasicGroup':\n        case 'chatTypeSupergroup': {\n            let settings = null;\n            if (isChannelChat(chatId)) {\n                settings = NotificationStore.settings.get('notificationSettingsScopeChannelChats');\n            } else {\n                settings = NotificationStore.settings.get('notificationSettingsScopeGroupChats');\n            }\n            return settings;\n        }\n    }\n\n    return null;\n}\n\nfunction getChatDisablePinnedMessageNotifications(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { notification_settings } = chat;\n    if (!chat) return false;\n\n    const {\n        use_default_disable_pinned_message_notifications,\n        disable_pinned_message_notifications\n    } = notification_settings;\n    if (use_default_disable_pinned_message_notifications) {\n        const settings = getScopeNotificationSettings(chatId);\n\n        return settings ? settings.disable_pinned_message_notifications : false;\n    }\n\n    return disable_pinned_message_notifications;\n}\n\nfunction getChatDisableMentionNotifications(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { notification_settings } = chat;\n    if (!notification_settings) return false;\n\n    const { use_default_disable_mention_notifications, disable_mention_notifications } = notification_settings;\n    if (use_default_disable_mention_notifications) {\n        const settings = getScopeNotificationSettings(chatId);\n\n        return settings ? settings.disable_mention_notifications : false;\n    }\n\n    return disable_mention_notifications;\n}\n\nfunction hasMention(message) {\n    return message && message.contains_unread_mention;\n}\n\nfunction hasPinnedMessage(message) {\n    return message && message.content['@type'] === 'messagePinMessage';\n}\n\nexport function isMessageMuted(message) {\n    const { chat_id } = message;\n\n    if (hasMention(message)) {\n        return getChatDisableMentionNotifications(chat_id);\n    }\n    if (hasPinnedMessage(message)) {\n        return getChatDisablePinnedMessageNotifications(chat_id);\n    }\n\n    return isChatMuted(chat_id);\n}\n"]},"metadata":{},"sourceType":"module"}