{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Popup/StickerSetDialog.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport ShareStickerSetButton from './ShareStickerSetButton';\nimport Sticker, { StickerSourceEnum } from '../Message/Media/Sticker';\nimport StickerPreview from '../ColumnMiddle/StickerPreview';\nimport { loadStickerContent, loadStickerSetContent } from '../../Utils/File';\nimport { STICKER_SMALL_DISPLAY_SIZE } from '../../Constants';\nimport FileStore from '../../Stores/FileStore';\nimport StickerStore from '../../Stores/StickerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './StickerSetDialog.css';\n\nvar StickerSetDialog =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StickerSetDialog, _React$Component);\n\n  function StickerSetDialog(props) {\n    var _this;\n\n    _classCallCheck(this, StickerSetDialog);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StickerSetDialog).call(this, props));\n\n    _this.handleUpdateInstalledStickerSets = function (update) {\n      var stickerSet = StickerStore.stickerSet;\n\n      _this.setState({\n        stickerSet: stickerSet\n      });\n    };\n\n    _this.handleClientUpdateStickerSet = function (update) {\n      var stickerSet = update.stickerSet;\n\n      _this.setState({\n        stickerSet: stickerSet\n      });\n\n      if (stickerSet) {\n        var store = FileStore.getStore();\n        loadStickerSetContent(store, stickerSet);\n      }\n    };\n\n    _this.handleClose = function () {\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateStickerSet',\n        stickerSet: null\n      });\n    };\n\n    _this.handleDone = function () {\n      var stickerSet = _this.state.stickerSet;\n      if (!stickerSet) return;\n      var is_installed = stickerSet.is_installed;\n      TdLibController.send({\n        '@type': 'changeStickerSet',\n        set_id: stickerSet.id,\n        is_installed: !is_installed\n      });\n\n      _this.handleClose();\n    };\n\n    _this.loadPreviewContent = function (stickerId) {\n      var stickerSet = _this.state.stickerSet;\n      var stickers = stickerSet.stickers;\n      var sticker = stickers.find(function (x) {\n        return x.sticker.id === stickerId;\n      });\n      if (!sticker) return;\n      var store = FileStore.getStore();\n      loadStickerContent(store, sticker, null);\n\n      var preloadStickers = _this.getNeighborStickers(stickerId);\n\n      preloadStickers.forEach(function (x) {\n        loadStickerContent(store, x, null);\n      });\n    };\n\n    _this.getNeighborStickers = function (stickerId) {\n      var stickerSet = _this.state.stickerSet;\n      if (!stickerSet) return [];\n      var stickers = stickerSet.stickers;\n      if (!stickers) return [];\n      var indexes = [];\n      var index = stickers.findIndex(function (x) {\n        return x.sticker.id === stickerId;\n      });\n      if (index === -1) return [];\n      var STICKERS_PER_ROW = 4;\n      var row = Math.floor(index / STICKERS_PER_ROW);\n      var column = index % STICKERS_PER_ROW;\n      var prevRow = row - 1;\n      var nextRow = row + 1;\n      var prevColumn = column - 1;\n      var nextColumn = column + 1;\n\n      if (prevRow >= 0) {\n        if (prevColumn >= 0) {\n          indexes.push(STICKERS_PER_ROW * prevRow + prevColumn);\n        }\n\n        indexes.push(STICKERS_PER_ROW * prevRow + column);\n\n        if (nextColumn < STICKERS_PER_ROW) {\n          indexes.push(STICKERS_PER_ROW * prevRow + nextColumn);\n        }\n      }\n\n      if (prevColumn >= 0) {\n        indexes.push(STICKERS_PER_ROW * row + prevColumn);\n      }\n\n      if (nextColumn < STICKERS_PER_ROW) {\n        indexes.push(STICKERS_PER_ROW * row + nextColumn);\n      }\n\n      if (nextRow < Math.ceil(stickers.length / STICKERS_PER_ROW)) {\n        if (prevColumn >= 0) {\n          indexes.push(STICKERS_PER_ROW * nextRow + prevColumn);\n        }\n\n        indexes.push(STICKERS_PER_ROW * nextRow + column);\n\n        if (nextColumn < STICKERS_PER_ROW) {\n          indexes.push(STICKERS_PER_ROW * nextRow + nextColumn);\n        }\n      }\n\n      return indexes.map(function (i) {\n        return stickers[i];\n      });\n    };\n\n    _this.handleMouseUp = function () {\n      var sticker = null;\n\n      _this.setState({\n        sticker: sticker\n      });\n\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateStickerPreview',\n        sticker: sticker\n      });\n      _this.mouseDown = false;\n      document.removeEventListener('mouseup', _this.handleMouseUp);\n    };\n\n    _this.handleMouseEnter = function (event) {\n      var stickerId = Number(event.currentTarget.dataset.stickerId);\n\n      var sticker = _this.getSticker(stickerId);\n\n      if (!sticker) return;\n      if (!_this.mouseDown) return;\n\n      _this.setState({\n        sticker: sticker\n      });\n\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateStickerPreview',\n        sticker: sticker\n      });\n\n      _this.loadPreviewContent(stickerId);\n    };\n\n    _this.handleMouseDown = function (event) {\n      var stickerId = Number(event.currentTarget.dataset.stickerId);\n\n      var sticker = _this.getSticker(stickerId);\n\n      if (!sticker) return;\n\n      _this.setState({\n        sticker: sticker\n      });\n\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateStickerPreview',\n        sticker: sticker\n      });\n\n      _this.loadPreviewContent(stickerId);\n\n      _this.mouseDown = true;\n      document.addEventListener('mouseup', _this.handleMouseUp);\n      event.preventDefault();\n      event.stopPropagation();\n      return false;\n    };\n\n    _this.state = {\n      stickerSet: StickerStore.stickerSet,\n      stickerId: 0\n    };\n    return _this;\n  }\n\n  _createClass(StickerSetDialog, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState, nextContext) {\n      var _this$state = this.state,\n          stickerSet = _this$state.stickerSet,\n          sticker = _this$state.sticker;\n      return stickerSet !== nextState.stickerSet || sticker !== nextState.sticker;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      StickerStore.on('clientUpdateStickerSet', this.handleClientUpdateStickerSet);\n      StickerStore.on('updateInstalledStickerSets', this.handleUpdateInstalledStickerSets);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      StickerStore.off('clientUpdateStickerSet', this.handleClientUpdateStickerSet);\n      StickerStore.off('updateInstalledStickerSets', this.handleUpdateInstalledStickerSets);\n    }\n  }, {\n    key: \"getSticker\",\n    // handleMouseOver = event => {\n    //     const stickerId = Number(event.target.dataset.stickerId);\n    //     if (!stickerId) return;\n    //\n    //     if (!this.mouseDown) return;\n    //\n    //     this.setState({ stickerId });\n    //     this.loadPreviewContent(stickerId);\n    // };\n    // handleMouseDown = event => {\n    //     const stickerId = Number(event.target.dataset.stickerId);\n    //     if (!stickerId) return;\n    //\n    //     this.setState({ stickerId });\n    //     this.loadPreviewContent(stickerId);\n    //\n    //     this.mouseDown = true;\n    //     document.addEventListener('mouseup', this.handleMouseUp);\n    //\n    //     event.preventDefault();\n    //     event.stopPropagation();\n    //     return false;\n    // };\n    value: function getSticker(stickerId) {\n      var stickerSet = this.state.stickerSet;\n      if (!stickerSet) return null;\n      var stickers = stickerSet.stickers;\n      var stickerIndex = stickers.findIndex(function (x) {\n        return x.sticker.id === stickerId;\n      });\n      return stickerIndex !== -1 ? stickers[stickerIndex] : null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var t = this.props.t;\n      var _this$state2 = this.state,\n          stickerSet = _this$state2.stickerSet,\n          sticker = _this$state2.sticker;\n      if (!stickerSet) return null;\n      var title = stickerSet.title,\n          stickers = stickerSet.stickers,\n          is_installed = stickerSet.is_installed;\n      var items = stickers.map(function (x) {\n        return React.createElement(\"div\", {\n          className: \"sticker-set-dialog-item\",\n          key: x.sticker.id,\n          \"data-sticker-id\": x.sticker.id,\n          style: {\n            width: 76,\n            height: 76\n          },\n          onMouseEnter: _this2.handleMouseEnter,\n          onMouseDown: _this2.handleMouseDown,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247\n          },\n          __self: this\n        }, React.createElement(Sticker, {\n          key: x.sticker.id,\n          className: \"sticker-set-dialog-item-sticker\",\n          sticker: x,\n          autoplay: false,\n          blur: false,\n          displaySize: STICKER_SMALL_DISPLAY_SIZE,\n          preview: true,\n          source: StickerSourceEnum.STICKER_SET,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 254\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"sticker-set-dialog-item-emoji\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 264\n          },\n          __self: this\n        }, x.emoji));\n      });\n      return React.createElement(Dialog, {\n        className: \"sticker-set-dialog\",\n        open: true,\n        transitionDuration: 0,\n        onClose: this.handleClose,\n        \"aria-labelledby\": \"sticker-set-dialog-title-text\",\n        classes: {\n          paper: 'sticker-set-dialog-paper'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, React.createElement(DialogTitle, {\n        id: \"sticker-set-dialog-title-text\",\n        className: classNames({\n          'sticker-set-dialog-disabled': Boolean(sticker)\n        }),\n        disableTypography: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"h6\",\n        className: \"sticker-set-dialog-title-typography\",\n        noWrap: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, title), React.createElement(ShareStickerSetButton, {\n        className: \"sticker-set-dialog-share-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      })), React.createElement(DialogContent, {\n        classes: {\n          root: 'sticker-set-dialog-content-root'\n        },\n        onMouseOver: this.handleMouseOver,\n        onMouseOut: this.handleMouseOut,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }, items), React.createElement(DialogActions, {\n        className: classNames({\n          'sticker-set-dialog-disabled': Boolean(sticker)\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.handleClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }, t('Cancel')), React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.handleDone,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      }, is_installed ? t('StickersRemove') : t('Add'))), React.createElement(StickerPreview, {\n        sticker: sticker,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return StickerSetDialog;\n}(React.Component);\n\nStickerSetDialog.propTypes = {};\nexport default withTranslation()(StickerSetDialog);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Popup/StickerSetDialog.js"],"names":["React","PropTypes","classNames","withTranslation","Button","Dialog","DialogActions","DialogContent","DialogTitle","Typography","ShareStickerSetButton","Sticker","StickerSourceEnum","StickerPreview","loadStickerContent","loadStickerSetContent","STICKER_SMALL_DISPLAY_SIZE","FileStore","StickerStore","TdLibController","StickerSetDialog","props","handleUpdateInstalledStickerSets","update","stickerSet","setState","handleClientUpdateStickerSet","store","getStore","handleClose","clientUpdate","handleDone","state","is_installed","send","set_id","id","loadPreviewContent","stickerId","stickers","sticker","find","x","preloadStickers","getNeighborStickers","forEach","indexes","index","findIndex","STICKERS_PER_ROW","row","Math","floor","column","prevRow","nextRow","prevColumn","nextColumn","push","ceil","length","map","i","handleMouseUp","mouseDown","document","removeEventListener","handleMouseEnter","event","Number","currentTarget","dataset","getSticker","handleMouseDown","addEventListener","preventDefault","stopPropagation","nextProps","nextState","nextContext","on","off","stickerIndex","t","title","items","width","height","STICKER_SET","emoji","paper","Boolean","root","handleMouseOver","handleMouseOut","Component","propTypes"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport ShareStickerSetButton from './ShareStickerSetButton';\nimport Sticker, { StickerSourceEnum } from '../Message/Media/Sticker';\nimport StickerPreview from '../ColumnMiddle/StickerPreview';\nimport { loadStickerContent, loadStickerSetContent } from '../../Utils/File';\nimport { STICKER_SMALL_DISPLAY_SIZE } from '../../Constants';\nimport FileStore from '../../Stores/FileStore';\nimport StickerStore from '../../Stores/StickerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './StickerSetDialog.css';\n\nclass StickerSetDialog extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            stickerSet: StickerStore.stickerSet,\n            stickerId: 0\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { stickerSet, sticker } = this.state;\n\n        return stickerSet !== nextState.stickerSet || sticker !== nextState.sticker;\n    }\n\n    componentDidMount() {\n        StickerStore.on('clientUpdateStickerSet', this.handleClientUpdateStickerSet);\n        StickerStore.on('updateInstalledStickerSets', this.handleUpdateInstalledStickerSets);\n    }\n\n    componentWillUnmount() {\n        StickerStore.off('clientUpdateStickerSet', this.handleClientUpdateStickerSet);\n        StickerStore.off('updateInstalledStickerSets', this.handleUpdateInstalledStickerSets);\n    }\n\n    handleUpdateInstalledStickerSets = update => {\n        const { stickerSet } = StickerStore;\n\n        this.setState({ stickerSet });\n    };\n\n    handleClientUpdateStickerSet = update => {\n        const { stickerSet } = update;\n\n        this.setState({ stickerSet });\n\n        if (stickerSet) {\n            const store = FileStore.getStore();\n            loadStickerSetContent(store, stickerSet);\n        }\n    };\n\n    handleClose = () => {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSet',\n            stickerSet: null\n        });\n    };\n\n    handleDone = () => {\n        const { stickerSet } = this.state;\n        if (!stickerSet) return;\n\n        const { is_installed } = stickerSet;\n\n        TdLibController.send({\n            '@type': 'changeStickerSet',\n            set_id: stickerSet.id,\n            is_installed: !is_installed\n        });\n\n        this.handleClose();\n    };\n\n    loadPreviewContent = stickerId => {\n        const { stickerSet } = this.state;\n        const { stickers } = stickerSet;\n        const sticker = stickers.find(x => x.sticker.id === stickerId);\n        if (!sticker) return;\n\n        const store = FileStore.getStore();\n        loadStickerContent(store, sticker, null);\n\n        const preloadStickers = this.getNeighborStickers(stickerId);\n        preloadStickers.forEach(x => {\n            loadStickerContent(store, x, null);\n        });\n    };\n\n    getNeighborStickers = stickerId => {\n        const { stickerSet } = this.state;\n        if (!stickerSet) return [];\n\n        const { stickers } = stickerSet;\n        if (!stickers) return [];\n\n        const indexes = [];\n        const index = stickers.findIndex(x => x.sticker.id === stickerId);\n        if (index === -1) return [];\n\n        const STICKERS_PER_ROW = 4;\n        const row = Math.floor(index / STICKERS_PER_ROW);\n        const column = index % STICKERS_PER_ROW;\n\n        const prevRow = row - 1;\n        const nextRow = row + 1;\n        const prevColumn = column - 1;\n        const nextColumn = column + 1;\n\n        if (prevRow >= 0) {\n            if (prevColumn >= 0) {\n                indexes.push(STICKERS_PER_ROW * prevRow + prevColumn);\n            }\n            indexes.push(STICKERS_PER_ROW * prevRow + column);\n            if (nextColumn < STICKERS_PER_ROW) {\n                indexes.push(STICKERS_PER_ROW * prevRow + nextColumn);\n            }\n        }\n\n        if (prevColumn >= 0) {\n            indexes.push(STICKERS_PER_ROW * row + prevColumn);\n        }\n        if (nextColumn < STICKERS_PER_ROW) {\n            indexes.push(STICKERS_PER_ROW * row + nextColumn);\n        }\n\n        if (nextRow < Math.ceil(stickers.length / STICKERS_PER_ROW)) {\n            if (prevColumn >= 0) {\n                indexes.push(STICKERS_PER_ROW * nextRow + prevColumn);\n            }\n            indexes.push(STICKERS_PER_ROW * nextRow + column);\n            if (nextColumn < STICKERS_PER_ROW) {\n                indexes.push(STICKERS_PER_ROW * nextRow + nextColumn);\n            }\n        }\n\n        return indexes.map(i => stickers[i]);\n    };\n\n    // handleMouseOver = event => {\n    //     const stickerId = Number(event.target.dataset.stickerId);\n    //     if (!stickerId) return;\n    //\n    //     if (!this.mouseDown) return;\n    //\n    //     this.setState({ stickerId });\n    //     this.loadPreviewContent(stickerId);\n    // };\n\n    // handleMouseDown = event => {\n    //     const stickerId = Number(event.target.dataset.stickerId);\n    //     if (!stickerId) return;\n    //\n    //     this.setState({ stickerId });\n    //     this.loadPreviewContent(stickerId);\n    //\n    //     this.mouseDown = true;\n    //     document.addEventListener('mouseup', this.handleMouseUp);\n    //\n    //     event.preventDefault();\n    //     event.stopPropagation();\n    //     return false;\n    // };\n\n    getSticker(stickerId) {\n        const { stickerSet } = this.state;\n        if (!stickerSet) return null;\n\n        const { stickers } = stickerSet;\n\n        const stickerIndex = stickers.findIndex(x => x.sticker.id === stickerId);\n        return stickerIndex !== -1 ? stickers[stickerIndex] : null;\n    }\n\n    handleMouseUp = () => {\n        const sticker = null;\n        this.setState({ sticker });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerPreview',\n            sticker\n        });\n        this.mouseDown = false;\n        document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    handleMouseEnter = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        const sticker = this.getSticker(stickerId);\n        if (!sticker) return;\n\n        if (!this.mouseDown) return;\n\n        this.setState({ sticker });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerPreview',\n            sticker\n        });\n        this.loadPreviewContent(stickerId);\n    };\n\n    handleMouseDown = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        const sticker = this.getSticker(stickerId);\n        if (!sticker) return;\n\n        this.setState({ sticker });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerPreview',\n            sticker\n        });\n        this.loadPreviewContent(stickerId);\n\n        this.mouseDown = true;\n        document.addEventListener('mouseup', this.handleMouseUp);\n\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n    };\n\n    render() {\n        const { t } = this.props;\n        const { stickerSet, sticker } = this.state;\n        if (!stickerSet) return null;\n\n        const { title, stickers, is_installed } = stickerSet;\n\n        const items = stickers.map(x => (\n            <div\n                className='sticker-set-dialog-item'\n                key={x.sticker.id}\n                data-sticker-id={x.sticker.id}\n                style={{ width: 76, height: 76 }}\n                onMouseEnter={this.handleMouseEnter}\n                onMouseDown={this.handleMouseDown}>\n                <Sticker\n                    key={x.sticker.id}\n                    className='sticker-set-dialog-item-sticker'\n                    sticker={x}\n                    autoplay={false}\n                    blur={false}\n                    displaySize={STICKER_SMALL_DISPLAY_SIZE}\n                    preview\n                    source={StickerSourceEnum.STICKER_SET}\n                />\n                <div className='sticker-set-dialog-item-emoji'>{x.emoji}</div>\n            </div>\n        ));\n\n        return (\n            <Dialog\n                className='sticker-set-dialog'\n                open\n                transitionDuration={0}\n                onClose={this.handleClose}\n                aria-labelledby='sticker-set-dialog-title-text'\n                classes={{ paper: 'sticker-set-dialog-paper' }}>\n                <DialogTitle\n                    id='sticker-set-dialog-title-text'\n                    className={classNames({ 'sticker-set-dialog-disabled': Boolean(sticker) })}\n                    disableTypography>\n                    <Typography variant='h6' className='sticker-set-dialog-title-typography' noWrap>\n                        {title}\n                    </Typography>\n                    <ShareStickerSetButton className='sticker-set-dialog-share-button' />\n                </DialogTitle>\n                <DialogContent\n                    classes={{ root: 'sticker-set-dialog-content-root' }}\n                    onMouseOver={this.handleMouseOver}\n                    onMouseOut={this.handleMouseOut}>\n                    {items}\n                </DialogContent>\n                <DialogActions className={classNames({ 'sticker-set-dialog-disabled': Boolean(sticker) })}>\n                    <Button color='primary' onClick={this.handleClose}>\n                        {t('Cancel')}\n                    </Button>\n                    <Button color='primary' onClick={this.handleDone}>\n                        {is_installed ? t('StickersRemove') : t('Add')}\n                    </Button>\n                </DialogActions>\n                {<StickerPreview sticker={sticker} />}\n            </Dialog>\n        );\n    }\n}\n\nStickerSetDialog.propTypes = {};\n\nexport default withTranslation()(StickerSetDialog);\n"]},"metadata":{},"sourceType":"module"}