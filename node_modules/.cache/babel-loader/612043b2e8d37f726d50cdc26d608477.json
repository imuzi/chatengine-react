{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport EventEmitter from './EventEmitter';\nimport TdLibController from '../Controllers/TdLibController';\n\nvar InstantViewStore =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(InstantViewStore, _EventEmitter);\n\n  function InstantViewStore() {\n    var _this;\n\n    _classCallCheck(this, InstantViewStore);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InstantViewStore).call(this));\n\n    _this.reset = function () {\n      _this.items = [];\n    };\n\n    _this.onUpdate = function (update) {\n      switch (update['@type']) {\n        case 'updateAuthorizationState':\n          {\n            var authorization_state = update.authorization_state;\n            if (!authorization_state) break;\n\n            switch (authorization_state['@type']) {\n              case 'authorizationStateClosed':\n                {\n                  _this.reset();\n\n                  break;\n                }\n            }\n\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    _this.onClientUpdate = function (update) {\n      switch (update['@type']) {\n        case 'clientUpdateBlocksInView':\n          {\n            _this.emit('clientUpdateBlocksInView', update);\n\n            break;\n          }\n\n        case 'clientUpdateInstantViewContent':\n          {\n            var content = update.content;\n\n            if (content) {\n              _this.items.push(content.instantView);\n            } else {\n              _this.items = [];\n            }\n\n            _this.emit('clientUpdateInstantViewContent', update);\n\n            break;\n          }\n\n        case 'clientUpdateInstantViewUrl':\n          {\n            _this.emit('clientUpdateInstantViewUrl', update);\n\n            break;\n          }\n\n        case 'clientUpdateInstantViewViewerContent':\n          {\n            var _content = update.content;\n            _this.viewerContent = _content;\n\n            _this.emit('clientUpdateInstantViewViewerContent', update);\n\n            break;\n          }\n\n        case 'clientUpdatePrevInstantView':\n          {\n            if (_this.items.length <= 1) return;\n\n            _this.items.pop();\n\n            var prevInstantView = _this.items.pop();\n\n            TdLibController.clientUpdate({\n              '@type': 'clientUpdateInstantViewContent',\n              content: {\n                instantView: prevInstantView\n              }\n            });\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    _this.addTdLibListener = function () {\n      TdLibController.on('update', _this.onUpdate);\n      TdLibController.on('clientUpdate', _this.onClientUpdate);\n    };\n\n    _this.removeTdLibListener = function () {\n      TdLibController.off('update', _this.onUpdate);\n      TdLibController.off('clientUpdate', _this.onClientUpdate);\n    };\n\n    _this.reset();\n\n    _this.addTdLibListener();\n\n    return _this;\n  }\n\n  _createClass(InstantViewStore, [{\n    key: \"hasPrev\",\n    value: function hasPrev() {\n      return this.items.length > 1;\n    }\n  }, {\n    key: \"getCurrent\",\n    value: function getCurrent() {\n      return this.items.length > 0 ? this.items[this.items.length - 1] : null;\n    }\n  }]);\n\n  return InstantViewStore;\n}(EventEmitter);\n\nvar store = new InstantViewStore();\nwindow.instantView = store;\nexport default store;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Stores/InstantViewStore.js"],"names":["EventEmitter","TdLibController","InstantViewStore","reset","items","onUpdate","update","authorization_state","onClientUpdate","emit","content","push","instantView","viewerContent","length","pop","prevInstantView","clientUpdate","addTdLibListener","on","removeTdLibListener","off","store","window"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport EventEmitter from './EventEmitter';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass InstantViewStore extends EventEmitter {\n    constructor() {\n        super();\n\n        this.reset();\n\n        this.addTdLibListener();\n    }\n\n    reset = () => {\n        this.items = [];\n    };\n\n    onUpdate = update => {\n        switch (update['@type']) {\n            case 'updateAuthorizationState': {\n                const { authorization_state } = update;\n                if (!authorization_state) break;\n\n                switch (authorization_state['@type']) {\n                    case 'authorizationStateClosed': {\n                        this.reset();\n                        break;\n                    }\n                }\n\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    onClientUpdate = update => {\n        switch (update['@type']) {\n            case 'clientUpdateBlocksInView': {\n                this.emit('clientUpdateBlocksInView', update);\n                break;\n            }\n            case 'clientUpdateInstantViewContent': {\n                const { content } = update;\n\n                if (content) {\n                    this.items.push(content.instantView);\n                } else {\n                    this.items = [];\n                }\n\n                this.emit('clientUpdateInstantViewContent', update);\n\n                break;\n            }\n            case 'clientUpdateInstantViewUrl': {\n                this.emit('clientUpdateInstantViewUrl', update);\n                break;\n            }\n            case 'clientUpdateInstantViewViewerContent': {\n                const { content } = update;\n\n                this.viewerContent = content;\n\n                this.emit('clientUpdateInstantViewViewerContent', update);\n                break;\n            }\n            case 'clientUpdatePrevInstantView': {\n                if (this.items.length <= 1) return;\n\n                this.items.pop();\n                const prevInstantView = this.items.pop();\n\n                TdLibController.clientUpdate({\n                    '@type': 'clientUpdateInstantViewContent',\n                    content: {\n                        instantView: prevInstantView\n                    }\n                });\n\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    addTdLibListener = () => {\n        TdLibController.on('update', this.onUpdate);\n        TdLibController.on('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.off('update', this.onUpdate);\n        TdLibController.off('clientUpdate', this.onClientUpdate);\n    };\n\n    hasPrev() {\n        return this.items.length > 1;\n    }\n\n    getCurrent() {\n        return this.items.length > 0 ? this.items[this.items.length - 1] : null;\n    }\n}\n\nconst store = new InstantViewStore();\nwindow.instantView = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}