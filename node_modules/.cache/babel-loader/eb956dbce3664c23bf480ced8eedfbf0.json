{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Message/Media/DocumentAction.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { getDownloadedSize, getUploadedSize, getFileSize } from '../../../Utils/File';\nimport FileStore from '../../../Stores/FileStore';\nimport './DocumentAction.css';\n\nvar DocumentAction =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DocumentAction, _React$Component);\n\n  function DocumentAction(props) {\n    var _this;\n\n    _classCallCheck(this, DocumentAction);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DocumentAction).call(this, props));\n\n    _this.onUpdateFile = function (update) {\n      var currentFile = _this.state.file;\n      var nextFile = update.file;\n\n      if (currentFile && currentFile.id === nextFile.id) {\n        _this.setState({\n          file: nextFile,\n          prevFile: currentFile\n        });\n      }\n    };\n\n    var file = _this.props.file;\n    _this.state = {\n      prevPropsFile: file,\n      prevFile: null,\n      file: FileStore.get(file.id) || file\n    };\n    return _this;\n  }\n\n  _createClass(DocumentAction, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      FileStore.on('updateFile', this.onUpdateFile);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      FileStore.off('updateFile', this.onUpdateFile);\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var theme = this.props.theme;\n      var _this$state = this.state,\n          file = _this$state.file,\n          prevFile = _this$state.prevFile;\n\n      if (nextProps.theme !== theme) {\n        return true;\n      }\n\n      if (nextState.file !== file) {\n        return true;\n      }\n\n      if (nextState.prevFile !== prevFile) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var meta = this.props.meta;\n      var file = this.state.file;\n      if (!file) return null;\n      var isDownloadingActive = file.local && file.local.is_downloading_active;\n      var isUploadingActive = file.remote && file.remote.is_uploading_active;\n      var size = getFileSize(file);\n      var progressSize = null;\n\n      if (isDownloadingActive) {\n        progressSize = getDownloadedSize(file);\n      } else if (isUploadingActive) {\n        progressSize = getUploadedSize(file);\n      }\n\n      var sizeString = progressSize ? \"\".concat(progressSize, \"/\").concat(size) : \"\".concat(size);\n      return React.createElement(\"div\", {\n        className: \"document-action\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, sizeString), meta);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var file = props.file;\n      var prevPropsFile = state.prevPropsFile;\n\n      if (file && prevPropsFile && file.id !== prevPropsFile.id) {\n        return {\n          prevPropsFile: file,\n          prevFile: null,\n          file: FileStore.get(file.id) || file\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return DocumentAction;\n}(React.Component);\n\nDocumentAction.propTypes = {\n  file: PropTypes.object.isRequired\n};\nexport default DocumentAction;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Message/Media/DocumentAction.js"],"names":["React","PropTypes","getDownloadedSize","getUploadedSize","getFileSize","FileStore","DocumentAction","props","onUpdateFile","update","currentFile","state","file","nextFile","id","setState","prevFile","prevPropsFile","get","on","off","nextProps","nextState","theme","meta","isDownloadingActive","local","is_downloading_active","isUploadingActive","remote","is_uploading_active","size","progressSize","sizeString","Component","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { getDownloadedSize, getUploadedSize, getFileSize } from '../../../Utils/File';\nimport FileStore from '../../../Stores/FileStore';\nimport './DocumentAction.css';\n\nclass DocumentAction extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const { file } = this.props;\n        this.state = {\n            prevPropsFile: file,\n            prevFile: null,\n            file: FileStore.get(file.id) || file\n        };\n    }\n\n    componentDidMount() {\n        FileStore.on('updateFile', this.onUpdateFile);\n    }\n\n    componentWillUnmount() {\n        FileStore.off('updateFile', this.onUpdateFile);\n    }\n\n    onUpdateFile = update => {\n        const currentFile = this.state.file;\n        const nextFile = update.file;\n\n        if (currentFile && currentFile.id === nextFile.id) {\n            this.setState({ file: nextFile, prevFile: currentFile });\n        }\n    };\n\n    static getDerivedStateFromProps(props, state) {\n        const { file } = props;\n        const { prevPropsFile } = state;\n\n        if (file && prevPropsFile && file.id !== prevPropsFile.id) {\n            return {\n                prevPropsFile: file,\n                prevFile: null,\n                file: FileStore.get(file.id) || file\n            };\n        }\n\n        return null;\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const { theme } = this.props;\n        const { file, prevFile } = this.state;\n\n        if (nextProps.theme !== theme) {\n            return true;\n        }\n\n        if (nextState.file !== file) {\n            return true;\n        }\n\n        if (nextState.prevFile !== prevFile) {\n            return true;\n        }\n\n        return false;\n    }\n\n    render() {\n        const { meta } = this.props;\n        const { file } = this.state;\n        if (!file) return null;\n\n        const isDownloadingActive = file.local && file.local.is_downloading_active;\n        const isUploadingActive = file.remote && file.remote.is_uploading_active;\n\n        const size = getFileSize(file);\n        let progressSize = null;\n        if (isDownloadingActive) {\n            progressSize = getDownloadedSize(file);\n        } else if (isUploadingActive) {\n            progressSize = getUploadedSize(file);\n        }\n\n        const sizeString = progressSize ? `${progressSize}/${size}` : `${size}`;\n\n        return (\n            <div className='document-action'>\n                <span>{sizeString}</span>\n                {meta}\n            </div>\n        );\n    }\n}\n\nDocumentAction.propTypes = {\n    file: PropTypes.object.isRequired\n};\n\nexport default DocumentAction;\n"]},"metadata":{},"sourceType":"module"}