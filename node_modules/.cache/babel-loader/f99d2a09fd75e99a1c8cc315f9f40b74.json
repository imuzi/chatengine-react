{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectWithoutProperties from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnMiddle/MainMenuButton.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport { compose } from '../../Utils/HOC';\nimport { withTranslation } from 'react-i18next';\nimport { withSnackbar } from 'notistack';\nimport IconButton from '@material-ui/core/IconButton';\nimport MoreVertIcon from '../../Assets/Icons/More';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport ChatTile from '../Tile/ChatTile';\nimport NotificationTimer from '../Additional/NotificationTimer';\nimport { canClearHistory, canDeleteChat, canUnpinMessage, getChatShortTitle, isPrivateChat } from '../../Utils/Chat';\nimport { NOTIFICATION_AUTO_HIDE_DURATION_MS } from '../../Constants';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport SupergroupStore from '../../Stores/SupergroupStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './MainMenuButton.css';\n\nvar LeaveChatDialog =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LeaveChatDialog, _React$Component);\n\n  function LeaveChatDialog() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LeaveChatDialog);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LeaveChatDialog)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.getDeleteDialogText = function (chatId, t) {\n      var chat = ChatStore.get(chatId);\n      if (!chat) return null;\n      if (!chat.type) return null;\n\n      switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup':\n          {\n            return \"Are you sure you want to leave group \".concat(chat.title, \"?\");\n          }\n\n        case 'chatTypeSupergroup':\n          {\n            var supergroup = SupergroupStore.get(chat.type.supergroup_id);\n\n            if (supergroup) {\n              return supergroup.is_channel ? \"Are you sure you want to leave channel \".concat(chat.title, \"?\") : \"Are you sure you want to leave group \".concat(chat.title, \"?\");\n            }\n\n            return null;\n          }\n\n        case 'chatTypePrivate':\n        case 'chatTypeSecret':\n          {\n            return \"Are you sure you want to delete chat with \".concat(getChatShortTitle(chatId, false, t), \"?\");\n          }\n      }\n\n      return null;\n    };\n\n    return _this;\n  }\n\n  _createClass(LeaveChatDialog, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          _onClose = _this$props.onClose,\n          chatId = _this$props.chatId,\n          t = _this$props.t,\n          other = _objectWithoutProperties(_this$props, [\"onClose\", \"chatId\", \"t\"]);\n\n      return React.createElement(Dialog, Object.assign({\n        transitionDuration: 0,\n        onClose: function onClose() {\n          return _onClose(false);\n        },\n        \"aria-labelledby\": \"delete-dialog-title\"\n      }, other, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), React.createElement(DialogTitle, {\n        id: \"delete-dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, getChatShortTitle(chatId, false, t)), React.createElement(DialogContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"delete-dialog-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(ChatTile, {\n        chatId: chatId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), React.createElement(DialogContentText, {\n        id: \"delete-dialog-description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, this.getDeleteDialogText(chatId, t)))), React.createElement(DialogActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: function onClick() {\n          return _onClose(false);\n        },\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Cancel\"), React.createElement(Button, {\n        onClick: function onClick() {\n          return _onClose(true);\n        },\n        color: \"primary\",\n        autoFocus: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Ok\")));\n    }\n  }]);\n\n  return LeaveChatDialog;\n}(React.Component);\n\nvar EnhancedLeaveChatDialog = withTranslation()(LeaveChatDialog);\n\nvar ClearHistoryDialog =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(ClearHistoryDialog, _React$Component2);\n\n  function ClearHistoryDialog() {\n    _classCallCheck(this, ClearHistoryDialog);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ClearHistoryDialog).apply(this, arguments));\n  }\n\n  _createClass(ClearHistoryDialog, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          _onClose2 = _this$props2.onClose,\n          chatId = _this$props2.chatId,\n          t = _this$props2.t,\n          other = _objectWithoutProperties(_this$props2, [\"onClose\", \"chatId\", \"t\"]);\n\n      return React.createElement(Dialog, Object.assign({\n        transitionDuration: 0,\n        onClose: function onClose() {\n          return _onClose2(false);\n        },\n        \"aria-labelledby\": \"delete-dialog-title\"\n      }, other, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), React.createElement(DialogTitle, {\n        id: \"delete-dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, getChatShortTitle(chatId, false, t)), React.createElement(DialogContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"delete-dialog-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(ChatTile, {\n        chatId: chatId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), React.createElement(DialogContentText, {\n        id: \"delete-dialog-description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Are you sure you want clear history?\"))), React.createElement(DialogActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: function onClick() {\n          return _onClose2(false);\n        },\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"Cancel\"), React.createElement(Button, {\n        onClick: function onClick() {\n          return _onClose2(true);\n        },\n        color: \"primary\",\n        autoFocus: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"Ok\")));\n    }\n  }]);\n\n  return ClearHistoryDialog;\n}(React.Component);\n\nvar EnhancedClearHistoryDialog = withTranslation()(ClearHistoryDialog);\n\nvar MainMenuButton =\n/*#__PURE__*/\nfunction (_React$Component3) {\n  _inherits(MainMenuButton, _React$Component3);\n\n  function MainMenuButton(props) {\n    var _this2;\n\n    _classCallCheck(this, MainMenuButton);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(MainMenuButton).call(this, props));\n\n    _this2.handleButtonClick = function (event) {\n      _this2.setState({\n        anchorEl: event.currentTarget\n      });\n    };\n\n    _this2.handleMenuClose = function () {\n      _this2.setState({\n        anchorEl: null\n      });\n    };\n\n    _this2.handleChatInfo = function () {\n      _this2.handleMenuClose();\n\n      setTimeout(function () {\n        return _this2.props.openChatDetails();\n      }, 150);\n    };\n\n    _this2.handleClearHistory = function () {\n      _this2.handleMenuClose();\n\n      _this2.setState({\n        openClearHistory: true\n      });\n    };\n\n    _this2.handleClearHistoryContinue = function (result) {\n      _this2.setState({\n        openClearHistory: false\n      });\n\n      if (!result) return;\n      var chatId = ApplicationStore.getChatId();\n      var message = 'Messages deleted';\n      var request = {\n        '@type': 'deleteChatHistory',\n        chat_id: chatId,\n        remove_from_chat_list: false\n      };\n\n      _this2.handleScheduledAction(chatId, 'clientUpdateClearHistory', message, request);\n    };\n\n    _this2.handleLeave = function () {\n      _this2.handleMenuClose();\n\n      _this2.setState({\n        openDelete: true\n      });\n    };\n\n    _this2.handleLeaveContinue = function (result) {\n      _this2.setState({\n        openDelete: false\n      });\n\n      if (!result) return;\n      var chatId = ApplicationStore.getChatId();\n\n      var message = _this2.getLeaveChatNotification(chatId);\n\n      var request = isPrivateChat(chatId) ? {\n        '@type': 'deleteChatHistory',\n        chat_id: chatId,\n        remove_from_chat_list: true\n      } : {\n        '@type': 'leaveChat',\n        chat_id: chatId\n      };\n\n      _this2.handleScheduledAction(chatId, 'clientUpdateLeaveChat', message, request);\n    };\n\n    _this2.handleScheduledAction = function (chatId, clientUpdateType, message, request) {\n      var t = _this2.props.t;\n      if (!clientUpdateType) return;\n      var key = \"\".concat(clientUpdateType, \" chatId=\").concat(chatId);\n\n      var action =\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee() {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.prev = 0;\n                  _context.next = 3;\n                  return TdLibController.send(request);\n\n                case 3:\n                  _context.prev = 3;\n                  TdLibController.clientUpdate({\n                    '@type': clientUpdateType,\n                    chatId: chatId,\n                    inProgress: false\n                  });\n                  return _context.finish(3);\n\n                case 6:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[0,, 3, 6]]);\n        }));\n\n        return function action() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      var cancel = function cancel() {\n        TdLibController.clientUpdate({\n          '@type': clientUpdateType,\n          chatId: chatId,\n          inProgress: false\n        });\n      };\n\n      var enqueueSnackbar = _this2.props.enqueueSnackbar;\n      if (!enqueueSnackbar) return;\n      var TRANSITION_DELAY = 150;\n\n      if (ApplicationStore.addScheduledAction(key, NOTIFICATION_AUTO_HIDE_DURATION_MS, action, cancel)) {\n        TdLibController.clientUpdate({\n          '@type': clientUpdateType,\n          chatId: chatId,\n          inProgress: true\n        });\n        enqueueSnackbar(message, {\n          autoHideDuration: NOTIFICATION_AUTO_HIDE_DURATION_MS - 2 * TRANSITION_DELAY,\n          action: [React.createElement(IconButton, {\n            key: \"progress\",\n            color: \"inherit\",\n            className: \"progress-button\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 219\n            },\n            __self: this\n          }, React.createElement(NotificationTimer, {\n            timeout: NOTIFICATION_AUTO_HIDE_DURATION_MS,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 220\n            },\n            __self: this\n          })), React.createElement(Button, {\n            key: \"undo\",\n            color: \"primary\",\n            size: \"small\",\n            onClick: function onClick() {\n              return ApplicationStore.removeScheduledAction(key);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 222\n            },\n            __self: this\n          }, t('Undo'))]\n        });\n      }\n    };\n\n    _this2.getLeaveChatTitle = function (chatId, t) {\n      var chat = ChatStore.get(chatId);\n      if (!chat) return null;\n      if (!chat.type) return null;\n\n      switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup':\n          {\n            return t('DeleteChat');\n          }\n\n        case 'chatTypeSupergroup':\n          {\n            var supergroup = SupergroupStore.get(chat.type.supergroup_id);\n\n            if (supergroup) {\n              return supergroup.is_channel ? t('LeaveChannel') : t('LeaveMegaMenu');\n            }\n\n            return null;\n          }\n\n        case 'chatTypePrivate':\n        case 'chatTypeSecret':\n          {\n            return t('DeleteChatUser');\n          }\n      }\n\n      return null;\n    };\n\n    _this2.getLeaveChatNotification = function (chatId) {\n      var t = _this2.props.t;\n      var chat = ChatStore.get(chatId);\n      if (!chat) return t('ChatDeletedUndo');\n      if (!chat.type) return t('ChatDeletedUndo');\n\n      switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup':\n          {\n            return t('ChatDeletedUndo');\n          }\n\n        case 'chatTypeSupergroup':\n          {\n            var supergroup = SupergroupStore.get(chat.type.supergroup_id);\n\n            if (supergroup) {\n              return supergroup.is_channel ? 'Left channel' : 'Left group';\n            }\n\n            return t('ChatDeletedUndo');\n          }\n\n        case 'chatTypePrivate':\n        case 'chatTypeSecret':\n          {\n            return t('ChatDeletedUndo');\n          }\n      }\n\n      return t('ChatDeletedUndo');\n    };\n\n    _this2.handleUnpin = function () {\n      _this2.handleMenuClose();\n\n      var chatId = ApplicationStore.getChatId();\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateUnpin',\n        chatId: chatId\n      });\n    };\n\n    _this2.state = {\n      anchorEl: null,\n      openDelete: false,\n      openClearHistory: false\n    };\n    return _this2;\n  }\n\n  _createClass(MainMenuButton, [{\n    key: \"render\",\n    value: function render() {\n      var t = this.props.t;\n      var _this$state = this.state,\n          anchorEl = _this$state.anchorEl,\n          openDelete = _this$state.openDelete,\n          openClearHistory = _this$state.openClearHistory;\n      var chatId = ApplicationStore.getChatId();\n      var clearHistory = canClearHistory(chatId);\n      var deleteChat = canDeleteChat(chatId);\n      var leaveChatTitle = this.getLeaveChatTitle(chatId, t);\n      var unpinMessage = canUnpinMessage(chatId);\n      return React.createElement(React.Fragment, null, React.createElement(IconButton, {\n        \"aria-owns\": anchorEl ? 'simple-menu' : null,\n        \"aria-haspopup\": \"true\",\n        className: \"main-menu-button\",\n        \"aria-label\": \"Menu\",\n        onClick: this.handleButtonClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      }, React.createElement(MoreVertIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      })), React.createElement(Menu, {\n        id: \"main-menu\",\n        anchorEl: anchorEl,\n        open: Boolean(anchorEl),\n        onClose: this.handleMenuClose,\n        getContentAnchorEl: null,\n        disableAutoFocusItem: true,\n        disableRestoreFocus: true,\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'right'\n        },\n        transformOrigin: {\n          vertical: 'top',\n          horizontal: 'right'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318\n        },\n        __self: this\n      }, React.createElement(MenuItem, {\n        onClick: this.handleChatInfo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334\n        },\n        __self: this\n      }, t('ChatInfo')), clearHistory && React.createElement(MenuItem, {\n        onClick: this.handleClearHistory,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335\n        },\n        __self: this\n      }, t('ClearHistory')), deleteChat && leaveChatTitle && React.createElement(MenuItem, {\n        onClick: this.handleLeave,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336\n        },\n        __self: this\n      }, leaveChatTitle), unpinMessage && React.createElement(MenuItem, {\n        onClick: this.handleUnpin,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337\n        },\n        __self: this\n      }, t('Unpin'))), React.createElement(EnhancedLeaveChatDialog, {\n        chatId: chatId,\n        open: openDelete,\n        onClose: this.handleLeaveContinue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339\n        },\n        __self: this\n      }), React.createElement(EnhancedClearHistoryDialog, {\n        chatId: chatId,\n        open: openClearHistory,\n        onClose: this.handleClearHistoryContinue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return MainMenuButton;\n}(React.Component);\n\nvar enhance = compose(withSnackbar, withTranslation());\nexport default enhance(MainMenuButton);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnMiddle/MainMenuButton.js"],"names":["React","compose","withTranslation","withSnackbar","IconButton","MoreVertIcon","Menu","MenuItem","Button","DialogTitle","Dialog","DialogContentText","DialogContent","DialogActions","ChatTile","NotificationTimer","canClearHistory","canDeleteChat","canUnpinMessage","getChatShortTitle","isPrivateChat","NOTIFICATION_AUTO_HIDE_DURATION_MS","ApplicationStore","ChatStore","SupergroupStore","TdLibController","LeaveChatDialog","getDeleteDialogText","chatId","t","chat","get","type","title","supergroup","supergroup_id","is_channel","props","onClose","other","Component","EnhancedLeaveChatDialog","ClearHistoryDialog","EnhancedClearHistoryDialog","MainMenuButton","handleButtonClick","event","setState","anchorEl","currentTarget","handleMenuClose","handleChatInfo","setTimeout","openChatDetails","handleClearHistory","openClearHistory","handleClearHistoryContinue","result","getChatId","message","request","chat_id","remove_from_chat_list","handleScheduledAction","handleLeave","openDelete","handleLeaveContinue","getLeaveChatNotification","clientUpdateType","key","action","send","clientUpdate","inProgress","cancel","enqueueSnackbar","TRANSITION_DELAY","addScheduledAction","autoHideDuration","removeScheduledAction","getLeaveChatTitle","handleUnpin","state","clearHistory","deleteChat","leaveChatTitle","unpinMessage","Boolean","vertical","horizontal","enhance"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport { compose } from '../../Utils/HOC';\nimport { withTranslation } from 'react-i18next';\nimport { withSnackbar } from 'notistack';\nimport IconButton from '@material-ui/core/IconButton';\nimport MoreVertIcon from '../../Assets/Icons/More';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport ChatTile from '../Tile/ChatTile';\nimport NotificationTimer from '../Additional/NotificationTimer';\nimport { canClearHistory, canDeleteChat, canUnpinMessage, getChatShortTitle, isPrivateChat } from '../../Utils/Chat';\nimport { NOTIFICATION_AUTO_HIDE_DURATION_MS } from '../../Constants';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport SupergroupStore from '../../Stores/SupergroupStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './MainMenuButton.css';\n\nclass LeaveChatDialog extends React.Component {\n    getDeleteDialogText = (chatId, t) => {\n        const chat = ChatStore.get(chatId);\n        if (!chat) return null;\n        if (!chat.type) return null;\n\n        switch (chat.type['@type']) {\n            case 'chatTypeBasicGroup': {\n                return `Are you sure you want to leave group ${chat.title}?`;\n            }\n            case 'chatTypeSupergroup': {\n                const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n                if (supergroup) {\n                    return supergroup.is_channel\n                        ? `Are you sure you want to leave channel ${chat.title}?`\n                        : `Are you sure you want to leave group ${chat.title}?`;\n                }\n\n                return null;\n            }\n            case 'chatTypePrivate':\n            case 'chatTypeSecret': {\n                return `Are you sure you want to delete chat with ${getChatShortTitle(chatId, false, t)}?`;\n            }\n        }\n\n        return null;\n    };\n\n    render() {\n        const { onClose, chatId, t, ...other } = this.props;\n\n        return (\n            <Dialog\n                transitionDuration={0}\n                onClose={() => onClose(false)}\n                aria-labelledby='delete-dialog-title'\n                {...other}>\n                <DialogTitle id='delete-dialog-title'>{getChatShortTitle(chatId, false, t)}</DialogTitle>\n                <DialogContent>\n                    <div className='delete-dialog-content'>\n                        <ChatTile chatId={chatId} />\n                        <DialogContentText id='delete-dialog-description'>\n                            {this.getDeleteDialogText(chatId, t)}\n                        </DialogContentText>\n                    </div>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => onClose(false)} color='primary'>\n                        Cancel\n                    </Button>\n                    <Button onClick={() => onClose(true)} color='primary' autoFocus>\n                        Ok\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nconst EnhancedLeaveChatDialog = withTranslation()(LeaveChatDialog);\n\nclass ClearHistoryDialog extends React.Component {\n    render() {\n        const { onClose, chatId, t, ...other } = this.props;\n\n        return (\n            <Dialog\n                transitionDuration={0}\n                onClose={() => onClose(false)}\n                aria-labelledby='delete-dialog-title'\n                {...other}>\n                <DialogTitle id='delete-dialog-title'>{getChatShortTitle(chatId, false, t)}</DialogTitle>\n                <DialogContent>\n                    <div className='delete-dialog-content'>\n                        <ChatTile chatId={chatId} />\n                        <DialogContentText id='delete-dialog-description'>\n                            Are you sure you want clear history?\n                        </DialogContentText>\n                    </div>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => onClose(false)} color='primary'>\n                        Cancel\n                    </Button>\n                    <Button onClick={() => onClose(true)} color='primary' autoFocus>\n                        Ok\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nconst EnhancedClearHistoryDialog = withTranslation()(ClearHistoryDialog);\n\nclass MainMenuButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            anchorEl: null,\n            openDelete: false,\n            openClearHistory: false\n        };\n    }\n\n    handleButtonClick = event => {\n        this.setState({ anchorEl: event.currentTarget });\n    };\n\n    handleMenuClose = () => {\n        this.setState({ anchorEl: null });\n    };\n\n    handleChatInfo = () => {\n        this.handleMenuClose();\n        setTimeout(() => this.props.openChatDetails(), 150);\n    };\n\n    handleClearHistory = () => {\n        this.handleMenuClose();\n\n        this.setState({ openClearHistory: true });\n    };\n\n    handleClearHistoryContinue = result => {\n        this.setState({ openClearHistory: false });\n\n        if (!result) return;\n\n        const chatId = ApplicationStore.getChatId();\n        const message = 'Messages deleted';\n        const request = {\n            '@type': 'deleteChatHistory',\n            chat_id: chatId,\n            remove_from_chat_list: false\n        };\n\n        this.handleScheduledAction(chatId, 'clientUpdateClearHistory', message, request);\n    };\n\n    handleLeave = () => {\n        this.handleMenuClose();\n\n        this.setState({ openDelete: true });\n    };\n\n    handleLeaveContinue = result => {\n        this.setState({ openDelete: false });\n\n        if (!result) return;\n\n        const chatId = ApplicationStore.getChatId();\n        const message = this.getLeaveChatNotification(chatId);\n        const request = isPrivateChat(chatId)\n            ? { '@type': 'deleteChatHistory', chat_id: chatId, remove_from_chat_list: true }\n            : { '@type': 'leaveChat', chat_id: chatId };\n\n        this.handleScheduledAction(chatId, 'clientUpdateLeaveChat', message, request);\n    };\n\n    handleScheduledAction = (chatId, clientUpdateType, message, request) => {\n        const { t } = this.props;\n        if (!clientUpdateType) return;\n\n        const key = `${clientUpdateType} chatId=${chatId}`;\n        const action = async () => {\n            try {\n                await TdLibController.send(request);\n            } finally {\n                TdLibController.clientUpdate({ '@type': clientUpdateType, chatId: chatId, inProgress: false });\n            }\n        };\n        const cancel = () => {\n            TdLibController.clientUpdate({ '@type': clientUpdateType, chatId: chatId, inProgress: false });\n        };\n\n        const { enqueueSnackbar } = this.props;\n        if (!enqueueSnackbar) return;\n\n        const TRANSITION_DELAY = 150;\n        if (ApplicationStore.addScheduledAction(key, NOTIFICATION_AUTO_HIDE_DURATION_MS, action, cancel)) {\n            TdLibController.clientUpdate({ '@type': clientUpdateType, chatId: chatId, inProgress: true });\n            enqueueSnackbar(message, {\n                autoHideDuration: NOTIFICATION_AUTO_HIDE_DURATION_MS - 2 * TRANSITION_DELAY,\n                action: [\n                    <IconButton key='progress' color='inherit' className='progress-button'>\n                        <NotificationTimer timeout={NOTIFICATION_AUTO_HIDE_DURATION_MS} />\n                    </IconButton>,\n                    <Button\n                        key='undo'\n                        color='primary'\n                        size='small'\n                        onClick={() => ApplicationStore.removeScheduledAction(key)}>\n                        {t('Undo')}\n                    </Button>\n                ]\n            });\n        }\n    };\n\n    getLeaveChatTitle = (chatId, t) => {\n        const chat = ChatStore.get(chatId);\n        if (!chat) return null;\n        if (!chat.type) return null;\n\n        switch (chat.type['@type']) {\n            case 'chatTypeBasicGroup': {\n                return t('DeleteChat');\n            }\n            case 'chatTypeSupergroup': {\n                const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n                if (supergroup) {\n                    return supergroup.is_channel ? t('LeaveChannel') : t('LeaveMegaMenu');\n                }\n\n                return null;\n            }\n            case 'chatTypePrivate':\n            case 'chatTypeSecret': {\n                return t('DeleteChatUser');\n            }\n        }\n\n        return null;\n    };\n\n    getLeaveChatNotification = chatId => {\n        const { t } = this.props;\n\n        const chat = ChatStore.get(chatId);\n        if (!chat) return t('ChatDeletedUndo');\n        if (!chat.type) return t('ChatDeletedUndo');\n\n        switch (chat.type['@type']) {\n            case 'chatTypeBasicGroup': {\n                return t('ChatDeletedUndo');\n            }\n            case 'chatTypeSupergroup': {\n                const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n                if (supergroup) {\n                    return supergroup.is_channel ? 'Left channel' : 'Left group';\n                }\n\n                return t('ChatDeletedUndo');\n            }\n            case 'chatTypePrivate':\n            case 'chatTypeSecret': {\n                return t('ChatDeletedUndo');\n            }\n        }\n\n        return t('ChatDeletedUndo');\n    };\n\n    handleUnpin = () => {\n        this.handleMenuClose();\n\n        const chatId = ApplicationStore.getChatId();\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateUnpin',\n            chatId\n        });\n    };\n\n    render() {\n        const { t } = this.props;\n        const { anchorEl, openDelete, openClearHistory } = this.state;\n\n        const chatId = ApplicationStore.getChatId();\n        const clearHistory = canClearHistory(chatId);\n        const deleteChat = canDeleteChat(chatId);\n        const leaveChatTitle = this.getLeaveChatTitle(chatId, t);\n        const unpinMessage = canUnpinMessage(chatId);\n\n        return (\n            <>\n                <IconButton\n                    aria-owns={anchorEl ? 'simple-menu' : null}\n                    aria-haspopup='true'\n                    className='main-menu-button'\n                    aria-label='Menu'\n                    onClick={this.handleButtonClick}>\n                    <MoreVertIcon />\n                </IconButton>\n                <Menu\n                    id='main-menu'\n                    anchorEl={anchorEl}\n                    open={Boolean(anchorEl)}\n                    onClose={this.handleMenuClose}\n                    getContentAnchorEl={null}\n                    disableAutoFocusItem\n                    disableRestoreFocus={true}\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'right'\n                    }}\n                    transformOrigin={{\n                        vertical: 'top',\n                        horizontal: 'right'\n                    }}>\n                    <MenuItem onClick={this.handleChatInfo}>{t('ChatInfo')}</MenuItem>\n                    {clearHistory && <MenuItem onClick={this.handleClearHistory}>{t('ClearHistory')}</MenuItem>}\n                    {deleteChat && leaveChatTitle && <MenuItem onClick={this.handleLeave}>{leaveChatTitle}</MenuItem>}\n                    {unpinMessage && <MenuItem onClick={this.handleUnpin}>{t('Unpin')}</MenuItem>}\n                </Menu>\n                <EnhancedLeaveChatDialog chatId={chatId} open={openDelete} onClose={this.handleLeaveContinue} />\n                <EnhancedClearHistoryDialog\n                    chatId={chatId}\n                    open={openClearHistory}\n                    onClose={this.handleClearHistoryContinue}\n                />\n            </>\n        );\n    }\n}\n\nconst enhance = compose(\n    withSnackbar,\n    withTranslation()\n);\n\nexport default enhance(MainMenuButton);\n"]},"metadata":{},"sourceType":"module"}