{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Tile/DialogBadge.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport classNames from 'classnames';\nimport PinIcon from '../../Assets/Icons/Pin';\nimport { isChatMuted, showChatUnreadCount, showChatUnreadMentionCount } from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport NotificationStore from '../../Stores/NotificationStore';\nimport './DialogBadge.css';\n\nvar DialogBadge =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DialogBadge, _React$Component);\n\n  function DialogBadge() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DialogBadge);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DialogBadge)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onClientUpdateClearHistory = function (update) {\n      var chatId = _this.props.chatId;\n\n      if (chatId === update.chatId) {\n        _this.clearHistory = update.inProgress;\n\n        _this.forceUpdate();\n      }\n    };\n\n    _this.onFastUpdatingComplete = function (update) {\n      _this.forceUpdate();\n    };\n\n    _this.onUpdate = function (update) {\n      var chatId = _this.props.chatId;\n      if (update.chat_id !== chatId) return;\n\n      _this.forceUpdate();\n    };\n\n    _this.onUpdateScopeNotificationSettings = function (update) {\n      var chatId = _this.props.chatId;\n      var chat = ChatStore.get(chatId);\n      if (!chat) return;\n\n      switch (update.scope['@type']) {\n        case 'notificationSettingsScopeGroupChats':\n          {\n            if (chat.type['@type'] === 'chatTypeBasicGroup' || chat.type['@type'] === 'chatTypeSupergroup') {\n              _this.forceUpdate();\n            }\n\n            break;\n          }\n\n        case 'notificationSettingsScopePrivateChats':\n          {\n            if (chat.type['@type'] === 'chatTypePrivate' || chat.type['@type'] === 'chatTypeSecret') {\n              _this.forceUpdate();\n            }\n\n            break;\n          }\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(DialogBadge, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var chatId = this.props.chatId;\n\n      if (nextProps.chatId !== chatId) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n      ChatStore.on('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n      ChatStore.on('updateChatDraftMessage', this.onUpdate);\n      ChatStore.on('updateChatIsMarkedAsUnread', this.onUpdate);\n      ChatStore.on('updateChatIsPinned', this.onUpdate);\n      ChatStore.on('updateChatNotificationSettings', this.onUpdate);\n      ChatStore.on('updateChatReadInbox', this.onUpdate);\n      ChatStore.on('updateChatLastMessage', this.onUpdate);\n      ChatStore.on('updateChatReadOutbox', this.onUpdate);\n      ChatStore.on('updateChatUnreadMentionCount', this.onUpdate);\n      ChatStore.on('updateMessageMentionRead', this.onUpdate);\n      NotificationStore.on('updateScopeNotificationSettings', this.onUpdateScopeNotificationSettings);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      ChatStore.off('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n      ChatStore.off('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n      ChatStore.off('updateChatDraftMessage', this.onUpdate);\n      ChatStore.off('updateChatIsMarkedAsUnread', this.onUpdate);\n      ChatStore.off('updateChatIsPinned', this.onUpdate);\n      ChatStore.off('updateChatNotificationSettings', this.onUpdate);\n      ChatStore.off('updateChatReadInbox', this.onUpdate);\n      ChatStore.off('updateChatLastMessage', this.onUpdate);\n      ChatStore.off('updateChatReadOutbox', this.onUpdate);\n      ChatStore.off('updateChatUnreadMentionCount', this.onUpdate);\n      ChatStore.off('updateMessageMentionRead', this.onUpdate);\n      NotificationStore.off('updateScopeNotificationSettings', this.onUpdateScopeNotificationSettings);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.clearHistory) return null;\n      var chatId = this.props.chatId;\n      var chat = ChatStore.get(chatId);\n      if (!chat) return null;\n      var is_pinned = chat.is_pinned,\n          unread_count = chat.unread_count;\n      var showUnreadMentionCount = showChatUnreadMentionCount(chatId);\n      var showUnreadCount = showChatUnreadCount(chatId);\n      var isMuted = isChatMuted(chatId);\n      return React.createElement(React.Fragment, null, showUnreadMentionCount && React.createElement(\"div\", {\n        className: \"dialog-badge\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"dialog-badge-mention\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"@\")), showUnreadCount && React.createElement(\"div\", {\n        className: classNames({\n          'dialog-badge-muted': isMuted\n        }, 'dialog-badge'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"dialog-badge-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, unread_count > 0 ? unread_count : '')), is_pinned && !showUnreadCount && !showUnreadMentionCount && React.createElement(\"div\", {\n        className: \"dialog-badge-pinned\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(PinIcon, {\n        className: \"dialog-badge-pinned-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return DialogBadge;\n}(React.Component);\n\nexport default DialogBadge;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Tile/DialogBadge.js"],"names":["React","classNames","PinIcon","isChatMuted","showChatUnreadCount","showChatUnreadMentionCount","ChatStore","NotificationStore","DialogBadge","onClientUpdateClearHistory","update","chatId","props","clearHistory","inProgress","forceUpdate","onFastUpdatingComplete","onUpdate","chat_id","onUpdateScopeNotificationSettings","chat","get","scope","type","nextProps","nextState","on","off","is_pinned","unread_count","showUnreadMentionCount","showUnreadCount","isMuted","Component"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport PinIcon from '../../Assets/Icons/Pin';\nimport {\n    isChatMuted,\n    showChatUnreadCount,\n    showChatUnreadMentionCount\n} from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport NotificationStore from '../../Stores/NotificationStore';\nimport './DialogBadge.css';\n\nclass DialogBadge extends React.Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        const { chatId } = this.props;\n\n        if (nextProps.chatId !== chatId) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.on('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.on('updateChatDraftMessage', this.onUpdate);\n        ChatStore.on('updateChatIsMarkedAsUnread', this.onUpdate);\n        ChatStore.on('updateChatIsPinned', this.onUpdate);\n        ChatStore.on('updateChatNotificationSettings', this.onUpdate);\n        ChatStore.on('updateChatReadInbox', this.onUpdate);\n        ChatStore.on('updateChatLastMessage', this.onUpdate);\n        ChatStore.on('updateChatReadOutbox', this.onUpdate);\n        ChatStore.on('updateChatUnreadMentionCount', this.onUpdate);\n        ChatStore.on('updateMessageMentionRead', this.onUpdate);\n        NotificationStore.on('updateScopeNotificationSettings', this.onUpdateScopeNotificationSettings);\n    }\n\n    componentWillUnmount() {\n        ChatStore.off('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.off('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.off('updateChatDraftMessage', this.onUpdate);\n        ChatStore.off('updateChatIsMarkedAsUnread', this.onUpdate);\n        ChatStore.off('updateChatIsPinned', this.onUpdate);\n        ChatStore.off('updateChatNotificationSettings', this.onUpdate);\n        ChatStore.off('updateChatReadInbox', this.onUpdate);\n        ChatStore.off('updateChatLastMessage', this.onUpdate);\n        ChatStore.off('updateChatReadOutbox', this.onUpdate);\n        ChatStore.off('updateChatUnreadMentionCount', this.onUpdate);\n        ChatStore.off('updateMessageMentionRead', this.onUpdate);\n        NotificationStore.off('updateScopeNotificationSettings', this.onUpdateScopeNotificationSettings);\n    }\n\n    onClientUpdateClearHistory = update => {\n        const { chatId } = this.props;\n\n        if (chatId === update.chatId) {\n            this.clearHistory = update.inProgress;\n            this.forceUpdate();\n        }\n    };\n\n    onFastUpdatingComplete = update => {\n        this.forceUpdate();\n    };\n\n    onUpdate = update => {\n        const { chatId } = this.props;\n\n        if (update.chat_id !== chatId) return;\n\n        this.forceUpdate();\n    };\n\n    onUpdateScopeNotificationSettings = update => {\n        const { chatId } = this.props;\n\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n\n        switch (update.scope['@type']) {\n            case 'notificationSettingsScopeGroupChats': {\n                if (chat.type['@type'] === 'chatTypeBasicGroup' || chat.type['@type'] === 'chatTypeSupergroup') {\n                    this.forceUpdate();\n                }\n                break;\n            }\n            case 'notificationSettingsScopePrivateChats': {\n                if (chat.type['@type'] === 'chatTypePrivate' || chat.type['@type'] === 'chatTypeSecret') {\n                    this.forceUpdate();\n                }\n                break;\n            }\n        }\n    };\n\n    render() {\n        if (this.clearHistory) return null;\n\n        const { chatId } = this.props;\n\n        const chat = ChatStore.get(chatId);\n        if (!chat) return null;\n\n        const { is_pinned, unread_count } = chat;\n\n        const showUnreadMentionCount = showChatUnreadMentionCount(chatId);\n        const showUnreadCount = showChatUnreadCount(chatId);\n        const isMuted = isChatMuted(chatId);\n\n        return (\n            <>\n                {showUnreadMentionCount && (\n                    <div className='dialog-badge'>\n                        <div className='dialog-badge-mention'>@</div>\n                    </div>\n                )}\n                {showUnreadCount && (\n                    <div className={classNames({ 'dialog-badge-muted': isMuted }, 'dialog-badge')}>\n                        <span className='dialog-badge-text'>{unread_count > 0 ? unread_count : ''}</span>\n                    </div>\n                )}\n                {is_pinned && !showUnreadCount && !showUnreadMentionCount && (\n                    <div className='dialog-badge-pinned'>\n                        <PinIcon className='dialog-badge-pinned-icon' />\n                    </div>\n                )}\n            </>\n        );\n    }\n}\n\nexport default DialogBadge;\n"]},"metadata":{},"sourceType":"module"}