{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar EventEmitter =\n/*#__PURE__*/\nfunction () {\n  function EventEmitter() {\n    _classCallCheck(this, EventEmitter);\n\n    this.observers = {};\n  }\n\n  _createClass(EventEmitter, [{\n    key: \"on\",\n    value: function on(events, listener) {\n      var _this = this;\n\n      events.split(' ').forEach(function (event) {\n        _this.observers[event] = _this.observers[event] || [];\n\n        _this.observers[event].push(listener);\n      });\n      return this;\n    }\n  }, {\n    key: \"off\",\n    value: function off(event, listener) {\n      if (!this.observers[event]) return;\n\n      if (!listener) {\n        delete this.observers[event];\n        return;\n      }\n\n      this.observers[event] = this.observers[event].filter(function (l) {\n        return l !== listener;\n      });\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(event) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      if (this.observers[event]) {\n        var cloned = [].concat(this.observers[event]);\n        cloned.forEach(function (observer) {\n          observer.apply(void 0, args);\n        });\n      }\n\n      if (this.observers['*']) {\n        var _cloned = [].concat(this.observers['*']);\n\n        _cloned.forEach(function (observer) {\n          observer.apply(observer, [event].concat(args));\n        });\n      }\n    }\n  }]);\n\n  return EventEmitter;\n}();\n\nexport default EventEmitter;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Stores/EventEmitter.js"],"names":["EventEmitter","observers","events","listener","split","forEach","event","push","filter","l","args","cloned","concat","observer","apply"],"mappings":";;;AAAA;;;;;;IAOMA,Y;;;AACF,0BAAc;AAAA;;AACV,SAAKC,SAAL,GAAiB,EAAjB;AACH;;;;uBAEEC,M,EAAQC,Q,EAAU;AAAA;;AACjBD,MAAAA,MAAM,CAACE,KAAP,CAAa,GAAb,EAAkBC,OAAlB,CAA0B,UAAAC,KAAK,EAAI;AAC/B,QAAA,KAAI,CAACL,SAAL,CAAeK,KAAf,IAAwB,KAAI,CAACL,SAAL,CAAeK,KAAf,KAAyB,EAAjD;;AACA,QAAA,KAAI,CAACL,SAAL,CAAeK,KAAf,EAAsBC,IAAtB,CAA2BJ,QAA3B;AACH,OAHD;AAIA,aAAO,IAAP;AACH;;;wBAEGG,K,EAAOH,Q,EAAU;AACjB,UAAI,CAAC,KAAKF,SAAL,CAAeK,KAAf,CAAL,EAA4B;;AAC5B,UAAI,CAACH,QAAL,EAAe;AACX,eAAO,KAAKF,SAAL,CAAeK,KAAf,CAAP;AACA;AACH;;AAED,WAAKL,SAAL,CAAeK,KAAf,IAAwB,KAAKL,SAAL,CAAeK,KAAf,EAAsBE,MAAtB,CAA6B,UAAAC,CAAC;AAAA,eAAIA,CAAC,KAAKN,QAAV;AAAA,OAA9B,CAAxB;AACH;;;yBAEIG,K,EAAgB;AAAA,wCAANI,IAAM;AAANA,QAAAA,IAAM;AAAA;;AACjB,UAAI,KAAKT,SAAL,CAAeK,KAAf,CAAJ,EAA2B;AACvB,YAAMK,MAAM,GAAG,GAAGC,MAAH,CAAU,KAAKX,SAAL,CAAeK,KAAf,CAAV,CAAf;AACAK,QAAAA,MAAM,CAACN,OAAP,CAAe,UAAAQ,QAAQ,EAAI;AACvBA,UAAAA,QAAQ,MAAR,SAAYH,IAAZ;AACH,SAFD;AAGH;;AAED,UAAI,KAAKT,SAAL,CAAe,GAAf,CAAJ,EAAyB;AACrB,YAAMU,OAAM,GAAG,GAAGC,MAAH,CAAU,KAAKX,SAAL,CAAe,GAAf,CAAV,CAAf;;AACAU,QAAAA,OAAM,CAACN,OAAP,CAAe,UAAAQ,QAAQ,EAAI;AACvBA,UAAAA,QAAQ,CAACC,KAAT,CAAeD,QAAf,GAA0BP,KAA1B,SAAoCI,IAApC;AACH,SAFD;AAGH;AACJ;;;;;;AAGL,eAAeV,YAAf","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nclass EventEmitter {\n    constructor() {\n        this.observers = {};\n    }\n\n    on(events, listener) {\n        events.split(' ').forEach(event => {\n            this.observers[event] = this.observers[event] || [];\n            this.observers[event].push(listener);\n        });\n        return this;\n    }\n\n    off(event, listener) {\n        if (!this.observers[event]) return;\n        if (!listener) {\n            delete this.observers[event];\n            return;\n        }\n\n        this.observers[event] = this.observers[event].filter(l => l !== listener);\n    }\n\n    emit(event, ...args) {\n        if (this.observers[event]) {\n            const cloned = [].concat(this.observers[event]);\n            cloned.forEach(observer => {\n                observer(...args);\n            });\n        }\n\n        if (this.observers['*']) {\n            const cloned = [].concat(this.observers['*']);\n            cloned.forEach(observer => {\n                observer.apply(observer, [event, ...args]);\n            });\n        }\n    }\n}\n\nexport default EventEmitter;\n"]},"metadata":{},"sourceType":"module"}