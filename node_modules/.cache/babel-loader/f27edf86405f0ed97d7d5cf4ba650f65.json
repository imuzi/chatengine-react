{"ast":null,"code":"/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport punycode from './Punycode';\nexport function getHref(url, mail) {\n  if (!url) return null;\n  if (mail) return url.startsWith('mailto:') ? url : 'mailto:' + url; // if (url.startsWith('tg://')) return url;\n\n  return url.startsWith('http') ? url : 'http://' + url;\n}\nexport function isUrlSafe(displayText, url) {\n  if (displayText && displayText !== url) {\n    return false;\n  }\n\n  if (hasRTLOSymbol(url)) {\n    return false;\n  }\n\n  return true;\n}\nexport function getDecodedUrl(url, mail) {\n  if (!url) return null;\n  var href = getHref(url, mail);\n\n  try {\n    var decodedHref = decodeURI(href);\n    var domain = decodedHref.match(/^https?:\\/\\/([^\\/:?#]+)(?:[\\/:?#]|$)/i)[1];\n    decodedHref = decodedHref.replace(domain, punycode.ToUnicode(domain));\n    return decodedHref;\n  } catch (error) {\n    console.log('SafeLink.getDecodedUrl error ', url, error);\n  }\n\n  return null;\n}\nvar regExpRTLO = /\\u202e/;\nexport function hasRTLOSymbol(url) {\n  if (!url) return false;\n  return regExpRTLO.test(url);\n}\nvar regExpDomainExplicit = new RegExp('(?:([a-zA-Z]+):\\\\/\\\\/)((?:[A-Za-z' + '\\xD0\\x90-\\xD0\\xAF\\xD0\\x81' + '\\xD0\\xB0-\\xD1\\x8F\\xD1\\x91' + '0-9\\\\-\\\\_]+\\\\.){0,10}([A-Za-z' + '\\xD1\\x80\\xD1\\x84' + '\\\\-\\\\d]{2,22})(\\\\:\\\\d+)?)');\nvar regExpDomain = new RegExp('(?:([a-zA-Z]+):\\\\/\\\\/)?((?:[A-Za-z' + '\\xD0\\x90-\\xD0\\xAF\\xD0\\x81' + '\\xD0\\xB0-\\xD1\\x8F\\xD1\\x91' + '0-9\\\\-\\\\_]+\\\\.){1,10}([A-Za-z' + '\\xD1\\x80\\xD1\\x84' + '\\\\-\\\\d]{2,22})(\\\\:\\\\d+)?)');\nvar regExpProtocol = new RegExp('^([a-zA-Z]+):\\\\/\\\\/'); // https://github.com/telegramdesktop/tdesktop/blob/4e80d54be130eca76129f2c4995fe685d1014442/Telegram/SourceFiles/base/qthelp_url.cpp#L105\n\nexport function validateUrl(value) {\n  // value = punycode.ToASCII(value);\n  var trimmed = value.trim();\n\n  if (!trimmed) {\n    return null;\n  }\n\n  var match = trimmed.match(regExpDomainExplicit);\n\n  if (!match) {\n    var domainMatch = trimmed.match(regExpDomain);\n\n    if (!domainMatch || domainMatch.index !== 0) {\n      return null;\n    }\n\n    return 'http://' + trimmed;\n  } else if (match.index !== 0) {\n    return null;\n  }\n\n  var protocolMatch = trimmed.match(regExpProtocol);\n  return protocolMatch && isGoodProtocol(protocolMatch[0]) ? trimmed : null;\n}\n\nfunction isGoodProtocol(value) {\n  return ['http', 'https', 'tg'].some(function (x) {\n    return value.toLowerCase().indexOf(x) === 0;\n  });\n}","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Utils/Url.js"],"names":["punycode","getHref","url","mail","startsWith","isUrlSafe","displayText","hasRTLOSymbol","getDecodedUrl","href","decodedHref","decodeURI","domain","match","replace","ToUnicode","error","console","log","regExpRTLO","test","regExpDomainExplicit","RegExp","regExpDomain","regExpProtocol","validateUrl","value","trimmed","trim","domainMatch","index","protocolMatch","isGoodProtocol","some","x","toLowerCase","indexOf"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport punycode from './Punycode';\n\nexport function getHref(url, mail) {\n    if (!url) return null;\n\n    if (mail) return url.startsWith('mailto:') ? url : 'mailto:' + url;\n\n    // if (url.startsWith('tg://')) return url;\n\n    return url.startsWith('http') ? url : 'http://' + url;\n}\n\nexport function isUrlSafe(displayText, url) {\n    if (displayText && displayText !== url) {\n        return false;\n    }\n\n    if (hasRTLOSymbol(url)) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function getDecodedUrl(url, mail) {\n    if (!url) return null;\n\n    const href = getHref(url, mail);\n\n    try {\n        let decodedHref = decodeURI(href);\n\n        const domain = decodedHref.match(/^https?:\\/\\/([^\\/:?#]+)(?:[\\/:?#]|$)/i)[1];\n        decodedHref = decodedHref.replace(domain, punycode.ToUnicode(domain));\n\n        return decodedHref;\n    } catch (error) {\n        console.log('SafeLink.getDecodedUrl error ', url, error);\n    }\n\n    return null;\n}\n\nconst regExpRTLO = /\\u202e/;\n\nexport function hasRTLOSymbol(url) {\n    if (!url) return false;\n\n    return regExpRTLO.test(url);\n}\n\nconst regExpDomainExplicit = new RegExp(\n    '(?:([a-zA-Z]+):\\\\/\\\\/)((?:[A-Za-z' +\n        '\\xD0\\x90-\\xD0\\xAF\\xD0\\x81' +\n        '\\xD0\\xB0-\\xD1\\x8F\\xD1\\x91' +\n        '0-9\\\\-\\\\_]+\\\\.){0,10}([A-Za-z' +\n        '\\xD1\\x80\\xD1\\x84' +\n        '\\\\-\\\\d]{2,22})(\\\\:\\\\d+)?)'\n);\nconst regExpDomain = new RegExp(\n    '(?:([a-zA-Z]+):\\\\/\\\\/)?((?:[A-Za-z' +\n        '\\xD0\\x90-\\xD0\\xAF\\xD0\\x81' +\n        '\\xD0\\xB0-\\xD1\\x8F\\xD1\\x91' +\n        '0-9\\\\-\\\\_]+\\\\.){1,10}([A-Za-z' +\n        '\\xD1\\x80\\xD1\\x84' +\n        '\\\\-\\\\d]{2,22})(\\\\:\\\\d+)?)'\n);\nconst regExpProtocol = new RegExp('^([a-zA-Z]+):\\\\/\\\\/');\n\n// https://github.com/telegramdesktop/tdesktop/blob/4e80d54be130eca76129f2c4995fe685d1014442/Telegram/SourceFiles/base/qthelp_url.cpp#L105\nexport function validateUrl(value) {\n    // value = punycode.ToASCII(value);\n\n    const trimmed = value.trim();\n    if (!trimmed) {\n        return null;\n    }\n\n    const match = trimmed.match(regExpDomainExplicit);\n    if (!match) {\n        const domainMatch = trimmed.match(regExpDomain);\n        if (!domainMatch || domainMatch.index !== 0) {\n            return null;\n        }\n\n        return 'http://' + trimmed;\n    } else if (match.index !== 0) {\n        return null;\n    }\n\n    const protocolMatch = trimmed.match(regExpProtocol);\n    return protocolMatch && isGoodProtocol(protocolMatch[0]) ? trimmed : null;\n}\n\nfunction isGoodProtocol(value) {\n    return ['http', 'https', 'tg'].some(x => value.toLowerCase().indexOf(x) === 0);\n}\n"]},"metadata":{},"sourceType":"module"}