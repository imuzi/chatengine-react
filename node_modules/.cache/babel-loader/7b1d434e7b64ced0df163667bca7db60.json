{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport EventEmitter from './EventEmitter';\nimport ActionScheduler from '../Utils/ActionScheduler';\nimport { closeChat } from '../Actions/Client';\nimport { subscribeNotifications } from '../registerServiceWorker';\nimport { PAGE_WIDTH_SMALL } from '../Constants';\nimport TdLibController from '../Controllers/TdLibController';\n\nvar ApplicationStore =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(ApplicationStore, _EventEmitter);\n\n  function ApplicationStore() {\n    var _this;\n\n    _classCallCheck(this, ApplicationStore);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ApplicationStore).call(this));\n\n    _this.onWindowResize = function () {\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          isSmallWidth = _assertThisInitialize.isSmallWidth;\n\n      var nextIsSmallWidth = window.innerWidth < PAGE_WIDTH_SMALL;\n\n      if (nextIsSmallWidth !== isSmallWidth) {\n        _this.isSmallWidth = nextIsSmallWidth;\n        TdLibController.clientUpdate({\n          '@type': 'clientUpdatePageWidth',\n          isSmallWidth: nextIsSmallWidth\n        });\n      }\n    };\n\n    _this.reset = function () {\n      _this.dialogsReady = false;\n      _this.cacheLoaded = false;\n      _this.setPhoneNumberRequest = null;\n      _this.chatId = 0;\n      _this.dialogChatId = 0;\n      _this.messageId = null;\n      _this.statistics = new Map();\n      _this.authorizationState = null;\n      _this.defaultPhone = null;\n      _this.connectionState = null;\n      _this.isChatDetailsVisible = false;\n      _this.mediaViewerContent = null;\n      _this.profileMediaViewerContent = null;\n      _this.dragParams = null;\n      _this.actionScheduler = new ActionScheduler(_this.handleScheduledAction, _this.handleCancelScheduledAction);\n    };\n\n    _this.addScheduledAction = function (key, timeout, action, cancel) {\n      return _this.actionScheduler.add(key, timeout, action, cancel);\n    };\n\n    _this.invokeScheduledAction =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(key) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.actionScheduler.invoke(key);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.removeScheduledAction = function (key) {\n      _this.actionScheduler.remove(key);\n    };\n\n    _this.handleScheduledAction = function (item) {\n      console.log('Invoked scheduled action key=', item.key);\n    };\n\n    _this.handleCancelScheduledAction = function (item) {\n      console.log('Cancel scheduled action key=', item.key);\n    };\n\n    _this.onUpdate = function (update) {\n      switch (update['@type']) {\n        case 'updateAuthorizationState':\n          {\n            _this.authorizationState = update.authorization_state;\n\n            switch (update.authorization_state['@type']) {\n              case 'authorizationStateLoggingOut':\n                _this.loggingOut = true;\n                break;\n\n              case 'authorizationStateWaitTdlibParameters':\n                TdLibController.sendTdParameters();\n                break;\n\n              case 'authorizationStateWaitEncryptionKey':\n                TdLibController.send({\n                  '@type': 'checkDatabaseEncryptionKey'\n                });\n                break;\n\n              case 'authorizationStateWaitPhoneNumber':\n                {\n                  if (_this.setPhoneNumberRequest) {\n                    _this.setPhoneNumberRequest();\n\n                    _this.setPhoneNumberRequest = null;\n                  }\n\n                  break;\n                }\n\n              case 'authorizationStateWaitCode':\n                break;\n\n              case 'authorizationStateWaitPassword':\n                break;\n\n              case 'authorizationStateReady':\n                _this.loggingOut = false;\n                _this.setPhoneNumberRequest = null;\n                subscribeNotifications();\n                break;\n\n              case 'authorizationStateClosing':\n                break;\n\n              case 'authorizationStateClosed':\n                _this.reset();\n\n                if (!_this.loggingOut) {\n                  document.title += ': Zzzâ€¦';\n                  TdLibController.clientUpdate({\n                    '@type': 'clientUpdateAppInactive'\n                  });\n                } else {\n                  TdLibController.init();\n                }\n\n                break;\n\n              default:\n                break;\n            }\n\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'updateChatIsMarkedAsUnread':\n          {\n            var chat_id = update.chat_id,\n                is_marked_as_unread = update.is_marked_as_unread;\n\n            if (chat_id === _this.chatId && is_marked_as_unread) {\n              closeChat();\n            }\n\n            break;\n          }\n\n        case 'updateConnectionState':\n          {\n            _this.connectionState = update.state;\n\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'updateFatalError':\n          {\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'updateServiceNotification':\n          {\n            var type = update.type,\n                content = update.content;\n            if (!content) return;\n\n            if (content['@type'] === 'messageText') {\n              var text = content.text;\n              if (!text) return;\n\n              if (text['@type'] === 'formattedText' && text.text) {\n                switch (type) {\n                  case 'AUTH_KEY_DROP_DUPLICATE':\n                    var result = window.confirm(text.text);\n\n                    if (result) {\n                      TdLibController.logOut();\n                    }\n\n                    break;\n\n                  default:\n                    alert(text.text);\n                    break;\n                }\n              }\n            }\n\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    _this.onClientUpdate = function (update) {\n      switch (update['@type']) {\n        case 'clientUpdateAppInactive':\n          {\n            _this.emit('clientUpdateAppInactive');\n\n            break;\n          }\n\n        case 'clientUpdateCacheLoaded':\n          {\n            _this.cacheLoaded = true;\n\n            _this.emit('clientUpdateCacheLoaded');\n\n            break;\n          }\n\n        case 'clientUpdateChatId':\n          {\n            var extendedUpdate = {\n              '@type': 'clientUpdateChatId',\n              nextChatId: update.chatId,\n              nextMessageId: update.messageId,\n              previousChatId: _this.chatId,\n              previousMessageId: _this.messageId\n            };\n            _this.chatId = update.chatId;\n            _this.messageId = update.messageId;\n\n            _this.emit('clientUpdateChatId', extendedUpdate);\n\n            break;\n          }\n\n        case 'clientUpdateTdLibDatabaseExists':\n          {\n            _this.emit('clientUpdateTdLibDatabaseExists', update);\n\n            break;\n          }\n\n        case 'clientUpdateDeleteMessages':\n          {\n            _this.emit('clientUpdateDeleteMessages', update);\n\n            break;\n          }\n\n        case 'clientUpdateDialogsReady':\n          {\n            _this.dialogsReady = true;\n\n            _this.emit('clientUpdateDialogsReady', update);\n\n            break;\n          }\n\n        case 'clientUpdateDragging':\n          {\n            var dragging = update.dragging,\n                files = update.files;\n            _this.dragParams = dragging ? {\n              dragging: dragging,\n              files: files\n            } : null;\n\n            _this.emit('clientUpdateDragging', update);\n\n            break;\n          }\n\n        case 'clientUpdateEditMessage':\n          {\n            _this.emit('clientUpdateEditMessage', update);\n\n            break;\n          }\n\n        case 'clientUpdateMediaViewerContent':\n          {\n            var content = update.content;\n            _this.mediaViewerContent = content;\n\n            _this.emit('clientUpdateMediaViewerContent', update);\n\n            break;\n          }\n\n        case 'clientUpdateNewContentAvailable':\n          {\n            _this.emit('clientUpdateNewContentAvailable', update);\n\n            break;\n          }\n\n        case 'clientUpdatePageWidth':\n          {\n            _this.emit('clientUpdatePageWidth', update);\n\n            break;\n          }\n\n        case 'clientUpdateProfileMediaViewerContent':\n          {\n            var _content = update.content;\n            _this.profileMediaViewerContent = _content;\n\n            _this.emit('clientUpdateProfileMediaViewerContent', update);\n\n            break;\n          }\n\n        case 'clientUpdateSearchChat':\n          {\n            _this.emit('clientUpdateSearchChat', update);\n\n            break;\n          }\n\n        case 'clientUpdateSetPhone':\n          {\n            var phone = update.phone;\n            _this.defaultPhone = phone;\n\n            if (!phone) {\n              _this.setPhoneNumberRequest = null;\n              TdLibController.clientUpdate({\n                '@type': 'clientUpdateSetPhoneCanceled'\n              });\n            } else {\n              if (_this.authorizationState && _this.authorizationState['@type'] === 'authorizationStateWaitPhoneNumber') {\n                _this.setPhoneNumber(phone);\n              } else {\n                _this.setPhoneNumberRequest = function () {\n                  return _this.setPhoneNumber(phone);\n                };\n              }\n            }\n\n            _this.emit('clientUpdateSetPhone', update);\n\n            break;\n          }\n\n        case 'clientUpdateSetPhoneResult':\n          {\n            _this.emit('clientUpdateSetPhoneResult', update);\n\n            break;\n          }\n\n        case 'clientUpdateSetPhoneError':\n          {\n            _this.emit('clientUpdateSetPhoneError', update);\n\n            break;\n          }\n\n        case 'clientUpdateDialogChatId':\n          {\n            var chatId = update.chatId;\n            _this.dialogChatId = chatId;\n\n            _this.emit('clientUpdateDialogChatId', update);\n\n            break;\n          }\n\n        case 'clientUpdateFocusWindow':\n          {\n            if (!_this.authorizationState) {\n              break;\n            }\n\n            TdLibController.send({\n              '@type': 'setOption',\n              name: 'online',\n              value: {\n                '@type': 'optionValueBoolean',\n                value: update.focused\n              }\n            });\n\n            _this.emit('clientUpdateFocusWindow', update);\n\n            break;\n          }\n\n        case 'clientUpdateForward':\n          {\n            _this.emit('clientUpdateForward', update);\n\n            break;\n          }\n\n        case 'clientUpdateLeaveChat':\n          {\n            if (update.inProgress && _this.chatId === update.chatId) {\n              TdLibController.setChatId(0);\n            }\n\n            break;\n          }\n      }\n    };\n\n    _this.setPhoneNumber = function (phone) {\n      TdLibController.send({\n        '@type': 'setAuthenticationPhoneNumber',\n        phone_number: phone\n      }).then(function (result) {\n        TdLibController.clientUpdate({\n          '@type': 'clientUpdateSetPhoneResult',\n          result: result\n        });\n      }).catch(function (error) {\n        TdLibController.clientUpdate({\n          '@type': 'clientUpdateSetPhoneError',\n          error: error\n        });\n      });\n    };\n\n    _this.onUpdateStatistics = function (update) {\n      if (!update) return;\n\n      if (_this.statistics.has(update['@type'])) {\n        var count = _this.statistics.get(update['@type']);\n\n        _this.statistics.set(update['@type'], count + 1);\n      } else {\n        _this.statistics.set(update['@type'], 1);\n      }\n    };\n\n    _this.addTdLibListener = function () {\n      TdLibController.on('update', _this.onUpdate);\n      TdLibController.on('clientUpdate', _this.onClientUpdate);\n    };\n\n    _this.removeTdLibListener = function () {\n      TdLibController.off('update', _this.onUpdate);\n      TdLibController.off('clientUpdate', _this.onClientUpdate);\n    };\n\n    _this.addStatistics = function () {\n      TdLibController.on('update', _this.onUpdateStatistics);\n    };\n\n    _this.setChatId = function (chatId) {\n      var messageId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var update = {\n        '@type': 'clientUpdateChatId',\n        nextChatId: chatId,\n        nextMessageId: messageId,\n        previousChatId: _this.chatId,\n        previousMessageId: _this.messageId\n      };\n      _this.chatId = chatId;\n      _this.messageId = messageId;\n\n      _this.emit(update['@type'], update);\n    };\n\n    _this.reset();\n\n    _this.addTdLibListener();\n\n    _this.addStatistics();\n\n    _this.isSmallWidth = window.innerWidth < PAGE_WIDTH_SMALL;\n    window.addEventListener('resize', _this.onWindowResize);\n    return _this;\n  }\n\n  _createClass(ApplicationStore, [{\n    key: \"getChatId\",\n    value: function getChatId() {\n      return this.chatId;\n    }\n  }, {\n    key: \"getMessageId\",\n    value: function getMessageId() {\n      return this.messageId;\n    }\n  }, {\n    key: \"changeChatDetailsVisibility\",\n    value: function changeChatDetailsVisibility(visibility) {\n      this.isChatDetailsVisible = visibility;\n      this.emit('clientUpdateChatDetailsVisibility', visibility);\n    }\n  }, {\n    key: \"getConnectionState\",\n    value: function getConnectionState() {\n      return this.connectionState;\n    }\n  }, {\n    key: \"getAuthorizationState\",\n    value: function getAuthorizationState() {\n      return this.authorizationState;\n    }\n  }, {\n    key: \"assign\",\n    value: function assign(source1, source2) {\n      Object.assign(source1, source2); //this.set(Object.assign({}, source1, source2));\n    }\n  }]);\n\n  return ApplicationStore;\n}(EventEmitter);\n\nvar store = new ApplicationStore();\nwindow.app = store;\nexport default store;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Stores/ApplicationStore.js"],"names":["EventEmitter","ActionScheduler","closeChat","subscribeNotifications","PAGE_WIDTH_SMALL","TdLibController","ApplicationStore","onWindowResize","isSmallWidth","nextIsSmallWidth","window","innerWidth","clientUpdate","reset","dialogsReady","cacheLoaded","setPhoneNumberRequest","chatId","dialogChatId","messageId","statistics","Map","authorizationState","defaultPhone","connectionState","isChatDetailsVisible","mediaViewerContent","profileMediaViewerContent","dragParams","actionScheduler","handleScheduledAction","handleCancelScheduledAction","addScheduledAction","key","timeout","action","cancel","add","invokeScheduledAction","invoke","removeScheduledAction","remove","item","console","log","onUpdate","update","authorization_state","loggingOut","sendTdParameters","send","document","title","init","emit","chat_id","is_marked_as_unread","state","type","content","text","result","confirm","logOut","alert","onClientUpdate","extendedUpdate","nextChatId","nextMessageId","previousChatId","previousMessageId","dragging","files","phone","setPhoneNumber","name","value","focused","inProgress","setChatId","phone_number","then","catch","error","onUpdateStatistics","has","count","get","set","addTdLibListener","on","removeTdLibListener","off","addStatistics","addEventListener","visibility","source1","source2","Object","assign","store","app"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport EventEmitter from './EventEmitter';\nimport ActionScheduler from '../Utils/ActionScheduler';\nimport { closeChat } from '../Actions/Client';\nimport { subscribeNotifications } from '../registerServiceWorker';\nimport { PAGE_WIDTH_SMALL } from '../Constants';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass ApplicationStore extends EventEmitter {\n    constructor() {\n        super();\n\n        this.reset();\n\n        this.addTdLibListener();\n        this.addStatistics();\n\n        this.isSmallWidth = window.innerWidth < PAGE_WIDTH_SMALL;\n        window.addEventListener('resize', this.onWindowResize);\n    }\n\n    onWindowResize = () => {\n        const { isSmallWidth } = this;\n\n        const nextIsSmallWidth = window.innerWidth < PAGE_WIDTH_SMALL;\n        if (nextIsSmallWidth !== isSmallWidth) {\n            this.isSmallWidth = nextIsSmallWidth;\n            TdLibController.clientUpdate({\n                '@type': 'clientUpdatePageWidth',\n                isSmallWidth: nextIsSmallWidth\n            })\n        }\n    };\n\n    reset = () => {\n        this.dialogsReady = false;\n        this.cacheLoaded = false;\n        this.setPhoneNumberRequest = null;\n        this.chatId = 0;\n        this.dialogChatId = 0;\n        this.messageId = null;\n        this.statistics = new Map();\n        this.authorizationState = null;\n        this.defaultPhone = null;\n        this.connectionState = null;\n        this.isChatDetailsVisible = false;\n        this.mediaViewerContent = null;\n        this.profileMediaViewerContent = null;\n        this.dragParams = null;\n        this.actionScheduler = new ActionScheduler(this.handleScheduledAction, this.handleCancelScheduledAction);\n    };\n\n    addScheduledAction = (key, timeout, action, cancel) => {\n        return this.actionScheduler.add(key, timeout, action, cancel);\n    };\n\n    invokeScheduledAction = async key => {\n        await this.actionScheduler.invoke(key);\n    };\n\n    removeScheduledAction = key => {\n        this.actionScheduler.remove(key);\n    };\n\n    handleScheduledAction = item => {\n        console.log('Invoked scheduled action key=', item.key);\n    };\n\n    handleCancelScheduledAction = item => {\n        console.log('Cancel scheduled action key=', item.key);\n    };\n\n    onUpdate = update => {\n        switch (update['@type']) {\n            case 'updateAuthorizationState': {\n                this.authorizationState = update.authorization_state;\n\n                switch (update.authorization_state['@type']) {\n                    case 'authorizationStateLoggingOut':\n                        this.loggingOut = true;\n                        break;\n                    case 'authorizationStateWaitTdlibParameters':\n                        TdLibController.sendTdParameters();\n                        break;\n                    case 'authorizationStateWaitEncryptionKey':\n                        TdLibController.send({ '@type': 'checkDatabaseEncryptionKey' });\n                        break;\n                    case 'authorizationStateWaitPhoneNumber': {\n                        if (this.setPhoneNumberRequest) {\n                            this.setPhoneNumberRequest();\n\n                            this.setPhoneNumberRequest = null;\n                        }\n\n                        break;\n                    }\n                    case 'authorizationStateWaitCode':\n                        break;\n                    case 'authorizationStateWaitPassword':\n                        break;\n                    case 'authorizationStateReady':\n                        this.loggingOut = false;\n                        this.setPhoneNumberRequest = null;\n                        subscribeNotifications();\n                        break;\n                    case 'authorizationStateClosing':\n                        break;\n                    case 'authorizationStateClosed':\n                        this.reset();\n\n                        if (!this.loggingOut) {\n                            document.title += ': Zzzâ€¦';\n\n                            TdLibController.clientUpdate({\n                                '@type': 'clientUpdateAppInactive'\n                            });\n                        } else {\n                            TdLibController.init();\n                        }\n                        break;\n                    default:\n                        break;\n                }\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'updateChatIsMarkedAsUnread': {\n                const { chat_id, is_marked_as_unread } = update;\n                if (chat_id === this.chatId && is_marked_as_unread) {\n                    closeChat();\n                }\n\n                break;\n            }\n            case 'updateConnectionState': {\n                this.connectionState = update.state;\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'updateFatalError': {\n                this.emit(update['@type'], update);\n\n                break;\n            }\n            case 'updateServiceNotification': {\n                const { type, content } = update;\n\n                if (!content) return;\n                if (content['@type'] === 'messageText') {\n                    const { text } = content;\n                    if (!text) return;\n\n                    if (text['@type'] === 'formattedText' && text.text) {\n                        switch (type) {\n                            case 'AUTH_KEY_DROP_DUPLICATE':\n                                let result = window.confirm(text.text);\n                                if (result) {\n                                    TdLibController.logOut();\n                                }\n                                break;\n                            default:\n                                alert(text.text);\n                                break;\n                        }\n                    }\n                }\n\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    onClientUpdate = update => {\n        switch (update['@type']) {\n            case 'clientUpdateAppInactive': {\n                this.emit('clientUpdateAppInactive');\n                break;\n            }\n            case 'clientUpdateCacheLoaded': {\n                this.cacheLoaded = true;\n                this.emit('clientUpdateCacheLoaded');\n                break;\n            }\n            case 'clientUpdateChatId': {\n                const extendedUpdate = {\n                    '@type': 'clientUpdateChatId',\n                    nextChatId: update.chatId,\n                    nextMessageId: update.messageId,\n                    previousChatId: this.chatId,\n                    previousMessageId: this.messageId\n                };\n\n                this.chatId = update.chatId;\n                this.messageId = update.messageId;\n\n                this.emit('clientUpdateChatId', extendedUpdate);\n                break;\n            }\n            case 'clientUpdateTdLibDatabaseExists': {\n                this.emit('clientUpdateTdLibDatabaseExists', update);\n                break;\n            }\n            case 'clientUpdateDeleteMessages': {\n                this.emit('clientUpdateDeleteMessages', update);\n                break;\n            }\n            case 'clientUpdateDialogsReady': {\n                this.dialogsReady = true;\n                this.emit('clientUpdateDialogsReady', update);\n                break;\n            }\n            case 'clientUpdateDragging': {\n                const { dragging, files } = update;\n\n                this.dragParams = dragging ? { dragging, files } : null;\n                this.emit('clientUpdateDragging', update);\n                break;\n            }\n            case 'clientUpdateEditMessage': {\n                this.emit('clientUpdateEditMessage', update);\n                break;\n            }\n            case 'clientUpdateMediaViewerContent': {\n                const { content } = update;\n                this.mediaViewerContent = content;\n\n                this.emit('clientUpdateMediaViewerContent', update);\n                break;\n            }\n            case 'clientUpdateNewContentAvailable': {\n                this.emit('clientUpdateNewContentAvailable', update);\n                break;\n            }\n            case 'clientUpdatePageWidth': {\n                this.emit('clientUpdatePageWidth', update);\n                break;\n            }\n            case 'clientUpdateProfileMediaViewerContent': {\n                const { content } = update;\n                this.profileMediaViewerContent = content;\n\n                this.emit('clientUpdateProfileMediaViewerContent', update);\n                break;\n            }\n            case 'clientUpdateSearchChat': {\n                this.emit('clientUpdateSearchChat', update);\n                break;\n            }\n            case 'clientUpdateSetPhone': {\n                const { phone } = update;\n\n                this.defaultPhone = phone;\n\n                if (!phone) {\n                    this.setPhoneNumberRequest = null;\n                    TdLibController.clientUpdate({\n                        '@type': 'clientUpdateSetPhoneCanceled'\n                    });\n                } else {\n                    if (\n                        this.authorizationState &&\n                        this.authorizationState['@type'] === 'authorizationStateWaitPhoneNumber'\n                    ) {\n                        this.setPhoneNumber(phone);\n                    } else {\n                        this.setPhoneNumberRequest = () => this.setPhoneNumber(phone);\n                    }\n                }\n\n                this.emit('clientUpdateSetPhone', update);\n                break;\n            }\n            case 'clientUpdateSetPhoneResult': {\n                this.emit('clientUpdateSetPhoneResult', update);\n                break;\n            }\n            case 'clientUpdateSetPhoneError': {\n                this.emit('clientUpdateSetPhoneError', update);\n                break;\n            }\n            case 'clientUpdateDialogChatId': {\n                const { chatId } = update;\n                this.dialogChatId = chatId;\n\n                this.emit('clientUpdateDialogChatId', update);\n                break;\n            }\n            case 'clientUpdateFocusWindow': {\n                if (!this.authorizationState) {\n                    break;\n                }\n\n                TdLibController.send({\n                    '@type': 'setOption',\n                    name: 'online',\n                    value: { '@type': 'optionValueBoolean', value: update.focused }\n                });\n\n                this.emit('clientUpdateFocusWindow', update);\n                break;\n            }\n            case 'clientUpdateForward': {\n                this.emit('clientUpdateForward', update);\n                break;\n            }\n            case 'clientUpdateLeaveChat': {\n                if (update.inProgress && this.chatId === update.chatId) {\n                    TdLibController.setChatId(0);\n                }\n\n                break;\n            }\n        }\n    };\n\n    setPhoneNumber = phone => {\n        TdLibController.send({\n            '@type': 'setAuthenticationPhoneNumber',\n            phone_number: phone\n        })\n            .then(result => {\n                TdLibController.clientUpdate({\n                    '@type': 'clientUpdateSetPhoneResult',\n                    result\n                });\n            })\n            .catch(error => {\n                TdLibController.clientUpdate({\n                    '@type': 'clientUpdateSetPhoneError',\n                    error\n                });\n            });\n    };\n\n    onUpdateStatistics = update => {\n        if (!update) return;\n\n        if (this.statistics.has(update['@type'])) {\n            const count = this.statistics.get(update['@type']);\n\n            this.statistics.set(update['@type'], count + 1);\n        } else {\n            this.statistics.set(update['@type'], 1);\n        }\n    };\n\n    addTdLibListener = () => {\n        TdLibController.on('update', this.onUpdate);\n        TdLibController.on('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.off('update', this.onUpdate);\n        TdLibController.off('clientUpdate', this.onClientUpdate);\n    };\n\n    addStatistics = () => {\n        TdLibController.on('update', this.onUpdateStatistics);\n    };\n\n    setChatId = (chatId, messageId = null) => {\n        const update = {\n            '@type': 'clientUpdateChatId',\n            nextChatId: chatId,\n            nextMessageId: messageId,\n            previousChatId: this.chatId,\n            previousMessageId: this.messageId\n        };\n\n        this.chatId = chatId;\n        this.messageId = messageId;\n        this.emit(update['@type'], update);\n    };\n\n    getChatId() {\n        return this.chatId;\n    }\n\n    getMessageId() {\n        return this.messageId;\n    }\n\n    changeChatDetailsVisibility(visibility) {\n        this.isChatDetailsVisible = visibility;\n        this.emit('clientUpdateChatDetailsVisibility', visibility);\n    }\n\n    getConnectionState() {\n        return this.connectionState;\n    }\n\n    getAuthorizationState() {\n        return this.authorizationState;\n    }\n\n    assign(source1, source2) {\n        Object.assign(source1, source2);\n        //this.set(Object.assign({}, source1, source2));\n    }\n}\n\nconst store = new ApplicationStore();\nwindow.app = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}