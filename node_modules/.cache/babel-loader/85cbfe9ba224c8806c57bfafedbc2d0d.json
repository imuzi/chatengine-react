{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Tile/DocumentTile.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport FileProgress from '../../Components/Viewer/FileProgress';\nimport { getSrc } from '../../Utils/File';\nimport FileStore from '../../Stores/FileStore';\nimport './DocumentTile.css';\n\nvar DocumentTile =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DocumentTile, _React$Component);\n\n  function DocumentTile() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DocumentTile);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DocumentTile)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loaded: false\n    };\n\n    _this.onClientUpdateDocumentThumbnailBlob = function (update) {\n      var thumbnail = _this.props.thumbnail;\n      if (!thumbnail) return;\n      var file = thumbnail.photo;\n      if (!file) return;\n      var fileId = update.fileId;\n\n      if (file.id !== fileId) {\n        return;\n      }\n\n      _this.forceUpdate();\n    };\n\n    _this.handleLoad = function () {\n      _this.setState({\n        loaded: true\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(DocumentTile, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      FileStore.on('clientUpdateDocumentThumbnailBlob', this.onClientUpdateDocumentThumbnailBlob);\n      FileStore.on('clientUpdateAudioThumbnailBlob', this.onClientUpdateDocumentThumbnailBlob);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      FileStore.off('clientUpdateDocumentThumbnailBlob', this.onClientUpdateDocumentThumbnailBlob);\n      FileStore.off('clientUpdateAudioThumbnailBlob', this.onClientUpdateDocumentThumbnailBlob);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          minithumbnail = _this$props.minithumbnail,\n          thumbnail = _this$props.thumbnail,\n          file = _this$props.file,\n          icon = _this$props.icon,\n          completeIcon = _this$props.completeIcon,\n          openMedia = _this$props.openMedia;\n      var loaded = this.state.loaded;\n      var miniSrc = minithumbnail ? 'data:image/jpeg;base64, ' + minithumbnail.data : null;\n      var thumbnailSrc = getSrc(thumbnail ? thumbnail.photo : null);\n      var tileLoaded = thumbnailSrc && loaded;\n      var src = thumbnailSrc || miniSrc;\n      return React.createElement(\"div\", {\n        className: classNames('document-tile', {\n          'document-tile-image': !src\n        }, {\n          pointer: openMedia\n        }),\n        onClick: openMedia,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, file && React.createElement(FileProgress, {\n        file: file,\n        thumbnailSrc: src,\n        download: true,\n        upload: true,\n        cancelButton: true,\n        zIndex: 1,\n        icon: icon,\n        completeIcon: typeof completeIcon === 'function' ? completeIcon(src) : completeIcon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), src && React.createElement(\"img\", {\n        className: \"tile-photo\",\n        src: src,\n        onLoad: this.handleLoad,\n        draggable: false,\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }), !tileLoaded && React.createElement(\"div\", {\n        className: \"document-tile-background\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return DocumentTile;\n}(React.Component);\n\nDocumentTile.propTypes = {\n  minithumbnail: PropTypes.object,\n  thumbnail: PropTypes.object,\n  file: PropTypes.object,\n  openMedia: PropTypes.func,\n  icon: PropTypes.node,\n  completeIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func])\n};\nexport default DocumentTile;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Tile/DocumentTile.js"],"names":["React","PropTypes","classNames","FileProgress","getSrc","FileStore","DocumentTile","state","loaded","onClientUpdateDocumentThumbnailBlob","update","thumbnail","props","file","photo","fileId","id","forceUpdate","handleLoad","setState","on","off","minithumbnail","icon","completeIcon","openMedia","miniSrc","data","thumbnailSrc","tileLoaded","src","pointer","Component","propTypes","object","func","node","oneOfType"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport FileProgress from '../../Components/Viewer/FileProgress';\nimport { getSrc } from '../../Utils/File';\nimport FileStore from '../../Stores/FileStore';\nimport './DocumentTile.css';\n\nclass DocumentTile extends React.Component {\n    state = {\n        loaded: false\n    };\n\n    componentDidMount() {\n        FileStore.on('clientUpdateDocumentThumbnailBlob', this.onClientUpdateDocumentThumbnailBlob);\n        FileStore.on('clientUpdateAudioThumbnailBlob', this.onClientUpdateDocumentThumbnailBlob);\n    }\n\n    componentWillUnmount() {\n        FileStore.off('clientUpdateDocumentThumbnailBlob', this.onClientUpdateDocumentThumbnailBlob);\n        FileStore.off('clientUpdateAudioThumbnailBlob', this.onClientUpdateDocumentThumbnailBlob);\n    }\n\n    onClientUpdateDocumentThumbnailBlob = update => {\n        const { thumbnail } = this.props;\n        if (!thumbnail) return;\n\n        const file = thumbnail.photo;\n        if (!file) return;\n\n        const { fileId } = update;\n\n        if (file.id !== fileId) {\n            return;\n        }\n\n        this.forceUpdate();\n    };\n\n    handleLoad = () => {\n        this.setState({ loaded: true });\n    };\n\n    render() {\n        const { minithumbnail, thumbnail, file, icon, completeIcon, openMedia } = this.props;\n        const { loaded } = this.state;\n\n        const miniSrc = minithumbnail ? 'data:image/jpeg;base64, ' + minithumbnail.data : null;\n        const thumbnailSrc = getSrc(thumbnail ? thumbnail.photo : null);\n        const tileLoaded = thumbnailSrc && loaded;\n        const src = thumbnailSrc || miniSrc;\n\n        return (\n            <div\n                className={classNames('document-tile', { 'document-tile-image': !src }, { pointer: openMedia })}\n                onClick={openMedia}>\n                {file && (\n                    <FileProgress\n                        file={file}\n                        thumbnailSrc={src}\n                        download\n                        upload\n                        cancelButton\n                        zIndex={1}\n                        icon={icon}\n                        completeIcon={typeof completeIcon === 'function' ? completeIcon(src) : completeIcon}\n                    />\n                )}\n                {src && <img className='tile-photo' src={src} onLoad={this.handleLoad} draggable={false} alt='' />}\n                {!tileLoaded && <div className='document-tile-background' />}\n            </div>\n        );\n    }\n}\n\nDocumentTile.propTypes = {\n    minithumbnail: PropTypes.object,\n    thumbnail: PropTypes.object,\n    file: PropTypes.object,\n    openMedia: PropTypes.func,\n    icon: PropTypes.node,\n    completeIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func])\n};\n\nexport default DocumentTile;\n"]},"metadata":{},"sourceType":"module"}