{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/InstantView/InstantViewer.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport KeyboardManager, { KeyboardHandler } from '../Additional/KeyboardManager';\nimport CloseIcon from '../../Assets/Icons/Close';\nimport Article from './Article';\nimport InstantViewMediaViewer from '../Viewer/InstantViewMediaViewer';\nimport IVContext from './IVContext';\nimport MediaViewerButton from '../Viewer/MediaViewerButton';\nimport NavigateBeforeIcon from '../../Assets/Icons/Left';\nimport { itemsInView, throttle } from '../../Utils/Common';\nimport { getInnerBlocks } from '../../Utils/InstantView';\nimport { openInstantView } from '../../Actions/InstantView';\nimport { setInstantViewContent, setInstantViewViewerContent } from '../../Actions/Client';\nimport { scrollTop as _scrollTop } from '../../Utils/DOM';\nimport { IV_PHOTO_SIZE } from '../../Constants';\nimport InstantViewStore from '../../Stores/InstantViewStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './InstantViewer.css';\n\nvar InstantViewer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(InstantViewer, _React$Component);\n\n  function InstantViewer(props) {\n    var _this;\n\n    _classCallCheck(this, InstantViewer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InstantViewer).call(this, props));\n\n    _this.onClientUpdateInstantViewViewerContent = function (update) {\n      var content = update.content;\n\n      if (!content) {\n        _this.setState({\n          media: null,\n          caption: null,\n          url: null\n        });\n\n        return;\n      }\n\n      var media = content.media,\n          caption = content.caption,\n          url = content.url,\n          instantView = content.instantView;\n      if (_this.props.instantView !== instantView) return;\n\n      _this.setState({\n        media: media,\n        caption: caption,\n        url: url\n      });\n    };\n\n    _this.onClientUpdateInstantViewUrl =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(update) {\n        var url, active, instantView, hash;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log('[IV] clientUpdateInstantViewUrl', update);\n                url = update.url;\n                active = InstantViewStore.getCurrent();\n                instantView = _this.props.instantView;\n\n                if (!(active !== instantView)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 6:\n                if (!(instantView && url.startsWith(instantView.url))) {\n                  _context.next = 15;\n                  break;\n                }\n\n                hash = new URL(url).hash;\n\n                if (!(url.indexOf('#') === url.length - 1)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                _this.scrollTop('smooth');\n\n                return _context.abrupt(\"return\");\n\n              case 13:\n                if (!(hash && _this.scrollToHash(hash, 'smooth'))) {\n                  _context.next = 15;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 15:\n                openInstantView(url);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.onKeyDown = function (event) {\n      if (event.keyCode === 27) {\n        var media = _this.state.media;\n\n        if (media) {\n          setInstantViewViewerContent(null);\n          return;\n        }\n\n        _this.handleClose();\n      }\n    };\n\n    _this.handleBack = function () {\n      var _this$state = _this.state,\n          hasPrev = _this$state.hasPrev,\n          hasScroll = _this$state.hasScroll;\n\n      if (hasScroll) {\n        _this.scrollTop('smooth');\n\n        return;\n      }\n\n      if (hasPrev) {\n        TdLibController.clientUpdate({\n          '@type': 'clientUpdatePrevInstantView'\n        });\n        return;\n      }\n\n      _this.handleClose();\n    };\n\n    _this.handleScroll = function () {\n      var element = _this.instantViewerRef.current;\n\n      _this.setState({\n        hasScroll: element.scrollTop > 50\n      });\n\n      _this.updateItemsInView();\n    };\n\n    _this.keyboardHandler = new KeyboardHandler(_this.onKeyDown);\n    _this.articleRef = React.createRef();\n    _this.instantViewerRef = React.createRef();\n    _this.state = {};\n    _this.updateItemsInView = throttle(_this.updateItemsInView, 500);\n    return _this;\n  }\n\n  _createClass(InstantViewer, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState, nextContext) {\n      var instantView = this.props.instantView;\n      var _this$state2 = this.state,\n          hasScroll = _this$state2.hasScroll,\n          hasPrev = _this$state2.hasPrev,\n          media = _this$state2.media,\n          caption = _this$state2.caption,\n          url = _this$state2.url;\n\n      if (instantView !== nextProps.instantView) {\n        return true;\n      }\n\n      if (hasScroll !== nextState.hasScroll) {\n        return true;\n      }\n\n      if (hasPrev !== nextState.hasPrev) {\n        return true;\n      }\n\n      if (media !== nextState.media) {\n        return true;\n      }\n\n      if (caption !== nextState.caption) {\n        return true;\n      }\n\n      if (url !== nextState.url) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.mounted = true;\n      this.handleScroll();\n      KeyboardManager.add(this.keyboardHandler);\n      InstantViewStore.on('clientUpdateInstantViewUrl', this.onClientUpdateInstantViewUrl);\n      InstantViewStore.on('clientUpdateInstantViewViewerContent', this.onClientUpdateInstantViewViewerContent);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.mounted = false;\n      KeyboardManager.remove(this.keyboardHandler);\n      InstantViewStore.off('clientUpdateInstantViewUrl', this.onClientUpdateInstantViewUrl);\n      InstantViewStore.off('clientUpdateInstantViewViewerContent', this.onClientUpdateInstantViewViewerContent);\n    }\n  }, {\n    key: \"scrollToHash\",\n    value: function scrollToHash(hash, behavior) {\n      if (!hash) return false;\n      var hiddenElement = document.getElementById(hash.substr(1));\n\n      if (hiddenElement) {\n        var details = [];\n        var finished = false;\n        var currentElement = hiddenElement;\n\n        do {\n          currentElement = currentElement.parentNode;\n\n          if (currentElement) {\n            if (currentElement.nodeName === 'DETAILS') {\n              details.push(currentElement);\n            } else if (currentElement.nodeName === 'ARTICLE') {\n              finished = true;\n            }\n          } else {\n            finished = true;\n          }\n        } while (!finished);\n\n        details.forEach(function (x) {\n          return x.open = true;\n        });\n        hiddenElement.scrollIntoView({\n          block: 'center',\n          behavior: behavior\n        });\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"scrollTop\",\n    value: function scrollTop(behavior) {\n      var element = this.instantViewerRef.current;\n\n      switch (behavior) {\n        case 'smooth':\n          {\n            _scrollTop(element);\n\n            break;\n          }\n\n        default:\n          {\n            element.scrollTo({\n              top: 0,\n              behavior: behavior\n            });\n          }\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      var _this$props = this.props,\n          instantView = _this$props.instantView,\n          url = _this$props.url;\n      console.log('[IV] componentDidUpdate', instantView.url, instantView.url === prevProps.instantView.url);\n      var hash = new URL(instantView.url).hash;\n\n      if (prevProps.instantView !== instantView) {\n        if (prevProps.instantView.url !== instantView.url) {\n          if (instantView.url.indexOf('#') === instantView.url.length - 1) {\n            console.log('[IV] componentDidUpdate scrollTop auto');\n            this.scrollTop('auto');\n          } else if (hash) {\n            console.log('[IV] componentDidUpdate scrollToHash', hash);\n            this.scrollToHash(hash, 'auto');\n          } else {\n            console.log('[IV] componentDidUpdate scrollTop auto');\n            this.scrollTop('auto');\n          }\n        } else {\n          if (hash) {\n            console.log('[IV] componentDidUpdate scrollToHash', hash);\n            this.scrollToHash(hash, 'auto');\n          } else {\n            console.log('[IV] componentDidUpdate scrollTop smooth');\n            this.scrollTop('smooth');\n          }\n        }\n\n        this.handleScroll();\n      }\n    }\n  }, {\n    key: \"handleClose\",\n    value: function handleClose() {\n      setInstantViewContent(null);\n    }\n  }, {\n    key: \"updateItemsInView\",\n    value: function updateItemsInView() {\n      if (!this.mounted) return;\n      var instantView = this.props.instantView;\n      if (!instantView) return;\n      var page_blocks = instantView.page_blocks;\n      var blocks = new Map();\n      var items = itemsInView(this.instantViewerRef, this.articleRef);\n\n      for (var i = 0; i < items.length; i++) {\n        var block = page_blocks[items[i]];\n        blocks.set(block, block);\n        var innerBlocks = getInnerBlocks(block);\n        innerBlocks.forEach(function (x) {\n          return blocks.set(x, x);\n        });\n      }\n\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateBlocksInView',\n        blocks: blocks\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          classes = _this$props2.classes,\n          instantView = _this$props2.instantView;\n      var _this$state3 = this.state,\n          hasPrev = _this$state3.hasPrev,\n          hasScroll = _this$state3.hasScroll,\n          media = _this$state3.media,\n          caption = _this$state3.caption,\n          url = _this$state3.url;\n      if (!instantView) return null;\n      return React.createElement(IVContext.Provider, {\n        value: instantView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        ref: this.instantViewerRef,\n        className: \"instant-viewer\",\n        onScroll: this.handleScroll,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"instant-viewer-left-column\",\n        onClick: this.handleBack,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      }, React.createElement(MediaViewerButton, {\n        className: \"instant-viewer-left-button\",\n        style: {\n          alignItems: 'flex-start'\n        },\n        onClick: this.handleBack,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      }, React.createElement(NavigateBeforeIcon, {\n        style: {\n          transition: 'transform 0.25s ease-out',\n          transform: hasScroll ? 'rotate(90deg)' : 'rotate(0deg)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"instant-viewer-content-column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      }, React.createElement(Article, {\n        ref: this.articleRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"instant-viewer-right-column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }, React.createElement(MediaViewerButton, {\n        className: \"instant-viewer-right-button\",\n        onClick: this.handleClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, React.createElement(CloseIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317\n        },\n        __self: this\n      })))), media && React.createElement(InstantViewMediaViewer, {\n        media: media,\n        size: IV_PHOTO_SIZE,\n        caption: caption,\n        url: url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.instantView !== state.prevInstantView) {\n        return {\n          prevInstantView: props.instantView,\n          hasPrev: InstantViewStore.hasPrev(),\n          hasScroll: false,\n          media: null,\n          caption: null,\n          url: null\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return InstantViewer;\n}(React.Component);\n\nInstantViewer.propTypes = {\n  instantView: PropTypes.object.isRequired\n};\nexport default withTranslation()(InstantViewer);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/InstantView/InstantViewer.js"],"names":["React","PropTypes","withTranslation","KeyboardManager","KeyboardHandler","CloseIcon","Article","InstantViewMediaViewer","IVContext","MediaViewerButton","NavigateBeforeIcon","itemsInView","throttle","getInnerBlocks","openInstantView","setInstantViewContent","setInstantViewViewerContent","scrollTop","IV_PHOTO_SIZE","InstantViewStore","TdLibController","InstantViewer","props","onClientUpdateInstantViewViewerContent","update","content","setState","media","caption","url","instantView","onClientUpdateInstantViewUrl","console","log","active","getCurrent","startsWith","hash","URL","indexOf","length","scrollToHash","onKeyDown","event","keyCode","state","handleClose","handleBack","hasPrev","hasScroll","clientUpdate","handleScroll","element","instantViewerRef","current","updateItemsInView","keyboardHandler","articleRef","createRef","nextProps","nextState","nextContext","mounted","add","on","remove","off","behavior","hiddenElement","document","getElementById","substr","details","finished","currentElement","parentNode","nodeName","push","forEach","x","open","scrollIntoView","block","scrollTo","top","prevProps","prevState","snapshot","page_blocks","blocks","Map","items","i","set","innerBlocks","classes","alignItems","transition","transform","prevInstantView","Component","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport KeyboardManager, { KeyboardHandler } from '../Additional/KeyboardManager';\nimport CloseIcon from '../../Assets/Icons/Close';\nimport Article from './Article';\nimport InstantViewMediaViewer from '../Viewer/InstantViewMediaViewer';\nimport IVContext from './IVContext';\nimport MediaViewerButton from '../Viewer/MediaViewerButton';\nimport NavigateBeforeIcon from '../../Assets/Icons/Left';\nimport { itemsInView, throttle } from '../../Utils/Common';\nimport { getInnerBlocks } from '../../Utils/InstantView';\nimport { openInstantView } from '../../Actions/InstantView';\nimport { setInstantViewContent, setInstantViewViewerContent } from '../../Actions/Client';\nimport { scrollTop } from '../../Utils/DOM';\nimport { IV_PHOTO_SIZE } from '../../Constants';\nimport InstantViewStore from '../../Stores/InstantViewStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './InstantViewer.css';\n\nclass InstantViewer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.keyboardHandler = new KeyboardHandler(this.onKeyDown);\n        this.articleRef = React.createRef();\n        this.instantViewerRef = React.createRef();\n\n        this.state = {};\n\n        this.updateItemsInView = throttle(this.updateItemsInView, 500);\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.instantView !== state.prevInstantView) {\n            return {\n                prevInstantView: props.instantView,\n                hasPrev: InstantViewStore.hasPrev(),\n                hasScroll: false,\n                media: null,\n                caption: null,\n                url: null\n            };\n        }\n\n        return null;\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { instantView } = this.props;\n        const { hasScroll, hasPrev, media, caption, url } = this.state;\n\n        if (instantView !== nextProps.instantView) {\n            return true;\n        }\n\n        if (hasScroll !== nextState.hasScroll) {\n            return true;\n        }\n\n        if (hasPrev !== nextState.hasPrev) {\n            return true;\n        }\n\n        if (media !== nextState.media) {\n            return true;\n        }\n\n        if (caption !== nextState.caption) {\n            return true;\n        }\n\n        if (url !== nextState.url) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n        this.handleScroll();\n\n        KeyboardManager.add(this.keyboardHandler);\n        InstantViewStore.on('clientUpdateInstantViewUrl', this.onClientUpdateInstantViewUrl);\n        InstantViewStore.on('clientUpdateInstantViewViewerContent', this.onClientUpdateInstantViewViewerContent);\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n        KeyboardManager.remove(this.keyboardHandler);\n        InstantViewStore.off('clientUpdateInstantViewUrl', this.onClientUpdateInstantViewUrl);\n        InstantViewStore.off('clientUpdateInstantViewViewerContent', this.onClientUpdateInstantViewViewerContent);\n    }\n\n    onClientUpdateInstantViewViewerContent = update => {\n        const { content } = update;\n        if (!content) {\n            this.setState({ media: null, caption: null, url: null });\n            return;\n        }\n\n        const { media, caption, url, instantView } = content;\n\n        if (this.props.instantView !== instantView) return;\n\n        this.setState({ media, caption, url });\n    };\n\n    onClientUpdateInstantViewUrl = async update => {\n        console.log('[IV] clientUpdateInstantViewUrl', update);\n        const { url } = update;\n        const active = InstantViewStore.getCurrent();\n        const { instantView } = this.props;\n\n        if (active !== instantView) return;\n\n        if (instantView && url.startsWith(instantView.url)) {\n            const hash = new URL(url).hash;\n            if (url.indexOf('#') === url.length - 1) {\n                this.scrollTop('smooth');\n\n                return;\n            } else if (hash && this.scrollToHash(hash, 'smooth')) {\n                return;\n            }\n        }\n\n        openInstantView(url);\n    };\n\n    scrollToHash(hash, behavior) {\n        if (!hash) return false;\n\n        const hiddenElement = document.getElementById(hash.substr(1));\n        if (hiddenElement) {\n            const details = [];\n            let finished = false;\n            let currentElement = hiddenElement;\n            do {\n                currentElement = currentElement.parentNode;\n                if (currentElement) {\n                    if (currentElement.nodeName === 'DETAILS') {\n                        details.push(currentElement);\n                    } else if (currentElement.nodeName === 'ARTICLE') {\n                        finished = true;\n                    }\n                } else {\n                    finished = true;\n                }\n            } while (!finished);\n\n            details.forEach(x => (x.open = true));\n\n            hiddenElement.scrollIntoView({\n                block: 'center',\n                behavior\n            });\n\n            return true;\n        }\n\n        return false;\n    }\n\n    scrollTop(behavior) {\n        const element = this.instantViewerRef.current;\n\n        switch (behavior) {\n            case 'smooth': {\n                scrollTop(element);\n                break;\n            }\n            default: {\n                element.scrollTo({\n                    top: 0,\n                    behavior\n                });\n            }\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const { instantView, url } = this.props;\n        console.log('[IV] componentDidUpdate', instantView.url, instantView.url === prevProps.instantView.url);\n\n        const hash = new URL(instantView.url).hash;\n        if (prevProps.instantView !== instantView) {\n            if (prevProps.instantView.url !== instantView.url) {\n                if (instantView.url.indexOf('#') === instantView.url.length - 1) {\n                    console.log('[IV] componentDidUpdate scrollTop auto');\n                    this.scrollTop('auto');\n                } else if (hash) {\n                    console.log('[IV] componentDidUpdate scrollToHash', hash);\n                    this.scrollToHash(hash, 'auto');\n                } else {\n                    console.log('[IV] componentDidUpdate scrollTop auto');\n                    this.scrollTop('auto');\n                }\n            } else {\n                if (hash) {\n                    console.log('[IV] componentDidUpdate scrollToHash', hash);\n                    this.scrollToHash(hash, 'auto');\n                } else {\n                    console.log('[IV] componentDidUpdate scrollTop smooth');\n                    this.scrollTop('smooth');\n                }\n            }\n\n            this.handleScroll();\n        }\n    }\n\n    onKeyDown = event => {\n        if (event.keyCode === 27) {\n            const { media } = this.state;\n\n            if (media) {\n                setInstantViewViewerContent(null);\n                return;\n            }\n\n            this.handleClose();\n        }\n    };\n\n    handleClose() {\n        setInstantViewContent(null);\n    }\n\n    handleBack = () => {\n        const { hasPrev, hasScroll } = this.state;\n        if (hasScroll) {\n            this.scrollTop('smooth');\n            return;\n        }\n\n        if (hasPrev) {\n            TdLibController.clientUpdate({\n                '@type': 'clientUpdatePrevInstantView'\n            });\n            return;\n        }\n\n        this.handleClose();\n    };\n\n    handleScroll = () => {\n        const element = this.instantViewerRef.current;\n        this.setState({\n            hasScroll: element.scrollTop > 50\n        });\n\n        this.updateItemsInView();\n    };\n\n    updateItemsInView() {\n        if (!this.mounted) return;\n\n        const { instantView } = this.props;\n        if (!instantView) return;\n\n        const { page_blocks } = instantView;\n\n        const blocks = new Map();\n        const items = itemsInView(this.instantViewerRef, this.articleRef);\n\n        for (let i = 0; i < items.length; i++) {\n            const block = page_blocks[items[i]];\n            blocks.set(block, block);\n\n            const innerBlocks = getInnerBlocks(block);\n            innerBlocks.forEach(x => blocks.set(x, x));\n        }\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateBlocksInView',\n            blocks\n        });\n    }\n\n    render() {\n        const { classes, instantView } = this.props;\n        const { hasPrev, hasScroll, media, caption, url } = this.state;\n        if (!instantView) return null;\n\n        return (\n            <IVContext.Provider value={instantView}>\n                <div ref={this.instantViewerRef} className='instant-viewer' onScroll={this.handleScroll}>\n                    <div className='instant-viewer-left-column' onClick={this.handleBack}>\n                        <MediaViewerButton\n                            className='instant-viewer-left-button'\n                            style={{ alignItems: 'flex-start' }}\n                            onClick={this.handleBack}>\n                            <NavigateBeforeIcon\n                                style={{\n                                    transition: 'transform 0.25s ease-out',\n                                    transform: hasScroll ? 'rotate(90deg)' : 'rotate(0deg)'\n                                }}\n                            />\n                        </MediaViewerButton>\n                    </div>\n                    <div className='instant-viewer-content-column'>\n                        <div>\n                            <Article ref={this.articleRef} />\n                        </div>\n                    </div>\n                    <div className='instant-viewer-right-column'>\n                        <MediaViewerButton className='instant-viewer-right-button' onClick={this.handleClose}>\n                            <CloseIcon />\n                        </MediaViewerButton>\n                    </div>\n                </div>\n                {media && <InstantViewMediaViewer media={media} size={IV_PHOTO_SIZE} caption={caption} url={url} />}\n            </IVContext.Provider>\n        );\n    }\n}\n\nInstantViewer.propTypes = {\n    instantView: PropTypes.object.isRequired\n};\n\nexport default withTranslation()(InstantViewer);\n"]},"metadata":{},"sourceType":"module"}