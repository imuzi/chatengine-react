{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Popup/ForwardDialog.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from '../../Utils/HOC';\nimport { withTranslation } from 'react-i18next';\nimport { withSnackbar } from 'notistack';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CloseIcon from '../../Assets/Icons/Close';\nimport ForwardTargetChat from '../Tile/ForwardTargetChat';\nimport { copy } from '../../Utils/Text';\nimport { canSendMessages, getChatTitle, getChatUsername, isSupergroup } from '../../Utils/Chat';\nimport { loadChatsContent } from '../../Utils/File';\nimport { getCyrillicInput, getLatinInput } from '../../Utils/Language';\nimport { clearSelection, forward } from '../../Actions/Client';\nimport { NOTIFICATION_AUTO_HIDE_DURATION_MS } from '../../Constants';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport FileStore from '../../Stores/FileStore';\nimport MessageStore from '../../Stores/MessageStore';\nimport UserStore from '../../Stores/UserStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './ForwardDialog.css';\n\nvar ForwardDialog =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ForwardDialog, _React$Component);\n\n  function ForwardDialog(props) {\n    var _this;\n\n    _classCallCheck(this, ForwardDialog);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ForwardDialog).call(this, props));\n    _this.loadContent =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var promises, getChatsPromise, savedMessagesPromise, _ref2, _ref3, chats, savedMessages, store;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.getPublicMessageLink();\n\n              promises = [];\n              getChatsPromise = TdLibController.send({\n                '@type': 'getChats',\n                offset_order: '9223372036854775807',\n                offset_chat_id: 0,\n                limit: 100\n              });\n              promises.push(getChatsPromise);\n              savedMessagesPromise = TdLibController.send({\n                '@type': 'createPrivateChat',\n                user_id: UserStore.getMyId(),\n                force: true\n              });\n              promises.push(savedMessagesPromise);\n              _context.next = 8;\n              return Promise.all(promises.map(function (x) {\n                return x.catch(function (e) {\n                  return null;\n                });\n              }));\n\n            case 8:\n              _ref2 = _context.sent;\n              _ref3 = _slicedToArray(_ref2, 2);\n              chats = _ref3[0];\n              savedMessages = _ref3[1];\n\n              _this.setState({\n                chatIds: chats.chat_ids,\n                savedMessages: savedMessages\n              });\n\n              store = FileStore.getStore();\n              loadChatsContent(store, chats.chat_ids);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    _this.getPublicMessageLink =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var _this$props, chatId, messageIds, result;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _this$props = _this.props, chatId = _this$props.chatId, messageIds = _this$props.messageIds;\n\n              if (chatId) {\n                _context2.next = 3;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              if (messageIds) {\n                _context2.next = 5;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 5:\n              if (!(messageIds.length > 1)) {\n                _context2.next = 7;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 7:\n              if (isSupergroup(chatId)) {\n                _context2.next = 9;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 9:\n              if (getChatUsername(chatId)) {\n                _context2.next = 11;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 11:\n              _context2.next = 13;\n              return TdLibController.send({\n                '@type': 'getPublicMessageLink',\n                chat_id: chatId,\n                message_id: messageIds[0],\n                for_album: false\n              });\n\n            case 13:\n              result = _context2.sent;\n\n              _this.setState({\n                publicMessageLink: result\n              });\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    _this.handleClose = function () {\n      forward(null);\n    };\n\n    _this.handleCopyLink = function () {\n      var t = _this.props.t;\n      var publicMessageLink = _this.state.publicMessageLink;\n      if (!publicMessageLink) return;\n      if (!publicMessageLink.link) return;\n      var key = \"copy_link_\".concat(publicMessageLink.link);\n      var message = t('LinkCopied');\n      var action = null;\n      copy(publicMessageLink.link);\n\n      _this.handleScheduledAction(key, message, action);\n    };\n\n    _this.handleScheduledAction = function (key, message, action) {\n      if (!key) return;\n      var enqueueSnackbar = _this.props.enqueueSnackbar;\n      if (!enqueueSnackbar) return;\n      var TRANSITION_DELAY = 150;\n\n      if (ApplicationStore.addScheduledAction(key, NOTIFICATION_AUTO_HIDE_DURATION_MS + 2 * TRANSITION_DELAY, action)) {\n        enqueueSnackbar(message, {\n          autoHideDuration: NOTIFICATION_AUTO_HIDE_DURATION_MS,\n          action: [React.createElement(IconButton, {\n            key: \"close\",\n            \"aria-label\": \"Close\",\n            color: \"inherit\",\n            className: \"notification-close-button\",\n            onClick: function onClick() {\n              return ApplicationStore.removeScheduledAction(key);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137\n            },\n            __self: this\n          }, React.createElement(CloseIcon, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 143\n            },\n            __self: this\n          }))]\n        });\n      }\n    };\n\n    _this.getForwardPhotoSize = function (chatId, messageIds) {\n      if (messageIds.length !== 1) return null;\n      var message = MessageStore.get(chatId, messageIds[0]);\n      if (!message) return null;\n      var can_be_forwarded = message.can_be_forwarded,\n          content = message.content;\n\n      if (!can_be_forwarded && content['@type'] === 'messageChatChangePhoto') {\n        var photo = content.photo;\n        if (!photo) return null;\n        var sizes = photo.sizes;\n\n        if (sizes && sizes.length) {\n          return sizes[sizes.length - 1];\n        }\n      }\n\n      return null;\n    };\n\n    _this.handleSend = function () {\n      _this.handleClose();\n\n      clearSelection();\n      var _this$props2 = _this.props,\n          chatId = _this$props2.chatId,\n          messageIds = _this$props2.messageIds,\n          inputMessageContent = _this$props2.inputMessageContent;\n      if (!chatId && !messageIds && !inputMessageContent) return;\n\n      var text = _this.getInnerText(_this.messageRef.current);\n\n      _this.targetChats.forEach(function (targetChatId) {\n        if (inputMessageContent) {\n          if (text) {\n            if ('caption' in inputMessageContent) {\n              inputMessageContent.caption = {\n                '@type': 'formattedText',\n                text: text,\n                entities: null\n              };\n            } else {\n              TdLibController.send({\n                '@type': 'sendMessage',\n                chat_id: targetChatId,\n                reply_to_message_id: 0,\n                disable_notifications: false,\n                from_background: false,\n                reply_markup: null,\n                input_message_content: {\n                  '@type': 'inputMessageText',\n                  text: {\n                    '@type': 'formattedText',\n                    text: text,\n                    entities: null\n                  },\n                  disable_web_page_preview: false,\n                  clear_draft: false\n                }\n              });\n            }\n          }\n\n          TdLibController.send({\n            '@type': 'sendMessage',\n            chat_id: targetChatId,\n            reply_to_message_id: 0,\n            disable_notifications: false,\n            from_background: false,\n            reply_markup: null,\n            input_message_content: inputMessageContent\n          });\n          return;\n        }\n\n        var size = _this.getForwardPhotoSize(chatId, messageIds);\n\n        if (size) {\n          var width = size.width,\n              height = size.height,\n              photo = size.photo;\n          TdLibController.send({\n            '@type': 'sendMessage',\n            chat_id: targetChatId,\n            reply_to_message_id: 0,\n            disable_notifications: false,\n            from_background: false,\n            reply_markup: null,\n            input_message_content: {\n              '@type': 'inputMessagePhoto',\n              photo: {\n                '@type': 'inputFileId',\n                id: photo.id\n              },\n              thumbnail: null,\n              added_sticker_file_ids: [],\n              width: width,\n              height: height,\n              caption: {\n                '@type': 'formattedText',\n                text: text,\n                entities: null\n              },\n              ttl: 0\n            }\n          });\n          return;\n        }\n\n        if (text) {\n          TdLibController.send({\n            '@type': 'sendMessage',\n            chat_id: targetChatId,\n            reply_to_message_id: 0,\n            disable_notifications: false,\n            from_background: false,\n            reply_markup: null,\n            input_message_content: {\n              '@type': 'inputMessageText',\n              text: {\n                '@type': 'formattedText',\n                text: text,\n                entities: null\n              },\n              disable_web_page_preview: false,\n              clear_draft: false\n            }\n          });\n        }\n\n        TdLibController.send({\n          '@type': 'forwardMessages',\n          chat_id: targetChatId,\n          from_chat_id: chatId,\n          message_ids: messageIds,\n          disable_notifications: false,\n          from_background: false,\n          as_album: false\n        });\n      });\n    };\n\n    _this.handleChangeSelection = function (chatId) {\n      if (_this.targetChats.has(chatId)) {\n        _this.targetChats.delete(chatId);\n      } else {\n        _this.targetChats.set(chatId, chatId);\n      } // console.log(this.targetChats);\n\n\n      _this.forceUpdate();\n    };\n\n    _this.getInnerText = function (element) {\n      var innerHTML = element.innerHTML;\n\n      if (innerHTML === '<br>' || innerHTML === '<div><br></div>') {\n        element.innerHTML = null;\n      }\n\n      var innerText = element.innerText;\n      return innerText;\n    };\n\n    _this.handleSearchKeyDown = function (event) {\n      if (event.keyCode === 13) {\n        event.preventDefault();\n      }\n    };\n\n    _this.handleSearchKeyUp =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var _this$state, chatIds, savedMessages, element, innerHTML, innerText, latinText, cyrillicText, chatsSource, searchResults, result;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _this$state = _this.state, chatIds = _this$state.chatIds, savedMessages = _this$state.savedMessages;\n              element = _this.searchRef.current;\n\n              if (element) {\n                _context3.next = 4;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 4:\n              innerHTML = element.innerHTML;\n\n              if (innerHTML === '<br>' || innerHTML === '<div><br></div>') {\n                element.innerHTML = null;\n              }\n\n              innerText = _this.getInnerText(element).trim();\n\n              if (innerText) {\n                _context3.next = 10;\n                break;\n              }\n\n              _this.setState({\n                searchText: null,\n                searchResults: [],\n                globalSearchResults: []\n              });\n\n              return _context3.abrupt(\"return\");\n\n            case 10:\n              latinText = getLatinInput(innerText);\n              cyrillicText = getCyrillicInput(innerText);\n              chatsSource = savedMessages ? [savedMessages.id].concat(chatIds.filter(function (x) {\n                return x !== savedMessages.id && canSendMessages(x);\n              })) : chatIds;\n              searchResults = chatsSource.filter(function (x) {\n                return _this.hasSearchText(x, innerText) || latinText && _this.hasSearchText(x, latinText) || cyrillicText && _this.hasSearchText(x, cyrillicText);\n              });\n\n              _this.setState({\n                searchText: innerText,\n                searchResults: searchResults\n              });\n\n              _context3.next = 17;\n              return TdLibController.send({\n                '@type': 'searchChatsOnServer',\n                query: innerText,\n                limit: 100\n              });\n\n            case 17:\n              result = _context3.sent;\n\n              if (!(_this.state.searchText !== innerText)) {\n                _context3.next = 20;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 20:\n              _this.setState({\n                globalSearchResults: result.chat_ids\n              });\n\n            case 21:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    _this.handleSearchPaste = function (event) {\n      var plainText = event.clipboardData.getData('text/plain');\n\n      if (plainText) {\n        event.preventDefault();\n        document.execCommand('insertText', false, plainText);\n      }\n    };\n\n    _this.handleMessageKeyUp = function () {\n      var element = _this.messageRef.current;\n      if (!element) return;\n      var innerHTML = element.innerHTML;\n\n      if (innerHTML === '<br>' || innerHTML === '<div><br></div>') {\n        element.innerHTML = null;\n      }\n    };\n\n    _this.handleMessagePaste = function (event) {\n      var plainText = event.clipboardData.getData('text/plain');\n\n      if (plainText) {\n        event.preventDefault();\n        document.execCommand('insertText', false, plainText);\n      }\n    };\n\n    _this.hasSearchText = function (chatId, searchText) {\n      var t = _this.props.t;\n      var savedMessages = _this.state.savedMessages;\n\n      if (savedMessages && chatId === savedMessages.id) {\n        var title = getChatTitle(chatId, true, t) || '';\n\n        if (title.toLocaleLowerCase().indexOf(searchText.toLowerCase()) !== -1) {\n          return true;\n        }\n      }\n\n      var title1 = getChatTitle(chatId, false, t) || '';\n\n      if (title1.toLocaleLowerCase().indexOf(searchText.toLowerCase()) !== -1) {\n        return true;\n      }\n\n      var username = getChatUsername(chatId) || '';\n\n      if (username.toLocaleLowerCase().indexOf(searchText.toLowerCase()) !== -1) {\n        return true;\n      }\n\n      return false;\n    };\n\n    _this.setSearchFocus = function () {\n      setTimeout(function () {\n        if (_this.searchRef.current) {\n          var element = _this.searchRef.current;\n          element.focus();\n        }\n      }, 100);\n    };\n\n    _this.state = {\n      chatIds: [],\n      savedMessages: null\n    };\n    _this.searchRef = React.createRef();\n    _this.messageRef = React.createRef();\n    _this.targetChats = new Map();\n    return _this;\n  }\n\n  _createClass(ForwardDialog, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadContent();\n      this.setSearchFocus();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var t = this.props.t;\n      var _this$state2 = this.state,\n          chatIds = _this$state2.chatIds,\n          searchText = _this$state2.searchText,\n          searchResults = _this$state2.searchResults,\n          globalSearchResults = _this$state2.globalSearchResults,\n          savedMessages = _this$state2.savedMessages,\n          publicMessageLink = _this$state2.publicMessageLink;\n      var chatsSource = savedMessages ? [savedMessages.id].concat(chatIds.filter(function (x) {\n        return x !== savedMessages.id && canSendMessages(x);\n      })) : chatIds;\n      var chats = chatsSource.map(function (x) {\n        return React.createElement(ForwardTargetChat, {\n          key: x,\n          chatId: x,\n          selected: _this2.targetChats.has(x),\n          onSelect: function onSelect() {\n            return _this2.handleChangeSelection(x);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 441\n          },\n          __self: this\n        });\n      });\n      var searchResultsMap = new Map((searchResults || []).map(function (x) {\n        return [x, x];\n      }));\n      var filteredResults = (globalSearchResults || []).filter(function (x) {\n        return x !== savedMessages.id && canSendMessages(x) && !searchResultsMap.has(x);\n      });\n      var foundChats = (searchResults || []).concat(filteredResults).map(function (x) {\n        return React.createElement(ForwardTargetChat, {\n          key: x,\n          chatId: x,\n          selected: _this2.targetChats.has(x),\n          onSelect: function onSelect() {\n            return _this2.handleChangeSelection(x);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 457\n          },\n          __self: this\n        });\n      });\n      return React.createElement(Dialog, {\n        open: true,\n        onClose: this.handleClose,\n        \"aria-labelledby\": \"forward-dialog-title\",\n        \"aria-describedby\": \"forward-dialog-description\",\n        className: \"forward-dialog\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 466\n        },\n        __self: this\n      }, React.createElement(DialogTitle, {\n        id: \"forward-dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 472\n        },\n        __self: this\n      }, t('ShareSendTo')), React.createElement(\"div\", {\n        ref: this.searchRef,\n        id: \"forward-dialog-search\",\n        contentEditable: true,\n        suppressContentEditableWarning: true,\n        placeholder: t('Search'),\n        onKeyDown: this.handleSearchKeyDown,\n        onKeyUp: this.handleSearchKeyUp,\n        onPaste: this.handleSearchPaste,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 473\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"forward-dialog-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 483\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"forward-dialog-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 484\n        },\n        __self: this\n      }, chats), searchText && React.createElement(\"div\", {\n        className: \"forward-dialog-search-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 485\n        },\n        __self: this\n      }, foundChats)), this.targetChats.size > 0 && React.createElement(\"div\", {\n        ref: this.messageRef,\n        id: \"forward-dialog-message\",\n        contentEditable: true,\n        suppressContentEditableWarning: true,\n        placeholder: t('ShareComment'),\n        onKeyUp: this.handleMessageKeyUp,\n        onPaste: this.handleMessagePaste,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 488\n        },\n        __self: this\n      }), React.createElement(DialogActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.handleClose,\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 499\n        },\n        __self: this\n      }, t('Cancel')), this.targetChats.size > 0 && React.createElement(Button, {\n        onClick: this.handleSend,\n        color: \"primary\",\n        autoFocus: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503\n        },\n        __self: this\n      }, t('Send')), !this.targetChats.size && publicMessageLink && React.createElement(Button, {\n        onClick: this.handleCopyLink,\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 508\n        },\n        __self: this\n      }, t('CopyLink'))));\n    }\n  }]);\n\n  return ForwardDialog;\n}(React.Component);\n\nForwardDialog.propTypes = {\n  chatId: PropTypes.number,\n  messageIds: PropTypes.array,\n  inputMessageContent: PropTypes.object\n};\nvar enhance = compose(withTranslation(), withSnackbar);\nexport default enhance(ForwardDialog);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Popup/ForwardDialog.js"],"names":["React","PropTypes","compose","withTranslation","withSnackbar","Button","IconButton","Dialog","DialogActions","DialogTitle","CloseIcon","ForwardTargetChat","copy","canSendMessages","getChatTitle","getChatUsername","isSupergroup","loadChatsContent","getCyrillicInput","getLatinInput","clearSelection","forward","NOTIFICATION_AUTO_HIDE_DURATION_MS","ApplicationStore","FileStore","MessageStore","UserStore","TdLibController","ForwardDialog","props","loadContent","getPublicMessageLink","promises","getChatsPromise","send","offset_order","offset_chat_id","limit","push","savedMessagesPromise","user_id","getMyId","force","Promise","all","map","x","catch","e","chats","savedMessages","setState","chatIds","chat_ids","store","getStore","chatId","messageIds","length","chat_id","message_id","for_album","result","publicMessageLink","handleClose","handleCopyLink","t","state","link","key","message","action","handleScheduledAction","enqueueSnackbar","TRANSITION_DELAY","addScheduledAction","autoHideDuration","removeScheduledAction","getForwardPhotoSize","get","can_be_forwarded","content","photo","sizes","handleSend","inputMessageContent","text","getInnerText","messageRef","current","targetChats","forEach","targetChatId","caption","entities","reply_to_message_id","disable_notifications","from_background","reply_markup","input_message_content","disable_web_page_preview","clear_draft","size","width","height","id","thumbnail","added_sticker_file_ids","ttl","from_chat_id","message_ids","as_album","handleChangeSelection","has","delete","set","forceUpdate","element","innerHTML","innerText","handleSearchKeyDown","event","keyCode","preventDefault","handleSearchKeyUp","searchRef","trim","searchText","searchResults","globalSearchResults","latinText","cyrillicText","chatsSource","concat","filter","hasSearchText","query","handleSearchPaste","plainText","clipboardData","getData","document","execCommand","handleMessageKeyUp","handleMessagePaste","title","toLocaleLowerCase","indexOf","toLowerCase","title1","username","setSearchFocus","setTimeout","focus","createRef","Map","searchResultsMap","filteredResults","foundChats","Component","propTypes","number","array","object","enhance"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from '../../Utils/HOC';\nimport { withTranslation } from 'react-i18next';\nimport { withSnackbar } from 'notistack';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CloseIcon from '../../Assets/Icons/Close';\nimport ForwardTargetChat from '../Tile/ForwardTargetChat';\nimport { copy } from '../../Utils/Text';\nimport { canSendMessages, getChatTitle, getChatUsername, isSupergroup } from '../../Utils/Chat';\nimport { loadChatsContent } from '../../Utils/File';\nimport { getCyrillicInput, getLatinInput } from '../../Utils/Language';\nimport { clearSelection, forward } from '../../Actions/Client';\nimport { NOTIFICATION_AUTO_HIDE_DURATION_MS } from '../../Constants';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport FileStore from '../../Stores/FileStore';\nimport MessageStore from '../../Stores/MessageStore';\nimport UserStore from '../../Stores/UserStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './ForwardDialog.css';\n\nclass ForwardDialog extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            chatIds: [],\n            savedMessages: null\n        };\n\n        this.searchRef = React.createRef();\n        this.messageRef = React.createRef();\n\n        this.targetChats = new Map();\n    }\n\n    componentDidMount() {\n        this.loadContent();\n\n        this.setSearchFocus();\n    }\n\n    loadContent = async () => {\n        this.getPublicMessageLink();\n\n        const promises = [];\n        const getChatsPromise = TdLibController.send({\n            '@type': 'getChats',\n            offset_order: '9223372036854775807',\n            offset_chat_id: 0,\n            limit: 100\n        });\n        promises.push(getChatsPromise);\n\n        const savedMessagesPromise = TdLibController.send({\n            '@type': 'createPrivateChat',\n            user_id: UserStore.getMyId(),\n            force: true\n        });\n        promises.push(savedMessagesPromise);\n\n        const [chats, savedMessages] = await Promise.all(promises.map(x => x.catch(e => null)));\n\n        this.setState({\n            chatIds: chats.chat_ids,\n            savedMessages: savedMessages\n        });\n\n        const store = FileStore.getStore();\n        loadChatsContent(store, chats.chat_ids);\n    };\n\n    getPublicMessageLink = async () => {\n        const { chatId, messageIds } = this.props;\n        if (!chatId) return;\n        if (!messageIds) return;\n        if (messageIds.length > 1) return;\n        if (!isSupergroup(chatId)) return;\n        if (!getChatUsername(chatId)) return;\n\n        const result = await TdLibController.send({\n            '@type': 'getPublicMessageLink',\n            chat_id: chatId,\n            message_id: messageIds[0],\n            for_album: false\n        });\n\n        this.setState({\n            publicMessageLink: result\n        });\n    };\n\n    handleClose = () => {\n        forward(null);\n    };\n\n    handleCopyLink = () => {\n        const { t } = this.props;\n        const { publicMessageLink } = this.state;\n\n        if (!publicMessageLink) return;\n        if (!publicMessageLink.link) return;\n\n        const key = `copy_link_${publicMessageLink.link}`;\n        const message = t('LinkCopied');\n        const action = null;\n\n        copy(publicMessageLink.link);\n\n        this.handleScheduledAction(key, message, action);\n    };\n\n    handleScheduledAction = (key, message, action) => {\n        if (!key) return;\n\n        const { enqueueSnackbar } = this.props;\n        if (!enqueueSnackbar) return;\n\n        const TRANSITION_DELAY = 150;\n        if (\n            ApplicationStore.addScheduledAction(key, NOTIFICATION_AUTO_HIDE_DURATION_MS + 2 * TRANSITION_DELAY, action)\n        ) {\n            enqueueSnackbar(message, {\n                autoHideDuration: NOTIFICATION_AUTO_HIDE_DURATION_MS,\n                action: [\n                    <IconButton\n                        key='close'\n                        aria-label='Close'\n                        color='inherit'\n                        className='notification-close-button'\n                        onClick={() => ApplicationStore.removeScheduledAction(key)}>\n                        <CloseIcon />\n                    </IconButton>\n                ]\n            });\n        }\n    };\n\n    getForwardPhotoSize = (chatId, messageIds) => {\n        if (messageIds.length !== 1) return null;\n\n        const message = MessageStore.get(chatId, messageIds[0]);\n        if (!message) return null;\n\n        const { can_be_forwarded, content } = message;\n        if (!can_be_forwarded && content['@type'] === 'messageChatChangePhoto') {\n            const { photo } = content;\n            if (!photo) return null;\n\n            const { sizes } = photo;\n            if (sizes && sizes.length) {\n                return sizes[sizes.length - 1];\n            }\n        }\n\n        return null;\n    };\n\n    handleSend = () => {\n        this.handleClose();\n        clearSelection();\n\n        const { chatId, messageIds, inputMessageContent } = this.props;\n        if (!chatId && !messageIds && !inputMessageContent) return;\n\n        const text = this.getInnerText(this.messageRef.current);\n\n        this.targetChats.forEach(targetChatId => {\n            if (inputMessageContent) {\n                if (text) {\n                    if ('caption' in inputMessageContent) {\n                        inputMessageContent.caption = {\n                            '@type': 'formattedText',\n                            text,\n                            entities: null\n                        };\n                    } else {\n                        TdLibController.send({\n                            '@type': 'sendMessage',\n                            chat_id: targetChatId,\n                            reply_to_message_id: 0,\n                            disable_notifications: false,\n                            from_background: false,\n                            reply_markup: null,\n                            input_message_content: {\n                                '@type': 'inputMessageText',\n                                text: {\n                                    '@type': 'formattedText',\n                                    text,\n                                    entities: null\n                                },\n                                disable_web_page_preview: false,\n                                clear_draft: false\n                            }\n                        });\n                    }\n                }\n\n                TdLibController.send({\n                    '@type': 'sendMessage',\n                    chat_id: targetChatId,\n                    reply_to_message_id: 0,\n                    disable_notifications: false,\n                    from_background: false,\n                    reply_markup: null,\n                    input_message_content: inputMessageContent\n                });\n\n                return;\n            }\n\n            const size = this.getForwardPhotoSize(chatId, messageIds);\n            if (size) {\n                const { width, height, photo } = size;\n\n                TdLibController.send({\n                    '@type': 'sendMessage',\n                    chat_id: targetChatId,\n                    reply_to_message_id: 0,\n                    disable_notifications: false,\n                    from_background: false,\n                    reply_markup: null,\n                    input_message_content: {\n                        '@type': 'inputMessagePhoto',\n                        photo: {\n                            '@type': 'inputFileId',\n                            id: photo.id\n                        },\n                        thumbnail: null,\n                        added_sticker_file_ids: [],\n                        width: width,\n                        height: height,\n                        caption: {\n                            '@type': 'formattedText',\n                            text,\n                            entities: null\n                        },\n                        ttl: 0\n                    }\n                });\n\n                return;\n            }\n\n            if (text) {\n                TdLibController.send({\n                    '@type': 'sendMessage',\n                    chat_id: targetChatId,\n                    reply_to_message_id: 0,\n                    disable_notifications: false,\n                    from_background: false,\n                    reply_markup: null,\n                    input_message_content: {\n                        '@type': 'inputMessageText',\n                        text: {\n                            '@type': 'formattedText',\n                            text,\n                            entities: null\n                        },\n                        disable_web_page_preview: false,\n                        clear_draft: false\n                    }\n                });\n            }\n\n            TdLibController.send({\n                '@type': 'forwardMessages',\n                chat_id: targetChatId,\n                from_chat_id: chatId,\n                message_ids: messageIds,\n                disable_notifications: false,\n                from_background: false,\n                as_album: false\n            });\n        });\n    };\n\n    handleChangeSelection = chatId => {\n        if (this.targetChats.has(chatId)) {\n            this.targetChats.delete(chatId);\n        } else {\n            this.targetChats.set(chatId, chatId);\n        }\n\n        // console.log(this.targetChats);\n\n        this.forceUpdate();\n    };\n\n    getInnerText = element => {\n        const { innerHTML } = element;\n        if (innerHTML === '<br>' || innerHTML === '<div><br></div>') {\n            element.innerHTML = null;\n        }\n        const { innerText } = element;\n\n        return innerText;\n    };\n\n    handleSearchKeyDown = event => {\n        if (event.keyCode === 13) {\n            event.preventDefault();\n        }\n    };\n\n    handleSearchKeyUp = async () => {\n        const { chatIds, savedMessages } = this.state;\n\n        const element = this.searchRef.current;\n        if (!element) return;\n\n        const { innerHTML } = element;\n        if (innerHTML === '<br>' || innerHTML === '<div><br></div>') {\n            element.innerHTML = null;\n        }\n\n        const innerText = this.getInnerText(element).trim();\n        if (!innerText) {\n            this.setState({ searchText: null, searchResults: [], globalSearchResults: [] });\n            return;\n        }\n\n        const latinText = getLatinInput(innerText);\n        const cyrillicText = getCyrillicInput(innerText);\n\n        const chatsSource = savedMessages\n            ? [savedMessages.id].concat(chatIds.filter(x => x !== savedMessages.id && canSendMessages(x)))\n            : chatIds;\n\n        const searchResults = chatsSource.filter(\n            x =>\n                this.hasSearchText(x, innerText) ||\n                (latinText && this.hasSearchText(x, latinText)) ||\n                (cyrillicText && this.hasSearchText(x, cyrillicText))\n        );\n\n        this.setState({ searchText: innerText, searchResults });\n\n        const result = await TdLibController.send({\n            '@type': 'searchChatsOnServer',\n            query: innerText,\n            limit: 100\n        });\n\n        if (this.state.searchText !== innerText) {\n            return;\n        }\n\n        this.setState({\n            globalSearchResults: result.chat_ids\n        });\n    };\n\n    handleSearchPaste = event => {\n        const plainText = event.clipboardData.getData('text/plain');\n        if (plainText) {\n            event.preventDefault();\n            document.execCommand('insertText', false, plainText);\n        }\n    };\n\n    handleMessageKeyUp = () => {\n        const element = this.messageRef.current;\n        if (!element) return;\n\n        const { innerHTML } = element;\n        if (innerHTML === '<br>' || innerHTML === '<div><br></div>') {\n            element.innerHTML = null;\n        }\n    };\n\n    handleMessagePaste = event => {\n        const plainText = event.clipboardData.getData('text/plain');\n        if (plainText) {\n            event.preventDefault();\n            document.execCommand('insertText', false, plainText);\n        }\n    };\n\n    hasSearchText = (chatId, searchText) => {\n        const { t } = this.props;\n        const { savedMessages } = this.state;\n\n        if (savedMessages && chatId === savedMessages.id) {\n            const title = getChatTitle(chatId, true, t) || '';\n            if (title.toLocaleLowerCase().indexOf(searchText.toLowerCase()) !== -1) {\n                return true;\n            }\n        }\n\n        const title1 = getChatTitle(chatId, false, t) || '';\n        if (title1.toLocaleLowerCase().indexOf(searchText.toLowerCase()) !== -1) {\n            return true;\n        }\n\n        const username = getChatUsername(chatId) || '';\n        if (username.toLocaleLowerCase().indexOf(searchText.toLowerCase()) !== -1) {\n            return true;\n        }\n\n        return false;\n    };\n\n    setSearchFocus = () => {\n        setTimeout(() => {\n            if (this.searchRef.current) {\n                const element = this.searchRef.current;\n\n                element.focus();\n            }\n        }, 100);\n    };\n\n    render() {\n        const { t } = this.props;\n        const {\n            chatIds,\n            searchText,\n            searchResults,\n            globalSearchResults,\n            savedMessages,\n            publicMessageLink\n        } = this.state;\n\n        const chatsSource = savedMessages\n            ? [savedMessages.id].concat(chatIds.filter(x => x !== savedMessages.id && canSendMessages(x)))\n            : chatIds;\n\n        const chats = chatsSource.map(x => (\n            <ForwardTargetChat\n                key={x}\n                chatId={x}\n                selected={this.targetChats.has(x)}\n                onSelect={() => this.handleChangeSelection(x)}\n            />\n        ));\n\n        const searchResultsMap = new Map((searchResults || []).map(x => [x, x]));\n        const filteredResults = (globalSearchResults || []).filter(\n            x => x !== savedMessages.id && canSendMessages(x) && !searchResultsMap.has(x)\n        );\n\n        const foundChats = (searchResults || [])\n            .concat(filteredResults)\n            .map(x => (\n                <ForwardTargetChat\n                    key={x}\n                    chatId={x}\n                    selected={this.targetChats.has(x)}\n                    onSelect={() => this.handleChangeSelection(x)}\n                />\n            ));\n\n        return (\n            <Dialog\n                open\n                onClose={this.handleClose}\n                aria-labelledby='forward-dialog-title'\n                aria-describedby='forward-dialog-description'\n                className='forward-dialog'>\n                <DialogTitle id='forward-dialog-title'>{t('ShareSendTo')}</DialogTitle>\n                <div\n                    ref={this.searchRef}\n                    id='forward-dialog-search'\n                    contentEditable\n                    suppressContentEditableWarning\n                    placeholder={t('Search')}\n                    onKeyDown={this.handleSearchKeyDown}\n                    onKeyUp={this.handleSearchKeyUp}\n                    onPaste={this.handleSearchPaste}\n                />\n                <div className='forward-dialog-content'>\n                    <div className='forward-dialog-list'>{chats}</div>\n                    {searchText && <div className='forward-dialog-search-list'>{foundChats}</div>}\n                </div>\n                {this.targetChats.size > 0 && (\n                    <div\n                        ref={this.messageRef}\n                        id='forward-dialog-message'\n                        contentEditable\n                        suppressContentEditableWarning\n                        placeholder={t('ShareComment')}\n                        onKeyUp={this.handleMessageKeyUp}\n                        onPaste={this.handleMessagePaste}\n                    />\n                )}\n                <DialogActions>\n                    <Button onClick={this.handleClose} color='primary'>\n                        {t('Cancel')}\n                    </Button>\n                    {this.targetChats.size > 0 && (\n                        <Button onClick={this.handleSend} color='primary' autoFocus>\n                            {t('Send')}\n                        </Button>\n                    )}\n                    {!this.targetChats.size && publicMessageLink && (\n                        <Button onClick={this.handleCopyLink} color='primary'>\n                            {t('CopyLink')}\n                        </Button>\n                    )}\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nForwardDialog.propTypes = {\n    chatId: PropTypes.number,\n    messageIds: PropTypes.array,\n    inputMessageContent: PropTypes.object\n};\n\nconst enhance = compose(\n    withTranslation(),\n    withSnackbar\n);\n\nexport default enhance(ForwardDialog);\n"]},"metadata":{},"sourceType":"module"}