{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport EventEmitter from './EventEmitter';\nimport { getSearchMessagesFilter, openMedia } from '../Utils/Message';\nimport { PLAYER_PLAYBACKRATE_NORMAL, PLAYER_VOLUME_NORMAL } from '../Constants';\nimport MessageStore from './MessageStore';\nimport TdLibController from '../Controllers/TdLibController';\nimport { getRandomInt } from '../Utils/Common';\nvar RepeatEnum = Object.freeze({\n  NONE: 'NONE',\n  REPEAT: 'REPEAT',\n  REPEAT_ONE: 'REPEAT_ONE'\n});\nexport { RepeatEnum };\n\nvar PlayerStore =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(PlayerStore, _EventEmitter);\n\n  function PlayerStore() {\n    var _this;\n\n    _classCallCheck(this, PlayerStore);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PlayerStore).call(this));\n\n    _this.reset = function () {\n      _this.playlist = null;\n      _this.message = null;\n      _this.time = null;\n      _this.videoStream = null;\n      _this.instantView = null;\n      _this.pageBlock = null;\n    };\n\n    _this.addTdLibListener = function () {\n      TdLibController.on('update', _this.onUpdate);\n      TdLibController.on('clientUpdate', _this.onClientUpdate);\n    };\n\n    _this.removeTdLibListener = function () {\n      TdLibController.off('update', _this.onUpdate);\n      TdLibController.off('clientUpdate', _this.onClientUpdate);\n    };\n\n    _this.onUpdate =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(update) {\n        var authorization_state;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.t0 = update['@type'];\n                _context.next = _context.t0 === 'updateAuthorizationState' ? 3 : 12;\n                break;\n\n              case 3:\n                authorization_state = update.authorization_state;\n\n                if (authorization_state) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"break\", 13);\n\n              case 6:\n                _context.t1 = authorization_state['@type'];\n                _context.next = _context.t1 === 'authorizationStateClosed' ? 9 : 11;\n                break;\n\n              case 9:\n                _this.reset();\n\n                return _context.abrupt(\"break\", 11);\n\n              case 11:\n                return _context.abrupt(\"break\", 13);\n\n              case 12:\n                return _context.abrupt(\"break\", 13);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.close = function () {\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMediaClose'\n      });\n    };\n\n    _this.onClientUpdate = function (update) {\n      switch (update['@type']) {\n        case 'clientUpdateMediaClose':\n          {\n            _this.reset();\n\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'clientUpdateMediaActive':\n          {\n            var chatId = update.chatId,\n                messageId = update.messageId,\n                instantView = update.instantView,\n                pageBlock = update.pageBlock;\n            var message = MessageStore.get(chatId, messageId);\n\n            if (message) {\n              _this.message = message;\n\n              _this.emit(update['@type'], update);\n\n              _this.getPlaylist(chatId, messageId);\n\n              return;\n            } else if (instantView && pageBlock) {\n              _this.instantView = instantView;\n              _this.pageBlock = pageBlock;\n\n              _this.emit(update['@type'], update);\n            }\n\n            break;\n          }\n\n        case 'clientUpdateMediaVolume':\n          {\n            var volume = update.volume;\n            _this.volume = volume;\n\n            _this.savePlayerSettings();\n\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'clientUpdateMediaRepeat':\n          {\n            var repeat = update.repeat;\n            _this.repeat = repeat;\n\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'clientUpdateMediaShuffle':\n          {\n            var shuffle = update.shuffle;\n            _this.shuffle = shuffle;\n\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'clientUpdateMediaPlaybackRate':\n          {\n            var playbackRate = update.playbackRate;\n            _this.playbackRate = playbackRate;\n\n            _this.savePlayerSettings();\n\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'clientUpdateMediaPlay':\n          {\n            _this.playing = true;\n\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'clientUpdateMediaTitleMouseOver':\n          {\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'clientUpdateMediaPause':\n          {\n            _this.playing = false;\n\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'clientUpdateMediaSeek':\n          {\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'clientUpdateMediaSeeking':\n          {\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'clientUpdateMediaStop':\n          {\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'clientUpdateMediaNext':\n          {\n            _this.emit(update['@type'], update);\n\n            _this.moveToNextMedia(false);\n\n            break;\n          }\n\n        case 'clientUpdateMediaPrev':\n          {\n            _this.emit(update['@type'], update);\n\n            _this.moveToPrevMedia();\n\n            break;\n          }\n\n        case 'clientUpdateMediaEnding':\n          {\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'clientUpdateMediaEnd':\n          {\n            _this.emit(update['@type'], update);\n\n            if (update.moveNext) {\n              if (_this.moveToNextMedia(true)) {} else {\n                _this.close();\n              }\n            } else {\n              _this.close();\n            }\n\n            break;\n          }\n\n        case 'clientUpdateMediaTime':\n          {\n            var duration = update.duration,\n                currentTime = update.currentTime,\n                timestamp = update.timestamp;\n            _this.time = {\n              currentTime: currentTime,\n              duration: duration,\n              timestamp: timestamp\n            };\n\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'clientUpdateMediaCaptureStream':\n          {\n            _this.videoStream = update.stream;\n\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'clientUpdateMediaViewerPlay':\n          {\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'clientUpdateMediaViewerPause':\n          {\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'clientUpdateMediaViewerEnded':\n          {\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'clientUpdateMediaPlaylistLoading':\n          {\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'clientUpdateMediaPlaylistPrev':\n          {\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'clientUpdateMediaPlaylist':\n          {\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'clientUpdateMediaPlaylistNext':\n          {\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    _this.moveToPrevMedia = function () {\n      if (!_this.playlist) return;\n      if (!_this.message) return;\n      var _this$message = _this.message,\n          chat_id = _this$message.chat_id,\n          id = _this$message.id;\n      var messages = _this.playlist.messages;\n      if (!messages) return;\n      var index = messages.findIndex(function (x) {\n        return x.chat_id === chat_id && x.id === id;\n      });\n      if (index === -1) return;\n\n      if (index + 1 < messages.length) {\n        var message = messages[index + 1];\n        openMedia(message.chat_id, message.id, false);\n      }\n    };\n\n    _this.moveToNextMedia = function (useRepeatShuffle) {\n      if (!_this.playlist) return false;\n      if (!_this.message) return false;\n      var _this$message2 = _this.message,\n          chat_id = _this$message2.chat_id,\n          id = _this$message2.id;\n      var messages = _this.playlist.messages;\n      if (!messages) return false;\n      var index = messages.findIndex(function (x) {\n        return x.chat_id === chat_id && x.id === id;\n      });\n      if (index === -1) return false;\n      var nextIndex = -1;\n\n      if (!useRepeatShuffle) {\n        nextIndex = index - 1;\n      } else {\n        switch (_this.repeat) {\n          case RepeatEnum.NONE:\n            {\n              if (_this.shuffle) {\n                nextIndex = getRandomInt(0, messages.length);\n              } else {\n                nextIndex = index - 1;\n              }\n\n              break;\n            }\n\n          case RepeatEnum.REPEAT_ONE:\n            {\n              nextIndex = index;\n              break;\n            }\n\n          case RepeatEnum.REPEAT:\n            {\n              if (_this.shuffle) {\n                nextIndex = getRandomInt(0, messages.length);\n              } else {\n                nextIndex = index - 1 >= 0 ? index - 1 : messages.length - 1;\n              }\n\n              break;\n            }\n        }\n      }\n\n      if (nextIndex >= 0) {\n        var message = messages[nextIndex];\n        openMedia(message.chat_id, message.id, false);\n        return true;\n      }\n\n      return false;\n    };\n\n    _this.getPlaylist =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(chatId, messageId) {\n        var _assertThisInitialize, currentPlaylist, _messages, filter, result, total_count, messages;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _assertThisInitialize = _assertThisInitialized(_this), currentPlaylist = _assertThisInitialize.playlist;\n\n                if (!currentPlaylist) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                _messages = currentPlaylist.messages;\n\n                if (!(_messages && _messages.findIndex(function (x) {\n                  return x.chat_id === chatId && x.id === messageId;\n                }) !== -1)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 5:\n                TdLibController.clientUpdate({\n                  '@type': 'clientUpdateMediaPlaylistLoading',\n                  chatId: chatId,\n                  messageId: messageId\n                });\n                filter = getSearchMessagesFilter(chatId, messageId);\n\n                if (filter) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                _this.playlist = {\n                  chatId: chatId,\n                  messageId: messageId,\n                  totalCount: 1,\n                  messages: [MessageStore.get(chatId, messageId)]\n                };\n                TdLibController.clientUpdate({\n                  '@type': 'clientUpdateMediaPlaylist',\n                  playlist: _this.playlist\n                });\n                return _context2.abrupt(\"return\");\n\n              case 11:\n                _context2.next = 13;\n                return TdLibController.send({\n                  '@type': 'searchChatMessages',\n                  chat_id: chatId,\n                  query: '',\n                  sender_user_id: 0,\n                  from_message_id: messageId,\n                  offset: -50,\n                  limit: 100,\n                  filter: filter\n                });\n\n              case 13:\n                result = _context2.sent;\n                MessageStore.setItems(result.messages);\n                total_count = result.total_count, messages = result.messages;\n                _this.playlist = {\n                  chatId: chatId,\n                  messageId: messageId,\n                  totalCount: total_count,\n                  messages: messages\n                };\n                TdLibController.clientUpdate({\n                  '@type': 'clientUpdateMediaPlaylist',\n                  playlist: _this.playlist\n                });\n\n              case 18:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2, _x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    var _this$loadPlayerSetti = _this.loadPlayerSettings(),\n        _playbackRate = _this$loadPlayerSetti.playbackRate,\n        _volume = _this$loadPlayerSetti.volume;\n\n    _this.playbackRate = _playbackRate;\n    _this.volume = _volume;\n    _this.repeat = RepeatEnum.NONE;\n    _this.shuffle = false;\n\n    _this.reset();\n\n    _this.addTdLibListener();\n\n    return _this;\n  }\n\n  _createClass(PlayerStore, [{\n    key: \"loadPlayerSettings\",\n    value: function loadPlayerSettings() {\n      var player = localStorage.getItem('player') || {};\n      var playbackRate = player.playbackRate,\n          volume = player.volume;\n      playbackRate = playbackRate && Number(playbackRate) >= 1 && Number(playbackRate) <= 2 ? Number(playbackRate) : PLAYER_PLAYBACKRATE_NORMAL;\n      volume = volume && Number(volume) >= 0 && Number(volume) <= 1 ? Number(volume) : PLAYER_VOLUME_NORMAL;\n      return {\n        playbackRate: playbackRate,\n        volume: volume\n      };\n    }\n  }, {\n    key: \"savePlayerSettings\",\n    value: function savePlayerSettings() {\n      var volume = this.volume,\n          playbackRate = this.playbackRate;\n      localStorage.setItem('player', JSON.stringify({\n        volume: volume,\n        playbackRate: playbackRate\n      }));\n    }\n  }]);\n\n  return PlayerStore;\n}(EventEmitter);\n\nvar store = new PlayerStore();\nwindow.player = store;\nexport default store;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Stores/PlayerStore.js"],"names":["EventEmitter","getSearchMessagesFilter","openMedia","PLAYER_PLAYBACKRATE_NORMAL","PLAYER_VOLUME_NORMAL","MessageStore","TdLibController","getRandomInt","RepeatEnum","Object","freeze","NONE","REPEAT","REPEAT_ONE","PlayerStore","reset","playlist","message","time","videoStream","instantView","pageBlock","addTdLibListener","on","onUpdate","onClientUpdate","removeTdLibListener","off","update","authorization_state","close","clientUpdate","emit","chatId","messageId","get","getPlaylist","volume","savePlayerSettings","repeat","shuffle","playbackRate","playing","moveToNextMedia","moveToPrevMedia","moveNext","duration","currentTime","timestamp","stream","chat_id","id","messages","index","findIndex","x","length","useRepeatShuffle","nextIndex","currentPlaylist","filter","totalCount","send","query","sender_user_id","from_message_id","offset","limit","result","setItems","total_count","loadPlayerSettings","player","localStorage","getItem","Number","setItem","JSON","stringify","store","window"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport EventEmitter from './EventEmitter';\nimport { getSearchMessagesFilter, openMedia } from '../Utils/Message';\nimport { PLAYER_PLAYBACKRATE_NORMAL, PLAYER_VOLUME_NORMAL } from '../Constants';\nimport MessageStore from './MessageStore';\nimport TdLibController from '../Controllers/TdLibController';\nimport { getRandomInt } from '../Utils/Common';\n\nconst RepeatEnum = Object.freeze({\n    NONE: 'NONE',\n    REPEAT: 'REPEAT',\n    REPEAT_ONE: 'REPEAT_ONE'\n});\n\nexport { RepeatEnum };\n\nclass PlayerStore extends EventEmitter {\n    constructor() {\n        super();\n\n        const { playbackRate, volume } = this.loadPlayerSettings();\n\n        this.playbackRate = playbackRate;\n        this.volume = volume;\n        this.repeat = RepeatEnum.NONE;\n        this.shuffle = false;\n\n        this.reset();\n\n        this.addTdLibListener();\n    }\n\n    reset = () => {\n        this.playlist = null;\n        this.message = null;\n        this.time = null;\n        this.videoStream = null;\n        this.instantView = null;\n        this.pageBlock = null;\n    };\n\n    addTdLibListener = () => {\n        TdLibController.on('update', this.onUpdate);\n        TdLibController.on('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.off('update', this.onUpdate);\n        TdLibController.off('clientUpdate', this.onClientUpdate);\n    };\n\n    onUpdate = async update => {\n        switch (update['@type']) {\n            case 'updateAuthorizationState': {\n                const { authorization_state } = update;\n                if (!authorization_state) break;\n\n                switch (authorization_state['@type']) {\n                    case 'authorizationStateClosed': {\n                        this.reset();\n                        break;\n                    }\n                }\n\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    close = () => {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaClose'\n        });\n    };\n\n    loadPlayerSettings() {\n        const player = localStorage.getItem('player') || {};\n\n        let { playbackRate, volume } = player;\n\n        playbackRate =\n            playbackRate && Number(playbackRate) >= 1 && Number(playbackRate) <= 2\n                ? Number(playbackRate)\n                : PLAYER_PLAYBACKRATE_NORMAL;\n        volume = volume && Number(volume) >= 0 && Number(volume) <= 1 ? Number(volume) : PLAYER_VOLUME_NORMAL;\n\n        return { playbackRate, volume };\n    }\n\n    savePlayerSettings() {\n        const { volume, playbackRate } = this;\n\n        localStorage.setItem('player', JSON.stringify({ volume, playbackRate }));\n    }\n\n    onClientUpdate = update => {\n        switch (update['@type']) {\n            case 'clientUpdateMediaClose': {\n                this.reset();\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaActive': {\n                const { chatId, messageId, instantView, pageBlock } = update;\n\n                const message = MessageStore.get(chatId, messageId);\n                if (message) {\n                    this.message = message;\n                    this.emit(update['@type'], update);\n                    this.getPlaylist(chatId, messageId);\n\n                    return;\n                } else if (instantView && pageBlock) {\n                    this.instantView = instantView;\n                    this.pageBlock = pageBlock;\n                    this.emit(update['@type'], update);\n                }\n\n                break;\n            }\n            case 'clientUpdateMediaVolume': {\n                const { volume } = update;\n\n                this.volume = volume;\n\n                this.savePlayerSettings();\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaRepeat': {\n                const { repeat } = update;\n\n                this.repeat = repeat;\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaShuffle': {\n                const { shuffle } = update;\n\n                this.shuffle = shuffle;\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaPlaybackRate': {\n                const { playbackRate } = update;\n\n                this.playbackRate = playbackRate;\n\n                this.savePlayerSettings();\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaPlay': {\n                this.playing = true;\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaTitleMouseOver': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaPause': {\n                this.playing = false;\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaSeek': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaSeeking': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaStop': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaNext': {\n                this.emit(update['@type'], update);\n\n                this.moveToNextMedia(false);\n                break;\n            }\n            case 'clientUpdateMediaPrev': {\n                this.emit(update['@type'], update);\n\n                this.moveToPrevMedia();\n                break;\n            }\n            case 'clientUpdateMediaEnding': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaEnd': {\n                this.emit(update['@type'], update);\n\n                if (update.moveNext) {\n                    if (this.moveToNextMedia(true)) {\n                    } else {\n                        this.close();\n                    }\n                } else {\n                    this.close();\n                }\n                break;\n            }\n            case 'clientUpdateMediaTime': {\n                const { duration, currentTime, timestamp } = update;\n\n                this.time = {\n                    currentTime: currentTime,\n                    duration: duration,\n                    timestamp: timestamp\n                };\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaCaptureStream': {\n                this.videoStream = update.stream;\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaViewerPlay': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaViewerPause': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaViewerEnded': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaPlaylistLoading': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaPlaylistPrev': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaPlaylist': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaPlaylistNext': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    moveToPrevMedia = () => {\n        if (!this.playlist) return;\n        if (!this.message) return;\n\n        const { chat_id, id } = this.message;\n        const { messages } = this.playlist;\n        if (!messages) return;\n\n        const index = messages.findIndex(x => x.chat_id === chat_id && x.id === id);\n        if (index === -1) return;\n\n        if (index + 1 < messages.length) {\n            const message = messages[index + 1];\n\n            openMedia(message.chat_id, message.id, false);\n        }\n    };\n\n    moveToNextMedia = useRepeatShuffle => {\n        if (!this.playlist) return false;\n        if (!this.message) return false;\n\n        const { chat_id, id } = this.message;\n        const { messages } = this.playlist;\n        if (!messages) return false;\n\n        const index = messages.findIndex(x => x.chat_id === chat_id && x.id === id);\n        if (index === -1) return false;\n\n        let nextIndex = -1;\n        if (!useRepeatShuffle) {\n            nextIndex = index - 1;\n        } else {\n            switch (this.repeat) {\n                case RepeatEnum.NONE: {\n                    if (this.shuffle) {\n                        nextIndex = getRandomInt(0, messages.length);\n                    } else {\n                        nextIndex = index - 1;\n                    }\n                    break;\n                }\n                case RepeatEnum.REPEAT_ONE: {\n                    nextIndex = index;\n                    break;\n                }\n                case RepeatEnum.REPEAT: {\n                    if (this.shuffle) {\n                        nextIndex = getRandomInt(0, messages.length);\n                    } else {\n                        nextIndex = index - 1 >= 0 ? index - 1 : messages.length - 1;\n                    }\n                    break;\n                }\n            }\n        }\n\n        if (nextIndex >= 0) {\n            const message = messages[nextIndex];\n\n            openMedia(message.chat_id, message.id, false);\n            return true;\n        }\n\n        return false;\n    };\n\n    getPlaylist = async (chatId, messageId) => {\n        const { playlist: currentPlaylist } = this;\n\n        if (currentPlaylist) {\n            const { messages } = currentPlaylist;\n            if (messages && messages.findIndex(x => x.chat_id === chatId && x.id === messageId) !== -1) {\n                return;\n            }\n        }\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaPlaylistLoading',\n            chatId: chatId,\n            messageId: messageId\n        });\n\n        const filter = getSearchMessagesFilter(chatId, messageId);\n        if (!filter) {\n            this.playlist = {\n                chatId: chatId,\n                messageId: messageId,\n                totalCount: 1,\n                messages: [MessageStore.get(chatId, messageId)]\n            };\n\n            TdLibController.clientUpdate({\n                '@type': 'clientUpdateMediaPlaylist',\n                playlist: this.playlist\n            });\n\n            return;\n        }\n\n        const result = await TdLibController.send({\n            '@type': 'searchChatMessages',\n            chat_id: chatId,\n            query: '',\n            sender_user_id: 0,\n            from_message_id: messageId,\n            offset: -50,\n            limit: 100,\n            filter: filter\n        });\n\n        MessageStore.setItems(result.messages);\n\n        const { total_count, messages } = result;\n\n        this.playlist = {\n            chatId: chatId,\n            messageId: messageId,\n            totalCount: total_count,\n            messages: messages\n        };\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaPlaylist',\n            playlist: this.playlist\n        });\n    };\n}\n\nconst store = new PlayerStore();\nwindow.player = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}