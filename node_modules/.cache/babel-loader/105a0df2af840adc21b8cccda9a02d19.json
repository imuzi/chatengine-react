{"ast":null,"code":"import _slicedToArray from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Viewer/MediaViewerContent.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport FileProgress from './FileProgress';\nimport MediaCaption from './MediaCaption';\nimport { getAnimationData, getMediaFile, getMediaPreviewFile, getSrc } from '../../Utils/File';\nimport { getText, isAnimationMessage, isLottieMessage, isVideoMessage } from '../../Utils/Message';\nimport { isBlurredThumbnail } from '../../Utils/Media';\nimport FileStore from '../../Stores/FileStore';\nimport MessageStore from '../../Stores/MessageStore';\nimport PlayerStore from '../../Stores/PlayerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './MediaViewerContent.css'; // const Lottie = React.lazy(() => import('./Lottie'));\n\nvar MediaViewerContent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MediaViewerContent, _React$Component);\n\n  function MediaViewerContent(props) {\n    var _this;\n\n    _classCallCheck(this, MediaViewerContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MediaViewerContent).call(this, props));\n\n    _this.onClientUpdateDocumentBlob = function (update) {\n      var _this$props = _this.props,\n          chatId = _this$props.chatId,\n          messageId = _this$props.messageId;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        _this.updateAnimationData();\n      }\n    };\n\n    _this.updateAnimationData =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _this$props2, chatId, messageId, file, animationData;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$props2 = _this.props, chatId = _this$props2.chatId, messageId = _this$props2.messageId;\n\n              if (isLottieMessage(chatId, messageId)) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              file = _this.state.file;\n              _context.next = 6;\n              return getAnimationData(file);\n\n            case 6:\n              animationData = _context.sent;\n\n              _this.setState({\n                animationData: animationData\n              });\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    _this.onClientUpdateMediaBlob = function (update) {\n      var _this$props3 = _this.props,\n          chatId = _this$props3.chatId,\n          messageId = _this$props3.messageId,\n          size = _this$props3.size;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        var _getMediaFile = getMediaFile(chatId, messageId, size),\n            _getMediaFile2 = _slicedToArray(_getMediaFile, 4),\n            width = _getMediaFile2[0],\n            height = _getMediaFile2[1],\n            file = _getMediaFile2[2],\n            mimeType = _getMediaFile2[3];\n\n        _this.setState({\n          width: width,\n          height: height,\n          file: file,\n          src: getSrc(file),\n          mimeType: mimeType\n        });\n      }\n    };\n\n    _this.onClientUpdateMediaThumbnailBlob = function (update) {\n      var _this$props4 = _this.props,\n          chatId = _this$props4.chatId,\n          messageId = _this$props4.messageId;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        var _getMediaPreviewFile = getMediaPreviewFile(chatId, messageId),\n            _getMediaPreviewFile2 = _slicedToArray(_getMediaPreviewFile, 3),\n            width = _getMediaPreviewFile2[0],\n            height = _getMediaPreviewFile2[1],\n            file = _getMediaPreviewFile2[2];\n\n        _this.setState({\n          thumbnailWidth: width,\n          thumbnailHeight: height,\n          thumbnail: file\n        });\n      }\n    };\n\n    _this.onUpdateMessageContent = function (update) {\n      var _this$props5 = _this.props,\n          chatId = _this$props5.chatId,\n          messageId = _this$props5.messageId,\n          size = _this$props5.size,\n          t = _this$props5.t;\n      var chat_id = update.chat_id,\n          message_id = update.message_id;\n\n      if (chatId === chat_id && messageId === message_id) {\n        var _getMediaFile3 = getMediaFile(chatId, messageId, size),\n            _getMediaFile4 = _slicedToArray(_getMediaFile3, 4),\n            width = _getMediaFile4[0],\n            height = _getMediaFile4[1],\n            file = _getMediaFile4[2],\n            mimeType = _getMediaFile4[3];\n\n        var message = MessageStore.get(chatId, messageId);\n        var text = getText(message, null, t);\n\n        _this.setState({\n          width: width,\n          height: height,\n          file: file,\n          src: getSrc(file),\n          mimeType: mimeType,\n          text: text\n        });\n      }\n    };\n\n    _this.handleContentClick = function (event) {\n      if (event) event.stopPropagation();\n    };\n\n    _this.changeSpeed = function (speed) {\n      _this.setState({\n        speed: speed\n      });\n    };\n\n    _this.state = {};\n    _this.videoRef = React.createRef();\n    _this.lottieRef = React.createRef();\n\n    _this.updateAnimationData();\n\n    return _this;\n  }\n\n  _createClass(MediaViewerContent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      FileStore.on('clientUpdateDocumentBlob', this.onClientUpdateDocumentBlob);\n      FileStore.on('clientUpdatePhotoBlob', this.onClientUpdateMediaBlob);\n      FileStore.on('clientUpdateVideoBlob', this.onClientUpdateMediaBlob);\n      FileStore.on('clientUpdateAnimationBlob', this.onClientUpdateMediaBlob);\n      FileStore.on('clientUpdateVideoThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n      FileStore.on('clientUpdateAnimationThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n      MessageStore.on('updateMessageContent', this.onUpdateMessageContent);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      FileStore.off('clientUpdateDocumentBlob', this.onClientUpdateDocumentBlob);\n      FileStore.off('clientUpdatePhotoBlob', this.onClientUpdateMediaBlob);\n      FileStore.off('clientUpdateVideoBlob', this.onClientUpdateMediaBlob);\n      FileStore.off('clientUpdateAnimationBlob', this.onClientUpdateMediaBlob);\n      FileStore.off('clientUpdateVideoThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n      FileStore.off('clientUpdateAnimationThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n      MessageStore.off('updateMessageContent', this.onUpdateMessageContent);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      var _this$props6 = this.props,\n          chatId = _this$props6.chatId,\n          messageId = _this$props6.messageId;\n      var src = this.state.src;\n\n      if (prevProps.chatId !== chatId || prevProps.messageId !== messageId) {\n        this.updateAnimationData();\n      }\n\n      if (prevState.src !== src) {\n        var player = this.videoRef.current;\n        if (!player) return;\n        player.load();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props7 = this.props,\n          chatId = _this$props7.chatId,\n          messageId = _this$props7.messageId;\n      var _this$state = this.state,\n          animationData = _this$state.animationData,\n          width = _this$state.width,\n          height = _this$state.height,\n          file = _this$state.file,\n          src = _this$state.src,\n          mimeType = _this$state.mimeType,\n          text = _this$state.text,\n          thumbnailWidth = _this$state.thumbnailWidth,\n          thumbnailHeight = _this$state.thumbnailHeight,\n          thumbnail = _this$state.thumbnail,\n          isPlaying = _this$state.isPlaying;\n      if (!file) return null; // const src = getSrc(file);\n\n      var thumbnailBlob = thumbnail ? FileStore.getBlob(thumbnail.id) || thumbnail.blob : null;\n      var thumbnailSrc = FileStore.getBlobUrl(thumbnailBlob);\n      var isBlurred = isBlurredThumbnail({\n        width: thumbnailWidth,\n        height: thumbnailHeight\n      });\n      var isVideo = isVideoMessage(chatId, messageId);\n      var isAnimation = isAnimationMessage(chatId, messageId);\n      var isLottie = isLottieMessage(chatId, messageId);\n      var videoWidth = width;\n      var videoHeight = height;\n\n      if (Math.max(videoWidth, videoHeight) > 640) {\n        var scale = 640 / Math.max(videoWidth, videoHeight);\n        videoWidth = videoWidth > videoHeight ? 640 : Math.floor(videoWidth * scale);\n        videoHeight = videoHeight > videoWidth ? 640 : Math.floor(videoHeight * scale);\n      }\n\n      var content = null;\n      var source = src ? React.createElement(\"source\", {\n        src: src,\n        type: mimeType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }) : null;\n\n      if (isVideo) {\n        content = React.createElement(\"div\", {\n          className: \"media-viewer-content-wrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225\n          },\n          __self: this\n        }, React.createElement(\"video\", {\n          ref: this.videoRef,\n          className: \"media-viewer-content-video-player\",\n          onClick: this.handleContentClick,\n          controls: true,\n          autoPlay: true,\n          width: videoWidth,\n          height: videoHeight,\n          onPlay: function onPlay() {\n            _this2.setState({\n              isPlaying: true\n            });\n\n            TdLibController.clientUpdate({\n              '@type': 'clientUpdateMediaViewerPlay'\n            });\n          },\n          onCanPlay: function onCanPlay() {\n            var player = _this2.videoRef.current;\n\n            if (player) {\n              player.volume = PlayerStore.volume;\n            }\n          },\n          onPause: function onPause() {\n            TdLibController.clientUpdate({\n              '@type': 'clientUpdateMediaViewerPause'\n            });\n          },\n          onEnded: function onEnded() {\n            TdLibController.clientUpdate({\n              '@type': 'clientUpdateMediaViewerEnded'\n            });\n          },\n          onVolumeChange: function onVolumeChange() {\n            var player = _this2.videoRef.current;\n\n            if (player) {\n              TdLibController.clientUpdate({\n                '@type': 'clientUpdateMediaVolume',\n                volume: player.volume\n              });\n            }\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226\n          },\n          __self: this\n        }, source), !isPlaying && (!src && thumbnailSrc ? React.createElement(\"img\", {\n          className: classNames('media-viewer-content-video-thumbnail', {\n            'media-blurred': isBlurred\n          }),\n          src: thumbnailSrc,\n          alt: \"\",\n          width: videoWidth,\n          height: videoHeight,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 270\n          },\n          __self: this\n        }) : React.createElement(\"div\", {\n          className: \"media-viewer-content-video-thumbnail\",\n          style: {\n            width: videoWidth,\n            height: videoHeight\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 280\n          },\n          __self: this\n        })));\n      } else if (isAnimation) {\n        content = React.createElement(\"div\", {\n          className: \"media-viewer-content-wrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 292\n          },\n          __self: this\n        }, React.createElement(\"video\", {\n          ref: this.videoRef,\n          className: \"media-viewer-content-video-player\",\n          onClick: this.handleContentClick,\n          loop: true,\n          autoPlay: true,\n          width: videoWidth,\n          height: videoHeight,\n          onPlay: function onPlay() {\n            _this2.setState({\n              isPlaying: true\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 293\n          },\n          __self: this\n        }, source), !isPlaying && (!src && thumbnailSrc ? React.createElement(\"img\", {\n          className: classNames('media-viewer-content-video-thumbnail', {\n            'media-blurred': isBlurred\n          }),\n          src: thumbnailSrc,\n          alt: \"\",\n          width: videoWidth,\n          height: videoHeight,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 309\n          },\n          __self: this\n        }) : React.createElement(\"div\", {\n          className: \"media-viewer-content-video-thumbnail\",\n          style: {\n            width: videoWidth,\n            height: videoHeight\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 319\n          },\n          __self: this\n        })));\n      } else if (isLottie) {\n        var defaultOptions = {\n          loop: true,\n          autoplay: true,\n          //path: src,\n          animationData: animationData,\n          rendererSettings: {\n            preserveAspectRatio: 'xMidYMid slice'\n          }\n        };\n        var speed = this.state.speed;\n        content = null; // content = (\n        //     <Lottie\n        //         ref={this.lottieRef}\n        //         speed={speed}\n        //         options={defaultOptions}\n        //         height='auto'\n        //         width={400}\n        //         isStopped={false}\n        //         isPaused={false}\n        //     />\n        // );\n      } else {\n        content = React.createElement(\"img\", {\n          className: \"media-viewer-content-image\",\n          src: src,\n          alt: \"\",\n          onClick: this.handleContentClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 354\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"media-viewer-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358\n        },\n        __self: this\n      }, React.createElement(React.Suspense, {\n        fallback: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359\n        },\n        __self: this\n      }, content), React.createElement(FileProgress, {\n        file: file,\n        zIndex: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361\n        },\n        __self: this\n      }), text && text.length > 0 && React.createElement(MediaCaption, {\n        text: text,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362\n        },\n        __self: this\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var chatId = props.chatId,\n          messageId = props.messageId,\n          size = props.size,\n          t = props.t;\n\n      if (chatId !== state.prevChatId || messageId !== state.prevMessageId) {\n        var _getMediaFile5 = getMediaFile(chatId, messageId, size),\n            _getMediaFile6 = _slicedToArray(_getMediaFile5, 4),\n            width = _getMediaFile6[0],\n            height = _getMediaFile6[1],\n            file = _getMediaFile6[2],\n            mimeType = _getMediaFile6[3];\n\n        file = FileStore.get(file.id) || file;\n\n        var _getMediaPreviewFile3 = getMediaPreviewFile(chatId, messageId),\n            _getMediaPreviewFile4 = _slicedToArray(_getMediaPreviewFile3, 3),\n            thumbnailWidth = _getMediaPreviewFile4[0],\n            thumbnailHeight = _getMediaPreviewFile4[1],\n            thumbnail = _getMediaPreviewFile4[2];\n\n        thumbnail = FileStore.get(thumbnail.id) || thumbnail;\n        var message = MessageStore.get(chatId, messageId);\n        var text = getText(message, null, t);\n        return {\n          prevChatId: chatId,\n          prevMessageId: messageId,\n          speed: 1,\n          isPlaying: false,\n          width: width,\n          height: height,\n          file: file,\n          src: getSrc(file),\n          mimeType: mimeType,\n          text: text,\n          thumbnailWidth: thumbnailWidth,\n          thumbnailHeight: thumbnailHeight,\n          thumbnail: thumbnail\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return MediaViewerContent;\n}(React.Component);\n\nMediaViewerContent.propTypes = {\n  chatId: PropTypes.number.isRequired,\n  messageId: PropTypes.number.isRequired,\n  size: PropTypes.number.isRequired\n};\nexport default withTranslation()(MediaViewerContent);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Viewer/MediaViewerContent.js"],"names":["React","PropTypes","classNames","withTranslation","FileProgress","MediaCaption","getAnimationData","getMediaFile","getMediaPreviewFile","getSrc","getText","isAnimationMessage","isLottieMessage","isVideoMessage","isBlurredThumbnail","FileStore","MessageStore","PlayerStore","TdLibController","MediaViewerContent","props","onClientUpdateDocumentBlob","update","chatId","messageId","updateAnimationData","file","state","animationData","setState","onClientUpdateMediaBlob","size","width","height","mimeType","src","onClientUpdateMediaThumbnailBlob","thumbnailWidth","thumbnailHeight","thumbnail","onUpdateMessageContent","t","chat_id","message_id","message","get","text","handleContentClick","event","stopPropagation","changeSpeed","speed","videoRef","createRef","lottieRef","on","off","prevProps","prevState","snapshot","player","current","load","isPlaying","thumbnailBlob","getBlob","id","blob","thumbnailSrc","getBlobUrl","isBlurred","isVideo","isAnimation","isLottie","videoWidth","videoHeight","Math","max","scale","floor","content","source","clientUpdate","volume","defaultOptions","loop","autoplay","rendererSettings","preserveAspectRatio","length","prevChatId","prevMessageId","Component","propTypes","number","isRequired"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport FileProgress from './FileProgress';\nimport MediaCaption from './MediaCaption';\nimport { getAnimationData, getMediaFile, getMediaPreviewFile, getSrc } from '../../Utils/File';\nimport { getText, isAnimationMessage, isLottieMessage, isVideoMessage } from '../../Utils/Message';\nimport { isBlurredThumbnail } from '../../Utils/Media';\nimport FileStore from '../../Stores/FileStore';\nimport MessageStore from '../../Stores/MessageStore';\nimport PlayerStore from '../../Stores/PlayerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './MediaViewerContent.css';\n\n// const Lottie = React.lazy(() => import('./Lottie'));\n\nclass MediaViewerContent extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n\n        this.videoRef = React.createRef();\n        this.lottieRef = React.createRef();\n\n        this.updateAnimationData();\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        const { chatId, messageId, size, t } = props;\n\n        if (chatId !== state.prevChatId || messageId !== state.prevMessageId) {\n            let [width, height, file, mimeType] = getMediaFile(chatId, messageId, size);\n            file = FileStore.get(file.id) || file;\n\n            let [thumbnailWidth, thumbnailHeight, thumbnail] = getMediaPreviewFile(chatId, messageId);\n            thumbnail = FileStore.get(thumbnail.id) || thumbnail;\n\n            const message = MessageStore.get(chatId, messageId);\n            const text = getText(message, null, t);\n\n            return {\n                prevChatId: chatId,\n                prevMessageId: messageId,\n\n                speed: 1,\n                isPlaying: false,\n                width,\n                height,\n                file,\n                src: getSrc(file),\n                mimeType,\n                text,\n                thumbnailWidth,\n                thumbnailHeight,\n                thumbnail\n            };\n        }\n\n        return null;\n    }\n\n    componentDidMount() {\n        FileStore.on('clientUpdateDocumentBlob', this.onClientUpdateDocumentBlob);\n        FileStore.on('clientUpdatePhotoBlob', this.onClientUpdateMediaBlob);\n        FileStore.on('clientUpdateVideoBlob', this.onClientUpdateMediaBlob);\n        FileStore.on('clientUpdateAnimationBlob', this.onClientUpdateMediaBlob);\n        FileStore.on('clientUpdateVideoThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n        FileStore.on('clientUpdateAnimationThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n        MessageStore.on('updateMessageContent', this.onUpdateMessageContent);\n    }\n\n    componentWillUnmount() {\n        FileStore.off('clientUpdateDocumentBlob', this.onClientUpdateDocumentBlob);\n        FileStore.off('clientUpdatePhotoBlob', this.onClientUpdateMediaBlob);\n        FileStore.off('clientUpdateVideoBlob', this.onClientUpdateMediaBlob);\n        FileStore.off('clientUpdateAnimationBlob', this.onClientUpdateMediaBlob);\n        FileStore.off('clientUpdateVideoThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n        FileStore.off('clientUpdateAnimationThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n        MessageStore.off('updateMessageContent', this.onUpdateMessageContent);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const { chatId, messageId } = this.props;\n        const { src } = this.state;\n\n        if (prevProps.chatId !== chatId || prevProps.messageId !== messageId) {\n            this.updateAnimationData();\n        }\n\n        if (prevState.src !== src) {\n            const player = this.videoRef.current;\n            if (!player) return;\n\n            player.load();\n        }\n    }\n\n    onClientUpdateDocumentBlob = update => {\n        const { chatId, messageId } = this.props;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            this.updateAnimationData();\n        }\n    };\n\n    updateAnimationData = async () => {\n        const { chatId, messageId } = this.props;\n\n        if (!isLottieMessage(chatId, messageId)) {\n            return;\n        }\n\n        const { file } = this.state;\n        const animationData = await getAnimationData(file);\n\n        this.setState({ animationData });\n    };\n\n    onClientUpdateMediaBlob = update => {\n        const { chatId, messageId, size } = this.props;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            const [width, height, file, mimeType] = getMediaFile(chatId, messageId, size);\n\n            this.setState({\n                width,\n                height,\n                file,\n                src: getSrc(file),\n                mimeType\n            });\n        }\n    };\n\n    onClientUpdateMediaThumbnailBlob = update => {\n        const { chatId, messageId } = this.props;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            const [width, height, file] = getMediaPreviewFile(chatId, messageId);\n            this.setState({\n                thumbnailWidth: width,\n                thumbnailHeight: height,\n                thumbnail: file\n            });\n        }\n    };\n\n    onUpdateMessageContent = update => {\n        const { chatId, messageId, size, t } = this.props;\n        const { chat_id, message_id } = update;\n\n        if (chatId === chat_id && messageId === message_id) {\n            const [width, height, file, mimeType] = getMediaFile(chatId, messageId, size);\n            const message = MessageStore.get(chatId, messageId);\n            const text = getText(message, null, t);\n            this.setState({\n                width,\n                height,\n                file,\n                src: getSrc(file),\n                mimeType,\n                text\n            });\n        }\n    };\n\n    handleContentClick = event => {\n        if (event) event.stopPropagation();\n    };\n\n    changeSpeed = speed => {\n        this.setState({\n            speed\n        });\n    };\n\n    render() {\n        const { chatId, messageId } = this.props;\n        const {\n            animationData,\n            width,\n            height,\n            file,\n            src,\n            mimeType,\n            text,\n            thumbnailWidth,\n            thumbnailHeight,\n            thumbnail,\n            isPlaying\n        } = this.state;\n        if (!file) return null;\n\n        // const src = getSrc(file);\n\n        const thumbnailBlob = thumbnail ? FileStore.getBlob(thumbnail.id) || thumbnail.blob : null;\n        const thumbnailSrc = FileStore.getBlobUrl(thumbnailBlob);\n        const isBlurred = isBlurredThumbnail({ width: thumbnailWidth, height: thumbnailHeight });\n\n        const isVideo = isVideoMessage(chatId, messageId);\n        const isAnimation = isAnimationMessage(chatId, messageId);\n        const isLottie = isLottieMessage(chatId, messageId);\n\n        let videoWidth = width;\n        let videoHeight = height;\n        if (Math.max(videoWidth, videoHeight) > 640) {\n            const scale = 640 / Math.max(videoWidth, videoHeight);\n            videoWidth = videoWidth > videoHeight ? 640 : Math.floor(videoWidth * scale);\n            videoHeight = videoHeight > videoWidth ? 640 : Math.floor(videoHeight * scale);\n        }\n\n        let content = null;\n        const source = src ? <source src={src} type={mimeType}/> : null;\n        if (isVideo) {\n            content = (\n                <div className='media-viewer-content-wrapper'>\n                    <video\n                        ref={this.videoRef}\n                        className='media-viewer-content-video-player'\n                        onClick={this.handleContentClick}\n                        controls\n                        autoPlay\n                        width={videoWidth}\n                        height={videoHeight}\n                        onPlay={() => {\n                            this.setState({ isPlaying: true });\n                            TdLibController.clientUpdate({\n                                '@type': 'clientUpdateMediaViewerPlay'\n                            });\n                        }}\n                        onCanPlay={() => {\n                            const player = this.videoRef.current;\n                            if (player) {\n                                player.volume = PlayerStore.volume;\n                            }\n                        }}\n                        onPause={() => {\n                            TdLibController.clientUpdate({\n                                '@type': 'clientUpdateMediaViewerPause'\n                            });\n                        }}\n                        onEnded={() => {\n                            TdLibController.clientUpdate({\n                                '@type': 'clientUpdateMediaViewerEnded'\n                            });\n                        }}\n                        onVolumeChange={() => {\n                            const player = this.videoRef.current;\n                            if (player) {\n                                TdLibController.clientUpdate({\n                                    '@type': 'clientUpdateMediaVolume',\n                                    volume: player.volume\n                                });\n                            }\n                        }}\n                    >\n                        {source}\n                    </video>\n                    {!isPlaying &&\n                        (!src && thumbnailSrc ? (\n                            <img\n                                className={classNames('media-viewer-content-video-thumbnail', {\n                                    'media-blurred': isBlurred\n                                })}\n                                src={thumbnailSrc}\n                                alt=''\n                                width={videoWidth}\n                                height={videoHeight}\n                            />\n                        ) : (\n                            <div\n                                className='media-viewer-content-video-thumbnail'\n                                style={{\n                                    width: videoWidth,\n                                    height: videoHeight\n                                }}\n                            />\n                        ))}\n                </div>\n            );\n        } else if (isAnimation) {\n            content = (\n                <div className='media-viewer-content-wrapper'>\n                    <video\n                        ref={this.videoRef}\n                        className='media-viewer-content-video-player'\n                        onClick={this.handleContentClick}\n                        loop\n                        autoPlay\n                        width={videoWidth}\n                        height={videoHeight}\n                        onPlay={() => {\n                            this.setState({ isPlaying: true });\n                        }}\n                    >\n                        {source}\n                    </video>\n                    {!isPlaying &&\n                        (!src && thumbnailSrc ? (\n                            <img\n                                className={classNames('media-viewer-content-video-thumbnail', {\n                                    'media-blurred': isBlurred\n                                })}\n                                src={thumbnailSrc}\n                                alt=''\n                                width={videoWidth}\n                                height={videoHeight}\n                            />\n                        ) : (\n                            <div\n                                className='media-viewer-content-video-thumbnail'\n                                style={{\n                                    width: videoWidth,\n                                    height: videoHeight\n                                }}\n                            />\n                        ))}\n                </div>\n            );\n        } else if (isLottie) {\n            const defaultOptions = {\n                loop: true,\n                autoplay: true,\n                //path: src,\n                animationData: animationData,\n                rendererSettings: {\n                    preserveAspectRatio: 'xMidYMid slice'\n                }\n            };\n            const { speed } = this.state;\n\n            content = null;\n            // content = (\n            //     <Lottie\n            //         ref={this.lottieRef}\n            //         speed={speed}\n            //         options={defaultOptions}\n            //         height='auto'\n            //         width={400}\n            //         isStopped={false}\n            //         isPaused={false}\n            //     />\n            // );\n        } else {\n            content = <img className='media-viewer-content-image' src={src} alt='' onClick={this.handleContentClick} />;\n        }\n\n        return (\n            <div className='media-viewer-content'>\n                <React.Suspense fallback=''>{content}</React.Suspense>\n                {/*<img className='media-viewer-content-image-preview' src={previewSrc} alt='' />*/}\n                <FileProgress file={file} zIndex={2} />\n                {text && text.length > 0 && <MediaCaption text={text} />}\n            </div>\n        );\n    }\n}\n\nMediaViewerContent.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    messageId: PropTypes.number.isRequired,\n    size: PropTypes.number.isRequired\n};\n\nexport default withTranslation()(MediaViewerContent);\n"]},"metadata":{},"sourceType":"module"}