{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Tile/Dialog.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport Popover from '@material-ui/core/Popover';\nimport ChatTile from './ChatTile';\nimport DialogContent from './DialogContent';\nimport DialogBadge from './DialogBadge';\nimport DialogTitle from './DialogTitle';\nimport DialogMeta from './DialogMeta';\nimport ArchiveIcon from '../../Assets/Icons/Archive';\nimport UnarchiveIcon from '../../Assets/Icons/Unarchive';\nimport PinIcon from '../../Assets/Icons/Pin2';\nimport UnpinIcon from '../../Assets/Icons/Pin2';\nimport MuteIcon from '../../Assets/Icons/Mute';\nimport UnmuteIcon from '../../Assets/Icons/Unmute';\nimport UserIcon from '../../Assets/Icons/User';\nimport GroupIcon from '../../Assets/Icons/Group';\nimport MessageIcon from '../../Assets/Icons/Message';\nimport UnreadIcon from '../../Assets/Icons/Unread';\nimport { canSetChatChatList, isChatArchived, isChatMuted, isChatSecret, isChatUnread, isPrivateChat } from '../../Utils/Chat';\nimport { setChatChatList, toggleChatIsMarkedAsUnread, toggleChatIsPinned, toggleChatNotificationSettings } from '../../Actions/Chat';\nimport { openChat } from '../../Actions/Client';\nimport { viewMessages } from '../../Actions/Message';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport OptionStore from '../../Stores/OptionStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './Dialog.css';\n\nvar Dialog =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Dialog, _Component);\n\n  function Dialog(props) {\n    var _this;\n\n    _classCallCheck(this, Dialog);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dialog).call(this, props));\n\n    _this.onClientUpdateChatId = function (update) {\n      var chatId = _this.props.chatId;\n\n      if (chatId === update.previousChatId || chatId === update.nextChatId) {\n        _this.forceUpdate();\n      }\n    };\n\n    _this.handleSelect = function (event) {\n      if (event.button === 0) {\n        openChat(_this.props.chatId);\n      }\n    };\n\n    _this.handleContextMenu =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(event) {\n        var chatId, contextMenu, contextMenuId, left, top, chat, is_pinned, canTogglePin, canToggleArchive;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (event) {\n                  event.preventDefault();\n                  event.stopPropagation();\n                }\n\n                chatId = _this.props.chatId;\n                contextMenu = _this.state.contextMenu;\n\n                if (!contextMenu) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _this.setState({\n                  contextMenu: false\n                });\n\n                _context.next = 23;\n                break;\n\n              case 7:\n                contextMenuId = new Date();\n                Dialog.contextMenuId = contextMenuId;\n                left = event.clientX;\n                top = event.clientY;\n                chat = ChatStore.get(chatId);\n                is_pinned = chat.is_pinned;\n                _context.next = 15;\n                return _this.canPinChats(chatId);\n\n              case 15:\n                _context.t0 = _context.sent;\n\n                if (_context.t0) {\n                  _context.next = 18;\n                  break;\n                }\n\n                _context.t0 = is_pinned;\n\n              case 18:\n                canTogglePin = _context.t0;\n                canToggleArchive = canSetChatChatList(chatId);\n\n                if (!(Dialog.contextMenuId !== contextMenuId)) {\n                  _context.next = 22;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 22:\n                _this.setState({\n                  contextMenu: true,\n                  canTogglePin: canTogglePin,\n                  canToggleArchive: canToggleArchive,\n                  left: left,\n                  top: top\n                });\n\n              case 23:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.handleCloseContextMenu = function (event) {\n      if (event) {\n        event.stopPropagation();\n      }\n\n      _this.setState({\n        contextMenu: false\n      });\n    };\n\n    _this.handleMute = function (event) {\n      _this.handleCloseContextMenu(event);\n\n      var chatId = _this.props.chatId;\n      toggleChatNotificationSettings(chatId, !isChatMuted(chatId));\n    };\n\n    _this.canPinChats =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(chatId) {\n        var pinnedSumMaxOption, isSecret, chats, pinnedSum;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                pinnedSumMaxOption = isChatArchived(chatId) ? OptionStore.get('pinned_archived_chat_count_max') : OptionStore.get('pinned_chat_count_max');\n\n                if (pinnedSumMaxOption) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", false);\n\n              case 3:\n                isSecret = isChatSecret(chatId);\n                _context2.next = 6;\n                return TdLibController.send({\n                  '@type': 'getChats',\n                  chat_list: isChatArchived(chatId) ? {\n                    '@type': 'chatListArchive'\n                  } : {\n                    '@type': 'chatListMain'\n                  },\n                  offset_order: '9223372036854775807',\n                  offset_chat_id: 0,\n                  limit: pinnedSumMaxOption.value + 10\n                });\n\n              case 6:\n                chats = _context2.sent;\n                pinnedSum = chats.chat_ids.reduce(function (x, id) {\n                  if (isChatSecret(id) !== isSecret) return x;\n                  var chat = ChatStore.get(id);\n                  return x + (chat && chat.is_pinned ? 1 : 0);\n                }, 0);\n                return _context2.abrupt(\"return\", pinnedSum < pinnedSumMaxOption.value);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.handlePin =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(event) {\n        var chatId, chat, is_pinned;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this.handleCloseContextMenu(event);\n\n                chatId = _this.props.chatId;\n                chat = ChatStore.get(chatId);\n\n                if (chat) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 5:\n                is_pinned = chat.is_pinned;\n\n                if (!(!is_pinned && !_this.canPinChats(chatId))) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 8:\n                toggleChatIsPinned(chatId, !is_pinned);\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.handleArchive =\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(event) {\n        var chatId;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _this.handleCloseContextMenu(event);\n\n                chatId = _this.props.chatId;\n\n                if (canSetChatChatList(chatId)) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 4:\n                setChatChatList(chatId, {\n                  '@type': isChatArchived(chatId) ? 'chatListMain' : 'chatListArchive'\n                });\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    _this.getViewInfoTitle = function () {\n      var _this$props = _this.props,\n          chatId = _this$props.chatId,\n          t = _this$props.t;\n      var chat = ChatStore.get(chatId);\n      if (!chat) return;\n      var type = chat.type;\n\n      switch (type['@type']) {\n        case 'chatTypeBasicGroup':\n          {\n            return t('ViewGroupInfo');\n          }\n\n        case 'chatTypePrivate':\n        case 'chatTypeSecret':\n          {\n            return t('ViewProfile');\n          }\n\n        case 'chatTypeSupergroup':\n          {\n            if (type.is_channel) {\n              return t('ViewChannelInfo');\n            }\n\n            return t('ViewGroupInfo');\n          }\n      }\n    };\n\n    _this.handleViewInfo = function (event) {\n      _this.handleCloseContextMenu(event);\n\n      var chatId = _this.props.chatId;\n      openChat(chatId, null, true);\n    };\n\n    _this.handleRead = function (event) {\n      _this.handleCloseContextMenu(event);\n\n      var chatId = _this.props.chatId;\n      var isUnread = isChatUnread(chatId);\n\n      if (isUnread) {\n        var chat = ChatStore.get(chatId);\n        if (!chat) return;\n        var is_marked_as_unread = chat.is_marked_as_unread,\n            last_message = chat.last_message,\n            unread_count = chat.unread_count;\n\n        if (unread_count > 0 && last_message) {\n          viewMessages(chatId, [last_message.id], true);\n        } else if (is_marked_as_unread) {\n          toggleChatIsMarkedAsUnread(chatId, false);\n        }\n      } else {\n        toggleChatIsMarkedAsUnread(chatId, true);\n      }\n    };\n\n    _this.dialog = React.createRef();\n\n    var _chat = ChatStore.get(_this.props.chatId);\n\n    _this.state = {\n      chat: _chat,\n      contextMenu: false,\n      left: 0,\n      top: 0\n    };\n    return _this;\n  }\n\n  _createClass(Dialog, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var _this$props2 = this.props,\n          chatId = _this$props2.chatId,\n          t = _this$props2.t,\n          hidden = _this$props2.hidden,\n          isLastPinned = _this$props2.isLastPinned,\n          style = _this$props2.style;\n      var contextMenu = this.state.contextMenu;\n\n      if (nextProps.chatId !== chatId) {\n        // console.log('[vl] Dialog.shouldUpdate true chatId');\n        return true;\n      }\n\n      if (nextProps.t !== t) {\n        // console.log('[vl] Dialog.shouldUpdate true t');\n        return true;\n      }\n\n      if (nextProps.hidden !== hidden) {\n        // console.log('[vl] Dialog.shouldUpdate true hidden');\n        return true;\n      }\n\n      if (nextProps.isLastPinned !== isLastPinned) {\n        // console.log('[vl] Dialog.shouldUpdate true isLastPinned');\n        return true;\n      }\n\n      if (nextState.contextMenu !== contextMenu) {\n        // console.log('[vl] Dialog.shouldUpdate true contextMenu');\n        return true;\n      }\n\n      if (nextProps.style && style && style.top !== nextProps.style.top) {\n        // console.log('[vl] Dialog.shouldUpdate true style');\n        return true;\n      } // console.log('[vl] Dialog.shouldUpdate false');\n\n\n      return false;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      ApplicationStore.on('clientUpdateChatId', this.onClientUpdateChatId);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      ApplicationStore.off('clientUpdateChatId', this.onClientUpdateChatId);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          chatId = _this$props3.chatId,\n          showSavedMessages = _this$props3.showSavedMessages,\n          hidden = _this$props3.hidden,\n          t = _this$props3.t,\n          isLastPinned = _this$props3.isLastPinned,\n          style = _this$props3.style;\n      var _this$state = this.state,\n          contextMenu = _this$state.contextMenu,\n          left = _this$state.left,\n          top = _this$state.top,\n          canToggleArchive = _this$state.canToggleArchive,\n          canTogglePin = _this$state.canTogglePin;\n      if (hidden) return null;\n      var chat = ChatStore.get(chatId);\n      var is_pinned = chat.is_pinned;\n      var currentChatId = ApplicationStore.getChatId();\n      var isSelected = currentChatId === chatId;\n      var isMuted = isChatMuted(chatId);\n      var isUnread = isChatUnread(chatId);\n      var isArchived = isChatArchived(chatId);\n      return React.createElement(\"div\", {\n        ref: this.dialog,\n        className: classNames('dialog', {\n          'item-selected': isSelected\n        }),\n        onMouseDown: this.handleSelect,\n        onContextMenu: this.handleContextMenu,\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"dialog-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      }, React.createElement(ChatTile, {\n        chatId: chatId,\n        dialog: true,\n        showSavedMessages: showSavedMessages,\n        showOnline: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"dialog-inner-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"tile-first-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }, React.createElement(DialogTitle, {\n        chatId: chatId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }), React.createElement(DialogMeta, {\n        chatId: chatId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"tile-second-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      }, React.createElement(DialogContent, {\n        chatId: chatId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      }), React.createElement(DialogBadge, {\n        chatId: chatId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      })))), React.createElement(Popover, {\n        open: contextMenu,\n        onClose: this.handleCloseContextMenu,\n        anchorReference: \"anchorPosition\",\n        anchorPosition: {\n          top: top,\n          left: left\n        },\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'right'\n        },\n        transformOrigin: {\n          vertical: 'top',\n          horizontal: 'left'\n        },\n        onMouseDown: function onMouseDown(e) {\n          return e.stopPropagation();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, React.createElement(MenuList, {\n        onClick: function onClick(e) {\n          return e.stopPropagation();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330\n        },\n        __self: this\n      }, canToggleArchive && React.createElement(MenuItem, {\n        onClick: this.handleArchive,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }, isArchived ? React.createElement(React.Fragment, null, React.createElement(ListItemIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335\n        },\n        __self: this\n      }, React.createElement(UnarchiveIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336\n        },\n        __self: this\n      })), React.createElement(ListItemText, {\n        primary: t('Unarchive'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338\n        },\n        __self: this\n      })) : React.createElement(React.Fragment, null, React.createElement(ListItemIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }, React.createElement(ArchiveIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343\n        },\n        __self: this\n      })), React.createElement(ListItemText, {\n        primary: t('Archive'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345\n        },\n        __self: this\n      }))), canTogglePin && React.createElement(MenuItem, {\n        onClick: this.handlePin,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351\n        },\n        __self: this\n      }, is_pinned ? React.createElement(React.Fragment, null, React.createElement(ListItemIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      }, React.createElement(UnpinIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355\n        },\n        __self: this\n      })), React.createElement(ListItemText, {\n        primary: t('UnpinFromTop'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357\n        },\n        __self: this\n      })) : React.createElement(React.Fragment, null, React.createElement(ListItemIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361\n        },\n        __self: this\n      }, React.createElement(PinIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362\n        },\n        __self: this\n      })), React.createElement(ListItemText, {\n        primary: t('PinToTop'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364\n        },\n        __self: this\n      }))), React.createElement(MenuItem, {\n        onClick: this.handleViewInfo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369\n        },\n        __self: this\n      }, isPrivateChat(chatId) ? React.createElement(React.Fragment, null, React.createElement(ListItemIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372\n        },\n        __self: this\n      }, React.createElement(UserIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373\n        },\n        __self: this\n      })), React.createElement(ListItemText, {\n        primary: this.getViewInfoTitle(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375\n        },\n        __self: this\n      })) : React.createElement(React.Fragment, null, React.createElement(ListItemIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379\n        },\n        __self: this\n      }, React.createElement(GroupIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380\n        },\n        __self: this\n      })), React.createElement(ListItemText, {\n        primary: this.getViewInfoTitle(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382\n        },\n        __self: this\n      }))), React.createElement(MenuItem, {\n        onClick: this.handleMute,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386\n        },\n        __self: this\n      }, isMuted ? React.createElement(React.Fragment, null, React.createElement(ListItemIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389\n        },\n        __self: this\n      }, React.createElement(UnmuteIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390\n        },\n        __self: this\n      })), React.createElement(ListItemText, {\n        primary: t('ChatsUnmute'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392\n        },\n        __self: this\n      })) : React.createElement(React.Fragment, null, React.createElement(ListItemIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396\n        },\n        __self: this\n      }, React.createElement(MuteIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397\n        },\n        __self: this\n      })), React.createElement(ListItemText, {\n        primary: t('ChatsMute'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399\n        },\n        __self: this\n      }))), React.createElement(MenuItem, {\n        onClick: this.handleRead,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403\n        },\n        __self: this\n      }, isUnread ? React.createElement(React.Fragment, null, React.createElement(ListItemIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406\n        },\n        __self: this\n      }, React.createElement(MessageIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407\n        },\n        __self: this\n      })), React.createElement(ListItemText, {\n        primary: t('MarkAsRead'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409\n        },\n        __self: this\n      })) : React.createElement(React.Fragment, null, React.createElement(ListItemIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413\n        },\n        __self: this\n      }, React.createElement(UnreadIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414\n        },\n        __self: this\n      })), React.createElement(ListItemText, {\n        primary: t('MarkAsUnread'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416\n        },\n        __self: this\n      }))))));\n    }\n  }]);\n\n  return Dialog;\n}(Component);\n\nDialog.propTypes = {\n  chatId: PropTypes.number.isRequired,\n  hidden: PropTypes.bool,\n  showSavedMessages: PropTypes.bool,\n  isLastPinned: PropTypes.bool,\n  style: PropTypes.object\n};\nDialog.defaultProps = {\n  hidden: false,\n  showSavedMessages: true\n};\nexport default withTranslation()(Dialog);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Tile/Dialog.js"],"names":["React","Component","PropTypes","classNames","withTranslation","ListItemIcon","ListItemText","MenuItem","MenuList","Popover","ChatTile","DialogContent","DialogBadge","DialogTitle","DialogMeta","ArchiveIcon","UnarchiveIcon","PinIcon","UnpinIcon","MuteIcon","UnmuteIcon","UserIcon","GroupIcon","MessageIcon","UnreadIcon","canSetChatChatList","isChatArchived","isChatMuted","isChatSecret","isChatUnread","isPrivateChat","setChatChatList","toggleChatIsMarkedAsUnread","toggleChatIsPinned","toggleChatNotificationSettings","openChat","viewMessages","ApplicationStore","ChatStore","OptionStore","TdLibController","Dialog","props","onClientUpdateChatId","update","chatId","previousChatId","nextChatId","forceUpdate","handleSelect","event","button","handleContextMenu","preventDefault","stopPropagation","contextMenu","state","setState","contextMenuId","Date","left","clientX","top","clientY","chat","get","is_pinned","canPinChats","canTogglePin","canToggleArchive","handleCloseContextMenu","handleMute","pinnedSumMaxOption","isSecret","send","chat_list","offset_order","offset_chat_id","limit","value","chats","pinnedSum","chat_ids","reduce","x","id","handlePin","handleArchive","getViewInfoTitle","t","type","is_channel","handleViewInfo","handleRead","isUnread","is_marked_as_unread","last_message","unread_count","dialog","createRef","nextProps","nextState","hidden","isLastPinned","style","on","off","showSavedMessages","currentChatId","getChatId","isSelected","isMuted","isArchived","vertical","horizontal","e","propTypes","number","isRequired","bool","object","defaultProps"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport Popover from '@material-ui/core/Popover';\nimport ChatTile from './ChatTile';\nimport DialogContent from './DialogContent';\nimport DialogBadge from './DialogBadge';\nimport DialogTitle from './DialogTitle';\nimport DialogMeta from './DialogMeta';\nimport ArchiveIcon from '../../Assets/Icons/Archive';\nimport UnarchiveIcon from '../../Assets/Icons/Unarchive';\nimport PinIcon from '../../Assets/Icons/Pin2';\nimport UnpinIcon from '../../Assets/Icons/Pin2';\nimport MuteIcon from '../../Assets/Icons/Mute';\nimport UnmuteIcon from '../../Assets/Icons/Unmute';\nimport UserIcon from '../../Assets/Icons/User';\nimport GroupIcon from '../../Assets/Icons/Group';\nimport MessageIcon from '../../Assets/Icons/Message';\nimport UnreadIcon from '../../Assets/Icons/Unread';\nimport {\n    canSetChatChatList,\n    isChatArchived,\n    isChatMuted,\n    isChatSecret,\n    isChatUnread,\n    isPrivateChat\n} from '../../Utils/Chat';\nimport {\n    setChatChatList,\n    toggleChatIsMarkedAsUnread,\n    toggleChatIsPinned,\n    toggleChatNotificationSettings\n} from '../../Actions/Chat';\nimport { openChat } from '../../Actions/Client';\nimport { viewMessages } from '../../Actions/Message';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport OptionStore from '../../Stores/OptionStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './Dialog.css';\n\nclass Dialog extends Component {\n    static contextMenuId;\n\n    constructor(props) {\n        super(props);\n\n        this.dialog = React.createRef();\n\n        const chat = ChatStore.get(this.props.chatId);\n        this.state = {\n            chat,\n            contextMenu: false,\n            left: 0,\n            top: 0\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const { chatId, t, hidden, isLastPinned, style } = this.props;\n        const { contextMenu } = this.state;\n\n        if (nextProps.chatId !== chatId) {\n            // console.log('[vl] Dialog.shouldUpdate true chatId');\n            return true;\n        }\n\n        if (nextProps.t !== t) {\n            // console.log('[vl] Dialog.shouldUpdate true t');\n            return true;\n        }\n\n        if (nextProps.hidden !== hidden) {\n            // console.log('[vl] Dialog.shouldUpdate true hidden');\n            return true;\n        }\n\n        if (nextProps.isLastPinned !== isLastPinned) {\n            // console.log('[vl] Dialog.shouldUpdate true isLastPinned');\n            return true;\n        }\n\n        if (nextState.contextMenu !== contextMenu) {\n            // console.log('[vl] Dialog.shouldUpdate true contextMenu');\n            return true;\n        }\n\n        if (nextProps.style && style && style.top !== nextProps.style.top) {\n            // console.log('[vl] Dialog.shouldUpdate true style');\n            return true;\n        }\n\n        // console.log('[vl] Dialog.shouldUpdate false');\n        return false;\n    }\n\n    componentDidMount() {\n        ApplicationStore.on('clientUpdateChatId', this.onClientUpdateChatId);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.off('clientUpdateChatId', this.onClientUpdateChatId);\n    }\n\n    onClientUpdateChatId = update => {\n        const { chatId } = this.props;\n\n        if (chatId === update.previousChatId || chatId === update.nextChatId) {\n            this.forceUpdate();\n        }\n    };\n\n    handleSelect = event => {\n        if (event.button === 0) {\n            openChat(this.props.chatId);\n        }\n    };\n\n    handleContextMenu = async event => {\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        const { chatId } = this.props;\n        const { contextMenu } = this.state;\n\n        if (contextMenu) {\n            this.setState({ contextMenu: false });\n        } else {\n            const contextMenuId = new Date();\n            Dialog.contextMenuId = contextMenuId;\n\n            const left = event.clientX;\n            const top = event.clientY;\n            const chat = ChatStore.get(chatId);\n            const { is_pinned } = chat;\n            const canTogglePin = (await this.canPinChats(chatId)) || is_pinned;\n            const canToggleArchive = canSetChatChatList(chatId);\n\n            if (Dialog.contextMenuId !== contextMenuId) {\n                return;\n            }\n\n            this.setState({\n                contextMenu: true,\n                canTogglePin,\n                canToggleArchive,\n                left,\n                top\n            });\n        }\n    };\n\n    handleCloseContextMenu = event => {\n        if (event) {\n            event.stopPropagation();\n        }\n\n        this.setState({ contextMenu: false });\n    };\n\n    handleMute = event => {\n        this.handleCloseContextMenu(event);\n\n        const { chatId } = this.props;\n\n        toggleChatNotificationSettings(chatId, !isChatMuted(chatId));\n    };\n\n    canPinChats = async chatId => {\n        const pinnedSumMaxOption = isChatArchived(chatId)\n            ? OptionStore.get('pinned_archived_chat_count_max')\n            : OptionStore.get('pinned_chat_count_max');\n        if (!pinnedSumMaxOption) return false;\n\n        const isSecret = isChatSecret(chatId);\n        const chats = await TdLibController.send({\n            '@type': 'getChats',\n            chat_list: isChatArchived(chatId) ? { '@type': 'chatListArchive' } : { '@type': 'chatListMain' },\n            offset_order: '9223372036854775807',\n            offset_chat_id: 0,\n            limit: pinnedSumMaxOption.value + 10\n        });\n\n        const pinnedSum = chats.chat_ids.reduce((x, id) => {\n            if (isChatSecret(id) !== isSecret) return x;\n\n            const chat = ChatStore.get(id);\n\n            return x + (chat && chat.is_pinned ? 1 : 0);\n        }, 0);\n\n        return pinnedSum < pinnedSumMaxOption.value;\n    };\n\n    handlePin = async event => {\n        this.handleCloseContextMenu(event);\n\n        const { chatId } = this.props;\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n        const { is_pinned } = chat;\n\n        if (!is_pinned && !this.canPinChats(chatId)) return;\n\n        toggleChatIsPinned(chatId, !is_pinned);\n    };\n\n    handleArchive = async event => {\n        this.handleCloseContextMenu(event);\n\n        const { chatId } = this.props;\n        if (!canSetChatChatList(chatId)) return;\n\n        setChatChatList(chatId, { '@type': isChatArchived(chatId) ? 'chatListMain' : 'chatListArchive' });\n    };\n\n    getViewInfoTitle = () => {\n        const { chatId, t } = this.props;\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n\n        const { type } = chat;\n        switch (type['@type']) {\n            case 'chatTypeBasicGroup': {\n                return t('ViewGroupInfo');\n            }\n            case 'chatTypePrivate':\n            case 'chatTypeSecret': {\n                return t('ViewProfile');\n            }\n            case 'chatTypeSupergroup': {\n                if (type.is_channel) {\n                    return t('ViewChannelInfo');\n                }\n\n                return t('ViewGroupInfo');\n            }\n        }\n    };\n\n    handleViewInfo = event => {\n        this.handleCloseContextMenu(event);\n\n        const { chatId } = this.props;\n\n        openChat(chatId, null, true);\n    };\n\n    handleRead = event => {\n        this.handleCloseContextMenu(event);\n\n        const { chatId } = this.props;\n\n        const isUnread = isChatUnread(chatId);\n        if (isUnread) {\n            const chat = ChatStore.get(chatId);\n            if (!chat) return;\n\n            const { is_marked_as_unread, last_message, unread_count } = chat;\n            if (unread_count > 0 && last_message) {\n                viewMessages(chatId, [last_message.id], true);\n            } else if (is_marked_as_unread) {\n                toggleChatIsMarkedAsUnread(chatId, false);\n            }\n        } else {\n            toggleChatIsMarkedAsUnread(chatId, true);\n        }\n    };\n\n    render() {\n        const { chatId, showSavedMessages, hidden, t, isLastPinned, style } = this.props;\n        const { contextMenu, left, top, canToggleArchive, canTogglePin } = this.state;\n\n        if (hidden) return null;\n\n        const chat = ChatStore.get(chatId);\n        const { is_pinned } = chat;\n        const currentChatId = ApplicationStore.getChatId();\n        const isSelected = currentChatId === chatId;\n        const isMuted = isChatMuted(chatId);\n        const isUnread = isChatUnread(chatId);\n        const isArchived = isChatArchived(chatId);\n        return (\n            <div\n                ref={this.dialog}\n                className={classNames('dialog', { 'item-selected': isSelected })}\n                onMouseDown={this.handleSelect}\n                onContextMenu={this.handleContextMenu}\n                style={style}>\n                <div className='dialog-wrapper'>\n                    <ChatTile chatId={chatId} dialog showSavedMessages={showSavedMessages} showOnline />\n                    <div className='dialog-inner-wrapper'>\n                        <div className='tile-first-row'>\n                            <DialogTitle chatId={chatId} />\n                            <DialogMeta chatId={chatId} />\n                        </div>\n                        <div className='tile-second-row'>\n                            <DialogContent chatId={chatId} />\n                            <DialogBadge chatId={chatId} />\n                        </div>\n                    </div>\n                </div>\n                <Popover\n                    open={contextMenu}\n                    onClose={this.handleCloseContextMenu}\n                    anchorReference='anchorPosition'\n                    anchorPosition={{ top, left }}\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'right'\n                    }}\n                    transformOrigin={{\n                        vertical: 'top',\n                        horizontal: 'left'\n                    }}\n                    onMouseDown={e => e.stopPropagation()}>\n                    <MenuList onClick={e => e.stopPropagation()}>\n                        {canToggleArchive && (\n                            <MenuItem onClick={this.handleArchive}>\n                                {isArchived ? (\n                                    <>\n                                        <ListItemIcon>\n                                            <UnarchiveIcon />\n                                        </ListItemIcon>\n                                        <ListItemText primary={t('Unarchive')} />\n                                    </>\n                                ) : (\n                                    <>\n                                        <ListItemIcon>\n                                            <ArchiveIcon />\n                                        </ListItemIcon>\n                                        <ListItemText primary={t('Archive')} />\n                                    </>\n                                )}\n                            </MenuItem>\n                        )}\n                        {canTogglePin && (\n                            <MenuItem onClick={this.handlePin}>\n                                {is_pinned ? (\n                                    <>\n                                        <ListItemIcon>\n                                            <UnpinIcon />\n                                        </ListItemIcon>\n                                        <ListItemText primary={t('UnpinFromTop')} />\n                                    </>\n                                ) : (\n                                    <>\n                                        <ListItemIcon>\n                                            <PinIcon />\n                                        </ListItemIcon>\n                                        <ListItemText primary={t('PinToTop')} />\n                                    </>\n                                )}\n                            </MenuItem>\n                        )}\n                        <MenuItem onClick={this.handleViewInfo}>\n                            {isPrivateChat(chatId) ? (\n                                <>\n                                    <ListItemIcon>\n                                        <UserIcon />\n                                    </ListItemIcon>\n                                    <ListItemText primary={this.getViewInfoTitle()} />\n                                </>\n                            ) : (\n                                <>\n                                    <ListItemIcon>\n                                        <GroupIcon />\n                                    </ListItemIcon>\n                                    <ListItemText primary={this.getViewInfoTitle()} />\n                                </>\n                            )}\n                        </MenuItem>\n                        <MenuItem onClick={this.handleMute}>\n                            {isMuted ? (\n                                <>\n                                    <ListItemIcon>\n                                        <UnmuteIcon />\n                                    </ListItemIcon>\n                                    <ListItemText primary={t('ChatsUnmute')} />\n                                </>\n                            ) : (\n                                <>\n                                    <ListItemIcon>\n                                        <MuteIcon />\n                                    </ListItemIcon>\n                                    <ListItemText primary={t('ChatsMute')} />\n                                </>\n                            )}\n                        </MenuItem>\n                        <MenuItem onClick={this.handleRead}>\n                            {isUnread ? (\n                                <>\n                                    <ListItemIcon>\n                                        <MessageIcon />\n                                    </ListItemIcon>\n                                    <ListItemText primary={t('MarkAsRead')} />\n                                </>\n                            ) : (\n                                <>\n                                    <ListItemIcon>\n                                        <UnreadIcon />\n                                    </ListItemIcon>\n                                    <ListItemText primary={t('MarkAsUnread')} />\n                                </>\n                            )}\n                        </MenuItem>\n                    </MenuList>\n                </Popover>\n            </div>\n        );\n    }\n}\n\nDialog.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    hidden: PropTypes.bool,\n    showSavedMessages: PropTypes.bool,\n    isLastPinned: PropTypes.bool,\n    style: PropTypes.object\n};\n\nDialog.defaultProps = {\n    hidden: false,\n    showSavedMessages: true\n};\n\nexport default withTranslation()(Dialog);\n"]},"metadata":{},"sourceType":"module"}