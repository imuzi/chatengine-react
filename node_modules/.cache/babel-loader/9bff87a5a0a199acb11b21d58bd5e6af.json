{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Popup/PollResultsDialog.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport PollOptionResults from './PollOptionResults';\nimport PollStore from '../../Stores/PollStore';\nimport './PollResultsDialog.css';\n\nvar PollResultsDialog =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PollResultsDialog, _React$Component);\n\n  function PollResultsDialog() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PollResultsDialog);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PollResultsDialog)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onClientUpdateClosePollResults = function (update) {\n      var onClose = _this.props.onClose;\n      onClose();\n    };\n\n    _this.handleClose = function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n      var onClose = _this.props.onClose;\n      onClose();\n    };\n\n    _this.handleClick = function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    };\n\n    _this.handleContextMenu = function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    };\n\n    return _this;\n  }\n\n  _createClass(PollResultsDialog, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      PollStore.on('clientUpdateClosePollResults', this.onClientUpdateClosePollResults);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      PollStore.off('clientUpdateClosePollResults', this.onClientUpdateClosePollResults);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          chatId = _this$props.chatId,\n          messageId = _this$props.messageId,\n          poll = _this$props.poll,\n          t = _this$props.t;\n      if (!poll) return;\n      var options = poll.options,\n          type = poll.type,\n          question = poll.question;\n      var isQuiz = type && type['@type'] === 'pollTypeQuiz';\n      return React.createElement(Dialog, {\n        classes: {\n          root: 'chat-info-dialog-root',\n          container: 'chat-info-dialog-container',\n          paper: 'chat-info-dialog-paper'\n        },\n        transitionDuration: 0,\n        open: true,\n        onClick: this.handleClick,\n        onContextMenu: this.handleContextMenu,\n        onClose: this.handleClose,\n        \"aria-labelledby\": \"poll-results-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(DialogTitle, {\n        id: \"poll-results-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, isQuiz ? t('QuizAnswers') : t('PollResults')), React.createElement(DialogContent, {\n        classes: {\n          root: 'poll-results-content'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"poll-results-question\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, question), options.map(function (x, i) {\n        return React.createElement(PollOptionResults, {\n          key: i,\n          isQuiz: isQuiz,\n          chatId: chatId,\n          messageId: messageId,\n          optionId: i,\n          option: x,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return PollResultsDialog;\n}(React.Component);\n\nPollResultsDialog.propTypes = {\n  chatId: PropTypes.number.isRequired,\n  messageId: PropTypes.number.isRequired,\n  poll: PropTypes.object.isRequired\n};\nexport default withTranslation()(PollResultsDialog);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Popup/PollResultsDialog.js"],"names":["React","PropTypes","withTranslation","Dialog","DialogTitle","DialogContent","PollOptionResults","PollStore","PollResultsDialog","onClientUpdateClosePollResults","update","onClose","props","handleClose","event","preventDefault","stopPropagation","handleClick","handleContextMenu","on","off","chatId","messageId","poll","t","options","type","question","isQuiz","root","container","paper","map","x","i","Component","propTypes","number","isRequired","object"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport PollOptionResults from './PollOptionResults';\nimport PollStore from '../../Stores/PollStore';\nimport './PollResultsDialog.css';\n\nclass PollResultsDialog extends React.Component {\n    componentDidMount() {\n        PollStore.on('clientUpdateClosePollResults', this.onClientUpdateClosePollResults);\n    }\n\n    componentWillUnmount() {\n        PollStore.off('clientUpdateClosePollResults', this.onClientUpdateClosePollResults);\n    }\n\n    onClientUpdateClosePollResults = update => {\n        const { onClose } = this.props;\n        onClose();\n    };\n\n    handleClose = event => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const { onClose } = this.props;\n        onClose();\n    };\n\n    handleClick = event => {\n        event.preventDefault();\n        event.stopPropagation();\n    };\n\n    handleContextMenu = event => {\n        event.preventDefault();\n        event.stopPropagation();\n    };\n\n    render() {\n        const { chatId, messageId, poll, t } = this.props;\n        if (!poll) return;\n\n        const { options, type, question } = poll;\n        const isQuiz = type && type['@type'] === 'pollTypeQuiz';\n\n        return (\n            <Dialog\n                classes={{\n                    root: 'chat-info-dialog-root',\n                    container: 'chat-info-dialog-container',\n                    paper: 'chat-info-dialog-paper'\n                }}\n                transitionDuration={0}\n                open={true}\n                onClick={this.handleClick}\n                onContextMenu={this.handleContextMenu}\n                onClose={this.handleClose}\n                aria-labelledby='poll-results-title'>\n                <DialogTitle id='poll-results-title'>{isQuiz ? t('QuizAnswers') : t('PollResults')}</DialogTitle>\n                <DialogContent classes={{ root: 'poll-results-content' }}>\n                    <div className='poll-results-question'>{question}</div>\n                    {options.map((x, i) => (\n                        <PollOptionResults\n                            key={i}\n                            isQuiz={isQuiz}\n                            chatId={chatId}\n                            messageId={messageId}\n                            optionId={i}\n                            option={x}\n                        />\n                    ))}\n                </DialogContent>\n            </Dialog>\n        );\n    }\n}\n\nPollResultsDialog.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    messageId: PropTypes.number.isRequired,\n    poll: PropTypes.object.isRequired\n};\n\nexport default withTranslation()(PollResultsDialog);\n"]},"metadata":{},"sourceType":"module"}