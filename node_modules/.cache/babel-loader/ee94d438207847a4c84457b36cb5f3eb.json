{"ast":null,"code":"import _slicedToArray from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { TYPING_INPUT_INTERVAL_S } from '../Constants';\n\nvar InputTypingManager =\n/*#__PURE__*/\nfunction () {\n  function InputTypingManager(chatId, timeoutCallback) {\n    _classCallCheck(this, InputTypingManager);\n\n    this.actions = new Map();\n    this.timerId = null;\n    this.chatId = chatId;\n    this.timeoutCallback = timeoutCallback;\n    this.handleTimer = this.handleTimer.bind(this);\n    this.addAction = this.addAction.bind(this);\n    this.clearAction = this.clearAction.bind(this);\n    this.setActionsTimeout = this.setActionsTimeout.bind(this);\n  }\n\n  _createClass(InputTypingManager, [{\n    key: \"handleTimer\",\n    value: function handleTimer() {\n      var now = new Date();\n      var expiredActions = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.actions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _ref3 = _step.value;\n\n          var _ref2 = _slicedToArray(_ref3, 2);\n\n          var key = _ref2[0];\n          var value = _ref2[1];\n          var actionTimeout = value.expire - now;\n          if (actionTimeout <= 0) expiredActions.push(key);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      for (var _i = 0, _expiredActions = expiredActions; _i < _expiredActions.length; _i++) {\n        var _key = _expiredActions[_i];\n        this.actions.delete(_key);\n      }\n\n      var update = {\n        '@type': 'updateUserChatAction',\n        chat_id: this.chatId,\n        action: {\n          '@type': 'chatActionTimerUpdate'\n        }\n      };\n      this.timeoutCallback(update); // ChatStore.emit('updateUserChatAction', update);\n\n      this.setActionsTimeout();\n    }\n  }, {\n    key: \"addAction\",\n    value: function addAction(userId, action) {\n      var expire = new Date();\n      expire.setSeconds(expire.getSeconds() + TYPING_INPUT_INTERVAL_S);\n      this.actions.set(userId, {\n        expire: expire,\n        action: action\n      });\n\n      if (this.timerId) {\n        clearTimeout(this.timerId);\n      }\n\n      this.setActionsTimeout();\n    }\n  }, {\n    key: \"setActionsTimeout\",\n    value: function setActionsTimeout() {\n      var now = new Date();\n      var timeout = 1000000;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.actions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var _ref6 = _step2.value;\n\n          var _ref5 = _slicedToArray(_ref6, 2);\n\n          var key = _ref5[0];\n          var value = _ref5[1];\n          var actionTimeout = value.expire - now;\n          if (actionTimeout < timeout) timeout = actionTimeout;\n          if (timeout < 0) timeout = 0;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      if (timeout < 1000000) {\n        this.timerId = setTimeout(this.handleTimer, timeout);\n      }\n    }\n  }, {\n    key: \"clearAction\",\n    value: function clearAction(userId) {\n      this.actions.delete(userId);\n\n      if (this.timerId) {\n        clearTimeout(this.timerId);\n      }\n\n      this.setActionsTimeout();\n    }\n  }]);\n\n  return InputTypingManager;\n}();\n\nexport default InputTypingManager;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Utils/InputTypingManager.js"],"names":["TYPING_INPUT_INTERVAL_S","InputTypingManager","chatId","timeoutCallback","actions","Map","timerId","handleTimer","bind","addAction","clearAction","setActionsTimeout","now","Date","expiredActions","key","value","actionTimeout","expire","push","delete","update","chat_id","action","userId","setSeconds","getSeconds","set","clearTimeout","timeout","setTimeout"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { TYPING_INPUT_INTERVAL_S } from '../Constants';\n\nclass InputTypingManager {\n    constructor(chatId, timeoutCallback) {\n        this.actions = new Map();\n        this.timerId = null;\n        this.chatId = chatId;\n        this.timeoutCallback = timeoutCallback;\n\n        this.handleTimer = this.handleTimer.bind(this);\n        this.addAction = this.addAction.bind(this);\n        this.clearAction = this.clearAction.bind(this);\n        this.setActionsTimeout = this.setActionsTimeout.bind(this);\n    }\n\n    handleTimer() {\n        let now = new Date();\n        let expiredActions = [];\n        for (let [key, value] of this.actions) {\n            let actionTimeout = value.expire - now;\n            if (actionTimeout <= 0) expiredActions.push(key);\n        }\n\n        for (let key of expiredActions) {\n            this.actions.delete(key);\n        }\n\n        let update = {\n            '@type': 'updateUserChatAction',\n            chat_id: this.chatId,\n            action: { '@type': 'chatActionTimerUpdate' }\n        };\n\n        this.timeoutCallback(update);\n        // ChatStore.emit('updateUserChatAction', update);\n\n        this.setActionsTimeout();\n    }\n\n    addAction(userId, action) {\n        let expire = new Date();\n        expire.setSeconds(expire.getSeconds() + TYPING_INPUT_INTERVAL_S);\n\n        this.actions.set(userId, { expire: expire, action: action });\n\n        if (this.timerId) {\n            clearTimeout(this.timerId);\n        }\n\n        this.setActionsTimeout();\n    }\n\n    setActionsTimeout() {\n        let now = new Date();\n        let timeout = 1000000;\n        for (let [key, value] of this.actions) {\n            let actionTimeout = value.expire - now;\n            if (actionTimeout < timeout) timeout = actionTimeout;\n            if (timeout < 0) timeout = 0;\n        }\n\n        if (timeout < 1000000) {\n            this.timerId = setTimeout(this.handleTimer, timeout);\n        }\n    }\n\n    clearAction(userId) {\n        this.actions.delete(userId);\n\n        if (this.timerId) {\n            clearTimeout(this.timerId);\n        }\n\n        this.setActionsTimeout();\n    }\n}\n\nexport default InputTypingManager;\n"]},"metadata":{},"sourceType":"module"}