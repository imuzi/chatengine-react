{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Message/Media/PollPercentage.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ANIMATION_DURATION_200MS } from './../../../Constants';\nimport './PollPercentage.css';\n\nvar PollPercentage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PollPercentage, _React$Component);\n\n  function PollPercentage(props) {\n    var _this;\n\n    _classCallCheck(this, PollPercentage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PollPercentage).call(this, props));\n\n    _this.updateAnimation = function () {\n      _this.stopAnimation();\n\n      _this.handle = requestAnimationFrame(_this.onAnimationFrame);\n    };\n\n    _this.stopAnimation = function () {\n      if (!_this.handle) return;\n      cancelAnimationFrame(_this.handle);\n      _this.handle = null;\n    };\n\n    _this.onAnimationFrame = function () {\n      var _this$state = _this.state,\n          startTime = _this$state.startTime,\n          from = _this$state.from,\n          to = _this$state.to;\n      var timePassed = Date.now() - startTime;\n\n      if (timePassed >= ANIMATION_DURATION_200MS) {\n        _this.setState({\n          animated: to\n        });\n\n        _this.stopAnimation();\n      } else {\n        var animated = from + Math.floor((to - from) * timePassed / ANIMATION_DURATION_200MS);\n\n        _this.setState({\n          animated: animated\n        });\n\n        _this.handle = requestAnimationFrame(_this.onAnimationFrame);\n      }\n    };\n\n    _this.handle = null;\n    var value = props.value;\n    _this.state = {\n      from: value,\n      to: value,\n      animated: value,\n      prevPropsValue: value\n    };\n    return _this;\n  }\n\n  _createClass(PollPercentage, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState, nextContext) {\n      var _this$props = this.props,\n          closed = _this$props.closed,\n          theme = _this$props.theme,\n          value = _this$props.value;\n      var animated = this.state.animated;\n\n      if (closed !== nextProps.closed) {\n        return true;\n      }\n\n      if (theme !== nextProps.theme) {\n        return true;\n      }\n\n      if (value !== nextProps.value) {\n        return true;\n      }\n\n      if (animated !== nextState.animated) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      if (prevProps.value !== this.props.value) {\n        this.updateAnimation();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.stopAnimation();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          chosen = _this$props2.chosen,\n          closed = _this$props2.closed,\n          onClick = _this$props2.onClick;\n      var animated = this.state.animated;\n      return React.createElement(\"div\", {\n        className: \"poll-percentage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(React.Fragment, null, animated + '%'));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.value !== state.prevPropsValue) {\n        return {\n          startTime: Date.now(),\n          from: state.animated,\n          to: props.value,\n          prevPropsValue: props.value\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return PollPercentage;\n}(React.Component);\n\nPollPercentage.propTypes = {\n  value: PropTypes.number.isRequired,\n  chosen: PropTypes.bool,\n  closed: PropTypes.bool,\n  onClick: PropTypes.func\n};\nexport default PollPercentage;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Message/Media/PollPercentage.js"],"names":["React","PropTypes","ANIMATION_DURATION_200MS","PollPercentage","props","updateAnimation","stopAnimation","handle","requestAnimationFrame","onAnimationFrame","cancelAnimationFrame","state","startTime","from","to","timePassed","Date","now","setState","animated","Math","floor","value","prevPropsValue","nextProps","nextState","nextContext","closed","theme","prevProps","prevState","snapshot","chosen","onClick","Component","propTypes","number","isRequired","bool","func"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ANIMATION_DURATION_200MS } from './../../../Constants';\nimport './PollPercentage.css';\n\nclass PollPercentage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handle = null;\n\n        const { value } = props;\n\n        this.state = {\n            from: value,\n            to: value,\n            animated: value,\n\n            prevPropsValue: value\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { closed, theme, value } = this.props;\n        const { animated } = this.state;\n\n        if (closed !== nextProps.closed) {\n            return true;\n        }\n\n        if (theme !== nextProps.theme) {\n            return true;\n        }\n\n        if (value !== nextProps.value) {\n            return true;\n        }\n\n        if (animated !== nextState.animated) {\n            return true;\n        }\n\n        return false;\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.value !== state.prevPropsValue) {\n            return {\n                startTime: Date.now(),\n                from: state.animated,\n                to: props.value,\n\n                prevPropsValue: props.value\n            };\n        }\n\n        return null;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.value !== this.props.value) {\n            this.updateAnimation();\n        }\n    }\n\n    componentWillUnmount() {\n        this.stopAnimation();\n    }\n\n    updateAnimation = () => {\n        this.stopAnimation();\n\n        this.handle = requestAnimationFrame(this.onAnimationFrame);\n    };\n\n    stopAnimation = () => {\n        if (!this.handle) return;\n\n        cancelAnimationFrame(this.handle);\n        this.handle = null;\n    };\n\n    onAnimationFrame = () => {\n        const { startTime, from, to } = this.state;\n\n        const timePassed = Date.now() - startTime;\n\n        if (timePassed >= ANIMATION_DURATION_200MS) {\n            this.setState({ animated: to });\n            this.stopAnimation();\n        } else {\n            const animated = from + Math.floor(((to - from) * timePassed) / ANIMATION_DURATION_200MS);\n            this.setState({ animated });\n            this.handle = requestAnimationFrame(this.onAnimationFrame);\n        }\n    };\n\n    render() {\n        const { chosen, closed, onClick } = this.props;\n        const { animated } = this.state;\n\n        return (\n            <div className='poll-percentage'>\n                {/*{!closed && chosen ? (*/}\n                {/*    <a className='poll-percentage-action' onClick={onClick}>*/}\n                {/*        {animated + '%'}*/}\n                {/*    </a>*/}\n                {/*) : (*/}\n                {/*    <>{animated + '%'}</>*/}\n                {/*)}*/}\n                <>{animated + '%'}</>\n            </div>\n        );\n    }\n}\n\nPollPercentage.propTypes = {\n    value: PropTypes.number.isRequired,\n    chosen: PropTypes.bool,\n    closed: PropTypes.bool,\n    onClick: PropTypes.func\n};\n\nexport default PollPercentage;\n"]},"metadata":{},"sourceType":"module"}