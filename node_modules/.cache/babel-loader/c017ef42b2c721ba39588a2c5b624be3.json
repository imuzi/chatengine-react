{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport EventEmitter from './EventEmitter';\nimport TdLibController from '../Controllers/TdLibController';\n\nvar StickerStore =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(StickerStore, _EventEmitter);\n\n  function StickerStore() {\n    var _this;\n\n    _classCallCheck(this, StickerStore);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StickerStore).call(this));\n\n    _this.reset = function () {\n      _this.stickerSet = null;\n      _this.hint = null;\n      _this.animationData = new WeakMap();\n    };\n\n    _this.onUpdate = function (update) {\n      switch (update['@type']) {\n        case 'updateAuthorizationState':\n          {\n            var authorization_state = update.authorization_state;\n            if (!authorization_state) break;\n\n            switch (authorization_state['@type']) {\n              case 'authorizationStateClosed':\n                {\n                  _this.reset();\n\n                  break;\n                }\n            }\n\n            break;\n          }\n\n        case 'updateInstalledStickerSets':\n          {\n            var sticker_set_ids = update.sticker_set_ids;\n\n            if (_this.stickerSet) {\n              var _this$stickerSet = _this.stickerSet,\n                  id = _this$stickerSet.id,\n                  is_installed = _this$stickerSet.is_installed;\n\n              if (is_installed !== sticker_set_ids.some(function (x) {\n                return x === id;\n              })) {\n                _this.stickerSet = Object.assign({}, _this.stickerSet, {\n                  is_installed: !is_installed\n                });\n              }\n            }\n\n            _this.emit('updateInstalledStickerSets', update);\n\n            break;\n          }\n\n        case 'updateRecentStickers':\n          {\n            _this.emit('updateRecentStickers', update);\n\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    _this.onClientUpdate = function (update) {\n      switch (update['@type']) {\n        case 'clientUpdateStickerSend':\n          {\n            _this.emit('clientUpdateStickerSend', update);\n\n            break;\n          }\n\n        case 'clientUpdateLocalStickersHint':\n          {\n            var hint = update.hint;\n            _this.hint = hint;\n\n            _this.emit('clientUpdateLocalStickersHint', update);\n\n            break;\n          }\n\n        case 'clientUpdateRemoteStickersHint':\n          {\n            var _hint = update.hint;\n\n            if (_this.hint && _this.hint.timestamp === _hint.timestamp) {\n              _this.hint = Object.assign({}, _this.hint, {\n                foundStickers: _hint.stickers\n              });\n            }\n\n            _this.emit('clientUpdateRemoteStickersHint', update);\n\n            break;\n          }\n\n        case 'clientUpdateStickerSet':\n          {\n            var stickerSet = update.stickerSet;\n            _this.stickerSet = stickerSet;\n\n            _this.emit('clientUpdateStickerSet', update);\n\n            break;\n          }\n\n        case 'clientUpdateStickerSetPosition':\n          {\n            _this.emit('clientUpdateStickerSetPosition', update);\n\n            break;\n          }\n\n        case 'clientUpdateStickerPreview':\n          {\n            _this.emit('clientUpdateStickerPreview', update);\n\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    _this.addTdLibListener = function () {\n      TdLibController.on('update', _this.onUpdate);\n      TdLibController.on('clientUpdate', _this.onClientUpdate);\n    };\n\n    _this.removeTdLibListener = function () {\n      TdLibController.off('update', _this.onUpdate);\n      TdLibController.off('clientUpdate', _this.onClientUpdate);\n    };\n\n    _this.reset();\n\n    _this.addTdLibListener();\n\n    return _this;\n  }\n\n  _createClass(StickerStore, [{\n    key: \"getAnimationData\",\n    value: function getAnimationData(key) {\n      return this.animationData.get(key);\n    }\n  }, {\n    key: \"setAnimationData\",\n    value: function setAnimationData(key, data) {\n      this.animationData.set(key, data);\n    }\n  }]);\n\n  return StickerStore;\n}(EventEmitter);\n\nvar store = new StickerStore();\nwindow.sticker = store;\nexport default store;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Stores/StickerStore.js"],"names":["EventEmitter","TdLibController","StickerStore","reset","stickerSet","hint","animationData","WeakMap","onUpdate","update","authorization_state","sticker_set_ids","id","is_installed","some","x","Object","assign","emit","onClientUpdate","timestamp","foundStickers","stickers","addTdLibListener","on","removeTdLibListener","off","key","get","data","set","store","window","sticker"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport EventEmitter from './EventEmitter';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass StickerStore extends EventEmitter {\n    constructor() {\n        super();\n\n        this.reset();\n\n        this.addTdLibListener();\n    }\n\n    reset = () => {\n        this.stickerSet = null;\n        this.hint = null;\n        this.animationData = new WeakMap();\n    };\n\n    onUpdate = update => {\n        switch (update['@type']) {\n            case 'updateAuthorizationState': {\n                const { authorization_state } = update;\n                if (!authorization_state) break;\n\n                switch (authorization_state['@type']) {\n                    case 'authorizationStateClosed': {\n                        this.reset();\n                        break;\n                    }\n                }\n\n                break;\n            }\n            case 'updateInstalledStickerSets': {\n                const { sticker_set_ids } = update;\n                if (this.stickerSet) {\n                    const { id, is_installed } = this.stickerSet;\n                    if (is_installed !== sticker_set_ids.some(x => x === id)) {\n                        this.stickerSet = Object.assign({}, this.stickerSet, { is_installed: !is_installed });\n                    }\n                }\n\n                this.emit('updateInstalledStickerSets', update);\n                break;\n            }\n            case 'updateRecentStickers': {\n                this.emit('updateRecentStickers', update);\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    onClientUpdate = update => {\n        switch (update['@type']) {\n            case 'clientUpdateStickerSend': {\n                this.emit('clientUpdateStickerSend', update);\n                break;\n            }\n            case 'clientUpdateLocalStickersHint': {\n                const { hint } = update;\n\n                this.hint = hint;\n\n                this.emit('clientUpdateLocalStickersHint', update);\n                break;\n            }\n            case 'clientUpdateRemoteStickersHint': {\n                const { hint } = update;\n\n                if (this.hint && this.hint.timestamp === hint.timestamp) {\n                    this.hint = Object.assign({}, this.hint, { foundStickers: hint.stickers });\n                }\n\n                this.emit('clientUpdateRemoteStickersHint', update);\n                break;\n            }\n            case 'clientUpdateStickerSet': {\n                const { stickerSet } = update;\n\n                this.stickerSet = stickerSet;\n\n                this.emit('clientUpdateStickerSet', update);\n                break;\n            }\n            case 'clientUpdateStickerSetPosition': {\n                this.emit('clientUpdateStickerSetPosition', update);\n                break;\n            }\n            case 'clientUpdateStickerPreview': {\n                this.emit('clientUpdateStickerPreview', update);\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    addTdLibListener = () => {\n        TdLibController.on('update', this.onUpdate);\n        TdLibController.on('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.off('update', this.onUpdate);\n        TdLibController.off('clientUpdate', this.onClientUpdate);\n    };\n\n    getAnimationData(key) {\n        return this.animationData.get(key);\n    }\n\n    setAnimationData(key, data) {\n        this.animationData.set(key, data);\n    }\n}\n\nconst store = new StickerStore();\nwindow.sticker = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}