{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Message/Media/VoiceNoteSlider.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Slider from '@material-ui/core/Slider';\nimport { PLAYER_PROGRESS_TIMEOUT_MS } from '../../../Constants';\nimport PlayerStore from '../../../Stores/PlayerStore';\nimport TdLibController from '../../../Controllers/TdLibController';\nimport './VoiceNoteSlider.css';\n\nvar VoiceNoteSlider =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(VoiceNoteSlider, _React$Component);\n\n  function VoiceNoteSlider(props) {\n    var _this;\n\n    _classCallCheck(this, VoiceNoteSlider);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VoiceNoteSlider).call(this, props));\n\n    _this.reset = function () {\n      var duration = _this.props.duration;\n      var value = _this.state.value;\n\n      if (value === 1) {\n        _this.setState({\n          active: false,\n          currentTime: 0\n        });\n\n        setTimeout(function () {\n          var currentTime = _this.state.currentTime;\n\n          if (!currentTime) {\n            _this.setState({\n              value: _this.getValue(0, duration, false)\n            });\n          }\n        }, PLAYER_PROGRESS_TIMEOUT_MS);\n      } else {\n        _this.setState({\n          active: false,\n          currentTime: 0,\n          value: _this.getValue(0, duration, false)\n        });\n      }\n    };\n\n    _this.onClientUpdateMediaEnd = function (update) {\n      var _this$props = _this.props,\n          chatId = _this$props.chatId,\n          messageId = _this$props.messageId;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        _this.reset();\n      }\n    };\n\n    _this.onClientUpdateMediaTime = function (update) {\n      var _this$props2 = _this.props,\n          chatId = _this$props2.chatId,\n          messageId = _this$props2.messageId,\n          duration = _this$props2.duration;\n      var _this$state = _this.state,\n          active = _this$state.active,\n          dragging = _this$state.dragging;\n      if (chatId !== update.chatId) return;\n      if (messageId !== update.messageId) return;\n      var playerDuration = update.duration >= 0 && update.duration < Infinity ? update.duration : duration;\n\n      var value = _this.getValue(update.currentTime, playerDuration, active);\n\n      if (dragging) {\n        _this.setState({\n          currentTime: update.currentTime,\n          duration: playerDuration\n        });\n      } else {\n        _this.setState({\n          currentTime: update.currentTime,\n          duration: playerDuration,\n          value: value\n        });\n      }\n    };\n\n    _this.onClientUpdateMediaActive = function (update) {\n      var _this$props3 = _this.props,\n          chatId = _this$props3.chatId,\n          messageId = _this$props3.messageId,\n          duration = _this$props3.duration;\n      var _this$state2 = _this.state,\n          active = _this$state2.active,\n          currentTime = _this$state2.currentTime,\n          dragging = _this$state2.dragging;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        var playerDuration = update.duration >= 0 && update.duration < Infinity ? update.duration : duration;\n        var value = _this.state.value;\n\n        if (!dragging) {\n          value = _this.getValue(active ? currentTime : 0, playerDuration, true);\n        }\n\n        _this.setState({\n          active: true,\n          currentTime: active ? currentTime : 0,\n          value: value\n        });\n      } else if (active) {\n        _this.reset();\n      }\n    };\n\n    _this.getValue = function (currentTime, duration, active) {\n      return active ? currentTime / duration : 0;\n    };\n\n    _this.handleMouseDown = function (event) {\n      event.stopPropagation();\n\n      _this.setState({\n        dragging: true\n      });\n    };\n\n    _this.handleChangeCommitted = function () {\n      var _this$props4 = _this.props,\n          chatId = _this$props4.chatId,\n          messageId = _this$props4.messageId;\n      var _this$state3 = _this.state,\n          value = _this$state3.value,\n          active = _this$state3.active;\n      if (!active) return;\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMediaSeek',\n        chatId: chatId,\n        messageId: messageId,\n        value: value\n      });\n\n      _this.setState({\n        dragging: false\n      });\n    };\n\n    _this.handleChange = function (event, value) {\n      var _this$props5 = _this.props,\n          chatId = _this$props5.chatId,\n          messageId = _this$props5.messageId;\n      var _this$state4 = _this.state,\n          active = _this$state4.active,\n          dragging = _this$state4.dragging;\n      if (!active) return;\n\n      if (dragging) {\n        TdLibController.clientUpdate({\n          '@type': 'clientUpdateMediaSeeking',\n          chatId: chatId,\n          messageId: messageId,\n          value: value\n        });\n      }\n\n      _this.setState({\n        value: value\n      });\n    };\n\n    var message = PlayerStore.message,\n        time = PlayerStore.time;\n    var _this$props6 = _this.props,\n        _chatId = _this$props6.chatId,\n        _messageId = _this$props6.messageId,\n        _duration = _this$props6.duration;\n\n    var _active = message && message.chat_id === _chatId && message.id === _messageId;\n\n    var _currentTime = _active && time ? time.currentTime : 0;\n\n    var audioDuration = _active && time && time.duration ? time.duration : _duration;\n    _this.state = {\n      active: _active,\n      currentTime: _currentTime,\n      duration: audioDuration,\n      value: _this.getValue(_currentTime, audioDuration, _active)\n    };\n    return _this;\n  }\n\n  _createClass(VoiceNoteSlider, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var _this$state5 = this.state,\n          active = _this$state5.active,\n          value = _this$state5.value;\n\n      if (nextState.value !== value) {\n        return true;\n      }\n\n      if (nextState.active !== active) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      PlayerStore.on('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n      PlayerStore.on('clientUpdateMediaTime', this.onClientUpdateMediaTime);\n      PlayerStore.on('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      PlayerStore.off('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n      PlayerStore.off('clientUpdateMediaTime', this.onClientUpdateMediaTime);\n      PlayerStore.off('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props7 = this.props,\n          className = _this$props7.className,\n          style = _this$props7.style;\n      var value = this.state.value;\n      return React.createElement(\"div\", {\n        className: classNames('voice-note-slider', className),\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, React.createElement(Slider, {\n        className: \"voice-note-slider-component\",\n        classes: {\n          track: 'voice-note-slider-track',\n          thumb: 'voice-note-slider-thumb',\n          active: 'voice-note-slider-active'\n        },\n        min: 0,\n        max: 1,\n        step: 0.01,\n        value: value,\n        onChange: this.handleChange,\n        onChangeCommitted: this.handleChangeCommitted,\n        onMouseDown: this.handleMouseDown,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return VoiceNoteSlider;\n}(React.Component);\n\nVoiceNoteSlider.propTypes = {\n  chatId: PropTypes.number,\n  messageId: PropTypes.number,\n  duration: PropTypes.number.isRequired\n};\nexport default VoiceNoteSlider;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Message/Media/VoiceNoteSlider.js"],"names":["React","PropTypes","classNames","Slider","PLAYER_PROGRESS_TIMEOUT_MS","PlayerStore","TdLibController","VoiceNoteSlider","props","reset","duration","value","state","setState","active","currentTime","setTimeout","getValue","onClientUpdateMediaEnd","update","chatId","messageId","onClientUpdateMediaTime","dragging","playerDuration","Infinity","onClientUpdateMediaActive","handleMouseDown","event","stopPropagation","handleChangeCommitted","clientUpdate","handleChange","message","time","chat_id","id","audioDuration","nextProps","nextState","on","off","className","style","track","thumb","Component","propTypes","number","isRequired"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Slider from '@material-ui/core/Slider';\nimport { PLAYER_PROGRESS_TIMEOUT_MS } from '../../../Constants';\nimport PlayerStore from '../../../Stores/PlayerStore';\nimport TdLibController from '../../../Controllers/TdLibController';\nimport './VoiceNoteSlider.css';\n\nclass VoiceNoteSlider extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const { message, time } = PlayerStore;\n        const { chatId, messageId, duration } = this.props;\n\n        const active = message && message.chat_id === chatId && message.id === messageId;\n        const currentTime = active && time ? time.currentTime : 0;\n        const audioDuration = active && time && time.duration ? time.duration : duration;\n\n        this.state = {\n            active: active,\n            currentTime: currentTime,\n            duration: audioDuration,\n            value: this.getValue(currentTime, audioDuration, active)\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const { active, value } = this.state;\n\n        if (nextState.value !== value) {\n            return true;\n        }\n\n        if (nextState.active !== active) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        PlayerStore.on('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.on('clientUpdateMediaTime', this.onClientUpdateMediaTime);\n        PlayerStore.on('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n    }\n\n    componentWillUnmount() {\n        PlayerStore.off('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.off('clientUpdateMediaTime', this.onClientUpdateMediaTime);\n        PlayerStore.off('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n    }\n\n    reset = () => {\n        const { duration } = this.props;\n        const { value } = this.state;\n\n        if (value === 1) {\n            this.setState({\n                active: false,\n                currentTime: 0\n            });\n\n            setTimeout(() => {\n                const { currentTime } = this.state;\n                if (!currentTime) {\n                    this.setState({\n                        value: this.getValue(0, duration, false)\n                    });\n                }\n            }, PLAYER_PROGRESS_TIMEOUT_MS);\n        } else {\n            this.setState({\n                active: false,\n                currentTime: 0,\n                value: this.getValue(0, duration, false)\n            });\n        }\n    };\n\n    onClientUpdateMediaEnd = update => {\n        const { chatId, messageId } = this.props;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            this.reset();\n        }\n    };\n\n    onClientUpdateMediaTime = update => {\n        const { chatId, messageId, duration } = this.props;\n        const { active, dragging } = this.state;\n\n        if (chatId !== update.chatId) return;\n        if (messageId !== update.messageId) return;\n\n        const playerDuration = update.duration >= 0 && update.duration < Infinity ? update.duration : duration;\n        const value = this.getValue(update.currentTime, playerDuration, active);\n\n        if (dragging) {\n            this.setState({\n                currentTime: update.currentTime,\n                duration: playerDuration\n            });\n        } else {\n            this.setState({\n                currentTime: update.currentTime,\n                duration: playerDuration,\n                value\n            });\n        }\n    };\n\n    onClientUpdateMediaActive = update => {\n        const { chatId, messageId, duration } = this.props;\n        const { active, currentTime, dragging } = this.state;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            const playerDuration = update.duration >= 0 && update.duration < Infinity ? update.duration : duration;\n            let value = this.state.value;\n            if (!dragging) {\n                value = this.getValue(active ? currentTime : 0, playerDuration, true);\n            }\n\n            this.setState({\n                active: true,\n                currentTime: active ? currentTime : 0,\n                value\n            });\n        } else if (active) {\n            this.reset();\n        }\n    };\n\n    getValue = (currentTime, duration, active) => {\n        return active ? currentTime / duration : 0;\n    };\n\n    handleMouseDown = event => {\n        event.stopPropagation();\n\n        this.setState({\n            dragging: true\n        });\n    };\n\n    handleChangeCommitted = () => {\n        const { chatId, messageId } = this.props;\n        const { value, active } = this.state;\n        if (!active) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaSeek',\n            chatId,\n            messageId,\n            value\n        });\n\n        this.setState({\n            dragging: false\n        });\n    };\n\n    handleChange = (event, value) => {\n        const { chatId, messageId } = this.props;\n        const { active, dragging } = this.state;\n        if (!active) return;\n\n        if (dragging) {\n            TdLibController.clientUpdate({\n                '@type': 'clientUpdateMediaSeeking',\n                chatId,\n                messageId,\n                value\n            });\n        }\n\n        this.setState({\n            value\n        });\n    };\n\n    render() {\n        const { className, style } = this.props;\n        const { value } = this.state;\n\n        return (\n            <div className={classNames('voice-note-slider', className)} style={style}>\n                <Slider\n                    className='voice-note-slider-component'\n                    classes={{\n                        track: 'voice-note-slider-track',\n                        thumb: 'voice-note-slider-thumb',\n                        active: 'voice-note-slider-active'\n                    }}\n                    min={0}\n                    max={1}\n                    step={0.01}\n                    value={value}\n                    onChange={this.handleChange}\n                    onChangeCommitted={this.handleChangeCommitted}\n                    onMouseDown={this.handleMouseDown}\n                />\n            </div>\n        );\n    }\n}\n\nVoiceNoteSlider.propTypes = {\n    chatId: PropTypes.number,\n    messageId: PropTypes.number,\n    duration: PropTypes.number.isRequired\n};\n\nexport default VoiceNoteSlider;\n"]},"metadata":{},"sourceType":"module"}