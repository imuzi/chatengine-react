{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Message/MessageAuthor.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport classNames from 'classnames';\nimport { getUserFullName } from '../../Utils/User';\nimport { getChatTitle, isPrivateChat } from '../../Utils/Chat';\nimport { openUser as openUserCommand, openChat as openChatCommand } from '../../Actions/Client';\nimport UserStore from '../../Stores/UserStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport './MessageAuthor.css';\n\nvar MessageAuthor =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MessageAuthor, _React$Component);\n\n  function MessageAuthor() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MessageAuthor);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MessageAuthor)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleSelect = function (event) {\n      var _this$props = _this.props,\n          chatId = _this$props.chatId,\n          userId = _this$props.userId,\n          openUser = _this$props.openUser,\n          openChat = _this$props.openChat;\n\n      if (openUser && userId) {\n        event.stopPropagation();\n        openUserCommand(userId, true);\n        return;\n      }\n\n      if (openChat && chatId) {\n        event.stopPropagation();\n        openChatCommand(chatId, null, true);\n        return;\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(MessageAuthor, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          t = _this$props2.t,\n          chatId = _this$props2.chatId,\n          userId = _this$props2.userId,\n          openUser = _this$props2.openUser,\n          openChat = _this$props2.openChat;\n      var user = UserStore.get(userId);\n\n      if (user) {\n        var tileColor = isPrivateChat(chatId) ? 'message-author-color' : \"user_color_\".concat(Math.abs(userId) % 8 + 1);\n        var className = classNames([tileColor], 'message-author');\n        var fullName = getUserFullName(userId, null, t);\n        return openUser ? React.createElement(\"a\", {\n          className: className,\n          onClick: this.handleSelect,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, fullName) : React.createElement(React.Fragment, null, fullName);\n      }\n\n      var chat = ChatStore.get(chatId);\n\n      if (chat) {\n        var _className = classNames('message-author-color', 'message-author');\n\n        var _fullName = getChatTitle(chatId, false, t);\n\n        return openChat ? React.createElement(\"a\", {\n          className: _className,\n          onClick: this.handleSelect,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, _fullName) : React.createElement(React.Fragment, null, _fullName);\n      }\n\n      return null;\n    }\n  }]);\n\n  return MessageAuthor;\n}(React.Component);\n\nMessageAuthor.propTypes = {\n  chatId: PropTypes.number,\n  userId: PropTypes.number,\n  openUser: PropTypes.bool,\n  openChat: PropTypes.bool\n};\nMessageAuthor.defaultProps = {\n  openUser: false,\n  openChat: false\n};\nexport default withTranslation()(MessageAuthor);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Message/MessageAuthor.js"],"names":["React","PropTypes","withTranslation","classNames","getUserFullName","getChatTitle","isPrivateChat","openUser","openUserCommand","openChat","openChatCommand","UserStore","ChatStore","MessageAuthor","handleSelect","event","props","chatId","userId","stopPropagation","t","user","get","tileColor","Math","abs","className","fullName","chat","Component","propTypes","number","bool","defaultProps"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport classNames from 'classnames';\nimport { getUserFullName } from '../../Utils/User';\nimport { getChatTitle, isPrivateChat } from '../../Utils/Chat';\nimport { openUser as openUserCommand, openChat as openChatCommand } from '../../Actions/Client';\nimport UserStore from '../../Stores/UserStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport './MessageAuthor.css';\n\nclass MessageAuthor extends React.Component {\n    handleSelect = event => {\n        const { chatId, userId, openUser, openChat } = this.props;\n\n        if (openUser && userId) {\n            event.stopPropagation();\n\n            openUserCommand(userId, true);\n            return;\n        }\n\n        if (openChat && chatId) {\n            event.stopPropagation();\n\n            openChatCommand(chatId, null, true);\n            return;\n        }\n    };\n\n    render() {\n        const { t, chatId, userId, openUser, openChat } = this.props;\n\n        const user = UserStore.get(userId);\n        if (user) {\n            const tileColor = isPrivateChat(chatId)\n                ? 'message-author-color'\n                : `user_color_${(Math.abs(userId) % 8) + 1}`;\n            const className = classNames([tileColor], 'message-author');\n\n            const fullName = getUserFullName(userId, null, t);\n\n            return openUser ? (\n                <a className={className} onClick={this.handleSelect}>\n                    {fullName}\n                </a>\n            ) : (\n                <>{fullName}</>\n            );\n        }\n\n        const chat = ChatStore.get(chatId);\n        if (chat) {\n            const className = classNames('message-author-color', 'message-author');\n\n            const fullName = getChatTitle(chatId, false, t);\n\n            return openChat ? (\n                <a className={className} onClick={this.handleSelect}>\n                    {fullName}\n                </a>\n            ) : (\n                <>{fullName}</>\n            );\n        }\n\n        return null;\n    }\n}\n\nMessageAuthor.propTypes = {\n    chatId: PropTypes.number,\n    userId: PropTypes.number,\n    openUser: PropTypes.bool,\n    openChat: PropTypes.bool\n};\n\nMessageAuthor.defaultProps = {\n    openUser: false,\n    openChat: false\n};\n\nexport default withTranslation()(MessageAuthor);\n"]},"metadata":{},"sourceType":"module"}