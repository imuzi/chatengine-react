{"ast":null,"code":"import _defineProperty from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnMiddle/MessagesList.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport ActionBar from './ActionBar';\nimport DayMeta from '../Message/DayMeta';\nimport FilesDropTarget from './FilesDropTarget';\nimport Message from '../Message/Message';\nimport Placeholder from './Placeholder';\nimport ScrollDownButton from './ScrollDownButton';\nimport ServiceMessage from '../Message/ServiceMessage';\nimport StickersHint from './StickersHint';\nimport { throttle, getPhotoSize, itemsInView, historyEquals } from '../../Utils/Common';\nimport { loadChatsContent, loadDraftContent, loadMessageContents } from '../../Utils/File';\nimport { canMessageBeEdited, filterDuplicateMessages, filterMessages } from '../../Utils/Message';\nimport { isServiceMessage } from '../../Utils/ServiceMessage';\nimport { canSendMediaMessages, getChatFullInfo, getSupergroupId, isChannelChat, isPrivateChat } from '../../Utils/Chat';\nimport { editMessage, highlightMessage, openChat } from '../../Actions/Client';\nimport { MESSAGE_SLICE_LIMIT, MESSAGE_SPLIT_MAX_TIME_S, SCROLL_PRECISION } from '../../Constants';\nimport AppStore from '../../Stores/ApplicationStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport FileStore from '../../Stores/FileStore';\nimport MessageStore from '../../Stores/MessageStore';\nimport PlayerStore from '../../Stores/PlayerStore';\nimport SupergroupStore from '../../Stores/SupergroupStore';\nimport UserStore from '../../Stores/UserStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './MessagesList.css';\nvar ScrollBehaviorEnum = Object.freeze({\n  SCROLL_TO_BOTTOM: 'SCROLL_TO_BOTTOM',\n  SCROLL_TO_UNREAD: 'SCROLL_TO_UNREAD',\n  SCROLL_TO_MESSAGE: 'SCROLL_TO_MESSAGE',\n  KEEP_SCROLL_POSITION: 'KEEP_SCROLL_POSITION',\n  NONE: 'NONE'\n});\n\nvar MessagesList =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MessagesList, _React$Component);\n\n  function MessagesList(props) {\n    var _this;\n\n    _classCallCheck(this, MessagesList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MessagesList).call(this, props)); // console.log(`MessagesList.ctor chat_id=${props.chatId} message_id=${props.messageId}`);\n    // console.log('MessagesList.newSessionId ctor');\n\n    _this.onKeyDown = function (event) {// if (event.keyCode === 27) {\n      //     if (MessageStore.selectedItems.size > 0) {\n      //         console.log('[k] messagesList onKeyDown');\n      //         clearSelection();\n      //         event.stopPropagation();\n      //         event.preventDefault();\n      //     }\n      // }\n    };\n\n    _this.onClientUpdateTryEditMessage =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(update) {\n        var history, i, message, result, _i, _message;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!_this.completed) {\n                  _context.next = 11;\n                  break;\n                }\n\n                history = _this.state.history;\n                i = history.length - 1;\n\n              case 3:\n                if (!(i >= 0)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                message = history[i];\n\n                if (!canMessageBeEdited(message.chat_id, message.id)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                editMessage(message.chat_id, message.id);\n                return _context.abrupt(\"return\");\n\n              case 8:\n                i--;\n                _context.next = 3;\n                break;\n\n              case 11:\n                _context.next = 13;\n                return TdLibController.send({\n                  '@type': 'searchChatMessages',\n                  chat_id: _this.props.chatId,\n                  query: '',\n                  sender_user_id: UserStore.getMyId(),\n                  from_message_id: 0,\n                  offset: 0,\n                  limit: 100,\n                  filter: {\n                    '@type': 'searchMessagesFilterEmpty'\n                  }\n                });\n\n              case 13:\n                result = _context.sent;\n                _i = 0;\n\n              case 15:\n                if (!(_i < result.messages.length)) {\n                  _context.next = 23;\n                  break;\n                }\n\n                _message = result.messages[_i];\n\n                if (!canMessageBeEdited(_message.chat_id, _message.id)) {\n                  _context.next = 20;\n                  break;\n                }\n\n                editMessage(_message.chat_id, _message.id);\n                return _context.abrupt(\"return\");\n\n              case 20:\n                _i++;\n                _context.next = 15;\n                break;\n\n              case 23:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.onClientUpdateDialogsReady =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(update) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return FileStore.initDB(\n                /*#__PURE__*/\n                _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee2() {\n                  var _this$props, chatId, messageId, chat, type;\n\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          _this$props = _this.props, chatId = _this$props.chatId, messageId = _this$props.messageId;\n\n                          if (!chatId) {\n                            _context2.next = 18;\n                            break;\n                          }\n\n                          chat = ChatStore.get(chatId);\n\n                          if (!chat) {\n                            _context2.next = 18;\n                            break;\n                          }\n\n                          type = chat.type;\n                          _context2.t0 = type['@type'];\n                          _context2.next = _context2.t0 === 'chatTypePrivate' ? 8 : _context2.t0 === 'chatTypeSecret' ? 8 : _context2.t0 === 'chatTypeBasicGroup' ? 11 : _context2.t0 === 'chatTypeSupergroup' ? 14 : 17;\n                          break;\n\n                        case 8:\n                          _context2.next = 10;\n                          return TdLibController.send({\n                            '@type': 'createPrivateChat',\n                            user_id: type.user_id,\n                            force: false\n                          });\n\n                        case 10:\n                          return _context2.abrupt(\"break\", 17);\n\n                        case 11:\n                          _context2.next = 13;\n                          return TdLibController.send({\n                            '@type': 'createBasicGroupChat',\n                            basic_group_id: type.basic_group_id,\n                            force: false\n                          });\n\n                        case 13:\n                          return _context2.abrupt(\"break\", 17);\n\n                        case 14:\n                          _context2.next = 16;\n                          return TdLibController.send({\n                            '@type': 'createSupergroupChat',\n                            supergroup_id: type.supergroup_id,\n                            force: false\n                          });\n\n                        case 16:\n                          return _context2.abrupt(\"break\", 17);\n\n                        case 17:\n                          _this.handleSelectChat(chatId, 0, messageId, 0);\n\n                        case 18:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                })));\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.onClientUpdateFocusWindow = function (update) {\n      var focused = update.focused;\n\n      if (focused) {\n        _this.defferedActions.forEach(function (x) {\n          return x();\n        });\n\n        _this.defferedActions = [];\n      }\n    };\n\n    _this.onClientUpdateOpenReply = function (update) {\n      var chatId = update.chatId,\n          messageId = update.messageId;\n      var replyHistory = _this.state.replyHistory;\n\n      if (_this.props.chatId !== chatId) {\n        return;\n      }\n\n      var lastItem = replyHistory.length > 0 ? replyHistory[replyHistory.length - 1] : null;\n\n      if (lastItem && lastItem.chatId === chatId && lastItem.messageId === messageId) {\n        return;\n      }\n\n      replyHistory.push({\n        chatId: chatId,\n        messageId: messageId\n      });\n    };\n\n    _this.onClientUpdateMediaActive = function (update) {\n      var list = _this.listRef.current;\n      var prevOffsetHeight = list.offsetHeight;\n      var prevScrollTop = list.scrollTop;\n\n      _this.setState({\n        playerOpened: true\n      }, function () {\n        if (list.scrollTop === prevScrollTop) {\n          list.scrollTop += Math.abs(prevOffsetHeight - list.offsetHeight);\n        }\n      });\n    };\n\n    _this.onClientUpdateMediaEnding = function (udpate) {\n      var list = _this.listRef.current;\n      _this.prevOffsetHeight = list.offsetHeight;\n      _this.prevScrollTop = list.scrollTop;\n    };\n\n    _this.onClientUpdateMediaEnd = function (udpate) {\n      var list = _this.listRef.current; //const prevOffsetHeight = list.offsetHeight;\n      //const prevScrollTop = list.scrollTop;\n\n      _this.setState({\n        playerOpened: false\n      }, function () {\n        if (list.scrollTop === _this.prevScrollTop) {\n          list.scrollTop -= Math.abs(_this.prevOffsetHeight - list.offsetHeight);\n        }\n      });\n    };\n\n    _this.onClientUpdateSelection = function (update) {\n      _this.setState({\n        selectionActive: MessageStore.selectedItems.size > 0\n      });\n    };\n\n    _this.onClientUpdateClearHistory = function (update) {\n      var chatId = _this.props.chatId;\n\n      if (chatId === update.chatId) {\n        _this.setState({\n          clearHistory: update.inProgress\n        });\n      }\n    };\n\n    _this.onUpdateMessageContent = function (update) {\n      var chatId = _this.props.chatId;\n      var history = _this.state.history;\n      var chat_id = update.chat_id,\n          message_id = update.message_id;\n      if (chatId !== chat_id) return;\n\n      if (history.findIndex(function (x) {\n        return x.id === message_id;\n      }) !== -1) {\n        var message = MessageStore.get(chat_id, message_id);\n        if (!message) return;\n        var store = FileStore.getStore();\n        loadMessageContents(store, [message]);\n      }\n    };\n\n    _this.onUpdateChatLastMessage = function (update) {\n      var chatId = _this.props.chatId;\n      if (chatId !== update.chat_id) return;\n    };\n\n    _this.onUpdateMessageSendSucceeded = function (update) {\n      if (!_this.completed) return;\n      var message = update.message,\n          old_message_id = update.old_message_id;\n      var chatId = _this.props.chatId;\n      if (chatId !== message.chat_id) return; // let handleSendSucceeded = false;\n      // const { content } = message;\n      // switch (content['@type']) {\n      //     case 'messagePoll': {\n      //         handleSendSucceeded = true;\n      //         break;\n      //     }\n      // }\n      //\n      // if (!handleSendSucceeded) return;\n\n      var scrollBehavior = message.is_outgoing ? ScrollBehaviorEnum.SCROLL_TO_BOTTOM : ScrollBehaviorEnum.KEEP_SCROLL_POSITION;\n\n      _this.replaceMessage(old_message_id, message, function () {\n        if (scrollBehavior !== ScrollBehaviorEnum.KEEP_SCROLL_POSITION) {\n          _this.handleScrollBehavior(scrollBehavior, _this.snapshot);\n        }\n      });\n\n      var store = FileStore.getStore();\n      loadMessageContents(store, [message]);\n\n      _this.viewMessages([message]);\n    };\n\n    _this.onUpdateNewMessage = function (update) {\n      if (!_this.completed) return;\n      var message = update.message;\n      var chatId = _this.props.chatId;\n      if (chatId !== message.chat_id) return;\n      var date = message.date;\n      if (date === 0) return;\n      var list = _this.listRef.current;\n      var scrollBehavior = message.is_outgoing ? ScrollBehaviorEnum.SCROLL_TO_BOTTOM : ScrollBehaviorEnum.NONE;\n\n      if (list.scrollTop + list.offsetHeight >= list.scrollHeight) {\n        scrollBehavior = ScrollBehaviorEnum.SCROLL_TO_BOTTOM;\n      }\n\n      var newState = message.is_outgoing ? {\n        scrollDownVisible: false\n      } : {};\n      var history = [message];\n      _this.scrollBehaviorNone = true;\n\n      _this.insertPrevious(filterMessages(history), newState, function () {\n        _this.scrollBehaviorNone = false;\n\n        _this.handleScrollBehavior(scrollBehavior, _this.snapshot);\n      });\n\n      var store = FileStore.getStore();\n      loadMessageContents(store, history);\n\n      _this.viewMessages(history);\n    };\n\n    _this.onUpdateDeleteMessages = function (update) {\n      var chatId = _this.props.chatId;\n      var chat_id = update.chat_id,\n          is_permanent = update.is_permanent,\n          message_ids = update.message_ids;\n      if (chatId !== chat_id) return;\n      if (!is_permanent) return;\n\n      _this.deleteHistory(message_ids);\n    };\n\n    _this.updateItemsInView = function () {\n      if (!_this.messages) return;\n      var messages = new Map();\n      var items = itemsInView(_this.listRef, _this.itemsRef);\n\n      for (var i = 0; i < items.length; i++) {\n        var messageWrapper = _this.messages[items[i]];\n\n        if (messageWrapper) {\n          var message = messageWrapper;\n          var _message$props = message.props,\n              chatId = _message$props.chatId,\n              messageId = _message$props.messageId;\n          var key = \"\".concat(chatId, \"_\").concat(messageId);\n          messages.set(key, key);\n        }\n      }\n\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMessagesInView',\n        messages: messages\n      });\n      return;\n      if (!messages.length) return;\n      /*let ids = messages.map(x => x.id);\n      console.log('[perf] load_messages_contents ids=[' + ids + ']');\n               let messagesMap = new Map(messages.map((i) => [i.id, i]));\n               if (this.previousMessages){\n                  let cancelMessages = [];\n                  for (let i = 0; i < this.previousMessages.length; i++){\n                      if (!messagesMap.has(this.previousMessages[i].id)){\n                          cancelMessages.push(this.previousMessages[i]);\n                      }\n                  }\n                  if (cancelMessages.length > 0) {\n                      this.cancelLoadMessageContents(cancelMessages);\n                  }\n              }\n              this.previousMessages = messages;*/\n\n      var store = FileStore.getStore();\n      loadMessageContents(store, messages);\n    };\n\n    _this.loadIncompleteHistory =\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(result) {\n        var MAX_ITERATIONS, incomplete, i;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                MAX_ITERATIONS = 5;\n                incomplete = result && result.messages.length > 0 && result.messages.length < MESSAGE_SLICE_LIMIT;\n                i = 0;\n\n              case 3:\n                if (!(i < MAX_ITERATIONS && incomplete)) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                _context4.next = 6;\n                return _this.onLoadNext();\n\n              case 6:\n                result = _context4.sent;\n                incomplete = result && result.messages.length > 0 && result.messages.length < MESSAGE_SLICE_LIMIT;\n\n              case 8:\n                i++;\n                _context4.next = 3;\n                break;\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    _this.onLoadNext =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee5() {\n      var chatId, history, fromMessageId, sessionId, result, store;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              chatId = _this.props.chatId;\n              history = _this.state.history;\n\n              if (chatId) {\n                _context5.next = 4;\n                break;\n              }\n\n              return _context5.abrupt(\"return\");\n\n            case 4:\n              if (!_this.loading) {\n                _context5.next = 6;\n                break;\n              }\n\n              return _context5.abrupt(\"return\");\n\n            case 6:\n              if (!_this.loadMigratedHistory) {\n                _context5.next = 9;\n                break;\n              }\n\n              _this.onLoadMigratedHistory();\n\n              return _context5.abrupt(\"return\");\n\n            case 9:\n              fromMessageId = history && history.length > 0 ? history[0].id : 0;\n              _this.loading = true;\n              sessionId = _this.sessionId;\n              _context5.next = 14;\n              return TdLibController.send({\n                '@type': 'getChatHistory',\n                chat_id: chatId,\n                from_message_id: fromMessageId,\n                offset: 0,\n                limit: MESSAGE_SLICE_LIMIT\n              }).finally(function () {\n                _this.loading = false;\n              });\n\n            case 14:\n              result = _context5.sent;\n\n              if (!(sessionId !== _this.sessionId)) {\n                _context5.next = 17;\n                break;\n              }\n\n              return _context5.abrupt(\"return\");\n\n            case 17:\n              if (!(_this.props.chatId !== chatId)) {\n                _context5.next = 19;\n                break;\n              }\n\n              return _context5.abrupt(\"return\");\n\n            case 19:\n              MessageStore.setItems(result.messages);\n              result.messages.reverse();\n\n              _this.insertNext(filterMessages(result.messages), function () {\n                if (!result.messages.length) {\n                  _this.onLoadMigratedHistory();\n                }\n              });\n\n              store = FileStore.getStore();\n              loadMessageContents(store, result.messages);\n\n              _this.viewMessages(result.messages);\n\n              return _context5.abrupt(\"return\", result);\n\n            case 26:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    _this.onLoadMigratedHistory =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6() {\n      var chatId, history, supergroupId, fullInfo, basicGroupChat, fromMessageId, sessionId, result, store;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              chatId = _this.props.chatId;\n              history = _this.state.history;\n\n              if (chatId) {\n                _context6.next = 4;\n                break;\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 4:\n              if (!_this.loading) {\n                _context6.next = 6;\n                break;\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 6:\n              supergroupId = getSupergroupId(chatId);\n\n              if (supergroupId) {\n                _context6.next = 9;\n                break;\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 9:\n              fullInfo = SupergroupStore.getFullInfo(supergroupId);\n\n              if (fullInfo) {\n                _context6.next = 12;\n                break;\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 12:\n              if (fullInfo.upgraded_from_basic_group_id) {\n                _context6.next = 14;\n                break;\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 14:\n              _this.loadMigratedHistory = true;\n              _context6.next = 17;\n              return TdLibController.send({\n                '@type': 'createBasicGroupChat',\n                basic_group_id: fullInfo.upgraded_from_basic_group_id\n              });\n\n            case 17:\n              basicGroupChat = _context6.sent;\n\n              if (basicGroupChat) {\n                _context6.next = 20;\n                break;\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 20:\n              fromMessageId = history.length > 0 && history[0].chat_id === basicGroupChat.id ? history[0].id : 0;\n              _this.loading = true;\n              sessionId = _this.sessionId;\n              _context6.next = 25;\n              return TdLibController.send({\n                '@type': 'getChatHistory',\n                chat_id: basicGroupChat.id,\n                from_message_id: fromMessageId,\n                offset: 0,\n                limit: MESSAGE_SLICE_LIMIT\n              }).finally(function () {\n                _this.loading = false;\n              });\n\n            case 25:\n              result = _context6.sent;\n\n              if (!(sessionId !== _this.sessionId)) {\n                _context6.next = 28;\n                break;\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 28:\n              if (!(_this.props.chatId !== chatId)) {\n                _context6.next = 30;\n                break;\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 30:\n              MessageStore.setItems(result.messages);\n              result.messages.reverse();\n\n              _this.insertNext(filterMessages(result.messages));\n\n              store = FileStore.getStore();\n              loadMessageContents(store, result.messages);\n\n              _this.viewMessages(result.messages);\n\n            case 36:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    _this.onLoadPrevious =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee7() {\n      var chatId, history, chat, fromMessageId, sessionId, result, store;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              chatId = _this.props.chatId;\n              history = _this.state.history;\n              chat = ChatStore.get(chatId);\n\n              if (chat) {\n                _context7.next = 5;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 5:\n              if (!_this.loading) {\n                _context7.next = 7;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 7:\n              if (!_this.completed) {\n                _context7.next = 9;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 9:\n              fromMessageId = history && history.length > 0 ? history[history.length - 1].id : 0;\n              _this.loading = true;\n              sessionId = _this.sessionId;\n              _context7.next = 14;\n              return TdLibController.send({\n                '@type': 'getChatHistory',\n                chat_id: chatId,\n                from_message_id: fromMessageId,\n                offset: -MESSAGE_SLICE_LIMIT - 1,\n                limit: MESSAGE_SLICE_LIMIT + 1\n              }).finally(function () {\n                _this.loading = false;\n              });\n\n            case 14:\n              result = _context7.sent;\n\n              if (!(sessionId !== _this.sessionId)) {\n                _context7.next = 17;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 17:\n              if (!(_this.props.chatId !== chatId)) {\n                _context7.next = 19;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 19:\n              if (chat.last_message) {\n                _this.completed = result.messages.length > 0 && chat.last_message.id === result.messages[0].id;\n              } else {\n                _this.completed = true;\n              }\n\n              filterDuplicateMessages(result, _this.state.history);\n              MessageStore.setItems(result.messages);\n              result.messages.reverse();\n              _this.scrollBehaviorNone = true;\n\n              _this.insertPrevious(filterMessages(result.messages), {}, function () {\n                _this.scrollBehaviorNone = false;\n              });\n\n              store = FileStore.getStore();\n              loadMessageContents(store, result.messages);\n\n              _this.viewMessages(result.messages);\n\n              return _context7.abrupt(\"return\", result);\n\n            case 29:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    _this.handleScroll = function () {\n      var _this$state = _this.state,\n          scrollDownVisible = _this$state.scrollDownVisible,\n          replyHistory = _this$state.replyHistory,\n          history = _this$state.history;\n      var list = _this.listRef.current; // console.log(\n      //     `[ml] handleScroll\n      //     list.scrollTop=${list.scrollTop}\n      //     list.offsetHeight=${list.offsetHeight}\n      //     list.scrollHeight=${list.scrollHeight}`\n      // );\n\n      _this.updateItemsInView();\n\n      if (list.scrollTop <= SCROLL_PRECISION) {\n        _this.onLoadNext();\n      } else if (list.scrollTop + list.offsetHeight >= list.scrollHeight - SCROLL_PRECISION) {\n        _this.onLoadPrevious();\n      }\n\n      if (list.scrollTop + list.offsetHeight >= list.scrollHeight - SCROLL_PRECISION) {\n        if (_this.completed && scrollDownVisible) {\n          if (_this.prevScrollTop !== list.scrollTop && _this.prevScrollTop && _this.prevHistory === history) {\n            _this.setState({\n              scrollDownVisible: false,\n              replyHistory: []\n            });\n          } else if (!replyHistory.length) {\n            _this.setState({\n              scrollDownVisible: false\n            });\n          }\n        }\n      } else {\n        if (!scrollDownVisible) {\n          _this.setState({\n            scrollDownVisible: true\n          });\n        }\n      }\n\n      _this.prevScrollTop = list.scrollTop;\n      _this.prevHistory = history;\n    };\n\n    _this.handleScrollBehavior = function (scrollBehavior, snapshot) {\n      var _this$props2 = _this.props,\n          chatId = _this$props2.chatId,\n          messageId = _this$props2.messageId;\n\n      var _ref8 = snapshot || {\n        scrollTop: 0,\n        scrollHeight: 0,\n        offsetHeight: 0\n      },\n          scrollTop = _ref8.scrollTop,\n          scrollHeight = _ref8.scrollHeight,\n          offsetHeight = _ref8.offsetHeight; // console.log(\n      //     `[ml] handleScrollBehavior\n      //     scrollBehavior=${scrollBehavior}\n      //     snapshot.scrollTop=${scrollTop}\n      //     snapshot.offsetHeight=${offsetHeight}\n      //     snapshot.scrollHeight=${scrollHeight}`\n      // );\n\n\n      switch (scrollBehavior) {\n        case ScrollBehaviorEnum.SCROLL_TO_BOTTOM:\n          {\n            _this.scrollToBottom();\n\n            break;\n          }\n\n        case ScrollBehaviorEnum.SCROLL_TO_MESSAGE:\n          {\n            _this.scrollToMessage();\n\n            break;\n          }\n\n        case ScrollBehaviorEnum.SCROLL_TO_UNREAD:\n          {\n            _this.scrollToUnread();\n\n            break;\n          }\n\n        case ScrollBehaviorEnum.KEEP_SCROLL_POSITION:\n          {\n            _this.keepScrollPosition(snapshot);\n\n            break;\n          }\n\n        case ScrollBehaviorEnum.NONE:\n          {\n            break;\n          }\n      }\n    };\n\n    _this.keepScrollPosition = function (snapshot) {\n      var scrollTop = snapshot.scrollTop,\n          scrollHeight = snapshot.scrollHeight,\n          offsetHeight = snapshot.offsetHeight;\n      var list = _this.listRef.current; // console.log(\n      //     `[ml] keepScrollPosition before\n      //     list.scrollTop=${list.scrollTop}\n      //     list.offsetHeight=${list.offsetHeight}\n      //     list.scrollHeight=${list.scrollHeight}`\n      // );\n\n      list.scrollTop = scrollTop + (list.scrollHeight - scrollHeight); // console.log(\n      //     `[ml] keepScrollPosition after\n      //     list.scrollTop=${list.scrollTop}\n      //     list.offsetHeight=${list.offsetHeight}\n      //     list.scrollHeight=${list.scrollHeight}`\n      // );\n    };\n\n    _this.scrollToUnread = function () {\n      var _this$props3 = _this.props,\n          chatId = _this$props3.chatId,\n          messageId = _this$props3.messageId;\n      var history = _this.state.history;\n      var list = _this.listRef.current;\n      var chat = ChatStore.get(chatId);\n      var pinnedMessageMargin = 0; //chat && chat.pinned_message_id ? 55 : 0;\n      // console.log(\n      //     `MessagesList.scrollToUnread before\n      //     chatId=${chatId} messageId=${messageId}\n      //     list.scrollTop=${list.scrollTop}\n      //     list.offsetHeight=${list.offsetHeight}\n      //     list.scrollHeight=${list.scrollHeight}`\n      // );\n\n      var scrolled = false;\n\n      for (var i = 0; i < history.length; i++) {\n        var itemComponent = _this.itemsMap.get(i);\n\n        var item = ReactDOM.findDOMNode(itemComponent);\n\n        if (item) {\n          if (itemComponent.props.showUnreadSeparator) {\n            list.scrollTop = item.offsetTop - pinnedMessageMargin; // + unread messages margin-top\n\n            scrolled = true;\n            break;\n          }\n        }\n      } // console.log(\n      //     `MessagesList.scrollToUnread after\n      //     chatId=${chatId} messageId=${messageId} scrolled=${scrolled}\n      //     list.scrollTop=${list.scrollTop}\n      //     list.offsetHeight=${list.offsetHeight}\n      //     list.scrollHeight=${list.scrollHeight}`\n      // );\n\n\n      if (!scrolled) {\n        _this.scrollToBottom();\n      }\n    };\n\n    _this.scrollToMessage = function () {\n      var _this$props4 = _this.props,\n          chatId = _this$props4.chatId,\n          messageId = _this$props4.messageId;\n      var history = _this.state.history;\n      var list = _this.listRef.current; // console.log(\n      //     `MessagesList.scrollToMessage before\n      //     chatId=${chatId} messageId=${messageId}\n      //     list.scrollTop=${list.scrollTop}\n      //     list.offsetHeight=${list.offsetHeight}\n      //     list.scrollHeight=${list.scrollHeight}`,\n      //     this.itemsMap\n      // );\n\n      var scrolled = false;\n\n      for (var i = 0; i < history.length; i++) {\n        var itemComponent = _this.itemsMap.get(i);\n\n        var node = ReactDOM.findDOMNode(itemComponent);\n\n        if (node) {\n          if (itemComponent.props.messageId === messageId) {\n            list.scrollTop = node.offsetTop - list.offsetHeight / 2.0;\n            scrolled = true;\n            break;\n          }\n        }\n      } // console.log(\n      //     `MessagesList.scrollToMessage after\n      //     chatId=${chatId} messageId=${messageId} scrolled=${scrolled}\n      //     list.scrollTop=${list.scrollTop}\n      //     list.offsetHeight=${list.offsetHeight}\n      //     list.scrollHeight=${list.scrollHeight}`\n      // );\n      // if (!scrolled) {\n      //     this.scrollToBottom();\n      // }\n\n    };\n\n    _this.scrollToBottom = function () {\n      var _this$props5 = _this.props,\n          chatId = _this$props5.chatId,\n          messageId = _this$props5.messageId;\n      var list = _this.listRef.current; // console.log(\n      //     `MessagesList.scrollToBottom before\n      //     chatId=${chatId} messageId=${messageId}\n      //     list.scrollTop=${list.scrollTop}\n      //     list.offsetHeight=${list.offsetHeight}\n      //     list.scrollHeight=${list.scrollHeight}`\n      // );\n\n      var nextScrollTop = list.scrollHeight - list.offsetHeight;\n\n      if (nextScrollTop !== list.scrollTop) {\n        list.scrollTop = list.scrollHeight - list.offsetHeight; // console.log(\n        //     `MessagesList.scrollToBottom after\n        // chatId=${chatId} messageId=${messageId}\n        // list.scrollTop=${list.scrollTop}\n        // list.offsetHeight=${list.offsetHeight}\n        // list.scrollHeight=${list.scrollHeight}`\n        // );\n      } else {// console.log(\n          //     `MessagesList.scrollToBottom after (no changes)\n          // chatId=${chatId} messageId=${messageId}\n          // list.scrollTop=${list.scrollTop}\n          // list.offsetHeight=${list.offsetHeight}\n          // list.scrollHeight=${list.scrollHeight}`\n          // );\n        }\n    };\n\n    _this.scrollToStart =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee8() {\n      var chatId, chat, fromMessageId, offset, limit, sessionId, result, store;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              chatId = _this.props.chatId;\n              chat = ChatStore.get(chatId);\n\n              if (chat) {\n                _context8.next = 4;\n                break;\n              }\n\n              return _context8.abrupt(\"return\");\n\n            case 4:\n              // console.log('MessagesList.newSessionId scrollToStart');\n              _this.sessionId = Date.now();\n              _this.loading = false;\n              _this.completed = false;\n              fromMessageId = 0;\n              offset = 0;\n              limit = MESSAGE_SLICE_LIMIT;\n              _this.loading = true;\n              sessionId = _this.sessionId;\n              _context8.next = 14;\n              return TdLibController.send({\n                '@type': 'getChatHistory',\n                chat_id: chat.id,\n                from_message_id: fromMessageId,\n                offset: offset,\n                limit: limit\n              }).finally(function () {\n                _this.loading = false;\n              });\n\n            case 14:\n              result = _context8.sent;\n\n              if (!(sessionId !== _this.sessionId)) {\n                _context8.next = 17;\n                break;\n              }\n\n              return _context8.abrupt(\"return\");\n\n            case 17:\n              if (!(_this.props.chatId !== chatId)) {\n                _context8.next = 19;\n                break;\n              }\n\n              return _context8.abrupt(\"return\");\n\n            case 19:\n              if (chat.last_message) {\n                _this.completed = result.messages.length > 0 && chat.last_message.id === result.messages[0].id;\n              } else {\n                _this.completed = true;\n              } // console.log('MessagesList.scrollToStart scrollDown', false);\n\n\n              _this.setState({\n                scrollDownVisible: false,\n                replyHistory: []\n              });\n\n              MessageStore.setItems(result.messages);\n              result.messages.reverse();\n\n              _this.replace(_this.state.separatorMessageId, result.messages, function () {\n                _this.handleScrollBehavior(ScrollBehaviorEnum.SCROLL_TO_BOTTOM, _this.snapshot);\n              }); // load files\n\n\n              store = FileStore.getStore();\n              loadMessageContents(store, result.messages);\n\n              _this.viewMessages(result.messages);\n\n              _this.loadIncompleteHistory(result);\n\n            case 28:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    _this.handleListDragEnter = function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n      var chatId = _this.props.chatId;\n      if (!canSendMediaMessages(chatId)) return;\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateDragging',\n        dragging: true,\n        files: event.dataTransfer.files\n      });\n    };\n\n    _this.handleScrollDownClick = function (event) {\n      var replyHistory = _this.state.replyHistory;\n\n      if (replyHistory.length > 0) {\n        var lastReply = replyHistory.pop();\n\n        if (lastReply) {\n          var chatId = lastReply.chatId,\n              messageId = lastReply.messageId;\n\n          if (chatId === _this.props.chatId) {\n            openChat(chatId, messageId);\n          }\n        }\n      } else {\n        _this.scrollToStart();\n      }\n    };\n\n    _this.sessionId = Date.now();\n    _this.state = {\n      prevChatId: 0,\n      prevMessageId: null,\n      playerOpened: false,\n      history: [],\n      clearHistory: false,\n      selectionActive: false,\n      separatorMessageId: 0,\n      scrollDownVisible: false,\n      replyHistory: []\n    };\n    _this.listRef = React.createRef();\n    _this.itemsRef = React.createRef();\n    _this.scrollDownButtonRef = React.createRef();\n    _this.defferedActions = [];\n    _this.itemsMap = new Map();\n    _this.updateItemsInView = throttle(_this.updateItemsInView, 500);\n    return _this;\n  }\n\n  _createClass(MessagesList, [{\n    key: \"getSnapshotBeforeUpdate\",\n    value: function getSnapshotBeforeUpdate(prevProps, prevState) {\n      var list = this.listRef.current;\n      var scrollTop = list.scrollTop,\n          scrollHeight = list.scrollHeight,\n          offsetHeight = list.offsetHeight;\n      var snapshot = {\n        scrollTop: scrollTop,\n        scrollHeight: scrollHeight,\n        offsetHeight: offsetHeight\n      }; // console.log('[ml] getSnapshotBeforeUpdate', snapshot);\n\n      this.snapshot = snapshot;\n      return snapshot;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      var _this$props6 = this.props,\n          chatId = _this$props6.chatId,\n          messageId = _this$props6.messageId;\n      var scrollDownVisible = this.state.scrollDownVisible;\n      var list = this.listRef.current; // console.log(\n      //     `[ml] componentDidUpdate\n      //     scrollBehaviorNone=${this.scrollBehaviorNone}\n      //     scrollDownVisible=${scrollDownVisible}\n      //     list.scrollTop=${list.scrollTop}\n      //     list.scrollHeight=${list.scrollHeight}\n      //     list.offsetHeight=${list.offsetHeight}`\n      // );\n\n      if (prevProps.chatId !== chatId || prevProps.messageId !== messageId) {\n        this.handleSelectChat(chatId, prevProps.chatId, messageId, prevProps.messageId);\n      } else {\n        if (!this.scrollBehaviorNone) {\n          this.handleScrollBehavior(ScrollBehaviorEnum.KEEP_SCROLL_POSITION, snapshot);\n        }\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var _this$props7 = this.props,\n          chatId = _this$props7.chatId,\n          messageId = _this$props7.messageId,\n          theme = _this$props7.theme;\n      var _this$state2 = this.state,\n          playerOpened = _this$state2.playerOpened,\n          history = _this$state2.history,\n          dragging = _this$state2.dragging,\n          clearHistory = _this$state2.clearHistory,\n          selectionActive = _this$state2.selectionActive,\n          scrollDownVisible = _this$state2.scrollDownVisible;\n\n      if (nextProps.theme !== theme) {\n        // console.log('[ml] shouldComponentUpdate theme');\n        return true;\n      }\n\n      if (nextProps.chatId !== chatId) {\n        // console.log('[ml] shouldComponentUpdate chatId');\n        return true;\n      }\n\n      if (nextProps.messageId !== messageId) {\n        // console.log('[ml] shouldComponentUpdate messageId');\n        return true;\n      }\n\n      if (nextState.scrollDownVisible !== scrollDownVisible) {\n        // console.log('[ml] shouldComponentUpdate scrollDownVisible');\n        return true;\n      }\n\n      if (nextState.playerOpened !== playerOpened) {\n        // console.log('[ml] shouldComponentUpdate playerOpened');\n        return true;\n      }\n\n      if (!historyEquals(nextState.history, history)) {\n        // console.trace('[ml] shouldComponentUpdate history', nextState.history, history);\n        return true;\n      }\n\n      if (nextState.dragging !== dragging) {\n        // console.log('[ml] shouldComponentUpdate dragging');\n        return true;\n      }\n\n      if (nextState.clearHistory !== clearHistory) {\n        // console.log('[ml] shouldComponentUpdate clearHistory');\n        return true;\n      }\n\n      if (nextState.selectionActive !== selectionActive) {\n        // console.log('[ml] shouldComponentUpdate selectionActive');\n        return true;\n      } // console.log('[ml] shouldComponentUpdate false');\n\n\n      return false;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      AppStore.on('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n      AppStore.on('clientUpdateDialogsReady', this.onClientUpdateDialogsReady);\n      ChatStore.on('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n      ChatStore.on('updateChatLastMessage', this.onUpdateChatLastMessage);\n      MessageStore.on('clientUpdateClearSelection', this.onClientUpdateSelection);\n      MessageStore.on('clientUpdateMessageSelected', this.onClientUpdateSelection);\n      MessageStore.on('clientUpdateOpenReply', this.onClientUpdateOpenReply);\n      MessageStore.on('clientUpdateTryEditMessage', this.onClientUpdateTryEditMessage);\n      MessageStore.on('updateNewMessage', this.onUpdateNewMessage);\n      MessageStore.on('updateDeleteMessages', this.onUpdateDeleteMessages);\n      MessageStore.on('updateMessageContent', this.onUpdateMessageContent);\n      MessageStore.on('updateMessageSendSucceeded', this.onUpdateMessageSendSucceeded);\n      PlayerStore.on('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n      PlayerStore.on('clientUpdateMediaEnding', this.onClientUpdateMediaEnding);\n      PlayerStore.on('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      AppStore.off('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n      AppStore.off('clientUpdateDialogsReady', this.onClientUpdateDialogsReady);\n      ChatStore.off('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n      ChatStore.off('updateChatLastMessage', this.onUpdateChatLastMessage);\n      MessageStore.off('clientUpdateClearSelection', this.onClientUpdateSelection);\n      MessageStore.off('clientUpdateMessageSelected', this.onClientUpdateSelection);\n      MessageStore.off('clientUpdateOpenReply', this.onClientUpdateOpenReply);\n      MessageStore.off('clientUpdateTryEditMessage', this.onClientUpdateTryEditMessage);\n      MessageStore.off('updateNewMessage', this.onUpdateNewMessage);\n      MessageStore.off('updateDeleteMessages', this.onUpdateDeleteMessages);\n      MessageStore.off('updateMessageContent', this.onUpdateMessageContent);\n      MessageStore.off('updateMessageSendSucceeded', this.onUpdateMessageSendSucceeded);\n      PlayerStore.off('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n      PlayerStore.off('clientUpdateMediaEnding', this.onClientUpdateMediaEnding);\n      PlayerStore.off('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n    }\n  }, {\n    key: \"handleSelectChat\",\n    value: function () {\n      var _handleSelectChat = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee9(chatId, previousChatId, messageId, previousMessageId) {\n        var _this2 = this;\n\n        var chat, previousChat, unread, fromMessageId, offset, limit, sessionId, result, separatorMessageId, i, id, scrollBehavior, store;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                chat = ChatStore.get(chatId);\n                previousChat = ChatStore.get(previousChatId); //console.log('MessagesList.newSessionId handleSelectChat');\n\n                this.sessionId = Date.now();\n                this.loading = false;\n                this.completed = false;\n                this.loadMigratedHistory = false;\n                this.defferedActions = [];\n\n                if (!chat) {\n                  _context9.next = 51;\n                  break;\n                }\n\n                TdLibController.send({\n                  '@type': 'openChat',\n                  chat_id: chat.id\n                });\n                unread = !messageId && chat.unread_count > 0;\n                fromMessageId = unread && chat.unread_count > 1 ? chat.last_read_inbox_message_id : messageId ? messageId : 0;\n                offset = unread && chat.unread_count > 1 || messageId ? -1 - MESSAGE_SLICE_LIMIT : 0;\n                limit = unread && chat.unread_count > 1 || messageId ? 2 * MESSAGE_SLICE_LIMIT : MESSAGE_SLICE_LIMIT;\n                this.loading = true;\n                sessionId = this.sessionId;\n                _context9.next = 17;\n                return TdLibController.send({\n                  '@type': 'getChatHistory',\n                  chat_id: chat.id,\n                  from_message_id: fromMessageId,\n                  offset: offset,\n                  limit: limit\n                }).finally(function () {\n                  _this2.loading = false;\n                });\n\n              case 17:\n                result = _context9.sent;\n\n                if (!(sessionId !== this.sessionId)) {\n                  _context9.next = 20;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\");\n\n              case 20:\n                if (chat.last_message) {\n                  this.completed = result.messages.length > 0 && chat.last_message.id === result.messages[0].id;\n                } else {\n                  this.completed = true;\n                }\n\n                MessageStore.setItems(result.messages);\n                result.messages.reverse();\n                separatorMessageId = this.state.separatorMessageId;\n\n                if (!(chatId !== previousChatId)) {\n                  _context9.next = 39;\n                  break;\n                }\n\n                separatorMessageId = Number.MAX_VALUE;\n\n                if (!(chat && chat.unread_count > 1)) {\n                  _context9.next = 38;\n                  break;\n                }\n\n                i = result.messages.length - 1;\n\n              case 28:\n                if (!(i >= 0)) {\n                  _context9.next = 38;\n                  break;\n                }\n\n                id = result.messages[i].id;\n\n                if (!(!result.messages[i].is_outgoing && id > chat.last_read_inbox_message_id && id < separatorMessageId)) {\n                  _context9.next = 34;\n                  break;\n                }\n\n                separatorMessageId = id;\n                _context9.next = 35;\n                break;\n\n              case 34:\n                return _context9.abrupt(\"break\", 38);\n\n              case 35:\n                i--;\n                _context9.next = 28;\n                break;\n\n              case 38:\n                separatorMessageId = separatorMessageId === Number.MAX_VALUE ? 0 : separatorMessageId;\n\n              case 39:\n                scrollBehavior = ScrollBehaviorEnum.SCROLL_TO_BOTTOM;\n\n                if (messageId) {\n                  scrollBehavior = ScrollBehaviorEnum.SCROLL_TO_MESSAGE;\n                } else if (unread && separatorMessageId) {\n                  scrollBehavior = ScrollBehaviorEnum.SCROLL_TO_UNREAD;\n                }\n\n                this.replace(separatorMessageId, result.messages, function () {\n                  _this2.handleScrollBehavior(scrollBehavior, _this2.snapshot);\n\n                  if (messageId) {\n                    highlightMessage(chatId, messageId);\n                  }\n                }); // load files\n\n                store = FileStore.getStore();\n                loadMessageContents(store, result.messages);\n                this.viewMessages(result.messages);\n                loadChatsContent(store, [chatId]);\n                loadDraftContent(store, chatId);\n                this.loadIncompleteHistory(result); // load full info\n\n                getChatFullInfo(chat.id);\n                _context9.next = 53;\n                break;\n\n              case 51:\n                this.loading = true;\n                this.replace(0, [], function () {\n                  _this2.loading = false;\n                });\n\n              case 53:\n                if (previousChat && previousChatId !== chatId) {\n                  TdLibController.send({\n                    '@type': 'closeChat',\n                    chat_id: previousChatId\n                  });\n                }\n\n              case 54:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function handleSelectChat(_x4, _x5, _x6, _x7) {\n        return _handleSelectChat.apply(this, arguments);\n      }\n\n      return handleSelectChat;\n    }()\n  }, {\n    key: \"viewMessages\",\n    value: function viewMessages(messages) {\n      if (!messages) return;\n      if (messages.length === 0) return;\n      if (!messages[0].chat_id) return;\n\n      var viewAction = function viewAction() {\n        TdLibController.send({\n          '@type': 'viewMessages',\n          chat_id: messages[0].chat_id,\n          message_ids: messages.map(function (x) {\n            return x.id;\n          })\n        });\n      };\n\n      if (window.hasFocus) {\n        viewAction();\n      } else {\n        this.defferedActions.push(viewAction);\n      }\n    }\n  }, {\n    key: \"cancelLoadMessageContents\",\n    value: function cancelLoadMessageContents(messages) {\n      //return;\n      for (var i = messages.length - 1; i >= 0; i--) {\n        var message = messages[i];\n\n        if (message && message.content) {\n          switch (message.content['@type']) {\n            case 'messagePhoto':\n              {\n                var _this$getMessagePhoto = this.getMessagePhoto(message),\n                    _this$getMessagePhoto2 = _slicedToArray(_this$getMessagePhoto, 2),\n                    id = _this$getMessagePhoto2[0],\n                    pid = _this$getMessagePhoto2[1];\n\n                if (pid) {\n                  var obj = getPhotoSize(message.content.photo.sizes);\n\n                  if (!obj.blob) {\n                    FileStore.cancelGetRemoteFile(id, message);\n                  }\n                }\n\n                break;\n              }\n\n            case 'messageSticker':\n              {\n                var _this$getMessageStick = this.getMessageSticker(message),\n                    _this$getMessageStick2 = _slicedToArray(_this$getMessageStick, 2),\n                    _id = _this$getMessageStick2[0],\n                    _pid = _this$getMessageStick2[1];\n\n                if (_pid) {\n                  var _obj = message.content.sticker.sticker;\n\n                  if (!_obj.blob) {\n                    FileStore.cancelGetRemoteFile(_id, message);\n                  }\n                }\n\n                break;\n              }\n\n            default:\n              break;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(separatorMessageId, history, callback) {\n      this.setState({\n        separatorMessageId: separatorMessageId,\n        history: history\n      }, callback);\n    }\n  }, {\n    key: \"replaceMessage\",\n    value: function replaceMessage(oldMessageId, message, callback) {\n      if (!message) {\n        if (callback) callback();\n        return;\n      }\n\n      this.setState({\n        history: this.state.history.filter(function (x) {\n          return x.id !== oldMessageId;\n        }).concat([message])\n      }, callback);\n    }\n  }, {\n    key: \"insertNext\",\n    value: function insertNext(history, callback) {\n      if (history.length === 0) {\n        if (callback) callback();\n        return;\n      }\n\n      this.setState({\n        history: history.concat(this.state.history)\n      }, callback);\n    }\n  }, {\n    key: \"insertPrevious\",\n    value: function insertPrevious(history, newState, callback) {\n      if (history.length === 0) {\n        if (callback) callback();\n        return;\n      }\n\n      this.setState(_objectSpread({\n        history: this.state.history.concat(history)\n      }, newState), callback);\n    }\n  }, {\n    key: \"deleteHistory\",\n    value: function deleteHistory(message_ids, callback) {\n      var history = this.state.history;\n\n      if (history.length === 0) {\n        if (callback) callback();\n        return;\n      }\n\n      var map = new Map(message_ids.map(function (x) {\n        return [x, x];\n      }));\n      this.setState({\n        history: history.filter(function (x) {\n          return !map.has(x.id);\n        })\n      }, callback);\n    }\n  }, {\n    key: \"showMessageTitle\",\n    value: function showMessageTitle(message, prevMessage, isFirst) {\n      if (!message) return false;\n      var chat_id = message.chat_id,\n          date = message.date,\n          sender_user_id = message.sender_user_id,\n          content = message.content;\n\n      if (isFirst) {\n        return true;\n      }\n\n      if (isChannelChat(chat_id)) {\n        return true;\n      }\n\n      return prevMessage && (isServiceMessage(prevMessage) || sender_user_id !== prevMessage.sender_user_id || date - prevMessage.date > MESSAGE_SPLIT_MAX_TIME_S);\n    }\n  }, {\n    key: \"showMessageDate\",\n    value: function showMessageDate(message, prevMessage, isFirst) {\n      if (isFirst) {\n        return true;\n      }\n\n      var date = new Date(message.date * 1000);\n      var prevDate = prevMessage ? new Date(prevMessage.date * 1000) : date;\n\n      if (date.getFullYear() !== prevDate.getFullYear() || date.getMonth() !== prevDate.getMonth() || date.getDate() !== prevDate.getDate()) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var chatId = this.props.chatId;\n      var _this$state3 = this.state,\n          history = _this$state3.history,\n          separatorMessageId = _this$state3.separatorMessageId,\n          clearHistory = _this$state3.clearHistory,\n          selectionActive = _this$state3.selectionActive,\n          scrollDownVisible = _this$state3.scrollDownVisible; // console.log('[ml] render ', history);\n      // const isChannel = isChannelChat(chatId);\n\n      this.itemsMap.clear();\n      this.messages = clearHistory ? null : history.map(function (x, i) {\n        var prevMessage = i > 0 ? history[i - 1] : null;\n        var nextMessage = i < history.length - 1 ? history[i + 1] : null;\n\n        var showDate = _this3.showMessageDate(x, prevMessage, i === 0);\n\n        var m = null;\n\n        if (isServiceMessage(x)) {\n          m = React.createElement(ServiceMessage, {\n            key: \"chat_id=\".concat(x.chat_id, \" message_id=\").concat(x.id),\n            ref: function ref(el) {\n              return _this3.itemsMap.set(i, el);\n            },\n            chatId: x.chat_id,\n            messageId: x.id,\n            showUnreadSeparator: separatorMessageId === x.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1257\n            },\n            __self: this\n          });\n        } else {\n          var showTitle = _this3.showMessageTitle(x, prevMessage, i === 0);\n\n          var nextShowTitle = _this3.showMessageTitle(nextMessage, x, false);\n\n          var showTail = !nextMessage || isServiceMessage(nextMessage) || nextShowTitle;\n          m = React.createElement(Message, {\n            key: \"chat_id=\".concat(x.chat_id, \" message_id=\").concat(x.id),\n            ref: function ref(el) {\n              return _this3.itemsMap.set(i, el);\n            },\n            chatId: x.chat_id,\n            messageId: x.id,\n            sendingState: x.sending_state,\n            showTitle: showTitle,\n            showTail: showTail,\n            showUnreadSeparator: separatorMessageId === x.id,\n            showDate: showDate,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1272\n            },\n            __self: this\n          });\n        }\n\n        return m;\n      });\n      return React.createElement(\"div\", {\n        className: classNames('messages-list', {\n          'messages-list-selection-active': selectionActive\n        }),\n        onDragEnter: this.handleListDragEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1290\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        ref: this.listRef,\n        className: \"messages-list-wrapper\",\n        onScroll: this.handleScroll,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1295\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"messages-list-top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1296\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        ref: this.itemsRef,\n        className: \"messages-list-items\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1297\n        },\n        __self: this\n      }, this.messages)), React.createElement(ActionBar, {\n        chatId: chatId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1301\n        },\n        __self: this\n      }), React.createElement(Placeholder, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1302\n        },\n        __self: this\n      }), scrollDownVisible && React.createElement(ScrollDownButton, {\n        ref: this.scrollDownButtonRef,\n        onClick: this.handleScrollDownClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1304\n        },\n        __self: this\n      }), React.createElement(FilesDropTarget, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1306\n        },\n        __self: this\n      }), React.createElement(StickersHint, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1307\n        },\n        __self: this\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.chatId !== state.prevChatId || props.messageId !== state.prevMessageId) {\n        return {\n          prevChatId: props.chatId,\n          prevMessageId: props.messageId,\n          clearHistory: false,\n          selectionActive: false,\n          separatorMessageId: props.chatId !== state.prevChatId ? 0 : state.separatorMessageId,\n          scrollDownVisible: props.chatId === state.prevChatId && (state.scrollDownVisible || state.replyHistory.length > 0),\n          replyHistory: props.chatId !== state.prevChatId ? [] : state.replyHistory\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return MessagesList;\n}(React.Component);\n\nexport default MessagesList;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnMiddle/MessagesList.js"],"names":["React","ReactDOM","classNames","ActionBar","DayMeta","FilesDropTarget","Message","Placeholder","ScrollDownButton","ServiceMessage","StickersHint","throttle","getPhotoSize","itemsInView","historyEquals","loadChatsContent","loadDraftContent","loadMessageContents","canMessageBeEdited","filterDuplicateMessages","filterMessages","isServiceMessage","canSendMediaMessages","getChatFullInfo","getSupergroupId","isChannelChat","isPrivateChat","editMessage","highlightMessage","openChat","MESSAGE_SLICE_LIMIT","MESSAGE_SPLIT_MAX_TIME_S","SCROLL_PRECISION","AppStore","ChatStore","FileStore","MessageStore","PlayerStore","SupergroupStore","UserStore","TdLibController","ScrollBehaviorEnum","Object","freeze","SCROLL_TO_BOTTOM","SCROLL_TO_UNREAD","SCROLL_TO_MESSAGE","KEEP_SCROLL_POSITION","NONE","MessagesList","props","onKeyDown","event","onClientUpdateTryEditMessage","update","completed","history","state","i","length","message","chat_id","id","send","chatId","query","sender_user_id","getMyId","from_message_id","offset","limit","filter","result","messages","onClientUpdateDialogsReady","initDB","messageId","chat","get","type","user_id","force","basic_group_id","supergroup_id","handleSelectChat","onClientUpdateFocusWindow","focused","defferedActions","forEach","x","onClientUpdateOpenReply","replyHistory","lastItem","push","onClientUpdateMediaActive","list","listRef","current","prevOffsetHeight","offsetHeight","prevScrollTop","scrollTop","setState","playerOpened","Math","abs","onClientUpdateMediaEnding","udpate","onClientUpdateMediaEnd","onClientUpdateSelection","selectionActive","selectedItems","size","onClientUpdateClearHistory","clearHistory","inProgress","onUpdateMessageContent","message_id","findIndex","store","getStore","onUpdateChatLastMessage","onUpdateMessageSendSucceeded","old_message_id","scrollBehavior","is_outgoing","replaceMessage","handleScrollBehavior","snapshot","viewMessages","onUpdateNewMessage","date","scrollHeight","newState","scrollDownVisible","scrollBehaviorNone","insertPrevious","onUpdateDeleteMessages","is_permanent","message_ids","deleteHistory","updateItemsInView","Map","items","itemsRef","messageWrapper","key","set","clientUpdate","loadIncompleteHistory","MAX_ITERATIONS","incomplete","onLoadNext","loading","loadMigratedHistory","onLoadMigratedHistory","fromMessageId","sessionId","finally","setItems","reverse","insertNext","supergroupId","fullInfo","getFullInfo","upgraded_from_basic_group_id","basicGroupChat","onLoadPrevious","last_message","handleScroll","prevHistory","scrollToBottom","scrollToMessage","scrollToUnread","keepScrollPosition","pinnedMessageMargin","scrolled","itemComponent","itemsMap","item","findDOMNode","showUnreadSeparator","offsetTop","node","nextScrollTop","scrollToStart","Date","now","replace","separatorMessageId","handleListDragEnter","preventDefault","stopPropagation","dragging","files","dataTransfer","handleScrollDownClick","lastReply","pop","prevChatId","prevMessageId","createRef","scrollDownButtonRef","prevProps","prevState","nextProps","nextState","theme","on","off","previousChatId","previousMessageId","previousChat","unread","unread_count","last_read_inbox_message_id","Number","MAX_VALUE","viewAction","map","window","hasFocus","content","getMessagePhoto","pid","obj","photo","sizes","blob","cancelGetRemoteFile","getMessageSticker","sticker","callback","oldMessageId","concat","has","prevMessage","isFirst","prevDate","getFullYear","getMonth","getDate","clear","nextMessage","showDate","showMessageDate","m","el","showTitle","showMessageTitle","nextShowTitle","showTail","sending_state","Component"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport ActionBar from './ActionBar';\nimport DayMeta from '../Message/DayMeta';\nimport FilesDropTarget from './FilesDropTarget';\nimport Message from '../Message/Message';\nimport Placeholder from './Placeholder';\nimport ScrollDownButton from './ScrollDownButton';\nimport ServiceMessage from '../Message/ServiceMessage';\nimport StickersHint from './StickersHint';\nimport { throttle, getPhotoSize, itemsInView, historyEquals } from '../../Utils/Common';\nimport { loadChatsContent, loadDraftContent, loadMessageContents } from '../../Utils/File';\nimport { canMessageBeEdited, filterDuplicateMessages, filterMessages } from '../../Utils/Message';\nimport { isServiceMessage } from '../../Utils/ServiceMessage';\nimport { canSendMediaMessages, getChatFullInfo, getSupergroupId, isChannelChat, isPrivateChat } from '../../Utils/Chat';\nimport { editMessage, highlightMessage, openChat } from '../../Actions/Client';\nimport { MESSAGE_SLICE_LIMIT, MESSAGE_SPLIT_MAX_TIME_S, SCROLL_PRECISION } from '../../Constants';\nimport AppStore from '../../Stores/ApplicationStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport FileStore from '../../Stores/FileStore';\nimport MessageStore from '../../Stores/MessageStore';\nimport PlayerStore from '../../Stores/PlayerStore';\nimport SupergroupStore from '../../Stores/SupergroupStore';\nimport UserStore from '../../Stores/UserStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './MessagesList.css';\n\nconst ScrollBehaviorEnum = Object.freeze({\n    SCROLL_TO_BOTTOM: 'SCROLL_TO_BOTTOM',\n    SCROLL_TO_UNREAD: 'SCROLL_TO_UNREAD',\n    SCROLL_TO_MESSAGE: 'SCROLL_TO_MESSAGE',\n    KEEP_SCROLL_POSITION: 'KEEP_SCROLL_POSITION',\n    NONE: 'NONE'\n});\n\nclass MessagesList extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // console.log(`MessagesList.ctor chat_id=${props.chatId} message_id=${props.messageId}`);\n\n        // console.log('MessagesList.newSessionId ctor');\n        this.sessionId = Date.now();\n        this.state = {\n            prevChatId: 0,\n            prevMessageId: null,\n            playerOpened: false,\n            history: [],\n            clearHistory: false,\n            selectionActive: false,\n            separatorMessageId: 0,\n            scrollDownVisible: false,\n            replyHistory: []\n        };\n\n        this.listRef = React.createRef();\n        this.itemsRef = React.createRef();\n        this.scrollDownButtonRef = React.createRef();\n\n        this.defferedActions = [];\n        this.itemsMap = new Map();\n\n        this.updateItemsInView = throttle(this.updateItemsInView, 500);\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.chatId !== state.prevChatId || props.messageId !== state.prevMessageId) {\n            return {\n                prevChatId: props.chatId,\n                prevMessageId: props.messageId,\n                clearHistory: false,\n                selectionActive: false,\n                separatorMessageId: props.chatId !== state.prevChatId ? 0 : state.separatorMessageId,\n                scrollDownVisible:\n                    props.chatId === state.prevChatId && (state.scrollDownVisible || state.replyHistory.length > 0),\n                replyHistory: props.chatId !== state.prevChatId ? [] : state.replyHistory\n            };\n        }\n\n        return null;\n    }\n\n    getSnapshotBeforeUpdate(prevProps, prevState) {\n        const list = this.listRef.current;\n        const { scrollTop, scrollHeight, offsetHeight } = list;\n\n        const snapshot = {\n            scrollTop,\n            scrollHeight,\n            offsetHeight\n        };\n\n        // console.log('[ml] getSnapshotBeforeUpdate', snapshot);\n        this.snapshot = snapshot;\n        return snapshot;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const { chatId, messageId } = this.props;\n        const { scrollDownVisible } = this.state;\n\n        const list = this.listRef.current;\n\n        // console.log(\n        //     `[ml] componentDidUpdate\n        //     scrollBehaviorNone=${this.scrollBehaviorNone}\n        //     scrollDownVisible=${scrollDownVisible}\n        //     list.scrollTop=${list.scrollTop}\n        //     list.scrollHeight=${list.scrollHeight}\n        //     list.offsetHeight=${list.offsetHeight}`\n        // );\n\n        if (prevProps.chatId !== chatId || prevProps.messageId !== messageId) {\n            this.handleSelectChat(chatId, prevProps.chatId, messageId, prevProps.messageId);\n        } else {\n            if (!this.scrollBehaviorNone) {\n                this.handleScrollBehavior(ScrollBehaviorEnum.KEEP_SCROLL_POSITION, snapshot);\n            }\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const { chatId, messageId, theme } = this.props;\n        const { playerOpened, history, dragging, clearHistory, selectionActive, scrollDownVisible } = this.state;\n\n        if (nextProps.theme !== theme) {\n            // console.log('[ml] shouldComponentUpdate theme');\n            return true;\n        }\n\n        if (nextProps.chatId !== chatId) {\n            // console.log('[ml] shouldComponentUpdate chatId');\n            return true;\n        }\n\n        if (nextProps.messageId !== messageId) {\n            // console.log('[ml] shouldComponentUpdate messageId');\n            return true;\n        }\n\n        if (nextState.scrollDownVisible !== scrollDownVisible) {\n            // console.log('[ml] shouldComponentUpdate scrollDownVisible');\n            return true;\n        }\n\n        if (nextState.playerOpened !== playerOpened) {\n            // console.log('[ml] shouldComponentUpdate playerOpened');\n            return true;\n        }\n\n        if (!historyEquals(nextState.history, history)) {\n            // console.trace('[ml] shouldComponentUpdate history', nextState.history, history);\n            return true;\n        }\n\n        if (nextState.dragging !== dragging) {\n            // console.log('[ml] shouldComponentUpdate dragging');\n            return true;\n        }\n\n        if (nextState.clearHistory !== clearHistory) {\n            // console.log('[ml] shouldComponentUpdate clearHistory');\n            return true;\n        }\n\n        if (nextState.selectionActive !== selectionActive) {\n            // console.log('[ml] shouldComponentUpdate selectionActive');\n            return true;\n        }\n\n        // console.log('[ml] shouldComponentUpdate false');\n        return false;\n    }\n\n    componentDidMount() {\n        AppStore.on('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n        AppStore.on('clientUpdateDialogsReady', this.onClientUpdateDialogsReady);\n        ChatStore.on('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.on('updateChatLastMessage', this.onUpdateChatLastMessage);\n        MessageStore.on('clientUpdateClearSelection', this.onClientUpdateSelection);\n        MessageStore.on('clientUpdateMessageSelected', this.onClientUpdateSelection);\n        MessageStore.on('clientUpdateOpenReply', this.onClientUpdateOpenReply);\n        MessageStore.on('clientUpdateTryEditMessage', this.onClientUpdateTryEditMessage);\n        MessageStore.on('updateNewMessage', this.onUpdateNewMessage);\n        MessageStore.on('updateDeleteMessages', this.onUpdateDeleteMessages);\n        MessageStore.on('updateMessageContent', this.onUpdateMessageContent);\n        MessageStore.on('updateMessageSendSucceeded', this.onUpdateMessageSendSucceeded);\n        PlayerStore.on('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.on('clientUpdateMediaEnding', this.onClientUpdateMediaEnding);\n        PlayerStore.on('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n    }\n\n    componentWillUnmount() {\n        AppStore.off('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n        AppStore.off('clientUpdateDialogsReady', this.onClientUpdateDialogsReady);\n        ChatStore.off('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.off('updateChatLastMessage', this.onUpdateChatLastMessage);\n        MessageStore.off('clientUpdateClearSelection', this.onClientUpdateSelection);\n        MessageStore.off('clientUpdateMessageSelected', this.onClientUpdateSelection);\n        MessageStore.off('clientUpdateOpenReply', this.onClientUpdateOpenReply);\n        MessageStore.off('clientUpdateTryEditMessage', this.onClientUpdateTryEditMessage);\n        MessageStore.off('updateNewMessage', this.onUpdateNewMessage);\n        MessageStore.off('updateDeleteMessages', this.onUpdateDeleteMessages);\n        MessageStore.off('updateMessageContent', this.onUpdateMessageContent);\n        MessageStore.off('updateMessageSendSucceeded', this.onUpdateMessageSendSucceeded);\n        PlayerStore.off('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.off('clientUpdateMediaEnding', this.onClientUpdateMediaEnding);\n        PlayerStore.off('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n    }\n\n    onKeyDown = event => {\n        // if (event.keyCode === 27) {\n        //     if (MessageStore.selectedItems.size > 0) {\n        //         console.log('[k] messagesList onKeyDown');\n        //         clearSelection();\n        //         event.stopPropagation();\n        //         event.preventDefault();\n        //     }\n        // }\n    };\n\n    onClientUpdateTryEditMessage = async update => {\n        if (this.completed) {\n            const { history } = this.state;\n\n            for (let i = history.length - 1; i >= 0; i--) {\n                const message = history[i];\n                if (canMessageBeEdited(message.chat_id, message.id)) {\n                    editMessage(message.chat_id, message.id);\n\n                    return;\n                }\n            }\n        }\n\n        const result = await TdLibController.send({\n            '@type': 'searchChatMessages',\n            chat_id: this.props.chatId,\n            query: '',\n            sender_user_id: UserStore.getMyId(),\n            from_message_id: 0,\n            offset: 0,\n            limit: 100,\n            filter: { '@type': 'searchMessagesFilterEmpty' }\n        });\n\n        for (let i = 0; i < result.messages.length; i++) {\n            const message = result.messages[i];\n            if (canMessageBeEdited(message.chat_id, message.id)) {\n                editMessage(message.chat_id, message.id);\n\n                return;\n            }\n        }\n    };\n\n    onClientUpdateDialogsReady = async update => {\n        await FileStore.initDB(async () => {\n            const { chatId, messageId } = this.props;\n            if (chatId) {\n                const chat = ChatStore.get(chatId);\n                if (chat) {\n                    const { type } = chat;\n                    switch (type['@type']) {\n                        case 'chatTypePrivate':\n                        case 'chatTypeSecret': {\n                            await TdLibController.send({\n                                '@type': 'createPrivateChat',\n                                user_id: type.user_id,\n                                force: false\n                            });\n                            break;\n                        }\n                        case 'chatTypeBasicGroup': {\n                            await TdLibController.send({\n                                '@type': 'createBasicGroupChat',\n                                basic_group_id: type.basic_group_id,\n                                force: false\n                            });\n                            break;\n                        }\n                        case 'chatTypeSupergroup': {\n                            await TdLibController.send({\n                                '@type': 'createSupergroupChat',\n                                supergroup_id: type.supergroup_id,\n                                force: false\n                            });\n                            break;\n                        }\n                    }\n                    this.handleSelectChat(chatId, 0, messageId, 0);\n                }\n            }\n        });\n    };\n\n    onClientUpdateFocusWindow = update => {\n        const { focused } = update;\n        if (focused) {\n            this.defferedActions.forEach(x => x());\n            this.defferedActions = [];\n        }\n    };\n\n    onClientUpdateOpenReply = update => {\n        const { chatId, messageId } = update;\n        const { replyHistory } = this.state;\n\n        if (this.props.chatId !== chatId) {\n            return;\n        }\n\n        const lastItem = replyHistory.length > 0 ? replyHistory[replyHistory.length - 1] : null;\n        if (lastItem && lastItem.chatId === chatId && lastItem.messageId === messageId) {\n            return;\n        }\n\n        replyHistory.push({ chatId, messageId });\n    };\n\n    onClientUpdateMediaActive = update => {\n        const list = this.listRef.current;\n\n        const prevOffsetHeight = list.offsetHeight;\n        const prevScrollTop = list.scrollTop;\n        this.setState({ playerOpened: true }, () => {\n            if (list.scrollTop === prevScrollTop) {\n                list.scrollTop += Math.abs(prevOffsetHeight - list.offsetHeight);\n            }\n        });\n    };\n\n    onClientUpdateMediaEnding = udpate => {\n        const list = this.listRef.current;\n\n        this.prevOffsetHeight = list.offsetHeight;\n        this.prevScrollTop = list.scrollTop;\n    };\n\n    onClientUpdateMediaEnd = udpate => {\n        const list = this.listRef.current;\n\n        //const prevOffsetHeight = list.offsetHeight;\n        //const prevScrollTop = list.scrollTop;\n\n        this.setState({ playerOpened: false }, () => {\n            if (list.scrollTop === this.prevScrollTop) {\n                list.scrollTop -= Math.abs(this.prevOffsetHeight - list.offsetHeight);\n            }\n        });\n    };\n\n    onClientUpdateSelection = update => {\n        this.setState({\n            selectionActive: MessageStore.selectedItems.size > 0\n        });\n    };\n\n    onClientUpdateClearHistory = update => {\n        const { chatId } = this.props;\n\n        if (chatId === update.chatId) {\n            this.setState({ clearHistory: update.inProgress });\n        }\n    };\n\n    onUpdateMessageContent = update => {\n        const { chatId } = this.props;\n        const { history } = this.state;\n        const { chat_id, message_id } = update;\n\n        if (chatId !== chat_id) return;\n\n        if (history.findIndex(x => x.id === message_id) !== -1) {\n            const message = MessageStore.get(chat_id, message_id);\n            if (!message) return;\n\n            const store = FileStore.getStore();\n            loadMessageContents(store, [message]);\n        }\n    };\n\n    onUpdateChatLastMessage = update => {\n        const { chatId } = this.props;\n        if (chatId !== update.chat_id) return;\n    };\n\n    onUpdateMessageSendSucceeded = update => {\n        if (!this.completed) return;\n\n        const { message, old_message_id } = update;\n        const { chatId } = this.props;\n        if (chatId !== message.chat_id) return;\n\n        // let handleSendSucceeded = false;\n        // const { content } = message;\n        // switch (content['@type']) {\n        //     case 'messagePoll': {\n        //         handleSendSucceeded = true;\n        //         break;\n        //     }\n        // }\n        //\n        // if (!handleSendSucceeded) return;\n\n        const scrollBehavior = message.is_outgoing\n            ? ScrollBehaviorEnum.SCROLL_TO_BOTTOM\n            : ScrollBehaviorEnum.KEEP_SCROLL_POSITION;\n\n        this.replaceMessage(old_message_id, message, () => {\n            if (scrollBehavior !== ScrollBehaviorEnum.KEEP_SCROLL_POSITION) {\n                this.handleScrollBehavior(scrollBehavior, this.snapshot);\n            }\n        });\n\n        const store = FileStore.getStore();\n        loadMessageContents(store, [message]);\n        this.viewMessages([message]);\n    };\n\n    onUpdateNewMessage = update => {\n        if (!this.completed) return;\n\n        const { message } = update;\n        const { chatId } = this.props;\n        if (chatId !== message.chat_id) return;\n\n        const { date } = message;\n        if (date === 0) return;\n\n        const list = this.listRef.current;\n\n        let scrollBehavior = message.is_outgoing ? ScrollBehaviorEnum.SCROLL_TO_BOTTOM : ScrollBehaviorEnum.NONE;\n        if (list.scrollTop + list.offsetHeight >= list.scrollHeight) {\n            scrollBehavior = ScrollBehaviorEnum.SCROLL_TO_BOTTOM;\n        }\n\n        const newState = message.is_outgoing ? { scrollDownVisible: false } : {};\n\n        const history = [message];\n        this.scrollBehaviorNone = true;\n        this.insertPrevious(filterMessages(history), newState, () => {\n            this.scrollBehaviorNone = false;\n            this.handleScrollBehavior(scrollBehavior, this.snapshot);\n        });\n\n        const store = FileStore.getStore();\n        loadMessageContents(store, history);\n        this.viewMessages(history);\n    };\n\n    onUpdateDeleteMessages = update => {\n        const { chatId } = this.props;\n        const { chat_id, is_permanent, message_ids } = update;\n        if (chatId !== chat_id) return;\n\n        if (!is_permanent) return;\n\n        this.deleteHistory(message_ids);\n    };\n\n    updateItemsInView = () => {\n        if (!this.messages) return;\n\n        const messages = new Map();\n        const items = itemsInView(this.listRef, this.itemsRef);\n        for (let i = 0; i < items.length; i++) {\n            const messageWrapper = this.messages[items[i]];\n            if (messageWrapper) {\n                const message = messageWrapper;\n                const { chatId, messageId } = message.props;\n                const key = `${chatId}_${messageId}`;\n                messages.set(key, key);\n            }\n        }\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMessagesInView',\n            messages: messages\n        });\n        return;\n\n        if (!messages.length) return;\n\n        /*let ids = messages.map(x => x.id);\n        console.log('[perf] load_messages_contents ids=[' + ids + ']');\n\n                let messagesMap = new Map(messages.map((i) => [i.id, i]));\n\n                if (this.previousMessages){\n                    let cancelMessages = [];\n                    for (let i = 0; i < this.previousMessages.length; i++){\n                        if (!messagesMap.has(this.previousMessages[i].id)){\n                            cancelMessages.push(this.previousMessages[i]);\n                        }\n                    }\n                    if (cancelMessages.length > 0) {\n                        this.cancelLoadMessageContents(cancelMessages);\n                    }\n                }\n                this.previousMessages = messages;*/\n\n        const store = FileStore.getStore();\n        loadMessageContents(store, messages);\n    };\n\n    async handleSelectChat(chatId, previousChatId, messageId, previousMessageId) {\n        const chat = ChatStore.get(chatId);\n        const previousChat = ChatStore.get(previousChatId);\n\n        //console.log('MessagesList.newSessionId handleSelectChat');\n        this.sessionId = Date.now();\n        this.loading = false;\n        this.completed = false;\n        this.loadMigratedHistory = false;\n        this.defferedActions = [];\n\n        if (chat) {\n            TdLibController.send({\n                '@type': 'openChat',\n                chat_id: chat.id\n            });\n\n            const unread = !messageId && chat.unread_count > 0;\n            const fromMessageId =\n                unread && chat.unread_count > 1 ? chat.last_read_inbox_message_id : messageId ? messageId : 0;\n            const offset = (unread && chat.unread_count > 1) || messageId ? -1 - MESSAGE_SLICE_LIMIT : 0;\n            const limit =\n                (unread && chat.unread_count > 1) || messageId ? 2 * MESSAGE_SLICE_LIMIT : MESSAGE_SLICE_LIMIT;\n\n            this.loading = true;\n            const sessionId = this.sessionId;\n            const result = await TdLibController.send({\n                '@type': 'getChatHistory',\n                chat_id: chat.id,\n                from_message_id: fromMessageId,\n                offset: offset,\n                limit: limit\n            }).finally(() => {\n                this.loading = false;\n            });\n\n            if (sessionId !== this.sessionId) {\n                return;\n            }\n\n            if (chat.last_message) {\n                this.completed = result.messages.length > 0 && chat.last_message.id === result.messages[0].id;\n            } else {\n                this.completed = true;\n            }\n\n            MessageStore.setItems(result.messages);\n            result.messages.reverse();\n\n            let separatorMessageId = this.state.separatorMessageId;\n            if (chatId !== previousChatId) {\n                separatorMessageId = Number.MAX_VALUE;\n                if (chat && chat.unread_count > 1) {\n                    for (let i = result.messages.length - 1; i >= 0; i--) {\n                        const { id } = result.messages[i];\n                        if (\n                            !result.messages[i].is_outgoing &&\n                            id > chat.last_read_inbox_message_id &&\n                            id < separatorMessageId\n                        ) {\n                            separatorMessageId = id;\n                        } else {\n                            break;\n                        }\n                    }\n                }\n                separatorMessageId = separatorMessageId === Number.MAX_VALUE ? 0 : separatorMessageId;\n            }\n\n            let scrollBehavior = ScrollBehaviorEnum.SCROLL_TO_BOTTOM;\n            if (messageId) {\n                scrollBehavior = ScrollBehaviorEnum.SCROLL_TO_MESSAGE;\n            } else if (unread && separatorMessageId) {\n                scrollBehavior = ScrollBehaviorEnum.SCROLL_TO_UNREAD;\n            }\n\n            this.replace(separatorMessageId, result.messages, () => {\n                this.handleScrollBehavior(scrollBehavior, this.snapshot);\n                if (messageId) {\n                    highlightMessage(chatId, messageId);\n                }\n            });\n\n            // load files\n            const store = FileStore.getStore();\n            loadMessageContents(store, result.messages);\n            this.viewMessages(result.messages);\n\n            loadChatsContent(store, [chatId]);\n            loadDraftContent(store, chatId);\n\n            this.loadIncompleteHistory(result);\n\n            // load full info\n            getChatFullInfo(chat.id);\n        } else {\n            this.loading = true;\n            this.replace(0, [], () => {\n                this.loading = false;\n            });\n        }\n\n        if (previousChat && previousChatId !== chatId) {\n            TdLibController.send({\n                '@type': 'closeChat',\n                chat_id: previousChatId\n            });\n        }\n    }\n\n    viewMessages(messages) {\n        if (!messages) return;\n        if (messages.length === 0) return;\n        if (!messages[0].chat_id) return;\n\n        const viewAction = () => {\n            TdLibController.send({\n                '@type': 'viewMessages',\n                chat_id: messages[0].chat_id,\n                message_ids: messages.map(x => x.id)\n            });\n        };\n\n        if (window.hasFocus) {\n            viewAction();\n        } else {\n            this.defferedActions.push(viewAction);\n        }\n    }\n\n    cancelLoadMessageContents(messages) {\n        //return;\n        for (let i = messages.length - 1; i >= 0; i--) {\n            let message = messages[i];\n            if (message && message.content) {\n                switch (message.content['@type']) {\n                    case 'messagePhoto': {\n                        let [id, pid] = this.getMessagePhoto(message);\n                        if (pid) {\n                            let obj = getPhotoSize(message.content.photo.sizes);\n                            if (!obj.blob) {\n                                FileStore.cancelGetRemoteFile(id, message);\n                            }\n                        }\n                        break;\n                    }\n                    case 'messageSticker': {\n                        let [id, pid] = this.getMessageSticker(message);\n                        if (pid) {\n                            let obj = message.content.sticker.sticker;\n                            if (!obj.blob) {\n                                FileStore.cancelGetRemoteFile(id, message);\n                            }\n                        }\n                        break;\n                    }\n                    default:\n                        break;\n                }\n            }\n        }\n    }\n\n    loadIncompleteHistory = async result => {\n        const MAX_ITERATIONS = 5;\n        let incomplete = result && result.messages.length > 0 && result.messages.length < MESSAGE_SLICE_LIMIT;\n\n        for (let i = 0; i < MAX_ITERATIONS && incomplete; i++) {\n            result = await this.onLoadNext();\n            incomplete = result && result.messages.length > 0 && result.messages.length < MESSAGE_SLICE_LIMIT;\n        }\n    };\n\n    onLoadNext = async () => {\n        const { chatId } = this.props;\n        const { history } = this.state;\n\n        if (!chatId) return;\n        if (this.loading) return;\n\n        if (this.loadMigratedHistory) {\n            this.onLoadMigratedHistory();\n            return;\n        }\n\n        const fromMessageId = history && history.length > 0 ? history[0].id : 0;\n\n        this.loading = true;\n        const sessionId = this.sessionId;\n        let result = await TdLibController.send({\n            '@type': 'getChatHistory',\n            chat_id: chatId,\n            from_message_id: fromMessageId,\n            offset: 0,\n            limit: MESSAGE_SLICE_LIMIT\n        }).finally(() => {\n            this.loading = false;\n        });\n\n        if (sessionId !== this.sessionId) {\n            return;\n        }\n\n        if (this.props.chatId !== chatId) {\n            return;\n        }\n\n        MessageStore.setItems(result.messages);\n        result.messages.reverse();\n        this.insertNext(filterMessages(result.messages), () => {\n            if (!result.messages.length) {\n                this.onLoadMigratedHistory();\n            }\n        });\n\n        const store = FileStore.getStore();\n        loadMessageContents(store, result.messages);\n        this.viewMessages(result.messages);\n\n        return result;\n    };\n\n    onLoadMigratedHistory = async () => {\n        const { chatId } = this.props;\n        const { history } = this.state;\n\n        if (!chatId) return;\n        if (this.loading) return;\n\n        const supergroupId = getSupergroupId(chatId);\n        if (!supergroupId) return;\n\n        const fullInfo = SupergroupStore.getFullInfo(supergroupId);\n        if (!fullInfo) return;\n        if (!fullInfo.upgraded_from_basic_group_id) return;\n\n        this.loadMigratedHistory = true;\n\n        const basicGroupChat = await TdLibController.send({\n            '@type': 'createBasicGroupChat',\n            basic_group_id: fullInfo.upgraded_from_basic_group_id\n        });\n\n        if (!basicGroupChat) return;\n\n        const fromMessageId = history.length > 0 && history[0].chat_id === basicGroupChat.id ? history[0].id : 0;\n\n        this.loading = true;\n        const sessionId = this.sessionId;\n        const result = await TdLibController.send({\n            '@type': 'getChatHistory',\n            chat_id: basicGroupChat.id,\n            from_message_id: fromMessageId,\n            offset: 0,\n            limit: MESSAGE_SLICE_LIMIT\n        }).finally(() => {\n            this.loading = false;\n        });\n\n        if (sessionId !== this.sessionId) {\n            return;\n        }\n\n        if (this.props.chatId !== chatId) {\n            return;\n        }\n\n        MessageStore.setItems(result.messages);\n        result.messages.reverse();\n        this.insertNext(filterMessages(result.messages));\n\n        const store = FileStore.getStore();\n        loadMessageContents(store, result.messages);\n        this.viewMessages(result.messages);\n    };\n\n    onLoadPrevious = async () => {\n        const { chatId } = this.props;\n        const { history } = this.state;\n\n        const chat = ChatStore.get(chatId);\n\n        if (!chat) return;\n        if (this.loading) return;\n        if (this.completed) return;\n\n        const fromMessageId = history && history.length > 0 ? history[history.length - 1].id : 0;\n\n        this.loading = true;\n        const sessionId = this.sessionId;\n        let result = await TdLibController.send({\n            '@type': 'getChatHistory',\n            chat_id: chatId,\n            from_message_id: fromMessageId,\n            offset: -MESSAGE_SLICE_LIMIT - 1,\n            limit: MESSAGE_SLICE_LIMIT + 1\n        }).finally(() => {\n            this.loading = false;\n        });\n\n        if (sessionId !== this.sessionId) {\n            return;\n        }\n\n        if (this.props.chatId !== chatId) {\n            return;\n        }\n\n        if (chat.last_message) {\n            this.completed = result.messages.length > 0 && chat.last_message.id === result.messages[0].id;\n        } else {\n            this.completed = true;\n        }\n\n        filterDuplicateMessages(result, this.state.history);\n\n        MessageStore.setItems(result.messages);\n        result.messages.reverse();\n        this.scrollBehaviorNone = true;\n        this.insertPrevious(filterMessages(result.messages), {}, () => {\n            this.scrollBehaviorNone = false;\n        });\n\n        const store = FileStore.getStore();\n        loadMessageContents(store, result.messages);\n        this.viewMessages(result.messages);\n\n        return result;\n    };\n\n    replace(separatorMessageId, history, callback) {\n        this.setState({ separatorMessageId, history }, callback);\n    }\n\n    replaceMessage(oldMessageId, message, callback) {\n        if (!message) {\n            if (callback) callback();\n            return;\n        }\n\n        this.setState(\n            {\n                history: this.state.history.filter(x => x.id !== oldMessageId).concat([message])\n            },\n            callback\n        );\n    }\n\n    insertNext(history, callback) {\n        if (history.length === 0) {\n            if (callback) callback();\n            return;\n        }\n\n        this.setState({ history: history.concat(this.state.history) }, callback);\n    }\n\n    insertPrevious(history, newState, callback) {\n        if (history.length === 0) {\n            if (callback) callback();\n            return;\n        }\n\n        this.setState({ history: this.state.history.concat(history), ...newState }, callback);\n    }\n\n    deleteHistory(message_ids, callback) {\n        const { history } = this.state;\n        if (history.length === 0) {\n            if (callback) callback();\n            return;\n        }\n\n        const map = new Map(message_ids.map(x => [x, x]));\n        this.setState({ history: history.filter(x => !map.has(x.id)) }, callback);\n    }\n\n    handleScroll = () => {\n        const { scrollDownVisible, replyHistory, history } = this.state;\n        const list = this.listRef.current;\n\n        // console.log(\n        //     `[ml] handleScroll\n        //     list.scrollTop=${list.scrollTop}\n        //     list.offsetHeight=${list.offsetHeight}\n        //     list.scrollHeight=${list.scrollHeight}`\n        // );\n\n        this.updateItemsInView();\n\n        if (list.scrollTop <= SCROLL_PRECISION) {\n            this.onLoadNext();\n        } else if (list.scrollTop + list.offsetHeight >= list.scrollHeight - SCROLL_PRECISION) {\n            this.onLoadPrevious();\n        }\n\n        if (list.scrollTop + list.offsetHeight >= list.scrollHeight - SCROLL_PRECISION) {\n            if (this.completed && scrollDownVisible) {\n                if (this.prevScrollTop !== list.scrollTop && this.prevScrollTop && this.prevHistory === history) {\n                    this.setState({\n                        scrollDownVisible: false,\n                        replyHistory: []\n                    });\n                } else if (!replyHistory.length) {\n                    this.setState({\n                        scrollDownVisible: false\n                    });\n                }\n            }\n        } else {\n            if (!scrollDownVisible) {\n                this.setState({ scrollDownVisible: true });\n            }\n        }\n\n        this.prevScrollTop = list.scrollTop;\n        this.prevHistory = history;\n    };\n\n    handleScrollBehavior = (scrollBehavior, snapshot) => {\n        const { chatId, messageId } = this.props;\n        const { scrollTop, scrollHeight, offsetHeight } = snapshot || {\n            scrollTop: 0,\n            scrollHeight: 0,\n            offsetHeight: 0\n        };\n\n        // console.log(\n        //     `[ml] handleScrollBehavior\n        //     scrollBehavior=${scrollBehavior}\n        //     snapshot.scrollTop=${scrollTop}\n        //     snapshot.offsetHeight=${offsetHeight}\n        //     snapshot.scrollHeight=${scrollHeight}`\n        // );\n\n        switch (scrollBehavior) {\n            case ScrollBehaviorEnum.SCROLL_TO_BOTTOM: {\n                this.scrollToBottom();\n                break;\n            }\n            case ScrollBehaviorEnum.SCROLL_TO_MESSAGE: {\n                this.scrollToMessage();\n                break;\n            }\n            case ScrollBehaviorEnum.SCROLL_TO_UNREAD: {\n                this.scrollToUnread();\n                break;\n            }\n            case ScrollBehaviorEnum.KEEP_SCROLL_POSITION: {\n                this.keepScrollPosition(snapshot);\n                break;\n            }\n            case ScrollBehaviorEnum.NONE: {\n                break;\n            }\n        }\n    };\n\n    keepScrollPosition = snapshot => {\n        const { scrollTop, scrollHeight, offsetHeight } = snapshot;\n        const list = this.listRef.current;\n\n        // console.log(\n        //     `[ml] keepScrollPosition before\n        //     list.scrollTop=${list.scrollTop}\n        //     list.offsetHeight=${list.offsetHeight}\n        //     list.scrollHeight=${list.scrollHeight}`\n        // );\n\n        list.scrollTop = scrollTop + (list.scrollHeight - scrollHeight);\n\n        // console.log(\n        //     `[ml] keepScrollPosition after\n        //     list.scrollTop=${list.scrollTop}\n        //     list.offsetHeight=${list.offsetHeight}\n        //     list.scrollHeight=${list.scrollHeight}`\n        // );\n    };\n\n    scrollToUnread = () => {\n        const { chatId, messageId } = this.props;\n        const { history } = this.state;\n        const list = this.listRef.current;\n\n        const chat = ChatStore.get(chatId);\n        const pinnedMessageMargin = 0; //chat && chat.pinned_message_id ? 55 : 0;\n\n        // console.log(\n        //     `MessagesList.scrollToUnread before\n        //     chatId=${chatId} messageId=${messageId}\n        //     list.scrollTop=${list.scrollTop}\n        //     list.offsetHeight=${list.offsetHeight}\n        //     list.scrollHeight=${list.scrollHeight}`\n        // );\n\n        let scrolled = false;\n        for (let i = 0; i < history.length; i++) {\n            let itemComponent = this.itemsMap.get(i);\n            let item = ReactDOM.findDOMNode(itemComponent);\n            if (item) {\n                if (itemComponent.props.showUnreadSeparator) {\n                    list.scrollTop = item.offsetTop - pinnedMessageMargin; // + unread messages margin-top\n                    scrolled = true;\n                    break;\n                }\n            }\n        }\n\n        // console.log(\n        //     `MessagesList.scrollToUnread after\n        //     chatId=${chatId} messageId=${messageId} scrolled=${scrolled}\n        //     list.scrollTop=${list.scrollTop}\n        //     list.offsetHeight=${list.offsetHeight}\n        //     list.scrollHeight=${list.scrollHeight}`\n        // );\n\n        if (!scrolled) {\n            this.scrollToBottom();\n        }\n    };\n\n    scrollToMessage = () => {\n        const { chatId, messageId } = this.props;\n        const { history } = this.state;\n        const list = this.listRef.current;\n\n        // console.log(\n        //     `MessagesList.scrollToMessage before\n        //     chatId=${chatId} messageId=${messageId}\n        //     list.scrollTop=${list.scrollTop}\n        //     list.offsetHeight=${list.offsetHeight}\n        //     list.scrollHeight=${list.scrollHeight}`,\n        //     this.itemsMap\n        // );\n\n        let scrolled = false;\n        for (let i = 0; i < history.length; i++) {\n            const itemComponent = this.itemsMap.get(i);\n            const node = ReactDOM.findDOMNode(itemComponent);\n            if (node) {\n                if (itemComponent.props.messageId === messageId) {\n                    list.scrollTop = node.offsetTop - list.offsetHeight / 2.0;\n                    scrolled = true;\n                    break;\n                }\n            }\n        }\n\n        // console.log(\n        //     `MessagesList.scrollToMessage after\n        //     chatId=${chatId} messageId=${messageId} scrolled=${scrolled}\n        //     list.scrollTop=${list.scrollTop}\n        //     list.offsetHeight=${list.offsetHeight}\n        //     list.scrollHeight=${list.scrollHeight}`\n        // );\n\n        // if (!scrolled) {\n        //     this.scrollToBottom();\n        // }\n    };\n\n    scrollToBottom = () => {\n        const { chatId, messageId } = this.props;\n        const list = this.listRef.current;\n\n        // console.log(\n        //     `MessagesList.scrollToBottom before\n        //     chatId=${chatId} messageId=${messageId}\n        //     list.scrollTop=${list.scrollTop}\n        //     list.offsetHeight=${list.offsetHeight}\n        //     list.scrollHeight=${list.scrollHeight}`\n        // );\n\n        const nextScrollTop = list.scrollHeight - list.offsetHeight;\n        if (nextScrollTop !== list.scrollTop) {\n            list.scrollTop = list.scrollHeight - list.offsetHeight;\n\n            // console.log(\n            //     `MessagesList.scrollToBottom after\n            // chatId=${chatId} messageId=${messageId}\n            // list.scrollTop=${list.scrollTop}\n            // list.offsetHeight=${list.offsetHeight}\n            // list.scrollHeight=${list.scrollHeight}`\n            // );\n        } else {\n            // console.log(\n            //     `MessagesList.scrollToBottom after (no changes)\n            // chatId=${chatId} messageId=${messageId}\n            // list.scrollTop=${list.scrollTop}\n            // list.offsetHeight=${list.offsetHeight}\n            // list.scrollHeight=${list.scrollHeight}`\n            // );\n        }\n    };\n\n    scrollToStart = async () => {\n        const { chatId } = this.props;\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n\n        // console.log('MessagesList.newSessionId scrollToStart');\n        this.sessionId = Date.now();\n        this.loading = false;\n        this.completed = false;\n\n        const fromMessageId = 0;\n        const offset = 0;\n        const limit = MESSAGE_SLICE_LIMIT;\n\n        this.loading = true;\n        const sessionId = this.sessionId;\n        const result = await TdLibController.send({\n            '@type': 'getChatHistory',\n            chat_id: chat.id,\n            from_message_id: fromMessageId,\n            offset: offset,\n            limit: limit\n        }).finally(() => {\n            this.loading = false;\n        });\n\n        if (sessionId !== this.sessionId) {\n            return;\n        }\n\n        if (this.props.chatId !== chatId) {\n            return;\n        }\n\n        if (chat.last_message) {\n            this.completed = result.messages.length > 0 && chat.last_message.id === result.messages[0].id;\n        } else {\n            this.completed = true;\n        }\n        // console.log('MessagesList.scrollToStart scrollDown', false);\n        this.setState({ scrollDownVisible: false, replyHistory: [] });\n\n        MessageStore.setItems(result.messages);\n        result.messages.reverse();\n\n        this.replace(this.state.separatorMessageId, result.messages, () => {\n            this.handleScrollBehavior(ScrollBehaviorEnum.SCROLL_TO_BOTTOM, this.snapshot);\n        });\n\n        // load files\n        const store = FileStore.getStore();\n        loadMessageContents(store, result.messages);\n        this.viewMessages(result.messages);\n\n        this.loadIncompleteHistory(result);\n    };\n\n    handleListDragEnter = event => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const { chatId } = this.props;\n        if (!canSendMediaMessages(chatId)) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateDragging',\n            dragging: true,\n            files: event.dataTransfer.files\n        });\n    };\n\n    handleScrollDownClick = event => {\n        const { replyHistory } = this.state;\n\n        if (replyHistory.length > 0) {\n            const lastReply = replyHistory.pop();\n            if (lastReply) {\n                const { chatId, messageId } = lastReply;\n                if (chatId === this.props.chatId) {\n                    openChat(chatId, messageId);\n                }\n            }\n        } else {\n            this.scrollToStart();\n        }\n    };\n\n    showMessageTitle(message, prevMessage, isFirst) {\n        if (!message) return false;\n\n        const { chat_id, date, sender_user_id, content } = message;\n\n        if (isFirst) {\n            return true;\n        }\n\n        if (isChannelChat(chat_id)) {\n            return true;\n        }\n\n        return (\n            prevMessage &&\n            (isServiceMessage(prevMessage) ||\n                sender_user_id !== prevMessage.sender_user_id ||\n                date - prevMessage.date > MESSAGE_SPLIT_MAX_TIME_S)\n        );\n    }\n\n    showMessageDate(message, prevMessage, isFirst) {\n        if (isFirst) {\n            return true;\n        }\n\n        const date = new Date(message.date * 1000);\n        const prevDate = prevMessage ? new Date(prevMessage.date * 1000) : date;\n\n        if (\n            date.getFullYear() !== prevDate.getFullYear() ||\n            date.getMonth() !== prevDate.getMonth() ||\n            date.getDate() !== prevDate.getDate()\n        ) {\n            return true;\n        }\n\n        return false;\n    }\n\n    render() {\n        const { chatId } = this.props;\n        const { history, separatorMessageId, clearHistory, selectionActive, scrollDownVisible } = this.state;\n\n        // console.log('[ml] render ', history);\n\n        // const isChannel = isChannelChat(chatId);\n\n        this.itemsMap.clear();\n        this.messages = clearHistory\n            ? null\n            : history.map((x, i) => {\n                  const prevMessage = i > 0 ? history[i - 1] : null;\n                  const nextMessage = i < history.length - 1 ? history[i + 1] : null;\n\n                  const showDate = this.showMessageDate(x, prevMessage, i === 0);\n\n                  let m = null;\n                  if (isServiceMessage(x)) {\n                      m = (\n                          <ServiceMessage\n                              key={`chat_id=${x.chat_id} message_id=${x.id}`}\n                              ref={el => this.itemsMap.set(i, el)}\n                              chatId={x.chat_id}\n                              messageId={x.id}\n                              showUnreadSeparator={separatorMessageId === x.id}\n                          />\n                      );\n                  } else {\n                      const showTitle = this.showMessageTitle(x, prevMessage, i === 0);\n                      const nextShowTitle = this.showMessageTitle(nextMessage, x, false);\n\n                      const showTail = !nextMessage || isServiceMessage(nextMessage) || nextShowTitle;\n\n                      m = (\n                          <Message\n                              key={`chat_id=${x.chat_id} message_id=${x.id}`}\n                              ref={el => this.itemsMap.set(i, el)}\n                              chatId={x.chat_id}\n                              messageId={x.id}\n                              sendingState={x.sending_state}\n                              showTitle={showTitle}\n                              showTail={showTail}\n                              showUnreadSeparator={separatorMessageId === x.id}\n                              showDate={showDate}\n                          />\n                      );\n                  }\n\n                  return m;\n              });\n\n        return (\n            <div\n                className={classNames('messages-list', {\n                    'messages-list-selection-active': selectionActive\n                })}\n                onDragEnter={this.handleListDragEnter}>\n                <div ref={this.listRef} className='messages-list-wrapper' onScroll={this.handleScroll}>\n                    <div className='messages-list-top' />\n                    <div ref={this.itemsRef} className='messages-list-items'>\n                        {this.messages}\n                    </div>\n                </div>\n                <ActionBar chatId={chatId} />\n                <Placeholder />\n                {scrollDownVisible && (\n                    <ScrollDownButton ref={this.scrollDownButtonRef} onClick={this.handleScrollDownClick} />\n                )}\n                <FilesDropTarget />\n                <StickersHint />\n            </div>\n        );\n    }\n}\n\nexport default MessagesList;\n"]},"metadata":{},"sourceType":"module"}