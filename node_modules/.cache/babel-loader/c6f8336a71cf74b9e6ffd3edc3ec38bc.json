{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/TelegramApp.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { Component } from 'react';\nimport { compose } from './Utils/HOC';\nimport withLanguage from './Language';\nimport withTelegramTheme from './Theme';\nimport withTheme from '@material-ui/core/styles/withTheme';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport packageJson from '../package.json';\nimport AuthForm from './Components/Auth/AuthForm';\nimport InactivePage from './Components/InactivePage';\nimport NativeAppPage from './Components/NativeAppPage'; // import StubPage from './Components/StubPage';\n\nimport registerServiceWorker from './registerServiceWorker';\nimport { isMobile } from './Utils/Common';\nimport { loadData } from './Utils/Phone';\nimport { OPTIMIZATIONS_FIRST_START } from './Constants';\nimport ChatStore from './Stores/ChatStore';\nimport UserStore from './Stores/UserStore';\nimport AppStore from './Stores/ApplicationStore';\nimport AuthorizationStore from './Stores/AuthorizationStore';\nimport TdLibController from './Controllers/TdLibController';\nimport './TelegramApp.css'; // import MainPage from './Components/MainPage';\n\nvar MainPage = React.lazy(function () {\n  return import('./Components/MainPage');\n});\n\nvar TelegramApp =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TelegramApp, _Component);\n\n  function TelegramApp(props) {\n    var _this;\n\n    _classCallCheck(this, TelegramApp);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TelegramApp).call(this, props));\n\n    _this.onClientUpdateTdLibDatabaseExists = function (update) {\n      var exists = update.exists;\n\n      if (!exists) {\n        _this.setState({\n          authorizationState: {\n            '@type': 'authorizationStateWaitTdlib'\n          },\n          tdlibDatabaseExists: exists\n        });\n      }\n    };\n\n    _this.onUpdate = function (update) {\n      if (OPTIMIZATIONS_FIRST_START) {\n        if (!_this.checkServiceWorker) {\n          _this.checkServiceWorker = true;\n          var register = localStorage.getItem('register');\n\n          if (!register) {\n            registerServiceWorker();\n          }\n        }\n      }\n    };\n\n    _this.onUpdateFatalError = function (update) {\n      _this.setState({\n        fatalError: true\n      });\n    };\n\n    _this.onUpdateAuthorizationState = function (update) {\n      var authorizationState = update.authorization_state;\n\n      _this.setState({\n        authorizationState: authorizationState\n      });\n\n      if (!window.hasFocus) return;\n      if (!authorizationState) return;\n      TdLibController.send({\n        '@type': 'setOption',\n        name: 'online',\n        value: {\n          '@type': 'optionValueBoolean',\n          value: true\n        }\n      });\n    };\n\n    _this.onClientUpdateAppInactive = function (update) {\n      _this.setState({\n        inactive: true\n      });\n    };\n\n    _this.handleChangePhone = function () {\n      _this.setState({\n        authorizationState: {\n          '@type': 'authorizationStateWaitPhoneNumber'\n        }\n      });\n    };\n\n    _this.handleDragOver = function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    };\n\n    _this.handleDrop = function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    };\n\n    _this.handleRefresh = function () {\n      _this.setState({\n        fatalError: false\n      });\n\n      window.location.reload();\n    };\n\n    _this.handleDestroy = function () {\n      _this.setState({\n        fatalError: false\n      });\n\n      TdLibController.send({\n        '@type': 'destroy'\n      });\n    };\n\n    _this.handleKeyDown = function (event) {//console.log('KeyDown', event);\n    };\n\n    console.log(\"Start NebulaChat Web \".concat(packageJson.version));\n    _this.state = {\n      prevAuthorizationState: AuthorizationStore.current,\n      authorizationState: null,\n      tdlibDatabaseExists: false,\n      inactive: false,\n      fatalError: false,\n      nativeMobile: isMobile(),\n      isSmall: window.innerWidth < 800\n    };\n    return _this;\n  }\n\n  _createClass(TelegramApp, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var location = this.props.location;\n      TdLibController.init(location);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      setTimeout(function () {\n        return loadData();\n      }, 1500);\n      TdLibController.on('update', this.onUpdate);\n      AppStore.on('clientUpdateAppInactive', this.onClientUpdateAppInactive);\n      AppStore.on('clientUpdateTdLibDatabaseExists', this.onClientUpdateTdLibDatabaseExists);\n      AppStore.on('updateAuthorizationState', this.onUpdateAuthorizationState);\n      AppStore.on('updateFatalError', this.onUpdateFatalError);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      TdLibController.off('update', this.onUpdate);\n      AppStore.off('clientUpdateAppInactive', this.onClientUpdateAppInactive);\n      AppStore.off('clientUpdateTdLibDatabaseExists', this.onClientUpdateTdLibDatabaseExists);\n      AppStore.off('updateAuthorizationState', this.onUpdateAuthorizationState);\n      AppStore.off('updateFatalError', this.onUpdateFatalError);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          t = _this$props.t,\n          theme = _this$props.theme;\n      var _this$state = this.state,\n          inactive = _this$state.inactive,\n          nativeMobile = _this$state.nativeMobile,\n          tdlibDatabaseExists = _this$state.tdlibDatabaseExists,\n          fatalError = _this$state.fatalError;\n      var _this$state2 = this.state,\n          authorizationState = _this$state2.authorizationState,\n          prevAuthorizationState = _this$state2.prevAuthorizationState;\n      var state = authorizationState;\n\n      if (!authorizationState || authorizationState['@type'] === 'authorizationStateWaitEncryptionKey' || authorizationState['@type'] === 'authorizationStateWaitTdlibParameters') {\n        if (prevAuthorizationState) {\n          authorizationState = prevAuthorizationState;\n        } // else if (tdlibDatabaseExists) {\n        //     authorizationState = {\n        //         '@type': 'authorizationStateReady'\n        //     }\n        // }\n        else {\n            authorizationState = {\n              '@type': 'authorizationStateWaitPhoneNumber'\n            };\n          }\n      }\n\n      var loading = t('Loading').replace('...', '');\n      var page = //<MainPage />;\n      React.createElement(React.Suspense, {\n        fallback: null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(MainPage, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }));\n\n      if (nativeMobile) {\n        page = React.createElement(NativeAppPage, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193\n          },\n          __self: this\n        });\n      } else if (inactive) {\n        page = React.createElement(InactivePage, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195\n          },\n          __self: this\n        });\n      } else if (authorizationState) {\n        switch (authorizationState['@type']) {\n          case 'authorizationStateClosed':\n          case 'authorizationStateClosing':\n          case 'authorizationStateLoggingOut':\n          case 'authorizationStateReady':\n            {\n              break;\n            }\n\n          case 'authorizationStateWaitCode':\n          case 'authorizationStateWaitPassword':\n          case 'authorizationStateWaitPhoneNumber':\n          case 'authorizationStateWaitTdlib':\n            page = React.createElement(AuthForm, {\n              authorizationState: authorizationState,\n              onChangePhone: this.handleChangePhone,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 208\n              },\n              __self: this\n            });\n            break;\n\n          case 'authorizationStateWaitEncryptionKey':\n          case 'authorizationStateWaitTdlibParameters':\n            {\n              // if (!tdlibDatabaseExists) {\n              //     page = (\n              //         <AuthForm\n              //             authorizationState={authorizationState}\n              //             onChangePhone={this.handleChangePhone}\n              //         />\n              //     );\n              // }\n              break;\n            }\n        }\n      } // console.log(\n      //     'TelegramApp.render',\n      //     state,\n      //     prevAuthorizationState,\n      //     'nativeMobile=' + nativeMobile,\n      //     'inactive=' + inactive,\n      //     'tdlibDb=' + tdlibDatabaseExists,\n      //     page\n      // );\n\n\n      return React.createElement(\"div\", {\n        id: \"app\",\n        className: theme.palette.type === 'dark' ? 'dark' : 'light',\n        onDragOver: this.handleDragOver,\n        onDrop: this.handleDrop,\n        onKeyDown: this.handleKeyDown,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, page, React.createElement(Dialog, {\n        transitionDuration: 0,\n        open: fatalError,\n        onClose: this.handleRefresh,\n        \"aria-labelledby\": \"fatal-error-dialog-title\",\n        \"aria-describedby\": \"fatal-error-dialog-description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, React.createElement(DialogTitle, {\n        id: \"fatal-error-dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, \"NebulaChat\"), React.createElement(DialogContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, React.createElement(DialogContentText, {\n        id: \"fatal-error-dialog-description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, \"Oops! Something went wrong. We need to refresh this page.\")), React.createElement(DialogActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.handleDestroy,\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, \"Log out\"), React.createElement(Button, {\n        onClick: this.handleRefresh,\n        color: \"primary\",\n        autoFocus: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, \"Refresh\"))));\n    }\n  }]);\n\n  return TelegramApp;\n}(Component);\n\nvar keyMap = new Map();\nwindow.keyMap = keyMap;\n\nfunction openPinnedChat(_x) {\n  return _openPinnedChat.apply(this, arguments);\n}\n\nfunction _openPinnedChat() {\n  _openPinnedChat = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(index) {\n    var chats, pinnedIndex, i, chat;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return TdLibController.send({\n              '@type': 'getChats',\n              offset_order: '9223372036854775807',\n              offset_chat_id: 0,\n              limit: 10\n            });\n\n          case 2:\n            chats = _context2.sent;\n\n            if (!chats) {\n              _context2.next = 15;\n              break;\n            }\n\n            pinnedIndex = -1;\n            i = 0;\n\n          case 6:\n            if (!(i < chats.chat_ids.length)) {\n              _context2.next = 15;\n              break;\n            }\n\n            chat = ChatStore.get(chats.chat_ids[i]);\n\n            if (chat && chat.is_pinned) {\n              pinnedIndex++;\n            }\n\n            if (!(pinnedIndex === index)) {\n              _context2.next = 12;\n              break;\n            }\n\n            TdLibController.setChatId(chat.id);\n            return _context2.abrupt(\"return\");\n\n          case 12:\n            i++;\n            _context2.next = 6;\n            break;\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _openPinnedChat.apply(this, arguments);\n}\n\ndocument.addEventListener('keyup', function (event) {\n  keyMap.delete(event.key); //console.log('keyup key=' + event.key, keyMap);\n});\ndocument.addEventListener('keydown',\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(event) {\n    var authorizationState, chat;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            keyMap.set(event.key, event.key); //console.log('keydown key=' + event.key, event.altKey, event.ctrlKey, event, keyMap);\n\n            authorizationState = AppStore.authorizationState;\n\n            if (authorizationState) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 4:\n            if (!(authorizationState['@type'] !== 'authorizationStateReady')) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 6:\n            if (!(keyMap.size > 3)) {\n              _context.next = 8;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 8:\n            if (!(event.altKey && event.ctrlKey)) {\n              _context.next = 39;\n              break;\n            }\n\n            _context.t0 = event.key;\n            _context.next = _context.t0 === '0' ? 12 : _context.t0 === '1' ? 19 : _context.t0 === '2' ? 23 : _context.t0 === '3' ? 27 : _context.t0 === '4' ? 31 : _context.t0 === '5' ? 35 : 39;\n            break;\n\n          case 12:\n            event.preventDefault();\n            event.stopPropagation();\n            _context.next = 16;\n            return TdLibController.send({\n              '@type': 'createPrivateChat',\n              user_id: UserStore.getMyId(),\n              force: true\n            });\n\n          case 16:\n            chat = _context.sent;\n\n            if (chat) {\n              TdLibController.setChatId(chat.id);\n            }\n\n            return _context.abrupt(\"break\", 39);\n\n          case 19:\n            event.preventDefault();\n            event.stopPropagation();\n            openPinnedChat(0);\n            return _context.abrupt(\"break\", 39);\n\n          case 23:\n            event.preventDefault();\n            event.stopPropagation();\n            openPinnedChat(1);\n            return _context.abrupt(\"break\", 39);\n\n          case 27:\n            event.preventDefault();\n            event.stopPropagation();\n            openPinnedChat(2);\n            return _context.abrupt(\"break\", 39);\n\n          case 31:\n            event.preventDefault();\n            event.stopPropagation();\n            openPinnedChat(3);\n            return _context.abrupt(\"break\", 39);\n\n          case 35:\n            event.preventDefault();\n            event.stopPropagation();\n            openPinnedChat(4);\n            return _context.abrupt(\"break\", 39);\n\n          case 39:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\nwindow.hasFocus = true; // set offline on page lost focus\n// console.log('[ns] window.onblur attach');\n\nwindow.onblur = function () {\n  keyMap.clear();\n  window.hasFocus = false;\n  TdLibController.clientUpdate({\n    '@type': 'clientUpdateFocusWindow',\n    focused: false\n  });\n}; // set online on page get focus\n// console.log('[ns] window.onfocus attach');\n\n\nwindow.onfocus = function () {\n  keyMap.clear();\n  window.hasFocus = true;\n  TdLibController.clientUpdate({\n    '@type': 'clientUpdateFocusWindow',\n    focused: true\n  });\n}; // disable back navigation\n\n\nwindow.history.pushState(null, null, window.location.href);\n\nwindow.onpopstate = function () {\n  window.history.go(1);\n};\n\nvar enhance = compose(withLanguage, withTranslation(), withTelegramTheme, withTheme);\nexport default enhance(TelegramApp);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/TelegramApp.js"],"names":["React","Component","compose","withLanguage","withTelegramTheme","withTheme","withTranslation","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","packageJson","AuthForm","InactivePage","NativeAppPage","registerServiceWorker","isMobile","loadData","OPTIMIZATIONS_FIRST_START","ChatStore","UserStore","AppStore","AuthorizationStore","TdLibController","MainPage","lazy","TelegramApp","props","onClientUpdateTdLibDatabaseExists","update","exists","setState","authorizationState","tdlibDatabaseExists","onUpdate","checkServiceWorker","register","localStorage","getItem","onUpdateFatalError","fatalError","onUpdateAuthorizationState","authorization_state","window","hasFocus","send","name","value","onClientUpdateAppInactive","inactive","handleChangePhone","handleDragOver","event","preventDefault","stopPropagation","handleDrop","handleRefresh","location","reload","handleDestroy","handleKeyDown","console","log","version","state","prevAuthorizationState","current","nativeMobile","isSmall","innerWidth","init","setTimeout","on","off","t","theme","loading","replace","page","palette","type","keyMap","Map","openPinnedChat","index","offset_order","offset_chat_id","limit","chats","pinnedIndex","i","chat_ids","length","chat","get","is_pinned","setChatId","id","document","addEventListener","delete","key","set","size","altKey","ctrlKey","user_id","getMyId","force","onblur","clear","clientUpdate","focused","onfocus","history","pushState","href","onpopstate","go","enhance"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React, { Component } from 'react';\nimport { compose } from './Utils/HOC';\nimport withLanguage from './Language';\nimport withTelegramTheme from './Theme';\nimport withTheme from '@material-ui/core/styles/withTheme';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport packageJson from '../package.json';\nimport AuthForm from './Components/Auth/AuthForm';\nimport InactivePage from './Components/InactivePage';\nimport NativeAppPage from './Components/NativeAppPage';\n// import StubPage from './Components/StubPage';\nimport registerServiceWorker from './registerServiceWorker';\nimport { isMobile } from './Utils/Common';\nimport { loadData } from './Utils/Phone';\nimport { OPTIMIZATIONS_FIRST_START } from './Constants';\nimport ChatStore from './Stores/ChatStore';\nimport UserStore from './Stores/UserStore';\nimport AppStore from './Stores/ApplicationStore';\nimport AuthorizationStore from './Stores/AuthorizationStore';\nimport TdLibController from './Controllers/TdLibController';\nimport './TelegramApp.css';\n\n// import MainPage from './Components/MainPage';\nconst MainPage = React.lazy(() => import('./Components/MainPage'));\n\nclass TelegramApp extends Component {\n    constructor(props) {\n        super(props);\n\n        console.log(`Start NebulaChat Web ${packageJson.version}`);\n\n        this.state = {\n            prevAuthorizationState: AuthorizationStore.current,\n            authorizationState: null,\n            tdlibDatabaseExists: false,\n            inactive: false,\n            fatalError: false,\n            nativeMobile: isMobile(),\n            isSmall: window.innerWidth < 800\n        };\n    }\n\n    componentWillMount() {\n        const { location } = this.props;\n\n        TdLibController.init(location);\n    }\n\n    componentDidMount() {\n        setTimeout(() => loadData(), 1500);\n        TdLibController.on('update', this.onUpdate);\n\n        AppStore.on('clientUpdateAppInactive', this.onClientUpdateAppInactive);\n        AppStore.on('clientUpdateTdLibDatabaseExists', this.onClientUpdateTdLibDatabaseExists);\n        AppStore.on('updateAuthorizationState', this.onUpdateAuthorizationState);\n        AppStore.on('updateFatalError', this.onUpdateFatalError);\n    }\n\n    componentWillUnmount() {\n        TdLibController.off('update', this.onUpdate);\n\n        AppStore.off('clientUpdateAppInactive', this.onClientUpdateAppInactive);\n        AppStore.off('clientUpdateTdLibDatabaseExists', this.onClientUpdateTdLibDatabaseExists);\n        AppStore.off('updateAuthorizationState', this.onUpdateAuthorizationState);\n        AppStore.off('updateFatalError', this.onUpdateFatalError);\n    }\n\n    onClientUpdateTdLibDatabaseExists = update => {\n        const { exists } = update;\n\n        if (!exists) {\n            this.setState({\n                authorizationState: {\n                    '@type': 'authorizationStateWaitTdlib'\n                },\n                tdlibDatabaseExists: exists\n            });\n        }\n    };\n\n    onUpdate = update => {\n        if (OPTIMIZATIONS_FIRST_START) {\n            if (!this.checkServiceWorker) {\n                this.checkServiceWorker = true;\n\n                const register = localStorage.getItem('register');\n                if (!register) {\n                    registerServiceWorker();\n                }\n            }\n        }\n    };\n\n    onUpdateFatalError = update => {\n        this.setState({ fatalError: true });\n    };\n\n    onUpdateAuthorizationState = update => {\n        const { authorization_state: authorizationState } = update;\n\n        this.setState({ authorizationState });\n\n        if (!window.hasFocus) return;\n        if (!authorizationState) return;\n\n        TdLibController.send({\n            '@type': 'setOption',\n            name: 'online',\n            value: { '@type': 'optionValueBoolean', value: true }\n        });\n    };\n\n    onClientUpdateAppInactive = update => {\n        this.setState({ inactive: true });\n    };\n\n    handleChangePhone = () => {\n        this.setState({\n            authorizationState: { '@type': 'authorizationStateWaitPhoneNumber' }\n        });\n    };\n\n    handleDragOver = event => {\n        event.preventDefault();\n        event.stopPropagation();\n    };\n\n    handleDrop = event => {\n        event.preventDefault();\n        event.stopPropagation();\n    };\n\n    handleRefresh = () => {\n        this.setState({ fatalError: false });\n        window.location.reload();\n    };\n\n    handleDestroy = () => {\n        this.setState({ fatalError: false });\n        TdLibController.send({ '@type': 'destroy' });\n    };\n\n    handleKeyDown = event => {\n        //console.log('KeyDown', event);\n    };\n\n    render() {\n        const { t, theme } = this.props;\n        const { inactive, nativeMobile, tdlibDatabaseExists, fatalError } = this.state;\n        let { authorizationState, prevAuthorizationState } = this.state;\n        const state = authorizationState;\n        if (\n            !authorizationState ||\n            authorizationState['@type'] === 'authorizationStateWaitEncryptionKey' ||\n            authorizationState['@type'] === 'authorizationStateWaitTdlibParameters'\n        ) {\n            if (prevAuthorizationState) {\n                authorizationState = prevAuthorizationState;\n            }\n            // else if (tdlibDatabaseExists) {\n            //     authorizationState = {\n            //         '@type': 'authorizationStateReady'\n            //     }\n            // }\n            else {\n                authorizationState = {\n                    '@type': 'authorizationStateWaitPhoneNumber'\n                };\n            }\n        }\n\n        const loading = t('Loading').replace('...', '');\n        let page = ( //<MainPage />;\n            <React.Suspense fallback={null}>\n                <MainPage />\n            </React.Suspense>\n        );\n\n        if (nativeMobile) {\n            page = <NativeAppPage />;\n        } else if (inactive) {\n            page = <InactivePage />;\n        } else if (authorizationState) {\n            switch (authorizationState['@type']) {\n                case 'authorizationStateClosed':\n                case 'authorizationStateClosing':\n                case 'authorizationStateLoggingOut':\n                case 'authorizationStateReady': {\n                    break;\n                }\n                case 'authorizationStateWaitCode':\n                case 'authorizationStateWaitPassword':\n                case 'authorizationStateWaitPhoneNumber':\n                case 'authorizationStateWaitTdlib':\n                    page = <AuthForm authorizationState={authorizationState} onChangePhone={this.handleChangePhone} />;\n                    break;\n                case 'authorizationStateWaitEncryptionKey':\n                case 'authorizationStateWaitTdlibParameters': {\n                    // if (!tdlibDatabaseExists) {\n                    //     page = (\n                    //         <AuthForm\n                    //             authorizationState={authorizationState}\n                    //             onChangePhone={this.handleChangePhone}\n                    //         />\n                    //     );\n                    // }\n\n                    break;\n                }\n            }\n        }\n\n        // console.log(\n        //     'TelegramApp.render',\n        //     state,\n        //     prevAuthorizationState,\n        //     'nativeMobile=' + nativeMobile,\n        //     'inactive=' + inactive,\n        //     'tdlibDb=' + tdlibDatabaseExists,\n        //     page\n        // );\n\n        return (\n            <div\n                id='app'\n                className={theme.palette.type === 'dark' ? 'dark' : 'light'}\n                onDragOver={this.handleDragOver}\n                onDrop={this.handleDrop}\n                onKeyDown={this.handleKeyDown}>\n                {page}\n                <Dialog\n                    transitionDuration={0}\n                    open={fatalError}\n                    onClose={this.handleRefresh}\n                    aria-labelledby='fatal-error-dialog-title'\n                    aria-describedby='fatal-error-dialog-description'>\n                    <DialogTitle id='fatal-error-dialog-title'>NebulaChat</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id='fatal-error-dialog-description'>\n                            Oops! Something went wrong. We need to refresh this page.\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleDestroy} color='primary'>\n                            Log out\n                        </Button>\n                        <Button onClick={this.handleRefresh} color='primary' autoFocus>\n                            Refresh\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nconst keyMap = new Map();\nwindow.keyMap = keyMap;\n\nasync function openPinnedChat(index) {\n    const chats = await TdLibController.send({\n        '@type': 'getChats',\n        offset_order: '9223372036854775807',\n        offset_chat_id: 0,\n        limit: 10\n    });\n\n    if (chats) {\n        let pinnedIndex = -1;\n        for (let i = 0; i < chats.chat_ids.length; i++) {\n            const chat = ChatStore.get(chats.chat_ids[i]);\n            if (chat && chat.is_pinned) {\n                pinnedIndex++;\n            }\n\n            if (pinnedIndex === index) {\n                TdLibController.setChatId(chat.id);\n                return;\n            }\n        }\n    }\n}\n\ndocument.addEventListener('keyup', event => {\n    keyMap.delete(event.key);\n    //console.log('keyup key=' + event.key, keyMap);\n});\n\ndocument.addEventListener('keydown', async event => {\n    keyMap.set(event.key, event.key);\n    //console.log('keydown key=' + event.key, event.altKey, event.ctrlKey, event, keyMap);\n\n    const { authorizationState } = AppStore;\n    if (!authorizationState) return;\n    if (authorizationState['@type'] !== 'authorizationStateReady') return;\n    if (keyMap.size > 3) return;\n\n    if (event.altKey && event.ctrlKey) {\n        switch (event.key) {\n            case '0': {\n                event.preventDefault();\n                event.stopPropagation();\n\n                const chat = await TdLibController.send({\n                    '@type': 'createPrivateChat',\n                    user_id: UserStore.getMyId(),\n                    force: true\n                });\n\n                if (chat) {\n                    TdLibController.setChatId(chat.id);\n                }\n                break;\n            }\n            case '1': {\n                event.preventDefault();\n                event.stopPropagation();\n\n                openPinnedChat(0);\n                break;\n            }\n            case '2': {\n                event.preventDefault();\n                event.stopPropagation();\n\n                openPinnedChat(1);\n                break;\n            }\n            case '3': {\n                event.preventDefault();\n                event.stopPropagation();\n\n                openPinnedChat(2);\n                break;\n            }\n            case '4': {\n                event.preventDefault();\n                event.stopPropagation();\n\n                openPinnedChat(3);\n                break;\n            }\n            case '5': {\n                event.preventDefault();\n                event.stopPropagation();\n\n                openPinnedChat(4);\n                break;\n            }\n        }\n    }\n});\n\nwindow.hasFocus = true;\n\n// set offline on page lost focus\n// console.log('[ns] window.onblur attach');\nwindow.onblur = function() {\n    keyMap.clear();\n\n    window.hasFocus = false;\n\n    TdLibController.clientUpdate({\n        '@type': 'clientUpdateFocusWindow',\n        focused: false\n    });\n};\n\n// set online on page get focus\n// console.log('[ns] window.onfocus attach');\nwindow.onfocus = function() {\n    keyMap.clear();\n\n    window.hasFocus = true;\n\n    TdLibController.clientUpdate({\n        '@type': 'clientUpdateFocusWindow',\n        focused: true\n    });\n};\n\n// disable back navigation\nwindow.history.pushState(null, null, window.location.href);\nwindow.onpopstate = function() {\n    window.history.go(1);\n};\n\nconst enhance = compose(\n    withLanguage,\n    withTranslation(),\n    withTelegramTheme,\n    withTheme\n);\n\nexport default enhance(TelegramApp);\n"]},"metadata":{},"sourceType":"module"}