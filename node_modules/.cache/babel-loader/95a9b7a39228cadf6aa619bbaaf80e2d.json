{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport EventEmitter from './EventEmitter';\nimport { KEY_SUGGESTED_LANGUAGE_PACK_ID } from '../Constants';\nimport TdLibController from '../Controllers/TdLibController';\n\nvar OptionStore =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(OptionStore, _EventEmitter);\n\n  function OptionStore() {\n    var _this;\n\n    _classCallCheck(this, OptionStore);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(OptionStore).call(this));\n\n    _this.reset = function () {\n      _this.items = new Map();\n    };\n\n    _this.onUpdate = function (update) {\n      switch (update['@type']) {\n        case 'updateAuthorizationState':\n          {\n            var authorization_state = update.authorization_state;\n            if (!authorization_state) break;\n\n            switch (authorization_state['@type']) {\n              case 'authorizationStateClosed':\n                {\n                  _this.reset();\n\n                  break;\n                }\n            }\n\n            break;\n          }\n\n        case 'updateOption':\n          var name = update.name,\n              value = update.value;\n\n          _this.set(name, value);\n\n          if (name === KEY_SUGGESTED_LANGUAGE_PACK_ID) {\n            localStorage.setItem(name, value.value);\n          }\n\n          _this.emit('updateOption', update);\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    _this.onClientUpdate = function (update) {};\n\n    _this.addTdLibListener = function () {\n      TdLibController.on('update', _this.onUpdate);\n      TdLibController.on('clientUpdate', _this.onClientUpdate);\n    };\n\n    _this.removeTdLibListener = function () {\n      TdLibController.off('update', _this.onUpdate);\n      TdLibController.off('clientUpdate', _this.onClientUpdate);\n    };\n\n    _this.reset();\n\n    _this.addTdLibListener();\n\n    return _this;\n  }\n\n  _createClass(OptionStore, [{\n    key: \"get\",\n    value: function get(name) {\n      return this.items.get(name);\n    }\n  }, {\n    key: \"set\",\n    value: function set(name, value) {\n      this.items.set(name, value);\n    }\n  }]);\n\n  return OptionStore;\n}(EventEmitter);\n\nvar store = new OptionStore();\nwindow.option = store;\nexport default store;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Stores/OptionStore.js"],"names":["EventEmitter","KEY_SUGGESTED_LANGUAGE_PACK_ID","TdLibController","OptionStore","reset","items","Map","onUpdate","update","authorization_state","name","value","set","localStorage","setItem","emit","onClientUpdate","addTdLibListener","on","removeTdLibListener","off","get","store","window","option"],"mappings":";;;;;;AAAA;;;;;;AAOA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,SAASC,8BAAT,QAA+C,cAA/C;AACA,OAAOC,eAAP,MAA4B,gCAA5B;;IAEMC,W;;;;;AACF,yBAAc;AAAA;;AAAA;;AACV;;AADU,UAQdC,KARc,GAQN,YAAM;AACV,YAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACH,KAVa;;AAAA,UAYdC,QAZc,GAYH,UAAAC,MAAM,EAAI;AACjB,cAAQA,MAAM,CAAC,OAAD,CAAd;AACI,aAAK,0BAAL;AAAiC;AAAA,gBACrBC,mBADqB,GACGD,MADH,CACrBC,mBADqB;AAE7B,gBAAI,CAACA,mBAAL,EAA0B;;AAE1B,oBAAQA,mBAAmB,CAAC,OAAD,CAA3B;AACI,mBAAK,0BAAL;AAAiC;AAC7B,wBAAKL,KAAL;;AACA;AACH;AAJL;;AAOA;AACH;;AACD,aAAK,cAAL;AAAA,cACYM,IADZ,GAC4BF,MAD5B,CACYE,IADZ;AAAA,cACkBC,KADlB,GAC4BH,MAD5B,CACkBG,KADlB;;AAGI,gBAAKC,GAAL,CAASF,IAAT,EAAeC,KAAf;;AAEA,cAAID,IAAI,KAAKT,8BAAb,EAA6C;AACzCY,YAAAA,YAAY,CAACC,OAAb,CAAqBJ,IAArB,EAA2BC,KAAK,CAACA,KAAjC;AACH;;AAED,gBAAKI,IAAL,CAAU,cAAV,EAA0BP,MAA1B;;AACA;;AACJ;AACI;AA1BR;AA4BH,KAzCa;;AAAA,UA2CdQ,cA3Cc,GA2CG,UAAAR,MAAM,EAAI,CAAE,CA3Cf;;AAAA,UA6CdS,gBA7Cc,GA6CK,YAAM;AACrBf,MAAAA,eAAe,CAACgB,EAAhB,CAAmB,QAAnB,EAA6B,MAAKX,QAAlC;AACAL,MAAAA,eAAe,CAACgB,EAAhB,CAAmB,cAAnB,EAAmC,MAAKF,cAAxC;AACH,KAhDa;;AAAA,UAkDdG,mBAlDc,GAkDQ,YAAM;AACxBjB,MAAAA,eAAe,CAACkB,GAAhB,CAAoB,QAApB,EAA8B,MAAKb,QAAnC;AACAL,MAAAA,eAAe,CAACkB,GAAhB,CAAoB,cAApB,EAAoC,MAAKJ,cAAzC;AACH,KArDa;;AAGV,UAAKZ,KAAL;;AAEA,UAAKa,gBAAL;;AALU;AAMb;;;;wBAiDGP,I,EAAM;AACN,aAAO,KAAKL,KAAL,CAAWgB,GAAX,CAAeX,IAAf,CAAP;AACH;;;wBAEGA,I,EAAMC,K,EAAO;AACb,WAAKN,KAAL,CAAWO,GAAX,CAAeF,IAAf,EAAqBC,KAArB;AACH;;;;EA9DqBX,Y;;AAiE1B,IAAMsB,KAAK,GAAG,IAAInB,WAAJ,EAAd;AACAoB,MAAM,CAACC,MAAP,GAAgBF,KAAhB;AACA,eAAeA,KAAf","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport EventEmitter from './EventEmitter';\nimport { KEY_SUGGESTED_LANGUAGE_PACK_ID } from '../Constants';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass OptionStore extends EventEmitter {\n    constructor() {\n        super();\n\n        this.reset();\n\n        this.addTdLibListener();\n    }\n\n    reset = () => {\n        this.items = new Map();\n    };\n\n    onUpdate = update => {\n        switch (update['@type']) {\n            case 'updateAuthorizationState': {\n                const { authorization_state } = update;\n                if (!authorization_state) break;\n\n                switch (authorization_state['@type']) {\n                    case 'authorizationStateClosed': {\n                        this.reset();\n                        break;\n                    }\n                }\n\n                break;\n            }\n            case 'updateOption':\n                const { name, value } = update;\n\n                this.set(name, value);\n\n                if (name === KEY_SUGGESTED_LANGUAGE_PACK_ID) {\n                    localStorage.setItem(name, value.value);\n                }\n\n                this.emit('updateOption', update);\n                break;\n            default:\n                break;\n        }\n    };\n\n    onClientUpdate = update => {};\n\n    addTdLibListener = () => {\n        TdLibController.on('update', this.onUpdate);\n        TdLibController.on('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.off('update', this.onUpdate);\n        TdLibController.off('clientUpdate', this.onClientUpdate);\n    };\n\n    get(name) {\n        return this.items.get(name);\n    }\n\n    set(name, value) {\n        this.items.set(name, value);\n    }\n}\n\nconst store = new OptionStore();\nwindow.option = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}