{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Tile/SharedMedia/SharedLink.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport ContextMenu from './ContextMenu';\nimport Photo from '../../Message/Media/Photo';\nimport SafeLink from '../../Additional/SafeLink';\nimport { getFirstLetter } from '../../../Utils/Common';\nimport { openMedia, substring } from '../../../Utils/Message';\nimport punycode from '../../../Utils/Punycode';\nimport MessageStore from '../../../Stores/MessageStore';\nimport './SharedLink.css';\n\nvar SharedLink =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SharedLink, _React$Component);\n\n  function SharedLink() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SharedLink);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SharedLink)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      contextMenu: false,\n      left: 0,\n      top: 0\n    };\n\n    _this.handleOpenContextMenu =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(event) {\n        var contextMenu, left, top;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (event) {\n                  event.preventDefault();\n                  event.stopPropagation();\n                }\n\n                contextMenu = _this.state.contextMenu;\n\n                if (contextMenu) {\n                  _this.setState({\n                    contextMenu: false\n                  });\n                } else {\n                  left = event.clientX;\n                  top = event.clientY;\n\n                  _this.setState({\n                    contextMenu: true,\n                    left: left,\n                    top: top\n                  });\n                }\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.handleCloseContextMenu = function (event) {\n      if (event) {\n        event.stopPropagation();\n      }\n\n      _this.setState({\n        contextMenu: false\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(SharedLink, [{\n    key: \"isValidEntityType\",\n    value: function isValidEntityType(type) {\n      if (!type) return false;\n      return type.type['@type'] === 'textEntityTypeUrl' || type.type['@type'] === 'textEntityTypeTextUrl' || type.type['@type'] === 'textEntityTypeEmailAddress';\n    }\n  }, {\n    key: \"getTitleFromUrl\",\n    value: function getTitleFromUrl(url) {\n      try {\n        url = url.startsWith('http') ? url : 'http://' + url;\n        var decodedUrl = decodeURI(url);\n        var hostname = new URL(decodedUrl).hostname.split('.');\n        var domain = hostname.length >= 2 ? hostname[hostname.length - 2] : new URL(decodedUrl).hostname;\n        return punycode.ToUnicode(domain);\n      } catch (error) {\n        console.error('url: ' + url + '\\n' + error);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          chatId = _this$props.chatId,\n          messageId = _this$props.messageId,\n          webPage = _this$props.webPage,\n          showOpenMessage = _this$props.showOpenMessage;\n      var _this$state = this.state,\n          contextMenu = _this$state.contextMenu,\n          left = _this$state.left,\n          top = _this$state.top;\n      var message = MessageStore.get(chatId, messageId);\n      if (!message) return null;\n      var content = null;\n\n      var _ref2 = webPage || {\n        title: '',\n        description: '',\n        photo: null,\n        url: ''\n      },\n          display_url = _ref2.display_url,\n          description = _ref2.description,\n          photo = _ref2.photo,\n          title = _ref2.title,\n          url = _ref2.url;\n\n      if (webPage) {\n        title = title || this.getTitleFromUrl(url);\n        content = React.createElement(SafeLink, {\n          className: \"shared-link-url\",\n          url: url,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, display_url);\n      } else {\n        var text = message.content.text;\n\n        if (text) {\n          var entities = text.entities;\n\n          if (entities && entities.length > 0) {\n            content = entities.filter(this.isValidEntityType).map(function (x) {\n              var entityText = substring(text.text, x.offset, x.offset + x.length);\n              var url = entityText;\n              var mail = false;\n\n              switch (x.type['@type']) {\n                case 'textEntityTypeTextUrl':\n                  {\n                    var typeUrl = x.type.url;\n\n                    if (typeUrl) {\n                      url = typeUrl;\n                    }\n\n                    break;\n                  }\n\n                case 'textEntityTypeUrl':\n                  {\n                    break;\n                  }\n\n                case 'textEntityTypeEmailAddress':\n                  mail = true;\n                  break;\n              }\n\n              title = title || _this2.getTitleFromUrl(url) || ' ';\n              return React.createElement(SafeLink, {\n                className: \"shared-link-url\",\n                url: url,\n                mail: mail,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 133\n                },\n                __self: this\n              }, entityText);\n            });\n          }\n        }\n      }\n\n      var tileColor = \"tile_color_\".concat(Math.abs(title.charCodeAt(0)) % 8 + 1);\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"shared-link\",\n        onContextMenu: this.handleOpenContextMenu,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: classNames('shared-link-photo', tileColor),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, getFirstLetter(title), photo && React.createElement(Photo, {\n        displaySize: 90,\n        chatId: chatId,\n        messageId: messageId,\n        photo: photo,\n        openMedia: openMedia,\n        showProgress: false,\n        style: {\n          width: 48,\n          height: 48,\n          position: 'absolute',\n          top: 0,\n          left: 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"shared-link-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, title && React.createElement(\"div\", {\n        className: \"web-page-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, title), description && React.createElement(\"div\", {\n        className: \"web-page-description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, description), content)), React.createElement(ContextMenu, {\n        chatId: chatId,\n        messageId: messageId,\n        anchorPosition: {\n          top: top,\n          left: left\n        },\n        open: contextMenu,\n        showOpenMessage: showOpenMessage,\n        onClose: this.handleCloseContextMenu,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return SharedLink;\n}(React.Component);\n\nSharedLink.propTypes = {\n  chatId: PropTypes.number.isRequired,\n  messageId: PropTypes.number.isRequired,\n  webPage: PropTypes.object,\n  openMedia: PropTypes.func\n};\nexport default SharedLink;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Tile/SharedMedia/SharedLink.js"],"names":["React","PropTypes","classNames","ContextMenu","Photo","SafeLink","getFirstLetter","openMedia","substring","punycode","MessageStore","SharedLink","state","contextMenu","left","top","handleOpenContextMenu","event","preventDefault","stopPropagation","setState","clientX","clientY","handleCloseContextMenu","type","url","startsWith","decodedUrl","decodeURI","hostname","URL","split","domain","length","ToUnicode","error","console","props","chatId","messageId","webPage","showOpenMessage","message","get","content","title","description","photo","display_url","getTitleFromUrl","text","entities","filter","isValidEntityType","map","x","entityText","offset","mail","typeUrl","tileColor","Math","abs","charCodeAt","width","height","position","Component","propTypes","number","isRequired","object","func"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport ContextMenu from './ContextMenu';\nimport Photo from '../../Message/Media/Photo';\nimport SafeLink from '../../Additional/SafeLink';\nimport { getFirstLetter } from '../../../Utils/Common';\nimport { openMedia, substring } from '../../../Utils/Message';\nimport punycode from '../../../Utils/Punycode';\nimport MessageStore from '../../../Stores/MessageStore';\nimport './SharedLink.css';\n\nclass SharedLink extends React.Component {\n    state = {\n        contextMenu: false,\n        left: 0,\n        top: 0\n    };\n\n    handleOpenContextMenu = async event => {\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        const { contextMenu } = this.state;\n\n        if (contextMenu) {\n            this.setState({ contextMenu: false });\n        } else {\n            const left = event.clientX;\n            const top = event.clientY;\n\n            this.setState({\n                contextMenu: true,\n                left,\n                top\n            });\n        }\n    };\n\n    handleCloseContextMenu = event => {\n        if (event) {\n            event.stopPropagation();\n        }\n\n        this.setState({ contextMenu: false });\n    };\n\n    isValidEntityType(type) {\n        if (!type) return false;\n\n        return (\n            type.type['@type'] === 'textEntityTypeUrl' ||\n            type.type['@type'] === 'textEntityTypeTextUrl' ||\n            type.type['@type'] === 'textEntityTypeEmailAddress'\n        );\n    }\n\n    getTitleFromUrl(url) {\n        try {\n            url = url.startsWith('http') ? url : 'http://' + url;\n            const decodedUrl = decodeURI(url);\n\n            const hostname = new URL(decodedUrl).hostname.split('.');\n            const domain = hostname.length >= 2 ? hostname[hostname.length - 2] : new URL(decodedUrl).hostname;\n\n            return punycode.ToUnicode(domain);\n        } catch (error) {\n            console.error('url: ' + url + '\\n' + error);\n        }\n\n        return null;\n    }\n\n    render() {\n        const { chatId, messageId, webPage, showOpenMessage } = this.props;\n        const { contextMenu, left, top } = this.state;\n\n        const message = MessageStore.get(chatId, messageId);\n        if (!message) return null;\n\n        let content = null;\n        let { display_url, description, photo, title, url } = webPage || {\n            title: '',\n            description: '',\n            photo: null,\n            url: ''\n        };\n        if (webPage) {\n            title = title || this.getTitleFromUrl(url);\n\n            content = (\n                <SafeLink className='shared-link-url' url={url}>\n                    {display_url}\n                </SafeLink>\n            );\n        } else {\n            const { text } = message.content;\n            if (text) {\n                const { entities } = text;\n                if (entities && entities.length > 0) {\n                    content = entities.filter(this.isValidEntityType).map(x => {\n                        const entityText = substring(text.text, x.offset, x.offset + x.length);\n                        let url = entityText;\n                        let mail = false;\n\n                        switch (x.type['@type']) {\n                            case 'textEntityTypeTextUrl': {\n                                const { url: typeUrl } = x.type;\n                                if (typeUrl) {\n                                    url = typeUrl;\n                                }\n                                break;\n                            }\n                            case 'textEntityTypeUrl': {\n                                break;\n                            }\n                            case 'textEntityTypeEmailAddress':\n                                mail = true;\n                                break;\n                        }\n\n                        title = title || this.getTitleFromUrl(url) || ' ';\n\n                        return (\n                            <SafeLink className='shared-link-url' url={url} mail={mail}>\n                                {entityText}\n                            </SafeLink>\n                        );\n                    });\n                }\n            }\n        }\n\n        const tileColor = `tile_color_${(Math.abs(title.charCodeAt(0)) % 8) + 1}`;\n\n        return (\n            <>\n                <div className='shared-link' onContextMenu={this.handleOpenContextMenu}>\n                    <div className={classNames('shared-link-photo', tileColor)}>\n                        {getFirstLetter(title)}\n                        {photo && (\n                            <Photo\n                                displaySize={90}\n                                chatId={chatId}\n                                messageId={messageId}\n                                photo={photo}\n                                openMedia={openMedia}\n                                showProgress={false}\n                                style={{ width: 48, height: 48, position: 'absolute', top: 0, left: 0 }}\n                            />\n                        )}\n                    </div>\n                    <div className='shared-link-content'>\n                        {title && <div className='web-page-title'>{title}</div>}\n                        {description && <div className='web-page-description'>{description}</div>}\n                        {content}\n                    </div>\n                </div>\n                <ContextMenu\n                    chatId={chatId}\n                    messageId={messageId}\n                    anchorPosition={{ top, left }}\n                    open={contextMenu}\n                    showOpenMessage={showOpenMessage}\n                    onClose={this.handleCloseContextMenu}\n                />\n            </>\n        );\n    }\n}\n\nSharedLink.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    messageId: PropTypes.number.isRequired,\n    webPage: PropTypes.object,\n\n    openMedia: PropTypes.func\n};\n\nexport default SharedLink;\n"]},"metadata":{},"sourceType":"module"}