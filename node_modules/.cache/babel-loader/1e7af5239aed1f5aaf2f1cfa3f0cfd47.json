{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nexport function copy(_x) {\n  return _copy.apply(this, arguments);\n}\n\nfunction _copy() {\n  _copy = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(text) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n\n            if (!navigator.clipboard) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.next = 4;\n            return navigator.clipboard.writeText(text);\n\n          case 4:\n            return _context.abrupt(\"return\", true);\n\n          case 5:\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.error('[clipboard] unable to copy with clipboard.writeText', _context.t0);\n\n          case 10:\n            return _context.abrupt(\"return\", copyOld(text));\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 7]]);\n  }));\n  return _copy.apply(this, arguments);\n}\n\nfunction copyOld(text) {\n  var element;\n  var successful;\n\n  try {\n    element = document.createElement('textarea');\n    element.contentEditable = true;\n    element.readOnly = true;\n    element.value = text;\n    element.style.all = 'unset';\n    element.style.position = 'fixed';\n    element.style.top = 0;\n    element.style.clip = 'rect(0, 0, 0, 0)';\n    element.style.whiteSpace = 'pre';\n    element.style.webkitUserSelect = 'text';\n    element.style.MozUserSelect = 'text';\n    element.style.msUserSelect = 'text';\n    element.style.userSelect = 'text';\n    document.body.appendChild(element);\n    element.focus();\n    element.select();\n    successful = document.execCommand('copy');\n\n    if (!successful) {\n      throw new Error();\n    }\n\n    return true;\n  } catch (_unused) {\n    console.error('[clipboard] unable to copy with document.execCommand', successful);\n  } finally {\n    if (element) {\n      document.body.removeChild(element);\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Utils/Text.js"],"names":["copy","text","navigator","clipboard","writeText","console","error","copyOld","element","successful","document","createElement","contentEditable","readOnly","value","style","all","position","top","clip","whiteSpace","webkitUserSelect","MozUserSelect","msUserSelect","userSelect","body","appendChild","focus","select","execCommand","Error","removeChild"],"mappings":";;;AAAA;;;;;;AAOA,gBAAsBA,IAAtB;AAAA;AAAA;;;;;2BAAO,iBAAoBC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,iBAEKC,SAAS,CAACC,SAFf;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGWD,SAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BH,IAA9B,CAHX;;AAAA;AAAA,6CAIY,IAJZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOCI,YAAAA,OAAO,CAACC,KAAR,CAAc,qDAAd;;AAPD;AAAA,6CAUIC,OAAO,CAACN,IAAD,CAVX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAaP,SAASM,OAAT,CAAiBN,IAAjB,EAAuB;AACnB,MAAIO,OAAJ;AACA,MAAIC,UAAJ;;AACA,MAAI;AACAD,IAAAA,OAAO,GAAGE,QAAQ,CAACC,aAAT,CAAuB,UAAvB,CAAV;AACAH,IAAAA,OAAO,CAACI,eAAR,GAA0B,IAA1B;AACAJ,IAAAA,OAAO,CAACK,QAAR,GAAmB,IAAnB;AACAL,IAAAA,OAAO,CAACM,KAAR,GAAgBb,IAAhB;AACAO,IAAAA,OAAO,CAACO,KAAR,CAAcC,GAAd,GAAoB,OAApB;AACAR,IAAAA,OAAO,CAACO,KAAR,CAAcE,QAAd,GAAyB,OAAzB;AACAT,IAAAA,OAAO,CAACO,KAAR,CAAcG,GAAd,GAAoB,CAApB;AACAV,IAAAA,OAAO,CAACO,KAAR,CAAcI,IAAd,GAAqB,kBAArB;AACAX,IAAAA,OAAO,CAACO,KAAR,CAAcK,UAAd,GAA2B,KAA3B;AACAZ,IAAAA,OAAO,CAACO,KAAR,CAAcM,gBAAd,GAAiC,MAAjC;AACAb,IAAAA,OAAO,CAACO,KAAR,CAAcO,aAAd,GAA8B,MAA9B;AACAd,IAAAA,OAAO,CAACO,KAAR,CAAcQ,YAAd,GAA6B,MAA7B;AACAf,IAAAA,OAAO,CAACO,KAAR,CAAcS,UAAd,GAA2B,MAA3B;AAEAd,IAAAA,QAAQ,CAACe,IAAT,CAAcC,WAAd,CAA0BlB,OAA1B;AAEAA,IAAAA,OAAO,CAACmB,KAAR;AACAnB,IAAAA,OAAO,CAACoB,MAAR;AAEAnB,IAAAA,UAAU,GAAGC,QAAQ,CAACmB,WAAT,CAAqB,MAArB,CAAb;;AACA,QAAI,CAACpB,UAAL,EAAiB;AACb,YAAM,IAAIqB,KAAJ,EAAN;AACH;;AACD,WAAO,IAAP;AACH,GAzBD,CAyBE,gBAAM;AACJzB,IAAAA,OAAO,CAACC,KAAR,CAAc,sDAAd,EAAsEG,UAAtE;AACH,GA3BD,SA2BU;AACN,QAAID,OAAJ,EAAa;AACTE,MAAAA,QAAQ,CAACe,IAAT,CAAcM,WAAd,CAA0BvB,OAA1B;AACH;AACJ;;AAED,SAAO,KAAP;AACH","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport async function copy(text) {\n    try {\n        if (navigator.clipboard) {\n            await navigator.clipboard.writeText(text);\n            return true;\n        }\n    } catch (e) {\n        console.error('[clipboard] unable to copy with clipboard.writeText', e);\n    }\n\n    return copyOld(text);\n}\n\nfunction copyOld(text) {\n    let element;\n    let successful;\n    try {\n        element = document.createElement('textarea');\n        element.contentEditable = true;\n        element.readOnly = true;\n        element.value = text;\n        element.style.all = 'unset';\n        element.style.position = 'fixed';\n        element.style.top = 0;\n        element.style.clip = 'rect(0, 0, 0, 0)';\n        element.style.whiteSpace = 'pre';\n        element.style.webkitUserSelect = 'text';\n        element.style.MozUserSelect = 'text';\n        element.style.msUserSelect = 'text';\n        element.style.userSelect = 'text';\n\n        document.body.appendChild(element);\n\n        element.focus();\n        element.select();\n\n        successful = document.execCommand('copy');\n        if (!successful) {\n            throw new Error();\n        }\n        return true;\n    } catch {\n        console.error('[clipboard] unable to copy with document.execCommand', successful);\n    } finally {\n        if (element) {\n            document.body.removeChild(element);\n        }\n    }\n\n    return false;\n}\n"]},"metadata":{},"sourceType":"module"}