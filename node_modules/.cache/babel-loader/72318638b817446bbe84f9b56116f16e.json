{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Tile/Wallpaper.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { getSrc } from '../../Utils/File';\nimport FileStore from '../../Stores/FileStore';\nimport './Wallpaper.css';\nimport FileProgress from '../Viewer/FileProgress';\n\nvar Wallpaper =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Wallpaper, _React$Component);\n\n  function Wallpaper() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Wallpaper);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Wallpaper)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loaded: false\n    };\n\n    _this.onClientUpdateDocumentThumbnailBlob = function (update) {\n      var wallpaper = _this.props.wallpaper;\n      if (!wallpaper) return;\n      var document = wallpaper.document;\n      if (!document) return;\n      var thumbnail = document.thumbnail;\n      if (!thumbnail) return;\n      var file = thumbnail.photo;\n      if (!file) return;\n      var fileId = update.fileId;\n\n      if (file.id !== fileId) {\n        return;\n      }\n\n      _this.forceUpdate();\n    };\n\n    _this.handleLoad = function () {\n      _this.setState({\n        loaded: true\n      });\n    };\n\n    _this.handleClick = function () {\n      var _this$props = _this.props,\n          wallpaper = _this$props.wallpaper,\n          onClick = _this$props.onClick;\n\n      if (onClick) {\n        onClick(wallpaper);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Wallpaper, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      FileStore.on('clientUpdateDocumentThumbnailBlob', this.onClientUpdateDocumentThumbnailBlob);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      FileStore.off('clientUpdateDocumentThumbnailBlob', this.onClientUpdateDocumentThumbnailBlob);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          wallpaper = _this$props2.wallpaper,\n          isSelected = _this$props2.isSelected;\n      var loaded = this.state.loaded;\n      var document = wallpaper.document;\n      var minithumbnail = document.minithumbnail,\n          thumbnail = document.thumbnail;\n      var miniSrc = minithumbnail ? 'data:image/jpeg;base64, ' + minithumbnail.data : null;\n      var thumbSrc = getSrc(thumbnail ? thumbnail.photo : null);\n      var tileLoaded = thumbSrc && loaded;\n      var src = thumbSrc || miniSrc;\n      return React.createElement(\"div\", {\n        className: \"shared-photo\",\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"shared-photo-content\",\n        style: {\n          backgroundImage: \"url(\".concat(thumbSrc || miniSrc, \")\"),\n          backgroundSize: 'cover',\n          backgroundPosition: '50%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, src !== thumbSrc && React.createElement(\"div\", {\n        className: \"shared-photo-main-content\",\n        style: {\n          backgroundImage: \"url(\".concat(src, \")\")\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      })), isSelected && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"wallpaper-selected\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"wallpaper-selected-inner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      })), document && document.document && React.createElement(FileProgress, {\n        file: document.document,\n        cancelButton: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Wallpaper;\n}(React.Component);\n\nWallpaper.propTypes = {\n  wallpaper: PropTypes.object.isRequired,\n  isSelected: PropTypes.bool\n};\nexport default Wallpaper;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Tile/Wallpaper.js"],"names":["React","PropTypes","getSrc","FileStore","FileProgress","Wallpaper","state","loaded","onClientUpdateDocumentThumbnailBlob","update","wallpaper","props","document","thumbnail","file","photo","fileId","id","forceUpdate","handleLoad","setState","handleClick","onClick","on","off","isSelected","minithumbnail","miniSrc","data","thumbSrc","tileLoaded","src","backgroundImage","backgroundSize","backgroundPosition","Component","propTypes","object","isRequired","bool"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { getSrc } from '../../Utils/File';\nimport FileStore from '../../Stores/FileStore';\nimport './Wallpaper.css';\nimport FileProgress from '../Viewer/FileProgress';\n\nclass Wallpaper extends React.Component {\n    state = {\n        loaded: false\n    };\n\n    componentDidMount() {\n        FileStore.on('clientUpdateDocumentThumbnailBlob', this.onClientUpdateDocumentThumbnailBlob);\n    }\n\n    componentWillUnmount() {\n        FileStore.off('clientUpdateDocumentThumbnailBlob', this.onClientUpdateDocumentThumbnailBlob);\n    }\n\n    onClientUpdateDocumentThumbnailBlob = update => {\n        const { wallpaper } = this.props;\n        if (!wallpaper) return;\n\n        const { document } = wallpaper;\n        if (!document) return;\n\n        const { thumbnail } = document;\n        if (!thumbnail) return;\n\n        const file = thumbnail.photo;\n        if (!file) return;\n\n        const { fileId } = update;\n\n        if (file.id !== fileId) {\n            return;\n        }\n\n        this.forceUpdate();\n    };\n\n    handleLoad = () => {\n        this.setState({ loaded: true });\n    };\n\n    handleClick = () => {\n        const { wallpaper, onClick } = this.props;\n\n        if (onClick) {\n            onClick(wallpaper);\n        }\n    };\n\n    render() {\n        const { wallpaper, isSelected } = this.props;\n        const { loaded  } = this.state;\n\n        const { document } = wallpaper;\n        const { minithumbnail, thumbnail } = document;\n\n        const miniSrc = minithumbnail ? 'data:image/jpeg;base64, ' + minithumbnail.data : null;\n        const thumbSrc = getSrc(thumbnail ? thumbnail.photo : null);\n        const tileLoaded = thumbSrc && loaded;\n        const src = thumbSrc || miniSrc;\n\n        return (\n            <div className='shared-photo' onClick={this.handleClick}>\n                <div className='shared-photo-content' style={{ backgroundImage: `url(${thumbSrc || miniSrc})`, backgroundSize: 'cover', backgroundPosition: '50%' }}>\n                    {src !== thumbSrc && (\n                        <div className='shared-photo-main-content' style={{ backgroundImage: `url(${src})` }} />\n                    )}\n                </div>\n                { isSelected && <><div className='wallpaper-selected'/><div className='wallpaper-selected-inner'/></> }\n                { document && document.document && <FileProgress file={document.document} cancelButton={false}/> }\n            </div>\n        );\n    }\n\n}\n\nWallpaper.propTypes = {\n    wallpaper: PropTypes.object.isRequired,\n    isSelected: PropTypes.bool\n};\n\nexport default Wallpaper;"]},"metadata":{},"sourceType":"module"}