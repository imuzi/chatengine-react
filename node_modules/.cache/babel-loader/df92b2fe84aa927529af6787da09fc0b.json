{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnRight/SharedMedia/SharedVoiceNotes.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport SharedMediaBase from './SharedMediaBase';\nimport SharedVoiceNote from '../../Tile/SharedMedia/SharedVoiceNote';\nimport { openMedia as _openMedia } from '../../../Utils/Message';\nimport './SharedVoiceNotes.css';\n\nvar SharedVoiceNotes =\n/*#__PURE__*/\nfunction (_SharedMediaBase) {\n  _inherits(SharedVoiceNotes, _SharedMediaBase);\n\n  function SharedVoiceNotes() {\n    _classCallCheck(this, SharedVoiceNotes);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SharedVoiceNotes).apply(this, arguments));\n  }\n\n  _createClass(SharedVoiceNotes, [{\n    key: \"isValidContent\",\n    value: function isValidContent(content) {\n      return content && content['@type'] === 'messageVoiceNote';\n    }\n  }, {\n    key: \"getSearchFilter\",\n    value: function getSearchFilter() {\n      return {\n        '@type': 'searchMessagesFilterVoiceNote'\n      };\n    }\n  }, {\n    key: \"getHeader\",\n    value: function getHeader() {\n      var t = this.props.t;\n      return t('VoiceTitle');\n    }\n  }, {\n    key: \"hasSearch\",\n    value: function hasSearch() {\n      return false;\n    }\n  }, {\n    key: \"getItemTemplate\",\n    value: function getItemTemplate(message) {\n      var migratedChatId = this.props.migratedChatId;\n      var chat_id = message.chat_id,\n          content = message.content,\n          id = message.id;\n      return React.createElement(SharedVoiceNote, {\n        key: \"chat_id=\".concat(chat_id, \"_message_id=\").concat(id),\n        chatId: chat_id,\n        messageId: id,\n        voiceNote: content.voice_note,\n        openMedia: function openMedia() {\n          return _openMedia(chat_id, id, false);\n        },\n        showOpenMessage: chat_id !== migratedChatId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return SharedVoiceNotes;\n}(SharedMediaBase);\n\nSharedVoiceNotes.propTypes = {\n  chatId: PropTypes.number.isRequired,\n  migratedChatId: PropTypes.number,\n  onClose: PropTypes.func.isRequired,\n  popup: PropTypes.bool,\n  minHeight: PropTypes.number\n};\nSharedVoiceNotes.defaultProps = {\n  popup: false,\n  minHeight: 0\n};\nexport default withTranslation()(SharedVoiceNotes);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnRight/SharedMedia/SharedVoiceNotes.js"],"names":["React","PropTypes","withTranslation","SharedMediaBase","SharedVoiceNote","openMedia","SharedVoiceNotes","content","t","props","message","migratedChatId","chat_id","id","voice_note","propTypes","chatId","number","isRequired","onClose","func","popup","bool","minHeight","defaultProps"],"mappings":";;;;;;;AAAA;;;;;;AAOA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,eAAP,MAA4B,wCAA5B;AACA,SAASC,SAAS,IAATA,UAAT,QAA0B,wBAA1B;AACA,OAAO,wBAAP;;IAEMC,gB;;;;;;;;;;;;;mCACaC,O,EAAS;AACpB,aAAOA,OAAO,IAAIA,OAAO,CAAC,OAAD,CAAP,KAAqB,kBAAvC;AACH;;;sCAEiB;AACd,aAAO;AAAE,iBAAS;AAAX,OAAP;AACH;;;gCAEW;AAAA,UACAC,CADA,GACM,KAAKC,KADX,CACAD,CADA;AAGR,aAAOA,CAAC,CAAC,YAAD,CAAR;AACH;;;gCAEW;AACR,aAAO,KAAP;AACH;;;oCAEeE,O,EAAS;AAAA,UACbC,cADa,GACM,KAAKF,KADX,CACbE,cADa;AAAA,UAEbC,OAFa,GAEYF,OAFZ,CAEbE,OAFa;AAAA,UAEJL,OAFI,GAEYG,OAFZ,CAEJH,OAFI;AAAA,UAEKM,EAFL,GAEYH,OAFZ,CAEKG,EAFL;AAIrB,aACI,oBAAC,eAAD;AACI,QAAA,GAAG,oBAAaD,OAAb,yBAAmCC,EAAnC,CADP;AAEI,QAAA,MAAM,EAAED,OAFZ;AAGI,QAAA,SAAS,EAAEC,EAHf;AAII,QAAA,SAAS,EAAEN,OAAO,CAACO,UAJvB;AAKI,QAAA,SAAS,EAAE;AAAA,iBAAMT,UAAS,CAACO,OAAD,EAAUC,EAAV,EAAc,KAAd,CAAf;AAAA,SALf;AAMI,QAAA,eAAe,EAAED,OAAO,KAAKD,cANjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAUH;;;;EAjC0BR,e;;AAoC/BG,gBAAgB,CAACS,SAAjB,GAA6B;AACzBC,EAAAA,MAAM,EAAEf,SAAS,CAACgB,MAAV,CAAiBC,UADA;AAEzBP,EAAAA,cAAc,EAAEV,SAAS,CAACgB,MAFD;AAGzBE,EAAAA,OAAO,EAAElB,SAAS,CAACmB,IAAV,CAAeF,UAHC;AAIzBG,EAAAA,KAAK,EAAEpB,SAAS,CAACqB,IAJQ;AAKzBC,EAAAA,SAAS,EAAEtB,SAAS,CAACgB;AALI,CAA7B;AAQAX,gBAAgB,CAACkB,YAAjB,GAAgC;AAC5BH,EAAAA,KAAK,EAAE,KADqB;AAE5BE,EAAAA,SAAS,EAAE;AAFiB,CAAhC;AAKA,eAAerB,eAAe,GAAGI,gBAAH,CAA9B","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport SharedMediaBase from './SharedMediaBase';\nimport SharedVoiceNote from '../../Tile/SharedMedia/SharedVoiceNote';\nimport { openMedia } from '../../../Utils/Message';\nimport './SharedVoiceNotes.css';\n\nclass SharedVoiceNotes extends SharedMediaBase {\n    isValidContent(content) {\n        return content && content['@type'] === 'messageVoiceNote';\n    }\n\n    getSearchFilter() {\n        return { '@type': 'searchMessagesFilterVoiceNote' };\n    }\n\n    getHeader() {\n        const { t } = this.props;\n\n        return t('VoiceTitle');\n    }\n\n    hasSearch() {\n        return false;\n    }\n\n    getItemTemplate(message) {\n        const { migratedChatId } = this.props;\n        const { chat_id, content, id } = message;\n\n        return (\n            <SharedVoiceNote\n                key={`chat_id=${chat_id}_message_id=${id}`}\n                chatId={chat_id}\n                messageId={id}\n                voiceNote={content.voice_note}\n                openMedia={() => openMedia(chat_id, id, false)}\n                showOpenMessage={chat_id !== migratedChatId}\n            />\n        );\n    }\n}\n\nSharedVoiceNotes.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    migratedChatId: PropTypes.number,\n    onClose: PropTypes.func.isRequired,\n    popup: PropTypes.bool,\n    minHeight: PropTypes.number\n};\n\nSharedVoiceNotes.defaultProps = {\n    popup: false,\n    minHeight: 0\n};\n\nexport default withTranslation()(SharedVoiceNotes);\n"]},"metadata":{},"sourceType":"module"}