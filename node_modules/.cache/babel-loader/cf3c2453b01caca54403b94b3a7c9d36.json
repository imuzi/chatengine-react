{"ast":null,"code":"import _slicedToArray from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport EventEmitter from './EventEmitter';\nimport InputTypingManager from '../Utils/InputTypingManager';\nimport UserStore from './UserStore';\nimport TdLibController from '../Controllers/TdLibController';\n\nvar ChatStore =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(ChatStore, _EventEmitter);\n\n  function ChatStore() {\n    var _this;\n\n    _classCallCheck(this, ChatStore);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChatStore).call(this));\n\n    _this.reset = function () {\n      _this.items = new Map();\n      _this.typingManagers = new Map();\n      _this.onlineMemberCount = new Map();\n      _this.counters = new Map();\n      _this.skippedUpdates = [];\n      _this.chatList = new Map();\n      _this.wallpaper = null;\n    };\n\n    _this.loadClientData = function () {\n      var clientData = new Map();\n\n      try {\n        var data = localStorage.get('clientData');\n\n        if (data) {\n          data = JSON.parse(data);\n\n          if (data) {\n            Object.keys(data).forEach(function (key) {\n              clientData.set(Number(key), data[key]);\n            });\n          }\n        }\n      } catch (_unused) {}\n\n      _this.clientData = clientData;\n    };\n\n    _this.saveClientData = function () {\n      var arr = Array.from(_this.clientData.entries());\n      var obj = arr.reduce(function (obj, _ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            value = _ref2[1];\n\n        if (value) {\n          obj[String(key)] = value;\n        }\n\n        return obj;\n      }, {});\n      localStorage.setItem('clientData', JSON.stringify(obj));\n    };\n\n    _this.onUpdate = function (update) {\n      switch (update['@type']) {\n        case 'updateAuthorizationState':\n          {\n            var authorization_state = update.authorization_state;\n            if (!authorization_state) break;\n\n            switch (authorization_state['@type']) {\n              case 'authorizationStateClosed':\n                {\n                  _this.reset();\n\n                  break;\n                }\n            }\n\n            break;\n          }\n\n        case 'updateConnectionState':\n          {\n            if (update.state['@type'] === 'connectionStateUpdating') {\n              _this.updating = true;\n              _this.skippedUpdates = [];\n            } else {\n              _this.updating = false;\n\n              if (_this.skippedUpdates.length > 0) {\n                TdLibController.parameters.fastUpdating = false;\n\n                _this.emitUpdate({\n                  '@type': 'clientUpdateFastUpdatingComplete',\n                  updates: _this.skippedUpdates\n                });\n\n                _this.skippedUpdates = [];\n              }\n            }\n\n            break;\n          }\n\n        case 'updateChatActionBar':\n          {\n            var chat_id = update.chat_id,\n                action_bar = update.action_bar;\n\n            var chat = _this.get(chat_id);\n\n            if (chat) {\n              _this.assign(chat, {\n                action_bar: action_bar\n              });\n            }\n\n            _this.emitFastUpdate(update);\n\n            break;\n          }\n\n        case 'updateChatChatList':\n          {\n            var _chat_id = update.chat_id,\n                chat_list = update.chat_list;\n\n            var _chat = _this.get(_chat_id);\n\n            if (_chat) {\n              _this.assign(_chat, {\n                chat_list: chat_list\n              });\n            }\n\n            _this.updateChatChatList(_chat_id, chat_list);\n\n            _this.emitFastUpdate(update);\n\n            break;\n          }\n\n        case 'updateChatDefaultDisableNotification':\n          {\n            //TODO: handle updateChatDefaultDisableNotification\n            _this.emitFastUpdate(update);\n\n            break;\n          }\n\n        case 'updateChatOnlineMemberCount':\n          {\n            _this.setOnlineMemberCount(update.chat_id, update.online_member_count);\n\n            _this.emitFastUpdate(update);\n\n            break;\n          }\n\n        case 'updateChatDraftMessage':\n          {\n            var _chat_id2 = update.chat_id,\n                order = update.order,\n                draft_message = update.draft_message;\n\n            var _chat2 = _this.get(_chat_id2);\n\n            if (_chat2) {\n              _this.assign(_chat2, {\n                order: order === '0' ? _chat2.order : order,\n                draft_message: draft_message\n              });\n            }\n\n            _this.emitFastUpdate(update);\n\n            break;\n          }\n\n        case 'updateChatIsMarkedAsUnread':\n          {\n            var _chat_id3 = update.chat_id,\n                is_marked_as_unread = update.is_marked_as_unread;\n\n            var _chat3 = _this.get(_chat_id3);\n\n            if (_chat3) {\n              _this.assign(_chat3, {\n                is_marked_as_unread: is_marked_as_unread\n              });\n            }\n\n            _this.emitFastUpdate(update);\n\n            break;\n          }\n\n        case 'updateChatIsPinned':\n          {\n            var _chat_id4 = update.chat_id,\n                _order = update.order,\n                is_pinned = update.is_pinned;\n\n            var _chat4 = _this.get(_chat_id4);\n\n            if (_chat4) {\n              _this.assign(_chat4, {\n                order: _order,\n                is_pinned: is_pinned\n              });\n            }\n\n            _this.emitFastUpdate(update);\n\n            break;\n          }\n\n        case 'updateChatIsSponsored':\n          {\n            var _chat_id5 = update.chat_id,\n                _order2 = update.order,\n                is_sponsored = update.is_sponsored;\n\n            var _chat5 = _this.get(_chat_id5);\n\n            if (_chat5) {\n              _this.assign(_chat5, {\n                order: _order2,\n                is_sponsored: is_sponsored\n              });\n            }\n\n            _this.emitFastUpdate(update);\n\n            break;\n          }\n\n        case 'updateChatLastMessage':\n          {\n            var _chat_id6 = update.chat_id,\n                _order3 = update.order,\n                last_message = update.last_message;\n\n            var _chat6 = _this.get(_chat_id6);\n\n            if (_chat6) {\n              _this.assign(_chat6, {\n                order: _order3 === '0' ? _chat6.order : _order3,\n                last_message: last_message\n              });\n            }\n\n            _this.emitFastUpdate(update);\n\n            break;\n          }\n\n        case 'updateChatNotificationSettings':\n          {\n            var _chat_id7 = update.chat_id,\n                notification_settings = update.notification_settings;\n\n            var _chat7 = _this.get(_chat_id7);\n\n            if (_chat7) {\n              _this.assign(_chat7, {\n                notification_settings: notification_settings\n              });\n            }\n\n            _this.emitFastUpdate(update);\n\n            break;\n          }\n\n        case 'updateChatOrder':\n          {\n            var _chat_id8 = update.chat_id,\n                _order4 = update.order;\n\n            var _chat8 = _this.get(_chat_id8);\n\n            if (_chat8) {\n              _this.assign(_chat8, {\n                order: _order4\n              });\n            }\n\n            _this.emitFastUpdate(update);\n\n            break;\n          }\n\n        case 'updateChatPhoto':\n          {\n            var _chat_id9 = update.chat_id,\n                photo = update.photo;\n\n            var _chat9 = _this.get(_chat_id9);\n\n            if (_chat9) {\n              _this.assign(_chat9, {\n                photo: photo\n              });\n\n              switch (_chat9.type['@type']) {\n                case 'chatTypeBasicGroup':\n                  {\n                    break;\n                  }\n\n                case 'chatTypeSupergroup':\n                  {\n                    break;\n                  }\n\n                case 'chatTypePrivate':\n                case 'chatTypeSecret':\n                  {\n                    var user = UserStore.get(_chat9.type.user_id);\n\n                    if (user) {\n                      UserStore.assign(user, {\n                        profile_photo: update.photo\n                      });\n                    }\n\n                    break;\n                  }\n              }\n            }\n\n            _this.emitFastUpdate(update);\n\n            break;\n          }\n\n        case 'updateChatPinnedMessage':\n          {\n            var _chat_id10 = update.chat_id,\n                pinned_message_id = update.pinned_message_id;\n\n            var _chat10 = _this.get(_chat_id10);\n\n            if (_chat10) {\n              _this.assign(_chat10, {\n                pinned_message_id: pinned_message_id\n              });\n            }\n\n            _this.emitFastUpdate(update);\n\n            break;\n          }\n\n        case 'updateChatReadInbox':\n          {\n            var _chat_id11 = update.chat_id,\n                last_read_inbox_message_id = update.last_read_inbox_message_id,\n                unread_count = update.unread_count;\n\n            var _chat11 = _this.get(_chat_id11);\n\n            if (_chat11) {\n              _this.assign(_chat11, {\n                last_read_inbox_message_id: last_read_inbox_message_id,\n                unread_count: unread_count\n              });\n            }\n\n            _this.emitFastUpdate(update);\n\n            break;\n          }\n\n        case 'updateChatReadOutbox':\n          {\n            var _chat_id12 = update.chat_id,\n                last_read_outbox_message_id = update.last_read_outbox_message_id;\n\n            var _chat12 = _this.get(_chat_id12);\n\n            if (_chat12) {\n              _this.assign(_chat12, {\n                last_read_outbox_message_id: last_read_outbox_message_id\n              });\n            }\n\n            _this.emitFastUpdate(update);\n\n            break;\n          }\n\n        case 'updateChatReplyMarkup':\n          {\n            var _chat_id13 = update.chat_id,\n                reply_markup_message_id = update.reply_markup_message_id;\n\n            var _chat13 = _this.get(_chat_id13);\n\n            if (_chat13) {\n              _this.assign(_chat13, {\n                reply_markup_message_id: reply_markup_message_id\n              });\n            }\n\n            _this.emitFastUpdate(update);\n\n            break;\n          }\n\n        case 'updateChatTitle':\n          {\n            var _chat_id14 = update.chat_id,\n                title = update.title;\n\n            var _chat14 = _this.get(_chat_id14);\n\n            if (_chat14) {\n              _this.assign(_chat14, {\n                title: title\n              });\n            }\n\n            _this.emitFastUpdate(update);\n\n            break;\n          }\n\n        case 'updateChatUnreadMentionCount':\n          {\n            var _chat_id15 = update.chat_id,\n                unread_mention_count = update.unread_mention_count;\n\n            var _chat15 = _this.get(_chat_id15);\n\n            if (_chat15) {\n              _this.assign(_chat15, {\n                unread_mention_count: unread_mention_count\n              });\n            }\n\n            _this.emitFastUpdate(update);\n\n            break;\n          }\n\n        case 'updateNewChat':\n          {\n            _this.set(update.chat);\n\n            _this.emitFastUpdate(update);\n\n            break;\n          }\n\n        case 'updateSecretChat':\n          {\n            //TODO: handle updateSecretChat\n            _this.emitFastUpdate(update);\n\n            break;\n          }\n\n        case 'updateUnreadChatCount':\n          {\n            //TODO: handle updateUnreadChatCount\n            _this.emitFastUpdate(update);\n\n            break;\n          }\n\n        case 'updateUserChatAction':\n          {\n            var typingManager = _this.getTypingManager(update.chat_id);\n\n            if (!typingManager) {\n              typingManager = new InputTypingManager(update.chat_id, function (update) {\n                return _this.emitUpdate(update);\n              });\n\n              _this.setTypingManager(update.chat_id, typingManager);\n            }\n\n            var key = update.user_id;\n\n            if (update.action['@type'] === 'chatActionCancel') {\n              typingManager.clearAction(key);\n            } else {\n              typingManager.addAction(key, update.action);\n            }\n\n            _this.emitFastUpdate(update);\n\n            break;\n          }\n\n        case 'updateMessageMentionRead':\n          {\n            var _chat_id16 = update.chat_id,\n                _unread_mention_count = update.unread_mention_count;\n\n            var _chat16 = _this.get(_chat_id16);\n\n            if (_chat16) {\n              _this.assign(_chat16, {\n                unread_mention_count: _unread_mention_count\n              });\n            }\n\n            _this.emitFastUpdate(update);\n\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    _this.onClientUpdate = function (update) {\n      switch (update['@type']) {\n        case 'clientUpdateChatBackground':\n          {\n            var wallpaper = update.wallpaper;\n            _this.wallpaper = wallpaper;\n\n            _this.emitUpdate(update);\n\n            break;\n          }\n\n        case 'clientUpdateClearHistory':\n          {\n            _this.emitUpdate(update);\n\n            break;\n          }\n\n        case 'clientUpdateLeaveChat':\n          {\n            _this.emitUpdate(update);\n\n            break;\n          }\n\n        case 'clientUpdateArchive':\n          {\n            _this.emitUpdate(update);\n\n            break;\n          }\n\n        case 'clientUpdateOpenChat':\n          {\n            _this.emitUpdate(update);\n\n            break;\n          }\n\n        case 'clientUpdateContacts':\n          {\n            _this.emitUpdate(update);\n\n            break;\n          }\n\n        case 'clientUpdateSettings':\n          {\n            _this.emitUpdate(update);\n\n            break;\n          }\n\n        case 'clientUpdateSetChatClientData':\n          {\n            var chatId = update.chatId,\n                clientData = update.clientData;\n            TdLibController.send({\n              '@type': 'setChatClientData',\n              chat_id: chatId,\n              client_data: JSON.stringify(clientData)\n            });\n\n            _this.setClientData(chatId, clientData);\n\n            _this.saveClientData();\n\n            _this.emitUpdate(update);\n\n            break;\n          }\n\n        case 'clientUpdateUnpin':\n          {\n            _this.emitUpdate(update);\n\n            break;\n          }\n      }\n    };\n\n    _this.emitUpdate = function (update) {\n      _this.emit(update['@type'], update);\n    };\n\n    _this.emitFastUpdate = function (update) {\n      if (_this.updating && TdLibController.parameters.fastUpdating) {\n        _this.skippedUpdates.push(update);\n\n        return;\n      }\n\n      _this.emit(update['@type'], update);\n    };\n\n    _this.addTdLibListener = function () {\n      TdLibController.on('update', _this.onUpdate);\n      TdLibController.on('clientUpdate', _this.onClientUpdate);\n    };\n\n    _this.removeTdLibListener = function () {\n      TdLibController.off('update', _this.onUpdate);\n      TdLibController.off('clientUpdate', _this.onClientUpdate);\n    };\n\n    _this.reset();\n\n    _this.loadClientData();\n\n    _this.addTdLibListener();\n\n    return _this;\n  }\n\n  _createClass(ChatStore, [{\n    key: \"updateChatChatList\",\n    value: function updateChatChatList(chatId, chatList) {\n      if (!chatList) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = this.chatList.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var key = _step.value;\n            this.chatList.get(key).delete(chatId);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return;\n      }\n\n      var idMap = this.chatList.get(chatList['@type']);\n\n      if (!idMap) {\n        idMap = new Map();\n        this.chatList.set(chatList['@type'], idMap);\n      }\n\n      idMap.set(chatId, chatId);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.chatList.keys()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var _key = _step2.value;\n\n          if (_key !== chatList['@type']) {\n            this.chatList.get(_key).delete(chatId);\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"assign\",\n    value: function assign(source1, source2) {\n      //Object.assign(source1, source2);\n      this.set(Object.assign({}, source1, source2));\n    }\n  }, {\n    key: \"get\",\n    value: function get(chatId) {\n      return this.items.get(chatId);\n    }\n  }, {\n    key: \"set\",\n    value: function set(chat) {\n      this.items.set(chat.id, chat);\n    }\n  }, {\n    key: \"getCounters\",\n    value: function getCounters(chatId) {\n      return this.counters.get(chatId);\n    }\n  }, {\n    key: \"setCounters\",\n    value: function setCounters(chatId, counters) {\n      this.counters.set(chatId, counters);\n    }\n  }, {\n    key: \"getClientData\",\n    value: function getClientData(chatId) {\n      return this.clientData.get(chatId) || {};\n    }\n  }, {\n    key: \"setClientData\",\n    value: function setClientData(chatId, data) {\n      this.clientData.set(chatId, data);\n    }\n  }, {\n    key: \"setOnlineMemberCount\",\n    value: function setOnlineMemberCount(chatId, onlineMemberCount) {\n      this.onlineMemberCount.set(chatId, onlineMemberCount);\n    }\n  }, {\n    key: \"getOnlineMemberCount\",\n    value: function getOnlineMemberCount(chatId) {\n      return this.onlineMemberCount.get(chatId) || 0;\n    }\n  }, {\n    key: \"getTypingManager\",\n    value: function getTypingManager(chatId) {\n      return this.typingManagers.get(chatId);\n    }\n  }, {\n    key: \"setTypingManager\",\n    value: function setTypingManager(chatId, typingManager) {\n      return this.typingManagers.set(chatId, typingManager);\n    }\n  }]);\n\n  return ChatStore;\n}(EventEmitter);\n\nvar store = new ChatStore();\nwindow.chat = store;\nexport default store;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Stores/ChatStore.js"],"names":["EventEmitter","InputTypingManager","UserStore","TdLibController","ChatStore","reset","items","Map","typingManagers","onlineMemberCount","counters","skippedUpdates","chatList","wallpaper","loadClientData","clientData","data","localStorage","get","JSON","parse","Object","keys","forEach","key","set","Number","saveClientData","arr","Array","from","entries","obj","reduce","value","String","setItem","stringify","onUpdate","update","authorization_state","state","updating","length","parameters","fastUpdating","emitUpdate","updates","chat_id","action_bar","chat","assign","emitFastUpdate","chat_list","updateChatChatList","setOnlineMemberCount","online_member_count","order","draft_message","is_marked_as_unread","is_pinned","is_sponsored","last_message","notification_settings","photo","type","user","user_id","profile_photo","pinned_message_id","last_read_inbox_message_id","unread_count","last_read_outbox_message_id","reply_markup_message_id","title","unread_mention_count","typingManager","getTypingManager","setTypingManager","action","clearAction","addAction","onClientUpdate","chatId","send","client_data","setClientData","emit","push","addTdLibListener","on","removeTdLibListener","off","delete","idMap","source1","source2","id","store","window"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport EventEmitter from './EventEmitter';\nimport InputTypingManager from '../Utils/InputTypingManager';\nimport UserStore from './UserStore';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass ChatStore extends EventEmitter {\n    constructor() {\n        super();\n\n        this.reset();\n        this.loadClientData();\n\n        this.addTdLibListener();\n    }\n\n    reset = () => {\n        this.items = new Map();\n        this.typingManagers = new Map();\n        this.onlineMemberCount = new Map();\n        this.counters = new Map();\n        this.skippedUpdates = [];\n        this.chatList = new Map();\n        this.wallpaper = null;\n    };\n\n    loadClientData = () => {\n        const clientData = new Map();\n        try {\n            let data = localStorage.get('clientData');\n            if (data) {\n                data = JSON.parse(data);\n                if (data) {\n                    Object.keys(data).forEach(key => {\n                        clientData.set(Number(key), data[key]);\n                    });\n                }\n            }\n        } catch {}\n\n        this.clientData = clientData;\n    };\n\n    saveClientData = () => {\n        const arr = Array.from(this.clientData.entries());\n        const obj = arr.reduce((obj, [key, value]) => {\n            if (value) {\n                obj[String(key)] = value;\n            }\n            return obj;\n        }, {});\n\n        localStorage.setItem('clientData', JSON.stringify(obj));\n    };\n\n    updateChatChatList(chatId, chatList) {\n        if (!chatList) {\n            for (const key of this.chatList.keys()) {\n                this.chatList.get(key).delete(chatId);\n            }\n\n            return;\n        }\n\n        let idMap = this.chatList.get(chatList['@type']);\n        if (!idMap) {\n            idMap = new Map();\n            this.chatList.set(chatList['@type'], idMap);\n        }\n\n        idMap.set(chatId, chatId);\n        for (const key of this.chatList.keys()) {\n            if (key !== chatList['@type']) {\n                this.chatList.get(key).delete(chatId);\n            }\n        }\n    }\n\n    onUpdate = update => {\n        switch (update['@type']) {\n            case 'updateAuthorizationState': {\n                const { authorization_state } = update;\n                if (!authorization_state) break;\n\n                switch (authorization_state['@type']) {\n                    case 'authorizationStateClosed': {\n                        this.reset();\n                        break;\n                    }\n                }\n\n                break;\n            }\n            case 'updateConnectionState': {\n                if (update.state['@type'] === 'connectionStateUpdating') {\n                    this.updating = true;\n                    this.skippedUpdates = [];\n                } else {\n                    this.updating = false;\n                    if (this.skippedUpdates.length > 0) {\n                        TdLibController.parameters.fastUpdating = false;\n                        this.emitUpdate({\n                            '@type': 'clientUpdateFastUpdatingComplete',\n                            updates: this.skippedUpdates\n                        });\n                        this.skippedUpdates = [];\n                    }\n                }\n                break;\n            }\n            case 'updateChatActionBar': {\n                const { chat_id, action_bar } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { action_bar });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatChatList': {\n                const { chat_id, chat_list } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { chat_list });\n                }\n\n                this.updateChatChatList(chat_id, chat_list);\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatDefaultDisableNotification': {\n                //TODO: handle updateChatDefaultDisableNotification\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatOnlineMemberCount': {\n                this.setOnlineMemberCount(update.chat_id, update.online_member_count);\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatDraftMessage': {\n                const { chat_id, order, draft_message } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, {\n                        order: order === '0' ? chat.order : order,\n                        draft_message\n                    });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatIsMarkedAsUnread': {\n                const { chat_id, is_marked_as_unread } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { is_marked_as_unread });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatIsPinned': {\n                const { chat_id, order, is_pinned } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { order, is_pinned });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatIsSponsored': {\n                const { chat_id, order, is_sponsored } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { order, is_sponsored });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatLastMessage': {\n                const { chat_id, order, last_message } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, {\n                        order: order === '0' ? chat.order : order,\n                        last_message\n                    });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatNotificationSettings': {\n                const { chat_id, notification_settings } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { notification_settings });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatOrder': {\n                const { chat_id, order } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { order });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatPhoto': {\n                const { chat_id, photo } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { photo });\n\n                    switch (chat.type['@type']) {\n                        case 'chatTypeBasicGroup': {\n                            break;\n                        }\n                        case 'chatTypeSupergroup': {\n                            break;\n                        }\n                        case 'chatTypePrivate':\n                        case 'chatTypeSecret': {\n                            const user = UserStore.get(chat.type.user_id);\n                            if (user) {\n                                UserStore.assign(user, { profile_photo: update.photo });\n                            }\n                            break;\n                        }\n                    }\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatPinnedMessage': {\n                const { chat_id, pinned_message_id } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { pinned_message_id });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatReadInbox': {\n                const { chat_id, last_read_inbox_message_id, unread_count } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { last_read_inbox_message_id, unread_count });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatReadOutbox': {\n                const { chat_id, last_read_outbox_message_id } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { last_read_outbox_message_id });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatReplyMarkup': {\n                const { chat_id, reply_markup_message_id } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { reply_markup_message_id });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatTitle': {\n                const { chat_id, title } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { title });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatUnreadMentionCount': {\n                const { chat_id, unread_mention_count } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { unread_mention_count });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateNewChat': {\n                this.set(update.chat);\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateSecretChat': {\n                //TODO: handle updateSecretChat\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateUnreadChatCount': {\n                //TODO: handle updateUnreadChatCount\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateUserChatAction': {\n                let typingManager = this.getTypingManager(update.chat_id);\n                if (!typingManager) {\n                    typingManager = new InputTypingManager(update.chat_id, update => this.emitUpdate(update));\n                    this.setTypingManager(update.chat_id, typingManager);\n                }\n\n                const key = update.user_id;\n                if (update.action['@type'] === 'chatActionCancel') {\n                    typingManager.clearAction(key);\n                } else {\n                    typingManager.addAction(key, update.action);\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateMessageMentionRead': {\n                const { chat_id, unread_mention_count } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { unread_mention_count });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    onClientUpdate = update => {\n        switch (update['@type']) {\n            case 'clientUpdateChatBackground': {\n                const { wallpaper } = update;\n                this.wallpaper = wallpaper;\n\n                this.emitUpdate(update);\n                break;\n            }\n            case 'clientUpdateClearHistory': {\n                this.emitUpdate(update);\n                break;\n            }\n            case 'clientUpdateLeaveChat': {\n                this.emitUpdate(update);\n                break;\n            }\n            case 'clientUpdateArchive': {\n                this.emitUpdate(update);\n                break;\n            }\n            case 'clientUpdateOpenChat': {\n                this.emitUpdate(update);\n                break;\n            }\n            case 'clientUpdateContacts': {\n                this.emitUpdate(update);\n                break;\n            }\n            case 'clientUpdateSettings': {\n                this.emitUpdate(update);\n                break;\n            }\n            case 'clientUpdateSetChatClientData': {\n                const { chatId, clientData } = update;\n\n                TdLibController.send({\n                    '@type': 'setChatClientData',\n                    chat_id: chatId,\n                    client_data: JSON.stringify(clientData)\n                });\n                this.setClientData(chatId, clientData);\n                this.saveClientData();\n\n                this.emitUpdate(update);\n                break;\n            }\n            case 'clientUpdateUnpin': {\n                this.emitUpdate(update);\n                break;\n            }\n        }\n    };\n\n    emitUpdate = update => {\n        this.emit(update['@type'], update);\n    };\n\n    emitFastUpdate = update => {\n        if (this.updating && TdLibController.parameters.fastUpdating) {\n            this.skippedUpdates.push(update);\n            return;\n        }\n\n        this.emit(update['@type'], update);\n    };\n\n    addTdLibListener = () => {\n        TdLibController.on('update', this.onUpdate);\n        TdLibController.on('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.off('update', this.onUpdate);\n        TdLibController.off('clientUpdate', this.onClientUpdate);\n    };\n\n    assign(source1, source2) {\n        //Object.assign(source1, source2);\n        this.set(Object.assign({}, source1, source2));\n    }\n\n    get(chatId) {\n        return this.items.get(chatId);\n    }\n\n    set(chat) {\n        this.items.set(chat.id, chat);\n    }\n\n    getCounters(chatId) {\n        return this.counters.get(chatId);\n    }\n\n    setCounters(chatId, counters) {\n        this.counters.set(chatId, counters);\n    }\n\n    getClientData(chatId) {\n        return this.clientData.get(chatId) || {};\n    }\n\n    setClientData(chatId, data) {\n        this.clientData.set(chatId, data);\n    }\n\n    setOnlineMemberCount(chatId, onlineMemberCount) {\n        this.onlineMemberCount.set(chatId, onlineMemberCount);\n    }\n\n    getOnlineMemberCount(chatId) {\n        return this.onlineMemberCount.get(chatId) || 0;\n    }\n\n    getTypingManager(chatId) {\n        return this.typingManagers.get(chatId);\n    }\n\n    setTypingManager(chatId, typingManager) {\n        return this.typingManagers.set(chatId, typingManager);\n    }\n}\n\nconst store = new ChatStore();\nwindow.chat = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}