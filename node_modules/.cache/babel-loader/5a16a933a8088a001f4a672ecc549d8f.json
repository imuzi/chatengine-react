{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Popup/CreatePollDialog.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withSnackbar } from 'notistack';\nimport { withRestoreRef, withSaveRef, compose } from '../../Utils/HOC';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport CloseIcon from '../../Assets/Icons/Close';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Divider from '@material-ui/core/Divider';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Typography from '@material-ui/core/Typography';\nimport CreatePollOption from './CreatePollOption';\nimport { focusNode } from '../../Utils/Component';\nimport { utils } from '../../Utils/Key';\nimport { hasPollData, isValidPoll } from '../../Utils/Poll';\nimport { NOTIFICATION_AUTO_HIDE_DURATION_MS, POLL_OPTIONS_MAX_COUNT, POLL_QUESTION_HINT_LENGTH, POLL_QUESTION_LENGTH, POLL_QUESTION_MAX_LENGTH } from '../../Constants';\nimport AppStore from '../../Stores/ApplicationStore';\nimport PollStore from '../../Stores/PollStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './CreatePollDialog.css';\n\nvar CreatePollDialog =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CreatePollDialog, _React$Component);\n\n  function CreatePollDialog(props) {\n    var _this;\n\n    _classCallCheck(this, CreatePollDialog);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CreatePollDialog).call(this, props));\n\n    _this.handleClientUpdateNewPoll = function (update) {\n      var poll = PollStore.poll;\n\n      _this.setState({\n        confirm: false,\n        remainLength: POLL_QUESTION_MAX_LENGTH,\n        poll: poll\n      });\n    };\n\n    _this.handleClientUpdatePollQuestion = function (update) {\n      var poll = PollStore.poll;\n      var node = _this.questionRef.current;\n      var length = node.dataset.length;\n      var innerText = node.innerText;\n\n      _this.setState({\n        remainLength: length - innerText.length,\n        poll: poll\n      });\n    };\n\n    _this.handleClientUpdatePoll = function (update) {\n      var poll = PollStore.poll;\n\n      _this.setState({\n        poll: poll\n      });\n    };\n\n    _this.handleClientUpdateNewPollOption = function (update) {\n      var poll = PollStore.poll;\n\n      _this.setState({\n        poll: poll\n      }, function () {\n        setTimeout(function () {\n          var node = _this.optionsRefMap.get(poll.options.length - 1);\n\n          node.focus(true);\n        });\n      });\n    };\n\n    _this.handleKeyDown = function (event) {\n      var node = _this.questionRef.current;\n      var maxLength = node.dataset.maxLength;\n      var innerText = node.innerText;\n      var length = innerText.length;\n      var hasSelection = false;\n      var selection = window.getSelection();\n      var isSpecial = utils.isSpecial(event);\n      var isNavigational = utils.isNavigational(event);\n\n      if (selection) {\n        hasSelection = !!selection.toString();\n      }\n\n      switch (event.key) {\n        case 'Enter':\n          {\n            if (!event.shiftKey) {\n              _this.handleFocusNextOption(0);\n\n              event.preventDefault();\n              return false;\n            }\n\n            break;\n          }\n\n        case 'ArrowDown':\n          {\n            var _selection = window.getSelection();\n\n            if (!_selection) break;\n            if (!_selection.isCollapsed) break;\n            var lastChild = node.childNodes && node.childNodes.length > 0 ? node.childNodes[node.childNodes.length - 1] : null;\n\n            if (!lastChild || _selection.anchorNode === lastChild && _selection.anchorOffset === lastChild.length) {\n              _this.handleFocusNextOption(0);\n\n              event.preventDefault();\n              return false;\n            }\n\n            break;\n          }\n      }\n\n      if (isSpecial || isNavigational) {\n        return true;\n      }\n\n      if (length >= maxLength && !hasSelection) {\n        event.preventDefault();\n        return false;\n      }\n\n      return true;\n    };\n\n    _this.handlePaste = function (event) {\n      event.preventDefault();\n      var node = _this.questionRef.current;\n      var maxLength = node.dataset.maxLength;\n      var selection = window.getSelection();\n      var selectionString = selection ? selection.toString() : '';\n      var innerText = node.innerText;\n      if (innerText.length - selection.length >= maxLength) return;\n      var pasteText = event.clipboardData.getData('text/plain');\n      if (!pasteText) return;\n\n      if (innerText.length - selectionString.length + pasteText.length > maxLength) {\n        pasteText = pasteText.substr(0, maxLength - innerText.length + selectionString.length);\n      }\n\n      document.execCommand('insertText', false, pasteText);\n    };\n\n    _this.handleInput = function (event) {\n      event.preventDefault();\n      var node = _this.questionRef.current; //const length = node.dataset.length;\n\n      var innerText = node.innerText;\n      var innerHtml = node.innerHTML;\n\n      if (innerHtml === '<br>') {\n        node.innerText = '';\n      } // this.setState({\n      //     remainLength: length - innerText.length\n      // });\n\n\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdatePollQuestion',\n        question: innerText\n      });\n    };\n\n    _this.handleAddOption = function () {\n      var poll = _this.state.poll;\n      if (!poll) return;\n      var options = poll.options;\n      if (options.length >= POLL_OPTIONS_MAX_COUNT) return;\n      var option = {\n        id: Date.now(),\n        text: ''\n      };\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateNewPollOption',\n        option: option\n      });\n    };\n\n    _this.handleDeleteOption = function (id) {\n      var backspace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (backspace) {\n        _this.handleDeleteByBackspace(id);\n      } else {\n        _this.handleDelete(id);\n      }\n    };\n\n    _this.handleDelete = function (id) {\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateDeletePollOption',\n        id: id\n      });\n    };\n\n    _this.handleDeleteByBackspace = function (id) {\n      var poll = _this.state.poll;\n      if (!poll) return;\n      var options = poll.options;\n      var index = options.findIndex(function (x) {\n        return x.id === id;\n      });\n      var prevIndex = index - 1;\n      var deleteOption = true;\n\n      for (var i = index; i < options.length; i++) {\n        var text = options[i].text;\n\n        if (text) {\n          deleteOption = false;\n          break;\n        }\n      }\n\n      if (deleteOption) {\n        _this.handleDeleteOption(id);\n      }\n\n      var prevNode = _this.optionsRefMap.get(prevIndex);\n\n      if (!prevNode) {\n        var element = _this.questionRef.current;\n        focusNode(element, true);\n        return;\n      }\n\n      prevNode.focus(true);\n    };\n\n    _this.handleFocusPrevOption = function (id) {\n      var poll = _this.state.poll;\n      if (!poll) return;\n      var options = poll.options;\n      var index = options.findIndex(function (x) {\n        return x.id === id;\n      });\n      var prevIndex = index - 1;\n\n      var prevNode = _this.optionsRefMap.get(prevIndex);\n\n      if (!prevNode) {\n        var element = _this.questionRef.current;\n        focusNode(element, false);\n        return;\n      }\n\n      prevNode.focus(false);\n    };\n\n    _this.handleFocusNextOption = function (id) {\n      var poll = _this.state.poll;\n      if (!poll) return;\n      var options = poll.options;\n      var index = options.findIndex(function (x) {\n        return x.id === id;\n      });\n      var nextIndex = index + 1;\n\n      var nextNode = _this.optionsRefMap.get(nextIndex);\n\n      if (!nextNode) {\n        var text = index >= 0 && index < options.length ? options[index].text : '';\n\n        if (options.length && !text) {\n          return;\n        }\n\n        _this.handleAddOption();\n\n        return;\n      }\n\n      nextNode.focus(nextNode, true);\n    };\n\n    _this.getHint = function () {\n      var poll = _this.state.poll;\n      if (!poll) return;\n      var options = poll.options;\n      var addCount = POLL_OPTIONS_MAX_COUNT - options.length;\n\n      if (addCount <= 0) {\n        return 'You have added the maximum number of options.';\n      }\n\n      if (addCount === 1) {\n        return 'You can add 1 more option.';\n      }\n\n      return \"You can add \".concat(POLL_OPTIONS_MAX_COUNT - options.length, \" more options.\");\n    };\n\n    _this.handleClose = function () {\n      var poll = _this.state.poll;\n\n      if (hasPollData(poll)) {\n        _this.setState({\n          confirm: true\n        });\n      } else {\n        _this.handleConfirmationDone();\n      }\n    };\n\n    _this.handleSend = function () {\n      var onSend = _this.props.onSend;\n      var inputMessagePoll = PollStore.getInputMessagePoll();\n      if (!inputMessagePoll) return;\n      onSend(inputMessagePoll);\n\n      _this.handleConfirmationDone();\n    };\n\n    _this.handleConfirmationClose = function () {\n      _this.setState({\n        confirm: false\n      });\n    };\n\n    _this.handleConfirmationDone = function () {\n      _this.handleConfirmationClose();\n\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateDeletePoll'\n      });\n    };\n\n    _this.handleChangeAnonymous = function () {\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdatePollChangeAnonymous'\n      });\n    };\n\n    _this.handleChangeAllowMultipleAnswers = function () {\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdatePollChangeAllowMultipleAnswers'\n      });\n    };\n\n    _this.handleChangeType = function () {\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdatePollChangeType'\n      });\n    };\n\n    _this.handleScheduledAction = function (key, message, action) {\n      if (!key) return;\n      var enqueueSnackbar = _this.props.enqueueSnackbar;\n      if (!enqueueSnackbar) return;\n      var TRANSITION_DELAY = 150;\n\n      if (AppStore.addScheduledAction(key, NOTIFICATION_AUTO_HIDE_DURATION_MS + 2 * TRANSITION_DELAY, action)) {\n        enqueueSnackbar(message, {\n          autoHideDuration: NOTIFICATION_AUTO_HIDE_DURATION_MS,\n          action: [React.createElement(IconButton, {\n            key: \"close\",\n            \"aria-label\": \"Close\",\n            color: \"inherit\",\n            className: \"notification-close-button\",\n            onClick: function onClick() {\n              return AppStore.removeScheduledAction(key);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 425\n            },\n            __self: this\n          }, React.createElement(CloseIcon, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 431\n            },\n            __self: this\n          }))]\n        });\n      }\n    };\n\n    _this.handleAllowMultipleAnswersClick = function (event) {\n      var t = _this.props.t;\n      var poll = _this.state.poll;\n      if (!poll) return;\n      var quizPoll = poll.type['@type'] === 'pollTypeQuiz';\n\n      if (quizPoll) {\n        event.stopPropagation();\n        var key = 'disallow_multiple_answers';\n        var message = t('PollQuizOneRightAnswer');\n        var action = null;\n\n        _this.handleScheduledAction(key, message, action);\n      }\n    };\n\n    _this.questionRef = React.createRef();\n    _this.optionsRefMap = new Map();\n    _this.state = {\n      poll: null,\n      confirm: false,\n      remainLength: POLL_QUESTION_MAX_LENGTH\n    };\n    return _this;\n  }\n\n  _createClass(CreatePollDialog, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      PollStore.on('clientUpdatePollChooseOption', this.handleClientUpdatePoll);\n      PollStore.on('clientUpdatePollChangeAnonymous', this.handleClientUpdatePoll);\n      PollStore.on('clientUpdatePollChangeAllowMultipleAnswers', this.handleClientUpdatePoll);\n      PollStore.on('clientUpdatePollChangeType', this.handleClientUpdatePoll);\n      PollStore.on('clientUpdateDeletePoll', this.handleClientUpdatePoll);\n      PollStore.on('clientUpdateDeletePollOption', this.handleClientUpdatePoll);\n      PollStore.on('clientUpdateNewPoll', this.handleClientUpdateNewPoll);\n      PollStore.on('clientUpdateNewPollOption', this.handleClientUpdateNewPollOption);\n      PollStore.on('clientUpdatePollOption', this.handleClientUpdatePoll);\n      PollStore.on('clientUpdatePollQuestion', this.handleClientUpdatePollQuestion);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      PollStore.off('clientUpdatePollChooseOption', this.handleClientUpdatePoll);\n      PollStore.off('clientUpdatePollChangeAnonymous', this.handleClientUpdatePoll);\n      PollStore.off('clientUpdatePollChangeAllowMultipleAnswers', this.handleClientUpdatePoll);\n      PollStore.off('clientUpdatePollChangeType', this.handleClientUpdatePoll);\n      PollStore.off('clientUpdateDeletePoll', this.handleClientUpdatePoll);\n      PollStore.off('clientUpdateDeletePollOption', this.handleClientUpdatePoll);\n      PollStore.off('clientUpdateNewPoll', this.handleClientUpdateNewPoll);\n      PollStore.off('clientUpdateNewPollOption', this.handleClientUpdateNewPollOption);\n      PollStore.off('clientUpdatePollOption', this.handleClientUpdatePoll);\n      PollStore.off('clientUpdatePollQuestion', this.handleClientUpdatePollQuestion);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      var _this2 = this;\n\n      var poll = this.state.poll;\n\n      if (poll && !prevState.poll) {\n        setTimeout(function () {\n          focusNode(_this2.questionRef.current, true);\n        }, 0);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var t = this.props.t;\n      var _this$state = this.state,\n          remainLength = _this$state.remainLength,\n          confirm = _this$state.confirm,\n          poll = _this$state.poll;\n      if (!poll) return null;\n      var is_anonymous = poll.is_anonymous;\n      var options = poll ? poll.options : [];\n      var allowMultipleAnswers = poll.type.allow_multiple_answers;\n      var allowMultipleAnswersDisabled = poll.type['@type'] !== 'pollTypeRegular';\n      var quizPoll = poll.type['@type'] === 'pollTypeQuiz';\n      this.optionsRefMap.clear();\n      var items = options.map(function (x, i) {\n        return React.createElement(CreatePollOption, {\n          ref: function ref(el) {\n            return _this3.optionsRefMap.set(i, el);\n          },\n          key: x.id,\n          option: x,\n          onDelete: _this3.handleDeleteOption,\n          onFocusPrev: _this3.handleFocusPrevOption,\n          onFocusNext: _this3.handleFocusNextOption,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 469\n          },\n          __self: this\n        });\n      });\n      var canAddOption = POLL_OPTIONS_MAX_COUNT - options.length > 0;\n      var hint = this.getHint();\n      return React.createElement(React.Fragment, null, React.createElement(Dialog, {\n        className: classNames('create-poll-dialog', {\n          'create-quiz-dialog': quizPoll\n        }),\n        open: true,\n        transitionDuration: 0,\n        onClose: this.handleClose,\n        \"aria-labelledby\": \"dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 484\n        },\n        __self: this\n      }, React.createElement(DialogTitle, {\n        id: \"dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 490\n        },\n        __self: this\n      }, t('NewPoll')), React.createElement(DialogContent, {\n        classes: {\n          root: 'create-poll-dialog-root'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 491\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"create-poll-dialog-question-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 492\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        color: \"primary\",\n        variant: \"subtitle1\",\n        style: {\n          flexGrow: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493\n        },\n        __self: this\n      }, t('Question')), remainLength <= POLL_QUESTION_LENGTH - POLL_QUESTION_HINT_LENGTH && React.createElement(Typography, {\n        color: remainLength >= 0 ? 'textSecondary' : 'error',\n        variant: \"subtitle1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497\n        },\n        __self: this\n      }, remainLength)), React.createElement(\"div\", {\n        ref: this.questionRef,\n        id: \"create-poll-dialog-question\",\n        contentEditable: true,\n        suppressContentEditableWarning: true,\n        placeholder: t('QuestionHint'),\n        \"data-length\": POLL_QUESTION_LENGTH,\n        \"data-max-length\": POLL_QUESTION_MAX_LENGTH,\n        onPaste: this.handlePaste,\n        onKeyDown: this.handleKeyDown,\n        onInput: this.handleInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 502\n        },\n        __self: this\n      }), React.createElement(Divider, {\n        className: \"divider\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 514\n        },\n        __self: this\n      }), React.createElement(Typography, {\n        color: \"primary\",\n        variant: \"subtitle1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 515\n        },\n        __self: this\n      }, t('PollOptions')), React.createElement(List, {\n        classes: {\n          root: 'create-poll-dialog-list'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518\n        },\n        __self: this\n      }, items, canAddOption && React.createElement(ListItem, {\n        selected: false,\n        className: \"create-poll-add-option\",\n        button: true,\n        onClick: this.handleAddOption,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 521\n        },\n        __self: this\n      }, React.createElement(ListItemText, {\n        disableTypography: true,\n        primary: t('AddAnOption'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 526\n        },\n        __self: this\n      }))), React.createElement(Typography, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 530\n        },\n        __self: this\n      }, hint), React.createElement(Divider, {\n        className: \"divider\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 531\n        },\n        __self: this\n      }), React.createElement(Typography, {\n        color: \"primary\",\n        variant: \"subtitle1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 532\n        },\n        __self: this\n      }, t('Settings')), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 535\n        },\n        __self: this\n      }, React.createElement(FormControlLabel, {\n        control: React.createElement(Checkbox, {\n          color: \"primary\",\n          checked: is_anonymous,\n          onChange: this.handleChangeAnonymous,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 538\n          },\n          __self: this\n        }),\n        label: t('PollAnonymous'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 536\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        onClick: this.handleAllowMultipleAnswersClick,\n        style: {\n          background: 'transparent'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 546\n        },\n        __self: this\n      }, React.createElement(FormControlLabel, {\n        control: React.createElement(Checkbox, {\n          color: \"primary\",\n          disabled: allowMultipleAnswersDisabled,\n          checked: allowMultipleAnswers,\n          onChange: this.handleChangeAllowMultipleAnswers,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 549\n          },\n          __self: this\n        }),\n        label: t('PollMultiple'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 547\n        },\n        __self: this\n      })), React.createElement(FormControlLabel, {\n        control: React.createElement(Checkbox, {\n          color: \"primary\",\n          checked: quizPoll,\n          onChange: this.handleChangeType,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 561\n          },\n          __self: this\n        }),\n        label: t('PollQuiz'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 559\n        },\n        __self: this\n      })), React.createElement(Typography, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 566\n        },\n        __self: this\n      }, t('QuizInfo'))), React.createElement(DialogActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 568\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.handleClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 569\n        },\n        __self: this\n      }, t('Cancel')), isValidPoll(poll) && React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.handleSend,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 573\n        },\n        __self: this\n      }, t('Create')))), React.createElement(Dialog, {\n        className: \"create-poll-dialog-root\",\n        open: confirm,\n        transitionDuration: 0,\n        onClose: this.handleConfirmationClose,\n        \"aria-labelledby\": \"dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 579\n        },\n        __self: this\n      }, React.createElement(DialogTitle, {\n        id: \"dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 585\n        },\n        __self: this\n      }, t('CancelPollAlertTitle')), React.createElement(DialogContent, {\n        classes: {\n          root: 'create-poll-dialog-root'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 586\n        },\n        __self: this\n      }, t('CancelPollAlertText')), React.createElement(DialogActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 589\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.handleConfirmationClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 590\n        },\n        __self: this\n      }, t('Cancel')), React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.handleConfirmationDone,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 593\n        },\n        __self: this\n      }, t('Ok')))));\n    }\n  }]);\n\n  return CreatePollDialog;\n}(React.Component);\n\nCreatePollDialog.propTypes = {\n  onSend: PropTypes.func.isRequired\n};\nvar enhance = compose(withSaveRef(), withTranslation(), withSnackbar, withRestoreRef());\nexport default enhance(CreatePollDialog);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Popup/CreatePollDialog.js"],"names":["React","PropTypes","classNames","withSnackbar","withRestoreRef","withSaveRef","compose","withTranslation","Button","Checkbox","CloseIcon","Dialog","DialogActions","DialogContent","DialogTitle","Divider","FormControlLabel","FormGroup","IconButton","List","ListItem","ListItemText","Typography","CreatePollOption","focusNode","utils","hasPollData","isValidPoll","NOTIFICATION_AUTO_HIDE_DURATION_MS","POLL_OPTIONS_MAX_COUNT","POLL_QUESTION_HINT_LENGTH","POLL_QUESTION_LENGTH","POLL_QUESTION_MAX_LENGTH","AppStore","PollStore","TdLibController","CreatePollDialog","props","handleClientUpdateNewPoll","update","poll","setState","confirm","remainLength","handleClientUpdatePollQuestion","node","questionRef","current","length","dataset","innerText","handleClientUpdatePoll","handleClientUpdateNewPollOption","setTimeout","optionsRefMap","get","options","focus","handleKeyDown","event","maxLength","hasSelection","selection","window","getSelection","isSpecial","isNavigational","toString","key","shiftKey","handleFocusNextOption","preventDefault","isCollapsed","lastChild","childNodes","anchorNode","anchorOffset","handlePaste","selectionString","pasteText","clipboardData","getData","substr","document","execCommand","handleInput","innerHtml","innerHTML","clientUpdate","question","handleAddOption","state","option","id","Date","now","text","handleDeleteOption","backspace","handleDeleteByBackspace","handleDelete","index","findIndex","x","prevIndex","deleteOption","i","prevNode","element","handleFocusPrevOption","nextIndex","nextNode","getHint","addCount","handleClose","handleConfirmationDone","handleSend","onSend","inputMessagePoll","getInputMessagePoll","handleConfirmationClose","handleChangeAnonymous","handleChangeAllowMultipleAnswers","handleChangeType","handleScheduledAction","message","action","enqueueSnackbar","TRANSITION_DELAY","addScheduledAction","autoHideDuration","removeScheduledAction","handleAllowMultipleAnswersClick","t","quizPoll","type","stopPropagation","createRef","Map","on","off","prevProps","prevState","snapshot","is_anonymous","allowMultipleAnswers","allow_multiple_answers","allowMultipleAnswersDisabled","clear","items","map","el","set","canAddOption","hint","root","flexGrow","background","Component","propTypes","func","isRequired","enhance"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withSnackbar } from 'notistack';\nimport { withRestoreRef, withSaveRef, compose } from '../../Utils/HOC';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport CloseIcon from '../../Assets/Icons/Close';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Divider from '@material-ui/core/Divider';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Typography from '@material-ui/core/Typography';\nimport CreatePollOption from './CreatePollOption';\nimport { focusNode } from '../../Utils/Component';\nimport { utils } from '../../Utils/Key';\nimport { hasPollData, isValidPoll } from '../../Utils/Poll';\nimport {\n    NOTIFICATION_AUTO_HIDE_DURATION_MS,\n    POLL_OPTIONS_MAX_COUNT,\n    POLL_QUESTION_HINT_LENGTH,\n    POLL_QUESTION_LENGTH,\n    POLL_QUESTION_MAX_LENGTH\n} from '../../Constants';\nimport AppStore from '../../Stores/ApplicationStore';\nimport PollStore from '../../Stores/PollStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './CreatePollDialog.css';\n\nclass CreatePollDialog extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.questionRef = React.createRef();\n        this.optionsRefMap = new Map();\n\n        this.state = {\n            poll: null,\n            confirm: false,\n            remainLength: POLL_QUESTION_MAX_LENGTH\n        };\n    }\n\n    componentDidMount() {\n        PollStore.on('clientUpdatePollChooseOption', this.handleClientUpdatePoll);\n        PollStore.on('clientUpdatePollChangeAnonymous', this.handleClientUpdatePoll);\n        PollStore.on('clientUpdatePollChangeAllowMultipleAnswers', this.handleClientUpdatePoll);\n        PollStore.on('clientUpdatePollChangeType', this.handleClientUpdatePoll);\n        PollStore.on('clientUpdateDeletePoll', this.handleClientUpdatePoll);\n        PollStore.on('clientUpdateDeletePollOption', this.handleClientUpdatePoll);\n        PollStore.on('clientUpdateNewPoll', this.handleClientUpdateNewPoll);\n        PollStore.on('clientUpdateNewPollOption', this.handleClientUpdateNewPollOption);\n        PollStore.on('clientUpdatePollOption', this.handleClientUpdatePoll);\n        PollStore.on('clientUpdatePollQuestion', this.handleClientUpdatePollQuestion);\n    }\n\n    componentWillUnmount() {\n        PollStore.off('clientUpdatePollChooseOption', this.handleClientUpdatePoll);\n        PollStore.off('clientUpdatePollChangeAnonymous', this.handleClientUpdatePoll);\n        PollStore.off('clientUpdatePollChangeAllowMultipleAnswers', this.handleClientUpdatePoll);\n        PollStore.off('clientUpdatePollChangeType', this.handleClientUpdatePoll);\n        PollStore.off('clientUpdateDeletePoll', this.handleClientUpdatePoll);\n        PollStore.off('clientUpdateDeletePollOption', this.handleClientUpdatePoll);\n        PollStore.off('clientUpdateNewPoll', this.handleClientUpdateNewPoll);\n        PollStore.off('clientUpdateNewPollOption', this.handleClientUpdateNewPollOption);\n        PollStore.off('clientUpdatePollOption', this.handleClientUpdatePoll);\n        PollStore.off('clientUpdatePollQuestion', this.handleClientUpdatePollQuestion);\n    }\n\n    handleClientUpdateNewPoll = update => {\n        const { poll } = PollStore;\n\n        this.setState({\n            confirm: false,\n            remainLength: POLL_QUESTION_MAX_LENGTH,\n            poll\n        });\n    };\n\n    handleClientUpdatePollQuestion = update => {\n        const { poll } = PollStore;\n\n        const node = this.questionRef.current;\n        const length = node.dataset.length;\n        const innerText = node.innerText;\n\n        this.setState({\n            remainLength: length - innerText.length,\n            poll\n        });\n    };\n\n    handleClientUpdatePoll = update => {\n        const { poll } = PollStore;\n\n        this.setState({ poll });\n    };\n\n    handleClientUpdateNewPollOption = update => {\n        const { poll } = PollStore;\n\n        this.setState({ poll }, () => {\n            setTimeout(() => {\n                const node = this.optionsRefMap.get(poll.options.length - 1);\n\n                node.focus(true);\n            });\n        });\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const { poll } = this.state;\n\n        if (poll && !prevState.poll) {\n            setTimeout(() => {\n                focusNode(this.questionRef.current, true);\n            }, 0);\n        }\n    }\n\n    handleKeyDown = event => {\n        const node = this.questionRef.current;\n        const maxLength = node.dataset.maxLength;\n        const innerText = node.innerText;\n        const length = innerText.length;\n\n        let hasSelection = false;\n        const selection = window.getSelection();\n        const isSpecial = utils.isSpecial(event);\n        const isNavigational = utils.isNavigational(event);\n\n        if (selection) {\n            hasSelection = !!selection.toString();\n        }\n\n        switch (event.key) {\n            case 'Enter': {\n                if (!event.shiftKey) {\n                    this.handleFocusNextOption(0);\n\n                    event.preventDefault();\n                    return false;\n                }\n\n                break;\n            }\n            case 'ArrowDown': {\n                const selection = window.getSelection();\n                if (!selection) break;\n                if (!selection.isCollapsed) break;\n\n                const lastChild =\n                    node.childNodes && node.childNodes.length > 0 ? node.childNodes[node.childNodes.length - 1] : null;\n\n                if (!lastChild || (selection.anchorNode === lastChild && selection.anchorOffset === lastChild.length)) {\n                    this.handleFocusNextOption(0);\n\n                    event.preventDefault();\n                    return false;\n                }\n\n                break;\n            }\n        }\n\n        if (isSpecial || isNavigational) {\n            return true;\n        }\n\n        if (length >= maxLength && !hasSelection) {\n            event.preventDefault();\n            return false;\n        }\n\n        return true;\n    };\n\n    handlePaste = event => {\n        event.preventDefault();\n\n        const node = this.questionRef.current;\n        const maxLength = node.dataset.maxLength;\n\n        const selection = window.getSelection();\n        const selectionString = selection ? selection.toString() : '';\n\n        const innerText = node.innerText;\n        if (innerText.length - selection.length >= maxLength) return;\n\n        let pasteText = event.clipboardData.getData('text/plain');\n        if (!pasteText) return;\n\n        if (innerText.length - selectionString.length + pasteText.length > maxLength) {\n            pasteText = pasteText.substr(0, maxLength - innerText.length + selectionString.length);\n        }\n        document.execCommand('insertText', false, pasteText);\n    };\n\n    handleInput = event => {\n        event.preventDefault();\n\n        const node = this.questionRef.current;\n        //const length = node.dataset.length;\n\n        const innerText = node.innerText;\n        const innerHtml = node.innerHTML;\n\n        if (innerHtml === '<br>') {\n            node.innerText = '';\n        }\n\n        // this.setState({\n        //     remainLength: length - innerText.length\n        // });\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdatePollQuestion',\n            question: innerText\n        });\n    };\n\n    handleAddOption = () => {\n        const { poll } = this.state;\n        if (!poll) return;\n\n        const { options } = poll;\n        if (options.length >= POLL_OPTIONS_MAX_COUNT) return;\n\n        const option = {\n            id: Date.now(),\n            text: ''\n        };\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateNewPollOption',\n            option\n        });\n    };\n\n    handleDeleteOption = (id, backspace = false) => {\n        if (backspace) {\n            this.handleDeleteByBackspace(id);\n        } else {\n            this.handleDelete(id);\n        }\n    };\n\n    handleDelete = id => {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateDeletePollOption',\n            id\n        });\n    };\n\n    handleDeleteByBackspace = id => {\n        const { poll } = this.state;\n        if (!poll) return;\n\n        const { options } = poll;\n\n        const index = options.findIndex(x => x.id === id);\n        const prevIndex = index - 1;\n        let deleteOption = true;\n        for (let i = index; i < options.length; i++) {\n            const { text } = options[i];\n            if (text) {\n                deleteOption = false;\n                break;\n            }\n        }\n\n        if (deleteOption) {\n            this.handleDeleteOption(id);\n        }\n\n        const prevNode = this.optionsRefMap.get(prevIndex);\n        if (!prevNode) {\n            const element = this.questionRef.current;\n\n            focusNode(element, true);\n            return;\n        }\n\n        prevNode.focus(true);\n    };\n\n    handleFocusPrevOption = id => {\n        const { poll } = this.state;\n        if (!poll) return;\n\n        const { options } = poll;\n\n        const index = options.findIndex(x => x.id === id);\n        const prevIndex = index - 1;\n\n        const prevNode = this.optionsRefMap.get(prevIndex);\n        if (!prevNode) {\n            const element = this.questionRef.current;\n\n            focusNode(element, false);\n            return;\n        }\n\n        prevNode.focus(false);\n    };\n\n    handleFocusNextOption = id => {\n        const { poll } = this.state;\n        if (!poll) return;\n\n        const { options } = poll;\n\n        const index = options.findIndex(x => x.id === id);\n        const nextIndex = index + 1;\n\n        const nextNode = this.optionsRefMap.get(nextIndex);\n        if (!nextNode) {\n            const text = index >= 0 && index < options.length ? options[index].text : '';\n            if (options.length && !text) {\n                return;\n            }\n\n            this.handleAddOption();\n            return;\n        }\n\n        nextNode.focus(nextNode, true);\n    };\n\n    getHint = () => {\n        const { poll } = this.state;\n        if (!poll) return;\n\n        const { options } = poll;\n\n        const addCount = POLL_OPTIONS_MAX_COUNT - options.length;\n\n        if (addCount <= 0) {\n            return 'You have added the maximum number of options.';\n        }\n        if (addCount === 1) {\n            return 'You can add 1 more option.';\n        }\n\n        return `You can add ${POLL_OPTIONS_MAX_COUNT - options.length} more options.`;\n    };\n\n    handleClose = () => {\n        const { poll } = this.state;\n\n        if (hasPollData(poll)) {\n            this.setState({ confirm: true });\n        } else {\n            this.handleConfirmationDone();\n        }\n    };\n\n    handleSend = () => {\n        const { onSend } = this.props;\n\n        const inputMessagePoll = PollStore.getInputMessagePoll();\n        if (!inputMessagePoll) return;\n\n        onSend(inputMessagePoll);\n\n        this.handleConfirmationDone();\n    };\n\n    handleConfirmationClose = () => {\n        this.setState({ confirm: false });\n    };\n\n    handleConfirmationDone = () => {\n        this.handleConfirmationClose();\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateDeletePoll'\n        });\n    };\n\n    handleChangeAnonymous = () => {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdatePollChangeAnonymous'\n        });\n    };\n\n    handleChangeAllowMultipleAnswers = () => {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdatePollChangeAllowMultipleAnswers'\n        });\n    };\n\n    handleChangeType = () => {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdatePollChangeType'\n        });\n    };\n\n    handleScheduledAction = (key, message, action) => {\n        if (!key) return;\n\n        const { enqueueSnackbar } = this.props;\n        if (!enqueueSnackbar) return;\n\n        const TRANSITION_DELAY = 150;\n        if (AppStore.addScheduledAction(key, NOTIFICATION_AUTO_HIDE_DURATION_MS + 2 * TRANSITION_DELAY, action)) {\n            enqueueSnackbar(message, {\n                autoHideDuration: NOTIFICATION_AUTO_HIDE_DURATION_MS,\n                action: [\n                    <IconButton\n                        key='close'\n                        aria-label='Close'\n                        color='inherit'\n                        className='notification-close-button'\n                        onClick={() => AppStore.removeScheduledAction(key)}>\n                        <CloseIcon />\n                    </IconButton>\n                ]\n            });\n        }\n    };\n\n    handleAllowMultipleAnswersClick = event => {\n        const { t } = this.props;\n        const { poll } = this.state;\n        if (!poll) return;\n\n        const quizPoll = poll.type['@type'] === 'pollTypeQuiz';\n        if (quizPoll) {\n            event.stopPropagation();\n\n            const key = 'disallow_multiple_answers';\n            const message = t('PollQuizOneRightAnswer');\n            const action = null;\n\n            this.handleScheduledAction(key, message, action);\n        }\n    };\n\n    render() {\n        const { t } = this.props;\n        const { remainLength, confirm, poll } = this.state;\n        if (!poll) return null;\n\n        const { is_anonymous } = poll;\n\n        const options = poll ? poll.options : [];\n        const allowMultipleAnswers = poll.type.allow_multiple_answers;\n        const allowMultipleAnswersDisabled = poll.type['@type'] !== 'pollTypeRegular';\n        const quizPoll = poll.type['@type'] === 'pollTypeQuiz';\n\n        this.optionsRefMap.clear();\n        const items = options.map((x, i) => (\n            <CreatePollOption\n                ref={el => this.optionsRefMap.set(i, el)}\n                key={x.id}\n                option={x}\n                onDelete={this.handleDeleteOption}\n                onFocusPrev={this.handleFocusPrevOption}\n                onFocusNext={this.handleFocusNextOption}\n            />\n        ));\n\n        const canAddOption = POLL_OPTIONS_MAX_COUNT - options.length > 0;\n        const hint = this.getHint();\n\n        return (\n            <>\n                <Dialog\n                    className={classNames('create-poll-dialog', { 'create-quiz-dialog': quizPoll })}\n                    open\n                    transitionDuration={0}\n                    onClose={this.handleClose}\n                    aria-labelledby='dialog-title'>\n                    <DialogTitle id='dialog-title'>{t('NewPoll')}</DialogTitle>\n                    <DialogContent classes={{ root: 'create-poll-dialog-root' }}>\n                        <div className='create-poll-dialog-question-title'>\n                            <Typography color='primary' variant='subtitle1' style={{ flexGrow: 1 }}>\n                                {t('Question')}\n                            </Typography>\n                            {remainLength <= POLL_QUESTION_LENGTH - POLL_QUESTION_HINT_LENGTH && (\n                                <Typography color={remainLength >= 0 ? 'textSecondary' : 'error'} variant='subtitle1'>\n                                    {remainLength}\n                                </Typography>\n                            )}\n                        </div>\n                        <div\n                            ref={this.questionRef}\n                            id='create-poll-dialog-question'\n                            contentEditable\n                            suppressContentEditableWarning\n                            placeholder={t('QuestionHint')}\n                            data-length={POLL_QUESTION_LENGTH}\n                            data-max-length={POLL_QUESTION_MAX_LENGTH}\n                            onPaste={this.handlePaste}\n                            onKeyDown={this.handleKeyDown}\n                            onInput={this.handleInput}\n                        />\n                        <Divider className='divider' />\n                        <Typography color='primary' variant='subtitle1'>\n                            {t('PollOptions')}\n                        </Typography>\n                        <List classes={{ root: 'create-poll-dialog-list' }}>\n                            {items}\n                            {canAddOption && (\n                                <ListItem\n                                    selected={false}\n                                    className='create-poll-add-option'\n                                    button\n                                    onClick={this.handleAddOption}>\n                                    <ListItemText disableTypography primary={t('AddAnOption')} />\n                                </ListItem>\n                            )}\n                        </List>\n                        <Typography>{hint}</Typography>\n                        <Divider className='divider' />\n                        <Typography color='primary' variant='subtitle1'>\n                            {t('Settings')}\n                        </Typography>\n                        <FormGroup>\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        color='primary'\n                                        checked={is_anonymous}\n                                        onChange={this.handleChangeAnonymous}\n                                    />\n                                }\n                                label={t('PollAnonymous')}\n                            />\n                            <div onClick={this.handleAllowMultipleAnswersClick} style={{ background: 'transparent' }}>\n                                <FormControlLabel\n                                    control={\n                                        <Checkbox\n                                            color='primary'\n                                            disabled={allowMultipleAnswersDisabled}\n                                            checked={allowMultipleAnswers}\n                                            onChange={this.handleChangeAllowMultipleAnswers}\n                                        />\n                                    }\n                                    label={t('PollMultiple')}\n                                />\n                            </div>\n                            <FormControlLabel\n                                control={\n                                    <Checkbox color='primary' checked={quizPoll} onChange={this.handleChangeType} />\n                                }\n                                label={t('PollQuiz')}\n                            />\n                        </FormGroup>\n                        <Typography>{t('QuizInfo')}</Typography>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button color='primary' onClick={this.handleClose}>\n                            {t('Cancel')}\n                        </Button>\n                        {isValidPoll(poll) && (\n                            <Button color='primary' onClick={this.handleSend}>\n                                {t('Create')}\n                            </Button>\n                        )}\n                    </DialogActions>\n                </Dialog>\n                <Dialog\n                    className='create-poll-dialog-root'\n                    open={confirm}\n                    transitionDuration={0}\n                    onClose={this.handleConfirmationClose}\n                    aria-labelledby='dialog-title'>\n                    <DialogTitle id='dialog-title'>{t('CancelPollAlertTitle')}</DialogTitle>\n                    <DialogContent classes={{ root: 'create-poll-dialog-root' }}>\n                        {t('CancelPollAlertText')}\n                    </DialogContent>\n                    <DialogActions>\n                        <Button color='primary' onClick={this.handleConfirmationClose}>\n                            {t('Cancel')}\n                        </Button>\n                        <Button color='primary' onClick={this.handleConfirmationDone}>\n                            {t('Ok')}\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </>\n        );\n    }\n}\n\nCreatePollDialog.propTypes = {\n    onSend: PropTypes.func.isRequired\n};\n\nconst enhance = compose(\n    withSaveRef(),\n    withTranslation(),\n    withSnackbar,\n    withRestoreRef()\n);\n\nexport default enhance(CreatePollDialog);\n"]},"metadata":{},"sourceType":"module"}