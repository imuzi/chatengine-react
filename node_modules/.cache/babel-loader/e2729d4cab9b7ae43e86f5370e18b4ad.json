{"ast":null,"code":"import _defineProperty from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnLeft/Search/Search.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport KeyboardManager, { KeyboardHandler } from '../../Additional/KeyboardManager';\nimport CloseIcon from '../../../Assets/Icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport Chat from '../../Tile/Chat';\nimport TopChat from '../../Tile/TopChat';\nimport RecentlyFoundChat from '../../Tile/RecentlyFoundChat';\nimport FoundPublicChat from '../../Tile/FoundPublicChat';\nimport FoundMessage from '../../Tile/FoundMessage';\nimport SectionHeader from '../SectionHeader';\nimport { loadChatsContent, loadUsersContent } from '../../../Utils/File';\nimport { filterDuplicateMessages } from '../../../Utils/Message';\nimport { getCyrillicInput, getLatinInput } from '../../../Utils/Language';\nimport { orderCompare } from '../../../Utils/Common';\nimport { SCROLL_PRECISION, USERNAME_LENGTH_MIN } from '../../../Constants';\nimport ChatStore from '../../../Stores/ChatStore';\nimport FileStore from '../../../Stores/FileStore';\nimport MessageStore from '../../../Stores/MessageStore';\nimport UserStore from '../../../Stores/UserStore';\nimport TdLibController from '../../../Controllers/TdLibController';\nimport './Search.css';\n\nvar Search =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Search, _React$Component);\n\n  function Search(props) {\n    var _this;\n\n    _classCallCheck(this, Search);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Search).call(this, props));\n\n    _this.handleKeyDown = function (event) {\n      switch (event.key) {\n        case 'Escape':\n          event.preventDefault();\n          event.stopPropagation();\n          event.target.blur();\n\n          _this.handleClose();\n\n          break;\n      }\n    };\n\n    _this.concatSearchResults = function (results) {\n      var arr = [];\n      var map = new Map();\n\n      for (var i = 0; i < results.length; i++) {\n        var result = results[i] && results[i].chat_ids;\n\n        if (result) {\n          for (var j = 0; j < result.length; j++) {\n            if (!map.has(result[j])) {\n              map.set(result[j], result[j]);\n              arr.push(result[j]);\n            }\n          }\n        }\n      }\n\n      arr.sort(function (a, b) {\n        return orderCompare(ChatStore.get(b).order, ChatStore.get(a).order);\n      });\n      return arr;\n    };\n\n    _this.searchText =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(text) {\n        var sessionId, store, chatId, savedMessages, promises, localPromise, latinText, latinLocalPromise, cyrillicText, cyrillicLocalPromise, results, local, t, searchText, savedMessagesStrings, trimmedText, globalPromises, globalPromise, latinTrimmedText, globalLatinPromise, globalResults, global, messages, linkMessage, messageLinkInfo, chats, users, i, _linkMessage, chat_id, sender_user_id;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this.sessionId = new Date();\n                _this.text = text;\n                sessionId = _this.sessionId;\n                store = null; // console.log('[se] searchText=' + text);\n\n                chatId = _this.props.chatId;\n                savedMessages = _this.state.savedMessages;\n\n                if (chatId) {\n                  _context.next = 43;\n                  break;\n                }\n\n                promises = [];\n                localPromise = TdLibController.send({\n                  '@type': 'searchChats',\n                  query: text,\n                  limit: 100\n                });\n                promises.push(localPromise);\n                latinText = getLatinInput(text);\n\n                if (latinText && latinText !== text) {\n                  latinLocalPromise = TdLibController.send({\n                    '@type': 'searchChats',\n                    query: latinText,\n                    limit: 100\n                  });\n                  promises.push(latinLocalPromise);\n                }\n\n                cyrillicText = getCyrillicInput(text);\n\n                if (cyrillicText && cyrillicText !== text) {\n                  cyrillicLocalPromise = TdLibController.send({\n                    '@type': 'searchChats',\n                    query: cyrillicText,\n                    limit: 100\n                  });\n                  promises.push(cyrillicLocalPromise);\n                }\n\n                _context.next = 16;\n                return Promise.all(promises.map(function (x) {\n                  return x.catch(function (e) {\n                    return null;\n                  });\n                }));\n\n              case 16:\n                results = _context.sent;\n                local = _this.concatSearchResults(results);\n\n                if (!(sessionId !== _this.sessionId)) {\n                  _context.next = 20;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 20:\n                if (savedMessages) {\n                  t = _this.props.t;\n                  searchText = text.toUpperCase();\n                  savedMessagesStrings = ['SAVED MESSAGES', t('SavedMessages').toUpperCase()];\n\n                  if (savedMessagesStrings.some(function (el) {\n                    return el.includes(searchText);\n                  }) || latinText && savedMessagesStrings.some(function (el) {\n                    return el.includes(latinText.toUpperCase());\n                  })) {\n                    local.splice(0, 0, savedMessages.id);\n                  }\n                }\n\n                _this.setState({\n                  top: null,\n                  recentlyFound: null,\n                  local: local\n                });\n\n                store = FileStore.getStore();\n                loadChatsContent(store, local);\n                trimmedText = text.trim();\n                trimmedText = trimmedText.startsWith('@') ? trimmedText.substr(1) : trimmedText;\n\n                if (!(trimmedText.length >= USERNAME_LENGTH_MIN)) {\n                  _context.next = 42;\n                  break;\n                }\n\n                globalPromises = [];\n                globalPromise = TdLibController.send({\n                  '@type': 'searchPublicChats',\n                  query: trimmedText\n                });\n                globalPromises.push(globalPromise);\n\n                if (latinText) {\n                  latinTrimmedText = latinText.trim();\n                  latinTrimmedText = latinTrimmedText.startsWith('@') ? latinTrimmedText.substr(1) : latinTrimmedText;\n\n                  if (latinTrimmedText.length >= USERNAME_LENGTH_MIN && latinTrimmedText !== trimmedText) {\n                    globalLatinPromise = TdLibController.send({\n                      '@type': 'searchPublicChats',\n                      query: latinTrimmedText\n                    });\n                    globalPromises.push(globalLatinPromise);\n                  }\n                }\n\n                _context.next = 33;\n                return Promise.all(globalPromises.map(function (x) {\n                  return x.catch(function (e) {\n                    return null;\n                  });\n                }));\n\n              case 33:\n                globalResults = _context.sent;\n                global = _this.concatSearchResults(globalResults);\n\n                if (!(sessionId !== _this.sessionId)) {\n                  _context.next = 37;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 37:\n                _this.setState({\n                  global: global\n                });\n\n                store = FileStore.getStore();\n                loadChatsContent(store, global);\n                _context.next = 43;\n                break;\n\n              case 42:\n                _this.setState({\n                  global: null\n                });\n\n              case 43:\n                messages = [];\n\n                if (!chatId) {\n                  _context.next = 50;\n                  break;\n                }\n\n                _context.next = 47;\n                return TdLibController.send({\n                  '@type': 'searchChatMessages',\n                  chat_id: chatId,\n                  query: text,\n                  sender_user_id: 0,\n                  from_message_id: 0,\n                  offset: 0,\n                  limit: 50,\n                  filter: null\n                });\n\n              case 47:\n                messages = _context.sent;\n                _context.next = 53;\n                break;\n\n              case 50:\n                _context.next = 52;\n                return TdLibController.send({\n                  '@type': 'searchMessages',\n                  query: text,\n                  offset_date: 0,\n                  offset_chat_id: 0,\n                  offset_message_id: 0,\n                  limit: 50\n                });\n\n              case 52:\n                messages = _context.sent;\n\n              case 53:\n                MessageStore.setItems(messages.messages);\n                linkMessage = null;\n\n                if (chatId) {\n                  _context.next = 67;\n                  break;\n                }\n\n                _context.prev = 56;\n                _context.next = 59;\n                return TdLibController.send({\n                  '@type': 'getMessageLinkInfo',\n                  url: text\n                });\n\n              case 59:\n                messageLinkInfo = _context.sent;\n                // console.log('[se] searchText=' + text + ' messageLinkInfo', messageLinkInfo);\n                MessageStore.setItems([messageLinkInfo.message]);\n                linkMessage = messageLinkInfo;\n                _context.next = 67;\n                break;\n\n              case 64:\n                _context.prev = 64;\n                _context.t0 = _context[\"catch\"](56);\n                console.log('[se] searchText=' + text + ' messageLinkInfo error', _context.t0);\n\n              case 67:\n                if (!(sessionId !== _this.sessionId)) {\n                  _context.next = 69;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 69:\n                // console.log('[se] searchText=' + text + ' result session', messages, linkMessage);\n                _this.setState({\n                  messages: messages,\n                  linkMessage: linkMessage\n                });\n\n                chats = new Map();\n                users = new Map();\n\n                for (i = 0; i < messages.messages.length; i++) {\n                  chats.set(messages.messages[i].chat_id, messages.messages[i].chat_id);\n\n                  if (messages.messages[i].sender_user_id) {\n                    users.set(messages.messages[i].sender_user_id, messages.messages[i].sender_user_id);\n                  }\n                }\n\n                if (linkMessage) {\n                  _linkMessage = linkMessage, chat_id = _linkMessage.chat_id, sender_user_id = _linkMessage.sender_user_id;\n                  chats.set(chat_id, chat_id);\n\n                  if (sender_user_id) {\n                    users.set(sender_user_id, sender_user_id);\n                  }\n                }\n\n                store = FileStore.getStore();\n                loadChatsContent(store, _toConsumableArray(chats.keys()));\n                loadUsersContent(store, _toConsumableArray(users.keys()));\n\n              case 77:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[56, 64]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.loadContent =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var chatId, topPromise, recentlyFoundPromise, savedMessagesPromise, _ref3, _ref4, top, recentlyFound, savedMessages, store;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              chatId = _this.props.chatId;\n\n              if (!chatId) {\n                _context2.next = 4;\n                break;\n              }\n\n              _this.setState({\n                top: null,\n                recentlyFound: null,\n                local: null,\n                global: null,\n                messages: null,\n                linkMessage: null\n              });\n\n              return _context2.abrupt(\"return\");\n\n            case 4:\n              topPromise = TdLibController.send({\n                '@type': 'getTopChats',\n                category: {\n                  '@type': 'topChatCategoryUsers'\n                },\n                limit: 30\n              }).catch(function () {\n                return {\n                  '@type': 'chats',\n                  chat_ids: []\n                };\n              });\n              recentlyFoundPromise = TdLibController.send({\n                '@type': 'searchChats',\n                query: '',\n                limit: 100\n              }).catch(function () {\n                return {\n                  '@type': 'chats',\n                  chat_ids: []\n                };\n              });\n              savedMessagesPromise = TdLibController.send({\n                '@type': 'createPrivateChat',\n                user_id: UserStore.getMyId(),\n                force: true\n              }).catch(function (error) {});\n              _context2.next = 9;\n              return Promise.all([topPromise, recentlyFoundPromise, savedMessagesPromise]);\n\n            case 9:\n              _ref3 = _context2.sent;\n              _ref4 = _slicedToArray(_ref3, 3);\n              top = _ref4[0];\n              recentlyFound = _ref4[1];\n              savedMessages = _ref4[2];\n\n              _this.setState({\n                top: top,\n                recentlyFound: recentlyFound,\n                savedMessages: savedMessages,\n                local: null,\n                global: null,\n                messages: null,\n                linkMessage: null\n              });\n\n              store = FileStore.getStore();\n              loadChatsContent(store, top.chat_ids);\n              loadChatsContent(store, recentlyFound.chat_ids);\n\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    _this.handleClearRecentlyFound = function (event) {\n      event.stopPropagation();\n      TdLibController.send({\n        '@type': 'clearRecentlyFoundChats'\n      });\n\n      _this.setState({\n        recentlyFound: null\n      });\n    };\n\n    _this.handleSelectMessage = function (chatId, messageId, addToRecent, keepOpen) {\n      var onSelectMessage = _this.props.onSelectMessage;\n\n      if (addToRecent) {\n        TdLibController.send({\n          '@type': 'addRecentlyFoundChat',\n          chat_id: chatId\n        });\n      }\n\n      onSelectMessage(chatId, messageId, keepOpen);\n    };\n\n    _this.handleScroll = function () {\n      var list = _this.listRef.current;\n\n      if (list.scrollTop + list.offsetHeight >= list.scrollHeight - SCROLL_PRECISION) {\n        _this.onLoadPrevious();\n      }\n    };\n\n    _this.getOffset = function (messages) {\n      var length = messages ? messages.messages.length : 0;\n      var offsetDate = length > 0 ? messages.messages[length - 1].date : 0;\n      var offsetChatId = length > 0 ? messages.messages[length - 1].chat_id : 0;\n      var offsetMessageId = length > 0 ? messages.messages[length - 1].id : 0;\n      return {\n        offset_date: offsetDate,\n        offset_chat_id: offsetChatId,\n        offset_message_id: offsetMessageId\n      };\n    };\n\n    _this.concatMessages = function (messages, result) {\n      if (!result) return messages;\n      if (!result.messages.length) return messages;\n      if (!messages) return result;\n      if (!messages.messages.length) return result;\n      return {\n        total_count: result.total_count,\n        messages: messages.messages.concat(result.messages)\n      };\n    };\n\n    _this.onLoadPrevious =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var chatId, sessionId, messages, offset, result, chats, users, i, store;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!_this.loading) {\n                _context3.next = 2;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 2:\n              chatId = _this.props.chatId;\n              sessionId = _this.sessionId;\n              messages = _this.state.messages;\n              offset = _this.getOffset(messages);\n              _this.loading = true;\n              result = [];\n\n              if (!chatId) {\n                _context3.next = 14;\n                break;\n              }\n\n              _context3.next = 11;\n              return TdLibController.send({\n                '@type': 'searchChatMessages',\n                chat_id: chatId,\n                query: _this.text,\n                sender_user_id: 0,\n                from_message_id: offset.offset_message_id,\n                limit: 50,\n                filter: null\n              });\n\n            case 11:\n              result = _context3.sent;\n              _context3.next = 17;\n              break;\n\n            case 14:\n              _context3.next = 16;\n              return TdLibController.send(_objectSpread({\n                '@type': 'searchMessages',\n                query: _this.text\n              }, offset, {\n                limit: 50\n              }));\n\n            case 16:\n              result = _context3.sent;\n\n            case 17:\n              _this.loading = false;\n              filterDuplicateMessages(result, messages ? messages.messages : []);\n              MessageStore.setItems(result.messages);\n\n              if (!(sessionId !== _this.sessionId)) {\n                _context3.next = 22;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 22:\n              _this.setState({\n                messages: _this.concatMessages(messages, result)\n              });\n\n              chats = new Map();\n              users = new Map();\n\n              for (i = 0; i < result.messages.length; i++) {\n                chats.set(result.messages[i].chat_id, result.messages[i].chat_id);\n\n                if (result.messages[i].sender_user_id) {\n                  users.set(result.messages[i].sender_user_id, result.messages[i].sender_user_id);\n                }\n              }\n\n              store = FileStore.getStore();\n              loadChatsContent(store, _toConsumableArray(chats.keys()));\n              loadUsersContent(store, _toConsumableArray(users.keys()));\n\n            case 29:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    _this.handleTopChatsScroll = function (event) {\n      event.stopPropagation();\n    };\n\n    _this.handleClose = function () {\n      var onClose = _this.props.onClose;\n      onClose();\n    };\n\n    _this.handleDeleteRecentlyFoundChat =\n    /*#__PURE__*/\n    function () {\n      var _ref6 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(chatId) {\n        var recentlyFound;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (chatId) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 2:\n                _context4.next = 4;\n                return TdLibController.send({\n                  '@type': 'removeRecentlyFoundChat',\n                  chat_id: chatId\n                });\n\n              case 4:\n                recentlyFound = _this.state.recentlyFound;\n\n                if (recentlyFound) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 7:\n                _this.setState({\n                  recentlyFound: _objectSpread({}, recentlyFound, {\n                    chat_ids: recentlyFound.chat_ids.filter(function (x) {\n                      return x !== chatId;\n                    })\n                  })\n                });\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x2) {\n        return _ref6.apply(this, arguments);\n      };\n    }();\n\n    _this.handleDeleteTopChat =\n    /*#__PURE__*/\n    function () {\n      var _ref7 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(chatId) {\n        var top;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (chatId) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\");\n\n              case 2:\n                _context5.next = 4;\n                return TdLibController.send({\n                  '@type': 'removeTopChat',\n                  chat_id: chatId,\n                  category: {\n                    '@type': 'topChatCategoryUsers'\n                  }\n                });\n\n              case 4:\n                top = _this.state.top;\n\n                if (top) {\n                  _context5.next = 7;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\");\n\n              case 7:\n                _this.setState({\n                  top: _objectSpread({}, top, {\n                    chat_ids: top.chat_ids.filter(function (x) {\n                      return x !== chatId;\n                    })\n                  })\n                });\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x3) {\n        return _ref7.apply(this, arguments);\n      };\n    }();\n\n    _this.keyboardHandler = new KeyboardHandler(_this.handleKeyDown);\n    _this.listRef = React.createRef();\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(Search, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var text = this.props.text;\n      this.searchOrLoadContent(text);\n      KeyboardManager.add(this.keyboardHandler);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      KeyboardManager.add(this.keyboardHandler);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      var _this$props = this.props,\n          chatId = _this$props.chatId,\n          text = _this$props.text;\n\n      if (prevProps.text !== text) {\n        this.searchOrLoadContent(text);\n      } else if (prevProps.chatId !== chatId) {\n        this.searchOrLoadContent(text);\n      }\n    }\n  }, {\n    key: \"searchOrLoadContent\",\n    value: function searchOrLoadContent(text) {\n      var trimmedText = text ? text.trim() : '';\n\n      if (!trimmedText) {\n        this.loadContent();\n      } else {\n        this.searchText(trimmedText);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          chatId = _this$props2.chatId,\n          t = _this$props2.t;\n      var _this$state = this.state,\n          top = _this$state.top,\n          recentlyFound = _this$state.recentlyFound,\n          local = _this$state.local,\n          global = _this$state.global,\n          messages = _this$state.messages,\n          linkMessage = _this$state.linkMessage;\n      var chat = ChatStore.get(chatId);\n      var topChats = top && top.chat_ids ? top.chat_ids.map(function (x) {\n        return React.createElement(TopChat, {\n          key: x,\n          chatId: x,\n          onSelect: function onSelect() {\n            return _this2.handleSelectMessage(x, null, false, false);\n          },\n          onDelete: function onDelete() {\n            return _this2.handleDeleteTopChat(x);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 527\n          },\n          __self: this\n        });\n      }) : [];\n      var recentlyFoundChats = recentlyFound && recentlyFound.chat_ids ? recentlyFound.chat_ids.map(function (x) {\n        return React.createElement(RecentlyFoundChat, {\n          key: x,\n          chatId: x,\n          onClick: function onClick() {\n            return _this2.handleSelectMessage(x, null, true, false);\n          },\n          onDelete: function onDelete() {\n            return _this2.handleDeleteRecentlyFoundChat(x);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 539\n          },\n          __self: this\n        });\n      }) : [];\n      var localChats = local ? local.map(function (x) {\n        return React.createElement(RecentlyFoundChat, {\n          key: x,\n          chatId: x,\n          onClick: function onClick() {\n            return _this2.handleSelectMessage(x, null, true, false);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 550\n          },\n          __self: this\n        });\n      }) : [];\n      var globalChatsMap = new Map();\n      var globalChats = global ? global.map(function (x) {\n        globalChatsMap.set(x, x);\n        return React.createElement(FoundPublicChat, {\n          key: x,\n          chatId: x,\n          onClick: function onClick() {\n            return _this2.handleSelectMessage(x, null, true, true);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 564\n          },\n          __self: this\n        });\n      }) : [];\n      var globalLinkChat = linkMessage && linkMessage.chat_id && !linkMessage.message && !globalChatsMap.has(linkMessage.chat_id) ? React.createElement(FoundPublicChat, {\n        key: linkMessage.chat_id,\n        chatId: linkMessage.chat_id,\n        onClick: function onClick() {\n          return _this2.handleSelectMessage(linkMessage.chat_id, null, true, true);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 575\n        },\n        __self: this\n      }) : null;\n      var globalMessagesMap = new Map();\n      var globalMessages = messages && messages.messages ? messages.messages.map(function (x) {\n        var key = \"\".concat(x.chat_id, \"_\").concat(x.id);\n        globalMessagesMap.set(key, key);\n        return React.createElement(FoundMessage, {\n          key: key,\n          chatId: x.chat_id,\n          messageId: x.id,\n          chatSearch: Boolean(chatId),\n          onClick: function onClick() {\n            return _this2.handleSelectMessage(x.chat_id, x.id, false, true);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 590\n          },\n          __self: this\n        });\n      }) : [];\n      var globalLinkMessage = linkMessage && linkMessage.message && !globalMessagesMap.has(\"\".concat(linkMessage.message.chat_id, \"_\").concat(linkMessage.message.id)) ? React.createElement(FoundMessage, {\n        key: \"\".concat(linkMessage.message.chat_id, \"_\").concat(linkMessage.message.id),\n        chatId: linkMessage.message.chat_id,\n        messageId: linkMessage.message.id,\n        chatSearch: false,\n        onClick: function onClick() {\n          return _this2.handleSelectMessage(linkMessage.message.chat_id, linkMessage.message.id, false, true);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 605\n        },\n        __self: this\n      }) : null;\n      var count = messages ? messages.total_count : 0;\n\n      if (linkMessage && linkMessage.message && !globalMessagesMap.has(\"\".concat(linkMessage.message.chat_id, \"_\").concat(linkMessage.message.id))) {\n        count++;\n      }\n\n      var messagesCaption = t('NoMessages');\n\n      if (count) {\n        messagesCaption = count === 1 ? 'Found 1 message' : \"Found \".concat(count, \" messages\");\n      }\n\n      return React.createElement(\"div\", {\n        ref: this.listRef,\n        className: \"search\",\n        onScroll: this.handleScroll,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 631\n        },\n        __self: this\n      }, chat && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"sidebar-page-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 634\n        },\n        __self: this\n      }, React.createElement(SectionHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 635\n        },\n        __self: this\n      }, t('SearchMessagesIn')), React.createElement(\"div\", {\n        className: \"search-chat-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 636\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"search-chat-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 637\n        },\n        __self: this\n      }, React.createElement(Chat, {\n        chatId: chatId,\n        showStatus: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 638\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        className: \"header-right-button\",\n        \"aria-label\": \"Search\",\n        onMouseDown: this.handleClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 640\n        },\n        __self: this\n      }, React.createElement(CloseIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 644\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"sidebar-page-section-divider\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 648\n        },\n        __self: this\n      })), topChats.length > 0 && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"sidebar-page-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 653\n        },\n        __self: this\n      }, React.createElement(SectionHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 654\n        },\n        __self: this\n      }, t('ChatHints')), React.createElement(\"div\", {\n        className: \"search-top-chats-list\",\n        onScroll: this.handleTopChatsScroll,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 655\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"search-top-chats-placeholder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 656\n        },\n        __self: this\n      }), topChats, React.createElement(\"div\", {\n        className: \"search-top-chats-placeholder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 658\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"sidebar-page-section-divider\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 661\n        },\n        __self: this\n      })), recentlyFoundChats.length > 0 && React.createElement(\"div\", {\n        className: \"sidebar-page-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 665\n        },\n        __self: this\n      }, React.createElement(SectionHeader, {\n        command: t('ClearButton'),\n        onClick: this.handleClearRecentlyFound,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 666\n        },\n        __self: this\n      }, t('Recent')), recentlyFoundChats), localChats.length > 0 && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"sidebar-page-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 674\n        },\n        __self: this\n      }, React.createElement(SectionHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 675\n        },\n        __self: this\n      }, t('ChatsAndContacts')), localChats), React.createElement(\"div\", {\n        className: \"sidebar-page-section-divider\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 678\n        },\n        __self: this\n      })), globalChats.length > 0 && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"sidebar-page-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 683\n        },\n        __self: this\n      }, React.createElement(SectionHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 684\n        },\n        __self: this\n      }, t('GlobalSearch')), globalLinkChat, globalChats), React.createElement(\"div\", {\n        className: \"sidebar-page-section-divider\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 688\n        },\n        __self: this\n      })), (messages || linkMessage && linkMessage.message) && React.createElement(\"div\", {\n        className: \"sidebar-page-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 692\n        },\n        __self: this\n      }, React.createElement(SectionHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 693\n        },\n        __self: this\n      }, messagesCaption), globalLinkMessage, globalMessages));\n    }\n  }]);\n\n  return Search;\n}(React.Component);\n\nSearch.propTypes = {\n  chatId: PropTypes.number,\n  text: PropTypes.string,\n  onSelectMessage: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired\n};\nexport default withTranslation()(Search);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnLeft/Search/Search.js"],"names":["React","PropTypes","withTranslation","KeyboardManager","KeyboardHandler","CloseIcon","IconButton","Chat","TopChat","RecentlyFoundChat","FoundPublicChat","FoundMessage","SectionHeader","loadChatsContent","loadUsersContent","filterDuplicateMessages","getCyrillicInput","getLatinInput","orderCompare","SCROLL_PRECISION","USERNAME_LENGTH_MIN","ChatStore","FileStore","MessageStore","UserStore","TdLibController","Search","props","handleKeyDown","event","key","preventDefault","stopPropagation","target","blur","handleClose","concatSearchResults","results","arr","map","Map","i","length","result","chat_ids","j","has","set","push","sort","a","b","get","order","searchText","text","sessionId","Date","store","chatId","savedMessages","state","promises","localPromise","send","query","limit","latinText","latinLocalPromise","cyrillicText","cyrillicLocalPromise","Promise","all","x","catch","e","local","t","toUpperCase","savedMessagesStrings","some","el","includes","splice","id","setState","top","recentlyFound","getStore","trimmedText","trim","startsWith","substr","globalPromises","globalPromise","latinTrimmedText","globalLatinPromise","globalResults","global","messages","chat_id","sender_user_id","from_message_id","offset","filter","offset_date","offset_chat_id","offset_message_id","setItems","linkMessage","url","messageLinkInfo","message","console","log","chats","users","keys","loadContent","topPromise","category","recentlyFoundPromise","savedMessagesPromise","user_id","getMyId","force","error","handleClearRecentlyFound","handleSelectMessage","messageId","addToRecent","keepOpen","onSelectMessage","handleScroll","list","listRef","current","scrollTop","offsetHeight","scrollHeight","onLoadPrevious","getOffset","offsetDate","date","offsetChatId","offsetMessageId","concatMessages","total_count","concat","loading","handleTopChatsScroll","onClose","handleDeleteRecentlyFoundChat","handleDeleteTopChat","keyboardHandler","createRef","searchOrLoadContent","add","prevProps","prevState","snapshot","chat","topChats","recentlyFoundChats","localChats","globalChatsMap","globalChats","globalLinkChat","globalMessagesMap","globalMessages","Boolean","globalLinkMessage","count","messagesCaption","Component","propTypes","number","string","func","isRequired"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport KeyboardManager, { KeyboardHandler } from '../../Additional/KeyboardManager';\nimport CloseIcon from '../../../Assets/Icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport Chat from '../../Tile/Chat';\nimport TopChat from '../../Tile/TopChat';\nimport RecentlyFoundChat from '../../Tile/RecentlyFoundChat';\nimport FoundPublicChat from '../../Tile/FoundPublicChat';\nimport FoundMessage from '../../Tile/FoundMessage';\nimport SectionHeader from '../SectionHeader';\nimport { loadChatsContent, loadUsersContent } from '../../../Utils/File';\nimport { filterDuplicateMessages } from '../../../Utils/Message';\nimport { getCyrillicInput, getLatinInput } from '../../../Utils/Language';\nimport { orderCompare } from '../../../Utils/Common';\nimport { SCROLL_PRECISION, USERNAME_LENGTH_MIN } from '../../../Constants';\nimport ChatStore from '../../../Stores/ChatStore';\nimport FileStore from '../../../Stores/FileStore';\nimport MessageStore from '../../../Stores/MessageStore';\nimport UserStore from '../../../Stores/UserStore';\nimport TdLibController from '../../../Controllers/TdLibController';\nimport './Search.css';\n\nclass Search extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.keyboardHandler = new KeyboardHandler(this.handleKeyDown);\n        this.listRef = React.createRef();\n        this.state = {};\n    }\n\n    componentDidMount() {\n        const { text } = this.props;\n\n        this.searchOrLoadContent(text);\n\n        KeyboardManager.add(this.keyboardHandler);\n    }\n\n    componentWillUnmount() {\n        KeyboardManager.add(this.keyboardHandler);\n    }\n\n    handleKeyDown = event => {\n        switch (event.key) {\n            case 'Escape':\n                event.preventDefault();\n                event.stopPropagation();\n                event.target.blur();\n\n                this.handleClose();\n                break;\n        }\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const { chatId, text } = this.props;\n\n        if (prevProps.text !== text) {\n            this.searchOrLoadContent(text);\n        } else if (prevProps.chatId !== chatId) {\n            this.searchOrLoadContent(text);\n        }\n    }\n\n    searchOrLoadContent(text) {\n        const trimmedText = text ? text.trim() : '';\n\n        if (!trimmedText) {\n            this.loadContent();\n        } else {\n            this.searchText(trimmedText);\n        }\n    }\n\n    concatSearchResults = results => {\n        const arr = [];\n        const map = new Map();\n\n        for (let i = 0; i < results.length; i++) {\n            let result = results[i] && results[i].chat_ids;\n            if (result) {\n                for (let j = 0; j < result.length; j++) {\n                    if (!map.has(result[j])) {\n                        map.set(result[j], result[j]);\n                        arr.push(result[j]);\n                    }\n                }\n            }\n        }\n\n        arr.sort((a, b) => {\n            return orderCompare(ChatStore.get(b).order, ChatStore.get(a).order);\n        });\n\n        return arr;\n    };\n\n    searchText = async text => {\n        this.sessionId = new Date();\n        this.text = text;\n        const sessionId = this.sessionId;\n        let store = null;\n\n        // console.log('[se] searchText=' + text);\n\n        const { chatId } = this.props;\n        const { savedMessages } = this.state;\n\n        if (!chatId) {\n            const promises = [];\n            const localPromise = TdLibController.send({\n                '@type': 'searchChats',\n                query: text,\n                limit: 100\n            });\n            promises.push(localPromise);\n\n            const latinText = getLatinInput(text);\n            if (latinText && latinText !== text) {\n                const latinLocalPromise = TdLibController.send({\n                    '@type': 'searchChats',\n                    query: latinText,\n                    limit: 100\n                });\n                promises.push(latinLocalPromise);\n            }\n\n            const cyrillicText = getCyrillicInput(text);\n            if (cyrillicText && cyrillicText !== text) {\n                const cyrillicLocalPromise = TdLibController.send({\n                    '@type': 'searchChats',\n                    query: cyrillicText,\n                    limit: 100\n                });\n                promises.push(cyrillicLocalPromise);\n            }\n\n            const results = await Promise.all(promises.map(x => x.catch(e => null)));\n            const local = this.concatSearchResults(results);\n\n            if (sessionId !== this.sessionId) {\n                return;\n            }\n\n            if (savedMessages) {\n                const { t } = this.props;\n\n                const searchText = text.toUpperCase();\n                const savedMessagesStrings = ['SAVED MESSAGES', t('SavedMessages').toUpperCase()];\n\n                if (\n                    savedMessagesStrings.some(el => el.includes(searchText)) ||\n                    (latinText && savedMessagesStrings.some(el => el.includes(latinText.toUpperCase())))\n                ) {\n                    local.splice(0, 0, savedMessages.id);\n                }\n            }\n\n            this.setState({\n                top: null,\n                recentlyFound: null,\n                local: local\n            });\n\n            store = FileStore.getStore();\n            loadChatsContent(store, local);\n\n            let trimmedText = text.trim();\n            trimmedText = trimmedText.startsWith('@') ? trimmedText.substr(1) : trimmedText;\n            if (trimmedText.length >= USERNAME_LENGTH_MIN) {\n                const globalPromises = [];\n\n                const globalPromise = TdLibController.send({\n                    '@type': 'searchPublicChats',\n                    query: trimmedText\n                });\n                globalPromises.push(globalPromise);\n\n                if (latinText) {\n                    let latinTrimmedText = latinText.trim();\n                    latinTrimmedText = latinTrimmedText.startsWith('@') ? latinTrimmedText.substr(1) : latinTrimmedText;\n                    if (latinTrimmedText.length >= USERNAME_LENGTH_MIN && latinTrimmedText !== trimmedText) {\n                        const globalLatinPromise = TdLibController.send({\n                            '@type': 'searchPublicChats',\n                            query: latinTrimmedText\n                        });\n                        globalPromises.push(globalLatinPromise);\n                    }\n                }\n\n                const globalResults = await Promise.all(globalPromises.map(x => x.catch(e => null)));\n                const global = this.concatSearchResults(globalResults);\n\n                if (sessionId !== this.sessionId) {\n                    return;\n                }\n\n                this.setState({\n                    global\n                });\n\n                store = FileStore.getStore();\n                loadChatsContent(store, global);\n            } else {\n                this.setState({\n                    global: null\n                });\n            }\n        }\n\n        let messages = [];\n        if (chatId) {\n            messages = await TdLibController.send({\n                '@type': 'searchChatMessages',\n                chat_id: chatId,\n                query: text,\n                sender_user_id: 0,\n                from_message_id: 0,\n                offset: 0,\n                limit: 50,\n                filter: null\n            });\n        } else {\n            messages = await TdLibController.send({\n                '@type': 'searchMessages',\n                query: text,\n                offset_date: 0,\n                offset_chat_id: 0,\n                offset_message_id: 0,\n                limit: 50\n            });\n        }\n\n        MessageStore.setItems(messages.messages);\n\n        let linkMessage = null;\n        if (!chatId) {\n            try {\n                const messageLinkInfo = await TdLibController.send({\n                    '@type': 'getMessageLinkInfo',\n                    url: text\n                });\n                // console.log('[se] searchText=' + text + ' messageLinkInfo', messageLinkInfo);\n\n                MessageStore.setItems([messageLinkInfo.message]);\n\n                linkMessage = messageLinkInfo;\n            } catch (error) {\n                console.log('[se] searchText=' + text + ' messageLinkInfo error', error);\n            }\n        }\n\n        // console.log('[se] searchText=' + text + ' result', messages, linkMessage);\n\n        if (sessionId !== this.sessionId) {\n            return;\n        }\n\n        // console.log('[se] searchText=' + text + ' result session', messages, linkMessage);\n\n        this.setState({\n            messages,\n            linkMessage\n        });\n\n        const chats = new Map();\n        const users = new Map();\n        for (let i = 0; i < messages.messages.length; i++) {\n            chats.set(messages.messages[i].chat_id, messages.messages[i].chat_id);\n            if (messages.messages[i].sender_user_id) {\n                users.set(messages.messages[i].sender_user_id, messages.messages[i].sender_user_id);\n            }\n        }\n\n        if (linkMessage) {\n            const { chat_id, sender_user_id } = linkMessage;\n\n            chats.set(chat_id, chat_id);\n            if (sender_user_id) {\n                users.set(sender_user_id, sender_user_id);\n            }\n        }\n\n        store = FileStore.getStore();\n        loadChatsContent(store, [...chats.keys()]);\n        loadUsersContent(store, [...users.keys()]);\n    };\n\n    loadContent = async () => {\n        const { chatId } = this.props;\n        if (chatId) {\n            this.setState({\n                top: null,\n                recentlyFound: null,\n                local: null,\n                global: null,\n                messages: null,\n                linkMessage: null\n            });\n\n            return;\n        }\n\n        const topPromise = TdLibController.send({\n            '@type': 'getTopChats',\n            category: { '@type': 'topChatCategoryUsers' },\n            limit: 30\n        }).catch(() => {\n            return { '@type': 'chats', chat_ids: [] };\n        });\n\n        const recentlyFoundPromise = TdLibController.send({\n            '@type': 'searchChats',\n            query: '',\n            limit: 100\n        }).catch(() => {\n            return { '@type': 'chats', chat_ids: [] };\n        });\n\n        const savedMessagesPromise = TdLibController.send({\n            '@type': 'createPrivateChat',\n            user_id: UserStore.getMyId(),\n            force: true\n        }).catch(error => {});\n\n        const [top, recentlyFound, savedMessages] = await Promise.all([\n            topPromise,\n            recentlyFoundPromise,\n            savedMessagesPromise\n        ]);\n\n        this.setState({\n            top,\n            recentlyFound,\n            savedMessages,\n            local: null,\n            global: null,\n            messages: null,\n            linkMessage: null\n        });\n\n        const store = FileStore.getStore();\n        loadChatsContent(store, top.chat_ids);\n        loadChatsContent(store, recentlyFound.chat_ids);\n    };\n\n    handleClearRecentlyFound = event => {\n        event.stopPropagation();\n\n        TdLibController.send({\n            '@type': 'clearRecentlyFoundChats'\n        });\n\n        this.setState({ recentlyFound: null });\n    };\n\n    handleSelectMessage = (chatId, messageId, addToRecent, keepOpen) => {\n        const { onSelectMessage } = this.props;\n\n        if (addToRecent) {\n            TdLibController.send({\n                '@type': 'addRecentlyFoundChat',\n                chat_id: chatId\n            });\n        }\n\n        onSelectMessage(chatId, messageId, keepOpen);\n    };\n\n    handleScroll = () => {\n        const list = this.listRef.current;\n\n        if (list.scrollTop + list.offsetHeight >= list.scrollHeight - SCROLL_PRECISION) {\n            this.onLoadPrevious();\n        }\n    };\n\n    getOffset = messages => {\n        const length = messages ? messages.messages.length : 0;\n\n        const offsetDate = length > 0 ? messages.messages[length - 1].date : 0;\n        const offsetChatId = length > 0 ? messages.messages[length - 1].chat_id : 0;\n        const offsetMessageId = length > 0 ? messages.messages[length - 1].id : 0;\n\n        return {\n            offset_date: offsetDate,\n            offset_chat_id: offsetChatId,\n            offset_message_id: offsetMessageId\n        };\n    };\n\n    concatMessages = (messages, result) => {\n        if (!result) return messages;\n        if (!result.messages.length) return messages;\n\n        if (!messages) return result;\n        if (!messages.messages.length) return result;\n\n        return {\n            total_count: result.total_count,\n            messages: messages.messages.concat(result.messages)\n        };\n    };\n\n    onLoadPrevious = async () => {\n        if (this.loading) return;\n\n        const { chatId } = this.props;\n\n        const sessionId = this.sessionId;\n\n        const { messages } = this.state;\n\n        const offset = this.getOffset(messages);\n\n        this.loading = true;\n        let result = [];\n        if (chatId) {\n            result = await TdLibController.send({\n                '@type': 'searchChatMessages',\n                chat_id: chatId,\n                query: this.text,\n                sender_user_id: 0,\n                from_message_id: offset.offset_message_id,\n                limit: 50,\n                filter: null\n            });\n        } else {\n            result = await TdLibController.send({\n                '@type': 'searchMessages',\n                query: this.text,\n                ...offset,\n                limit: 50\n            });\n        }\n        this.loading = false;\n\n        filterDuplicateMessages(result, messages ? messages.messages : []);\n        MessageStore.setItems(result.messages);\n\n        if (sessionId !== this.sessionId) {\n            return;\n        }\n\n        this.setState({\n            messages: this.concatMessages(messages, result)\n        });\n\n        const chats = new Map();\n        const users = new Map();\n        for (let i = 0; i < result.messages.length; i++) {\n            chats.set(result.messages[i].chat_id, result.messages[i].chat_id);\n            if (result.messages[i].sender_user_id) {\n                users.set(result.messages[i].sender_user_id, result.messages[i].sender_user_id);\n            }\n        }\n\n        const store = FileStore.getStore();\n        loadChatsContent(store, [...chats.keys()]);\n        loadUsersContent(store, [...users.keys()]);\n    };\n\n    handleTopChatsScroll = event => {\n        event.stopPropagation();\n    };\n\n    handleClose = () => {\n        const { onClose } = this.props;\n\n        onClose();\n    };\n\n    handleDeleteRecentlyFoundChat = async chatId => {\n        if (!chatId) return;\n\n        await TdLibController.send({\n            '@type': 'removeRecentlyFoundChat',\n            chat_id: chatId\n        });\n\n        const { recentlyFound } = this.state;\n        if (!recentlyFound) return;\n\n        this.setState({\n            recentlyFound: { ...recentlyFound, chat_ids: recentlyFound.chat_ids.filter(x => x !== chatId) }\n        });\n    };\n\n    handleDeleteTopChat = async chatId => {\n        if (!chatId) return;\n\n        await TdLibController.send({\n            '@type': 'removeTopChat',\n            chat_id: chatId,\n            category: {\n                '@type': 'topChatCategoryUsers'\n            }\n        });\n\n        const { top } = this.state;\n        if (!top) return;\n\n        this.setState({\n            top: { ...top, chat_ids: top.chat_ids.filter(x => x !== chatId) }\n        });\n    };\n\n    render() {\n        const { chatId, t } = this.props;\n        const { top, recentlyFound, local, global, messages, linkMessage } = this.state;\n\n        const chat = ChatStore.get(chatId);\n\n        const topChats =\n            top && top.chat_ids\n                ? top.chat_ids.map(x => (\n                      <TopChat\n                          key={x}\n                          chatId={x}\n                          onSelect={() => this.handleSelectMessage(x, null, false, false)}\n                          onDelete={() => this.handleDeleteTopChat(x)}\n                      />\n                  ))\n                : [];\n\n        const recentlyFoundChats =\n            recentlyFound && recentlyFound.chat_ids\n                ? recentlyFound.chat_ids.map(x => (\n                      <RecentlyFoundChat\n                          key={x}\n                          chatId={x}\n                          onClick={() => this.handleSelectMessage(x, null, true, false)}\n                          onDelete={() => this.handleDeleteRecentlyFoundChat(x)}\n                      />\n                  ))\n                : [];\n\n        const localChats = local\n            ? local.map(x => (\n                  <RecentlyFoundChat\n                      key={x}\n                      chatId={x}\n                      onClick={() => this.handleSelectMessage(x, null, true, false)}\n                  />\n              ))\n            : [];\n\n        const globalChatsMap = new Map();\n        const globalChats = global\n            ? global.map(x => {\n                  globalChatsMap.set(x, x);\n\n                  return (\n                      <FoundPublicChat\n                          key={x}\n                          chatId={x}\n                          onClick={() => this.handleSelectMessage(x, null, true, true)}\n                      />\n                  );\n              })\n            : [];\n\n        const globalLinkChat =\n            linkMessage && linkMessage.chat_id && !linkMessage.message && !globalChatsMap.has(linkMessage.chat_id) ? (\n                <FoundPublicChat\n                    key={linkMessage.chat_id}\n                    chatId={linkMessage.chat_id}\n                    onClick={() => this.handleSelectMessage(linkMessage.chat_id, null, true, true)}\n                />\n            ) : null;\n\n        const globalMessagesMap = new Map();\n        const globalMessages =\n            messages && messages.messages\n                ? messages.messages.map(x => {\n                      const key = `${x.chat_id}_${x.id}`;\n                      globalMessagesMap.set(key, key);\n\n                      return (\n                          <FoundMessage\n                              key={key}\n                              chatId={x.chat_id}\n                              messageId={x.id}\n                              chatSearch={Boolean(chatId)}\n                              onClick={() => this.handleSelectMessage(x.chat_id, x.id, false, true)}\n                          />\n                      );\n                  })\n                : [];\n\n        const globalLinkMessage =\n            linkMessage &&\n            linkMessage.message &&\n            !globalMessagesMap.has(`${linkMessage.message.chat_id}_${linkMessage.message.id}`) ? (\n                <FoundMessage\n                    key={`${linkMessage.message.chat_id}_${linkMessage.message.id}`}\n                    chatId={linkMessage.message.chat_id}\n                    messageId={linkMessage.message.id}\n                    chatSearch={false}\n                    onClick={() =>\n                        this.handleSelectMessage(linkMessage.message.chat_id, linkMessage.message.id, false, true)\n                    }\n                />\n            ) : null;\n\n        let count = messages ? messages.total_count : 0;\n        if (\n            linkMessage &&\n            linkMessage.message &&\n            !globalMessagesMap.has(`${linkMessage.message.chat_id}_${linkMessage.message.id}`)\n        ) {\n            count++;\n        }\n\n        let messagesCaption = t('NoMessages');\n        if (count) {\n            messagesCaption = count === 1 ? 'Found 1 message' : `Found ${count} messages`;\n        }\n\n        return (\n            <div ref={this.listRef} className='search' onScroll={this.handleScroll}>\n                {chat && (\n                    <>\n                        <div className='sidebar-page-section'>\n                            <SectionHeader>{t('SearchMessagesIn')}</SectionHeader>\n                            <div className='search-chat-wrapper'>\n                                <div className='search-chat-control'>\n                                    <Chat chatId={chatId} showStatus={false} />\n                                </div>\n                                <IconButton\n                                    className='header-right-button'\n                                    aria-label='Search'\n                                    onMouseDown={this.handleClose}>\n                                    <CloseIcon />\n                                </IconButton>\n                            </div>\n                        </div>\n                        <div className='sidebar-page-section-divider' />\n                    </>\n                )}\n                {topChats.length > 0 && (\n                    <>\n                        <div className='sidebar-page-section'>\n                            <SectionHeader>{t('ChatHints')}</SectionHeader>\n                            <div className='search-top-chats-list' onScroll={this.handleTopChatsScroll}>\n                                <div className='search-top-chats-placeholder' />\n                                {topChats}\n                                <div className='search-top-chats-placeholder' />\n                            </div>\n                        </div>\n                        <div className='sidebar-page-section-divider' />\n                    </>\n                )}\n                {recentlyFoundChats.length > 0 && (\n                    <div className='sidebar-page-section'>\n                        <SectionHeader command={t('ClearButton')} onClick={this.handleClearRecentlyFound}>\n                            {t('Recent')}\n                        </SectionHeader>\n                        {recentlyFoundChats}\n                    </div>\n                )}\n                {localChats.length > 0 && (\n                    <>\n                        <div className='sidebar-page-section'>\n                            <SectionHeader>{t('ChatsAndContacts')}</SectionHeader>\n                            {localChats}\n                        </div>\n                        <div className='sidebar-page-section-divider' />\n                    </>\n                )}\n                {globalChats.length > 0 && (\n                    <>\n                        <div className='sidebar-page-section'>\n                            <SectionHeader>{t('GlobalSearch')}</SectionHeader>\n                            {globalLinkChat}\n                            {globalChats}\n                        </div>\n                        <div className='sidebar-page-section-divider' />\n                    </>\n                )}\n                {(messages || (linkMessage && linkMessage.message)) && (\n                    <div className='sidebar-page-section'>\n                        <SectionHeader>{messagesCaption}</SectionHeader>\n                        {globalLinkMessage}\n                        {globalMessages}\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nSearch.propTypes = {\n    chatId: PropTypes.number,\n    text: PropTypes.string,\n    onSelectMessage: PropTypes.func.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nexport default withTranslation()(Search);\n"]},"metadata":{},"sourceType":"module"}