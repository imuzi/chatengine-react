{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnRight/SharedMedia/SharedMediaBase.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport classNames from 'classnames';\nimport SharedDocument from '../../Tile/SharedMedia/SharedDocument';\nimport SharedMediaHeader from './SharedMediaHeader';\nimport { between, insertByOrder } from '../../../Utils/Common';\nimport { loadMessageContents } from '../../../Utils/File';\nimport { messageComparatorDesc } from '../../../Utils/Message';\nimport { SCROLL_PRECISION, SHARED_MESSAGE_SLICE_LIMIT } from '../../../Constants';\nimport FileStore from '../../../Stores/FileStore';\nimport MessageStore from '../../../Stores/MessageStore';\nimport TdLibController from '../../../Controllers/TdLibController';\nimport './SharedMediaBase.css';\n\nvar SharedMediaBase =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SharedMediaBase, _React$Component);\n\n  _createClass(SharedMediaBase, [{\n    key: \"getListClassName\",\n    value: function getListClassName() {\n      return null;\n    }\n  }, {\n    key: \"getSearchListClassName\",\n    value: function getSearchListClassName() {\n      return null;\n    }\n  }]);\n\n  function SharedMediaBase(props) {\n    var _this;\n\n    _classCallCheck(this, SharedMediaBase);\n\n    if ((this instanceof SharedMediaBase ? this.constructor : void 0) === SharedMediaBase) {\n      throw new TypeError('Cannot construct SharedMediaBase instances directly');\n    } // console.log('SharedMediaBase.ctor');\n\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SharedMediaBase).call(this, props));\n\n    _this.onUpdateMessageContent = function (update) {\n      var _this$props = _this.props,\n          chatId = _this$props.chatId,\n          migratedChatId = _this$props.migratedChatId;\n      var _this$state = _this.state,\n          items = _this$state.items,\n          migratedItems = _this$state.migratedItems;\n      var chat_id = update.chat_id,\n          message_id = update.message_id,\n          old_content = update.old_content,\n          new_content = update.new_content;\n      var message = MessageStore.get(chat_id, message_id); // console.log(`SharedDocuments.onUpdateMessageContent chat_id=${chat_id} message_id=${message_id}`, this.state.items);\n\n      if (chat_id === chatId) {\n        if (!items.length) return;\n        if (!between(message_id, items[0].id, items[items.length - 1].id, true)) return;\n        var index = items.findIndex(function (x) {\n          return x.id === message_id;\n        });\n\n        if (_this.isValidContent(new_content)) {\n          if (index === -1) {\n            // add new document\n            _this.setState({\n              items: insertByOrder(items, message, messageComparatorDesc)\n            });\n          } else {\n            // replace document\n            _this.setState({\n              items: [].concat(_toConsumableArray(items.slice(0, index)), [message], _toConsumableArray(items.slice(index + 1)))\n            });\n          }\n        } else {\n          if (index === -1) {} else {\n            // remove none document\n            _this.setState({\n              items: items.filter(function (x) {\n                return x.id !== message_id;\n              })\n            });\n          }\n        }\n      } else if (chat_id === migratedChatId) {\n        if (!migratedItems.length) return;\n        if (!between(message_id, migratedItems[0].id, migratedItems[migratedItems.length - 1].id, true)) return;\n\n        var _index = migratedItems.findIndex(function (x) {\n          return x.id === message_id;\n        });\n\n        if (_this.isValidContent(new_content)) {\n          if (_index === -1) {\n            // add new document\n            _this.setState({\n              migratedItems: insertByOrder(migratedItems, message, messageComparatorDesc)\n            });\n          } else {\n            // replace document\n            _this.setState({\n              migratedItems: [].concat(_toConsumableArray(migratedItems.slice(0, _index)), [message], _toConsumableArray(migratedItems.slice(_index + 1)))\n            });\n          }\n        } else {\n          if (_index === -1) {} else {\n            // remove none document\n            _this.setState({\n              migratedItems: migratedItems.filter(function (x) {\n                return x.id !== message_id;\n              })\n            });\n          }\n        }\n      }\n    };\n\n    _this.onUpdateNewMessage = function (update) {\n      var _this$props2 = _this.props,\n          chatId = _this$props2.chatId,\n          migratedChatId = _this$props2.migratedChatId;\n      var _this$state2 = _this.state,\n          items = _this$state2.items,\n          migratedItems = _this$state2.migratedItems;\n      var message = update.message;\n      var chat_id = message.chat_id;\n      if (chat_id !== chatId) return;\n      if (!_this.isValidMessage(message)) return;\n      var store = FileStore.getStore();\n      loadMessageContents(store, [message]);\n\n      if (chat_id === chatId) {\n        _this.setState({\n          items: [message].concat(items)\n        });\n      } else if (chat_id === migratedChatId) {\n        _this.setState({\n          migratedItems: [message].concat(migratedItems)\n        });\n      }\n    };\n\n    _this.onUpdateDeleteMessages = function (update) {\n      var _this$props3 = _this.props,\n          chatId = _this$props3.chatId,\n          migratedChatId = _this$props3.migratedChatId;\n      var _this$state3 = _this.state,\n          items = _this$state3.items,\n          migratedItems = _this$state3.migratedItems;\n      var chat_id = update.chat_id,\n          message_ids = update.message_ids;\n      var map = new Map(message_ids.map(function (x) {\n        return [x, x];\n      }));\n\n      var callback = function callback() {\n        if (_this.state.items.length + _this.state.migratedItems.length < SHARED_MESSAGE_SLICE_LIMIT) {\n          _this.onLoadNext(_this.params);\n        }\n      };\n\n      if (chat_id === chatId) {\n        _this.setState({\n          items: items.filter(function (x) {\n            return !map.has(x.id);\n          })\n        }, callback);\n      } else if (chat_id === migratedChatId) {\n        _this.setState({\n          migratedItems: migratedItems.filter(function (x) {\n            return !map.has(x.id);\n          })\n        }, callback);\n      }\n    };\n\n    _this.loadContent = function () {\n      _this.params = {\n        loading: false,\n        completed: false,\n        migrateCompleted: false,\n        items: [],\n        migratedItems: [],\n        filter: _this.getSearchFilter()\n      };\n\n      _this.onLoadNext(_this.params);\n    };\n\n    _this.onLoadNext =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(params) {\n        var loadIncomplete,\n            chatId,\n            completed,\n            filter,\n            items,\n            loading,\n            fromMessageId,\n            result,\n            messages,\n            incompleteResults,\n            store,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                loadIncomplete = _args.length > 1 && _args[1] !== undefined ? _args[1] : true;\n                chatId = _this.props.chatId;\n                completed = params.completed, filter = params.filter, items = params.items, loading = params.loading; // console.log('SharedMediaBase.onLoadNext', completed, loading);\n\n                if (!loading) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 5:\n                if (!completed) {\n                  _context.next = 7;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 7:\n                fromMessageId = items.length > 0 ? items[items.length - 1].id : 0;\n                params.loading = true;\n                _context.next = 11;\n                return TdLibController.send({\n                  '@type': 'searchChatMessages',\n                  chat_id: chatId,\n                  query: '',\n                  sender_user_id: 0,\n                  from_message_id: fromMessageId,\n                  offset: 0,\n                  limit: SHARED_MESSAGE_SLICE_LIMIT,\n                  filter: filter\n                }).finally(function () {\n                  params.loading = false;\n                });\n\n              case 11:\n                result = _context.sent;\n                TdLibController.send({\n                  '@type': 'searchChatMessages',\n                  chat_id: chatId,\n                  query: '',\n                  sender_user_id: 0,\n                  from_message_id: fromMessageId,\n                  offset: 0,\n                  limit: SHARED_MESSAGE_SLICE_LIMIT * 2,\n                  filter: filter\n                });\n                messages = result.messages;\n                params.completed = messages.length === 0 || messages.total_count === 0;\n                params.items = items.concat(messages.filter(_this.isValidMessage));\n                incompleteResults = loadIncomplete && messages.length > 0 && messages.length < SHARED_MESSAGE_SLICE_LIMIT;\n                MessageStore.setItems(result.messages);\n                store = FileStore.getStore();\n                loadMessageContents(store, result.messages);\n\n                _this.setState({\n                  items: params.items\n                });\n\n                if (params.completed) {\n                  _this.onLoadMigratedNext(params, true);\n                } else if (incompleteResults) {\n                  _this.onLoadNext(params, false);\n                }\n\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.onLoadMigratedNext =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(params) {\n        var loadIncomplete,\n            migratedChatId,\n            filter,\n            loading,\n            migrateCompleted,\n            items,\n            fromMessageId,\n            result,\n            messages,\n            incompleteResults,\n            store,\n            _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                loadIncomplete = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : true;\n                migratedChatId = _this.props.migratedChatId;\n                filter = params.filter, loading = params.loading, migrateCompleted = params.migrateCompleted, items = params.migratedItems; // console.log('SharedMediaBase.onLoadMigratedNext', migratedChatId, loading, migrateCompleted);\n\n                if (migratedChatId) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 5:\n                if (!loading) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 7:\n                if (!migrateCompleted) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 9:\n                fromMessageId = items.length > 0 ? items[items.length - 1].id : 0;\n                params.loading = true;\n                _context2.next = 13;\n                return TdLibController.send({\n                  '@type': 'searchChatMessages',\n                  chat_id: migratedChatId,\n                  query: '',\n                  sender_user_id: 0,\n                  from_message_id: fromMessageId,\n                  offset: 0,\n                  limit: SHARED_MESSAGE_SLICE_LIMIT,\n                  filter: filter\n                }).finally(function () {\n                  params.loading = false;\n                });\n\n              case 13:\n                result = _context2.sent;\n                messages = result.messages;\n                params.migratedItems = items.concat(messages.filter(_this.isValidMessage));\n                params.migrateCompleted = messages.length === 0 || messages.total_count === 0;\n                incompleteResults = loadIncomplete && messages.length > 0 && messages.length < SHARED_MESSAGE_SLICE_LIMIT;\n\n                if (!params.migrateCompleted) {\n                  _context2.next = 20;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 20:\n                MessageStore.setItems(messages);\n                store = FileStore.getStore();\n                loadMessageContents(store, messages);\n\n                _this.setState({\n                  migratedItems: params.migratedItems\n                });\n\n                if (incompleteResults) {\n                  _this.onLoadMigratedNext(params, false);\n                }\n\n              case 25:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.handleScroll = function () {\n      if (!_this.listRef) return;\n      var list = _this.listRef.current;\n      if (!list) return;\n\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          params = _assertThisInitialize.params;\n\n      if (list.scrollTop + list.offsetHeight >= list.scrollHeight - SCROLL_PRECISION) {\n        if (params && !params.completed) {\n          _this.onLoadNext(params);\n        } else {\n          _this.onLoadMigratedNext(params);\n        }\n      }\n    };\n\n    _this.handleHeaderClick = function () {\n      var list = _this.listRef.current;\n      if (!list) return;\n      list.scrollTop = 0;\n    };\n\n    _this.handleSearchScroll = function () {\n      if (!_this.searchListRef) return;\n      var list = _this.searchListRef.current;\n      if (!list) return;\n\n      var _assertThisInitialize2 = _assertThisInitialized(_this),\n          searchParams = _assertThisInitialize2.searchParams;\n\n      if (!searchParams) return;\n\n      if (list.scrollTop + list.offsetHeight >= list.scrollHeight - SCROLL_PRECISION) {\n        if (!searchParams.completed) {\n          _this.onSearchNext(searchParams);\n        } else {\n          _this.onSearchMigratedNext(searchParams);\n        }\n      }\n    };\n\n    _this.onSearchNext =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(params) {\n        var loadIncomplete,\n            chatId,\n            completed,\n            filter,\n            items,\n            loading,\n            query,\n            fromMessageId,\n            result,\n            messages,\n            incompleteResults,\n            store,\n            _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                loadIncomplete = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : true;\n                chatId = _this.props.chatId;\n                completed = params.completed, filter = params.filter, items = params.items, loading = params.loading, query = params.query; // console.log('SharedMediaBase.onSearchNext', completed, loading);\n\n                if (!completed) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 5:\n                if (!loading) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 7:\n                fromMessageId = items.length > 0 ? items[items.length - 1].id : 0;\n                params.loading = true;\n                _context3.next = 11;\n                return TdLibController.send({\n                  '@type': 'searchChatMessages',\n                  chat_id: chatId,\n                  query: query,\n                  sender_user_id: 0,\n                  from_message_id: fromMessageId,\n                  offset: 0,\n                  limit: SHARED_MESSAGE_SLICE_LIMIT,\n                  filter: filter\n                }).finally(function () {\n                  params.loading = false;\n                });\n\n              case 11:\n                result = _context3.sent;\n                messages = result.messages;\n                params.items = items.concat(messages.filter(_this.isValidMessage));\n                params.completed = messages.length === 0 || messages.total_count === 0;\n                incompleteResults = loadIncomplete && messages.length > 0 && messages.length < SHARED_MESSAGE_SLICE_LIMIT;\n\n                if (!(_this.searchParams !== params)) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 18:\n                MessageStore.setItems(messages);\n                store = FileStore.getStore();\n                loadMessageContents(store, messages);\n\n                _this.setState({\n                  searchItems: params.items,\n                  searchMigratedItems: params.migratedItems\n                });\n\n                if (params.completed) {\n                  _this.onSearchMigratedNext(params, true);\n                } else if (incompleteResults) {\n                  _this.onSearchNext(params, false);\n                }\n\n              case 23:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.onSearchMigratedNext =\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(params) {\n        var loadIncomplete,\n            migratedChatId,\n            filter,\n            loading,\n            items,\n            migrateCompleted,\n            query,\n            fromMessageId,\n            result,\n            messages,\n            incompleteResults,\n            store,\n            _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                loadIncomplete = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : true;\n                migratedChatId = _this.props.migratedChatId;\n                filter = params.filter, loading = params.loading, items = params.migratedItems, migrateCompleted = params.migrateCompleted, query = params.query; // console.log('SharedMediaBase.onSearchMigratedNext', migratedChatId, loading, migrateCompleted);\n\n                if (migratedChatId) {\n                  _context4.next = 5;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 5:\n                if (!loading) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 7:\n                if (!migrateCompleted) {\n                  _context4.next = 9;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 9:\n                fromMessageId = items.length > 0 ? items[items.length - 1].id : 0;\n                params.loading = true;\n                _context4.next = 13;\n                return TdLibController.send({\n                  '@type': 'searchChatMessages',\n                  chat_id: migratedChatId,\n                  query: query,\n                  sender_user_id: 0,\n                  from_message_id: fromMessageId,\n                  offset: 0,\n                  limit: SHARED_MESSAGE_SLICE_LIMIT,\n                  filter: filter\n                }).finally(function () {\n                  params.loading = false;\n                });\n\n              case 13:\n                result = _context4.sent;\n                messages = result.messages;\n                params.migratedItems = items.concat(messages.filter(_this.isValidMessage));\n                params.migrateCompleted = messages.length === 0 || messages.total_count === 0;\n                incompleteResults = loadIncomplete && messages.length > 0 && messages.length < SHARED_MESSAGE_SLICE_LIMIT;\n\n                if (!(_this.searchParams !== params)) {\n                  _context4.next = 20;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 20:\n                MessageStore.setItems(messages);\n                store = FileStore.getStore();\n                loadMessageContents(store, messages);\n\n                _this.setState({\n                  searchItems: params.items,\n                  searchMigratedItems: params.migratedItems\n                });\n\n                if (incompleteResults) {\n                  _this.onSearchMigratedNext(params, false);\n                }\n\n              case 25:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    _this.handleSearch =\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(text) {\n        var query;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                query = text ? text.trim() : '';\n\n                if (query) {\n                  _context5.next = 4;\n                  break;\n                }\n\n                _this.handleCloseSearch();\n\n                return _context5.abrupt(\"return\");\n\n              case 4:\n                _this.searchParams = {\n                  query: query,\n                  completed: false,\n                  migrateCompleted: false,\n                  items: [],\n                  migratedItems: [],\n                  filter: _this.getSearchFilter()\n                };\n\n                _this.onSearchNext(_this.searchParams, true);\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    _this.handleCloseSearch = function () {\n      _this.searchParams = null;\n\n      _this.setState({\n        searchItems: [],\n        searchMigratedItems: []\n      });\n    };\n\n    _this.isValidMessage = function (message) {\n      if (!message) return false;\n      return _this.isValidContent(message.content);\n    };\n\n    _this.listRef = React.createRef();\n    _this.searchListRef = React.createRef();\n    _this.state = {\n      items: [],\n      migratedItems: [],\n      searchItems: [],\n      searchMigratedItems: []\n    };\n    return _this;\n  }\n\n  _createClass(SharedMediaBase, [{\n    key: \"hasSearch\",\n    value: function hasSearch() {\n      return true;\n    }\n  }, {\n    key: \"isValidContent\",\n    value: function isValidContent(content) {\n      throw new Error('Virtual method isValidContent is not implemented');\n    }\n  }, {\n    key: \"getItemTemplate\",\n    value: function getItemTemplate(message) {\n      var migratedChatId = this.props.migratedChatId;\n      var chat_id = message.chat_id,\n          id = message.id;\n      return React.createElement(SharedDocument, {\n        key: \"chat_id=\".concat(chat_id, \"_message_id=\").concat(id),\n        chatId: chat_id,\n        messageId: id,\n        showOpenMessage: chat_id !== migratedChatId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"getSearchFilter\",\n    value: function getSearchFilter() {\n      throw new Error('Virtual method getSearchFilter is not implemented');\n    }\n  }, {\n    key: \"getHeader\",\n    value: function getHeader() {\n      throw new Error('Virtual method getHeader is not implemented');\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadContent();\n      MessageStore.on('updateDeleteMessages', this.onUpdateDeleteMessages);\n      MessageStore.on('updateMessageContent', this.onUpdateMessageContent);\n      MessageStore.on('updateNewMessage', this.onUpdateNewMessage);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      MessageStore.off('updateDeleteMessages', this.onUpdateDeleteMessages);\n      MessageStore.off('updateMessageContent', this.onUpdateMessageContent);\n      MessageStore.off('updateNewMessage', this.onUpdateNewMessage);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props4 = this.props,\n          minHeight = _this$props4.minHeight,\n          onClose = _this$props4.onClose,\n          popup = _this$props4.popup;\n      var _this$state4 = this.state,\n          items = _this$state4.items,\n          migratedItems = _this$state4.migratedItems,\n          searchItems = _this$state4.searchItems,\n          searchMigratedItems = _this$state4.searchMigratedItems;\n      var searchParams = this.searchParams;\n      var messages = items.concat(migratedItems).map(function (x) {\n        return _this2.getItemTemplate(x);\n      });\n      var searchMessages = searchItems.concat(searchMigratedItems).map(function (x) {\n        return _this2.getItemTemplate(x);\n      });\n      return React.createElement(React.Fragment, null, React.createElement(SharedMediaHeader, {\n        title: this.getHeader(),\n        onClick: this.handleHeaderClick,\n        onClose: onClose,\n        onSearch: this.hasSearch() ? this.handleSearch : null,\n        onCloseSearch: this.handleCloseSearch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 466\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        ref: this.listRef,\n        className: classNames('shared-media-list', this.getListClassName()),\n        onScroll: this.handleScroll,\n        style: {\n          minHeight: popup ? minHeight : null\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 473\n        },\n        __self: this\n      }, messages), Boolean(searchParams) && React.createElement(\"div\", {\n        ref: this.searchListRef,\n        className: classNames('shared-media-search-list', this.getSearchListClassName()),\n        onScroll: this.handleSearchScroll,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 481\n        },\n        __self: this\n      }, searchMessages));\n    }\n  }]);\n\n  return SharedMediaBase;\n}(React.Component);\n\nSharedMediaBase.propTypes = {};\nexport default SharedMediaBase;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnRight/SharedMedia/SharedMediaBase.js"],"names":["React","classNames","SharedDocument","SharedMediaHeader","between","insertByOrder","loadMessageContents","messageComparatorDesc","SCROLL_PRECISION","SHARED_MESSAGE_SLICE_LIMIT","FileStore","MessageStore","TdLibController","SharedMediaBase","props","TypeError","onUpdateMessageContent","update","chatId","migratedChatId","state","items","migratedItems","chat_id","message_id","old_content","new_content","message","get","length","id","index","findIndex","x","isValidContent","setState","slice","filter","onUpdateNewMessage","isValidMessage","store","getStore","concat","onUpdateDeleteMessages","message_ids","map","Map","callback","onLoadNext","params","has","loadContent","loading","completed","migrateCompleted","getSearchFilter","loadIncomplete","fromMessageId","send","query","sender_user_id","from_message_id","offset","limit","finally","result","messages","total_count","incompleteResults","setItems","onLoadMigratedNext","handleScroll","listRef","list","current","scrollTop","offsetHeight","scrollHeight","handleHeaderClick","handleSearchScroll","searchListRef","searchParams","onSearchNext","onSearchMigratedNext","searchItems","searchMigratedItems","handleSearch","text","trim","handleCloseSearch","content","createRef","Error","on","off","minHeight","onClose","popup","getItemTemplate","searchMessages","getHeader","hasSearch","getListClassName","Boolean","getSearchListClassName","Component","propTypes"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport SharedDocument from '../../Tile/SharedMedia/SharedDocument';\nimport SharedMediaHeader from './SharedMediaHeader';\nimport { between, insertByOrder } from '../../../Utils/Common';\nimport { loadMessageContents } from '../../../Utils/File';\nimport { messageComparatorDesc } from '../../../Utils/Message';\nimport { SCROLL_PRECISION, SHARED_MESSAGE_SLICE_LIMIT } from '../../../Constants';\nimport FileStore from '../../../Stores/FileStore';\nimport MessageStore from '../../../Stores/MessageStore';\nimport TdLibController from '../../../Controllers/TdLibController';\nimport './SharedMediaBase.css';\n\nclass SharedMediaBase extends React.Component {\n    getListClassName() {\n        return null;\n    }\n\n    getSearchListClassName() {\n        return null;\n    }\n\n    constructor(props) {\n        if (new.target === SharedMediaBase) {\n            throw new TypeError('Cannot construct SharedMediaBase instances directly');\n        }\n\n        // console.log('SharedMediaBase.ctor');\n\n        super(props);\n\n        this.listRef = React.createRef();\n        this.searchListRef = React.createRef();\n\n        this.state = {\n            items: [],\n            migratedItems: [],\n            searchItems: [],\n            searchMigratedItems: []\n        };\n    }\n\n    hasSearch() {\n        return true;\n    }\n\n    isValidContent(content) {\n        throw new Error('Virtual method isValidContent is not implemented');\n    }\n\n    getItemTemplate(message) {\n        const { migratedChatId } = this.props;\n        const { chat_id, id } = message;\n\n        return (\n            <SharedDocument\n                key={`chat_id=${chat_id}_message_id=${id}`}\n                chatId={chat_id}\n                messageId={id}\n                showOpenMessage={chat_id !== migratedChatId}\n            />\n        );\n    }\n\n    getSearchFilter() {\n        throw new Error('Virtual method getSearchFilter is not implemented');\n    }\n\n    getHeader() {\n        throw new Error('Virtual method getHeader is not implemented');\n    }\n\n    componentDidMount() {\n        this.loadContent();\n\n        MessageStore.on('updateDeleteMessages', this.onUpdateDeleteMessages);\n        MessageStore.on('updateMessageContent', this.onUpdateMessageContent);\n        MessageStore.on('updateNewMessage', this.onUpdateNewMessage);\n    }\n\n    componentWillUnmount() {\n        MessageStore.off('updateDeleteMessages', this.onUpdateDeleteMessages);\n        MessageStore.off('updateMessageContent', this.onUpdateMessageContent);\n        MessageStore.off('updateNewMessage', this.onUpdateNewMessage);\n    }\n\n    onUpdateMessageContent = update => {\n        const { chatId, migratedChatId } = this.props;\n        const { items, migratedItems } = this.state;\n\n        const { chat_id, message_id, old_content, new_content } = update;\n\n        const message = MessageStore.get(chat_id, message_id);\n        // console.log(`SharedDocuments.onUpdateMessageContent chat_id=${chat_id} message_id=${message_id}`, this.state.items);\n\n        if (chat_id === chatId) {\n            if (!items.length) return;\n            if (!between(message_id, items[0].id, items[items.length - 1].id, true)) return;\n\n            const index = items.findIndex(x => x.id === message_id);\n            if (this.isValidContent(new_content)) {\n                if (index === -1) {\n                    // add new document\n                    this.setState({ items: insertByOrder(items, message, messageComparatorDesc) });\n                } else {\n                    // replace document\n                    this.setState({ items: [...items.slice(0, index), message, ...items.slice(index + 1)] });\n                }\n            } else {\n                if (index === -1) {\n                } else {\n                    // remove none document\n                    this.setState({ items: items.filter(x => x.id !== message_id) });\n                }\n            }\n        } else if (chat_id === migratedChatId) {\n            if (!migratedItems.length) return;\n            if (!between(message_id, migratedItems[0].id, migratedItems[migratedItems.length - 1].id, true)) return;\n\n            const index = migratedItems.findIndex(x => x.id === message_id);\n            if (this.isValidContent(new_content)) {\n                if (index === -1) {\n                    // add new document\n                    this.setState({\n                        migratedItems: insertByOrder(migratedItems, message, messageComparatorDesc)\n                    });\n                } else {\n                    // replace document\n                    this.setState({\n                        migratedItems: [...migratedItems.slice(0, index), message, ...migratedItems.slice(index + 1)]\n                    });\n                }\n            } else {\n                if (index === -1) {\n                } else {\n                    // remove none document\n                    this.setState({ migratedItems: migratedItems.filter(x => x.id !== message_id) });\n                }\n            }\n        }\n    };\n\n    onUpdateNewMessage = update => {\n        const { chatId, migratedChatId } = this.props;\n        const { items, migratedItems } = this.state;\n\n        const { message } = update;\n        const { chat_id } = message;\n\n        if (chat_id !== chatId) return;\n        if (!this.isValidMessage(message)) return;\n\n        const store = FileStore.getStore();\n        loadMessageContents(store, [message]);\n\n        if (chat_id === chatId) {\n            this.setState({ items: [message].concat(items) });\n        } else if (chat_id === migratedChatId) {\n            this.setState({ migratedItems: [message].concat(migratedItems) });\n        }\n    };\n\n    onUpdateDeleteMessages = update => {\n        const { chatId, migratedChatId } = this.props;\n        const { items, migratedItems } = this.state;\n\n        const { chat_id, message_ids } = update;\n\n        const map = new Map(message_ids.map(x => [x, x]));\n        const callback = () => {\n            if (this.state.items.length + this.state.migratedItems.length < SHARED_MESSAGE_SLICE_LIMIT) {\n                this.onLoadNext(this.params);\n            }\n        };\n\n        if (chat_id === chatId) {\n            this.setState({ items: items.filter(x => !map.has(x.id)) }, callback);\n        } else if (chat_id === migratedChatId) {\n            this.setState({ migratedItems: migratedItems.filter(x => !map.has(x.id)) }, callback);\n        }\n    };\n\n    loadContent = () => {\n        this.params = {\n            loading: false,\n            completed: false,\n            migrateCompleted: false,\n            items: [],\n            migratedItems: [],\n            filter: this.getSearchFilter()\n        };\n        this.onLoadNext(this.params);\n    };\n\n    onLoadNext = async (params, loadIncomplete = true) => {\n        const { chatId } = this.props;\n        const { completed, filter, items, loading } = params;\n\n        // console.log('SharedMediaBase.onLoadNext', completed, loading);\n\n        if (loading) return;\n        if (completed) return;\n\n        const fromMessageId = items.length > 0 ? items[items.length - 1].id : 0;\n        params.loading = true;\n        const result = await TdLibController.send({\n            '@type': 'searchChatMessages',\n            chat_id: chatId,\n            query: '',\n            sender_user_id: 0,\n            from_message_id: fromMessageId,\n            offset: 0,\n            limit: SHARED_MESSAGE_SLICE_LIMIT,\n            filter\n        }).finally(() => {\n            params.loading = false;\n        });\n\n        TdLibController.send({\n            '@type': 'searchChatMessages',\n            chat_id: chatId,\n            query: '',\n            sender_user_id: 0,\n            from_message_id: fromMessageId,\n            offset: 0,\n            limit: SHARED_MESSAGE_SLICE_LIMIT * 2,\n            filter\n        });\n\n        const { messages } = result;\n        params.completed = messages.length === 0 || messages.total_count === 0;\n        params.items = items.concat(messages.filter(this.isValidMessage));\n        const incompleteResults = loadIncomplete && messages.length > 0 && messages.length < SHARED_MESSAGE_SLICE_LIMIT;\n\n        MessageStore.setItems(result.messages);\n        const store = FileStore.getStore();\n        loadMessageContents(store, result.messages);\n\n        this.setState({ items: params.items });\n\n        if (params.completed) {\n            this.onLoadMigratedNext(params, true);\n        } else if (incompleteResults) {\n            this.onLoadNext(params, false);\n        }\n    };\n\n    onLoadMigratedNext = async (params, loadIncomplete = true) => {\n        const { migratedChatId } = this.props;\n        const { filter, loading, migrateCompleted, migratedItems: items } = params;\n\n        // console.log('SharedMediaBase.onLoadMigratedNext', migratedChatId, loading, migrateCompleted);\n\n        if (!migratedChatId) return;\n        if (loading) return;\n        if (migrateCompleted) return;\n\n        const fromMessageId = items.length > 0 ? items[items.length - 1].id : 0;\n        params.loading = true;\n        const result = await TdLibController.send({\n            '@type': 'searchChatMessages',\n            chat_id: migratedChatId,\n            query: '',\n            sender_user_id: 0,\n            from_message_id: fromMessageId,\n            offset: 0,\n            limit: SHARED_MESSAGE_SLICE_LIMIT,\n            filter\n        }).finally(() => {\n            params.loading = false;\n        });\n\n        const { messages } = result;\n        params.migratedItems = items.concat(messages.filter(this.isValidMessage));\n        params.migrateCompleted = messages.length === 0 || messages.total_count === 0;\n        const incompleteResults = loadIncomplete && messages.length > 0 && messages.length < SHARED_MESSAGE_SLICE_LIMIT;\n\n        if (params.migrateCompleted) return;\n\n        MessageStore.setItems(messages);\n        const store = FileStore.getStore();\n        loadMessageContents(store, messages);\n\n        this.setState({ migratedItems: params.migratedItems });\n\n        if (incompleteResults) {\n            this.onLoadMigratedNext(params, false);\n        }\n    };\n\n    handleScroll = () => {\n        if (!this.listRef) return;\n\n        const list = this.listRef.current;\n        if (!list) return;\n\n        const { params } = this;\n\n        if (list.scrollTop + list.offsetHeight >= list.scrollHeight - SCROLL_PRECISION) {\n            if (params && !params.completed) {\n                this.onLoadNext(params);\n            } else {\n                this.onLoadMigratedNext(params);\n            }\n        }\n    };\n\n    handleHeaderClick = () => {\n        const list = this.listRef.current;\n        if (!list) return;\n\n        list.scrollTop = 0;\n    };\n\n    handleSearchScroll = () => {\n        if (!this.searchListRef) return;\n\n        const list = this.searchListRef.current;\n        if (!list) return;\n\n        const { searchParams } = this;\n        if (!searchParams) return;\n\n        if (list.scrollTop + list.offsetHeight >= list.scrollHeight - SCROLL_PRECISION) {\n            if (!searchParams.completed) {\n                this.onSearchNext(searchParams);\n            } else {\n                this.onSearchMigratedNext(searchParams);\n            }\n        }\n    };\n\n    onSearchNext = async (params, loadIncomplete = true) => {\n        const { chatId } = this.props;\n        const { completed, filter, items, loading, query } = params;\n\n        // console.log('SharedMediaBase.onSearchNext', completed, loading);\n\n        if (completed) return;\n        if (loading) return;\n\n        const fromMessageId = items.length > 0 ? items[items.length - 1].id : 0;\n        params.loading = true;\n        const result = await TdLibController.send({\n            '@type': 'searchChatMessages',\n            chat_id: chatId,\n            query,\n            sender_user_id: 0,\n            from_message_id: fromMessageId,\n            offset: 0,\n            limit: SHARED_MESSAGE_SLICE_LIMIT,\n            filter\n        }).finally(() => {\n            params.loading = false;\n        });\n\n        const { messages } = result;\n        params.items = items.concat(messages.filter(this.isValidMessage));\n        params.completed = messages.length === 0 || messages.total_count === 0;\n        const incompleteResults = loadIncomplete && messages.length > 0 && messages.length < SHARED_MESSAGE_SLICE_LIMIT;\n\n        if (this.searchParams !== params) return;\n\n        MessageStore.setItems(messages);\n        const store = FileStore.getStore();\n        loadMessageContents(store, messages);\n\n        this.setState({ searchItems: params.items, searchMigratedItems: params.migratedItems });\n\n        if (params.completed) {\n            this.onSearchMigratedNext(params, true);\n        } else if (incompleteResults) {\n            this.onSearchNext(params, false);\n        }\n    };\n\n    onSearchMigratedNext = async (params, loadIncomplete = true) => {\n        const { migratedChatId } = this.props;\n        const { filter, loading, migratedItems: items, migrateCompleted, query } = params;\n\n        // console.log('SharedMediaBase.onSearchMigratedNext', migratedChatId, loading, migrateCompleted);\n\n        if (!migratedChatId) return;\n        if (loading) return;\n        if (migrateCompleted) return;\n\n        const fromMessageId = items.length > 0 ? items[items.length - 1].id : 0;\n        params.loading = true;\n        const result = await TdLibController.send({\n            '@type': 'searchChatMessages',\n            chat_id: migratedChatId,\n            query,\n            sender_user_id: 0,\n            from_message_id: fromMessageId,\n            offset: 0,\n            limit: SHARED_MESSAGE_SLICE_LIMIT,\n            filter\n        }).finally(() => {\n            params.loading = false;\n        });\n\n        const { messages } = result;\n        params.migratedItems = items.concat(messages.filter(this.isValidMessage));\n        params.migrateCompleted = messages.length === 0 || messages.total_count === 0;\n        const incompleteResults = loadIncomplete && messages.length > 0 && messages.length < SHARED_MESSAGE_SLICE_LIMIT;\n\n        if (this.searchParams !== params) return;\n\n        MessageStore.setItems(messages);\n        const store = FileStore.getStore();\n        loadMessageContents(store, messages);\n\n        this.setState({ searchItems: params.items, searchMigratedItems: params.migratedItems });\n\n        if (incompleteResults) {\n            this.onSearchMigratedNext(params, false);\n        }\n    };\n\n    handleSearch = async text => {\n        const query = text ? text.trim() : '';\n        if (!query) {\n            this.handleCloseSearch();\n            return;\n        }\n\n        this.searchParams = {\n            query,\n            completed: false,\n            migrateCompleted: false,\n            items: [],\n            migratedItems: [],\n            filter: this.getSearchFilter()\n        };\n        this.onSearchNext(this.searchParams, true);\n    };\n\n    handleCloseSearch = () => {\n        this.searchParams = null;\n        this.setState({ searchItems: [], searchMigratedItems: [] });\n    };\n\n    isValidMessage = message => {\n        if (!message) return false;\n\n        return this.isValidContent(message.content);\n    };\n\n    render() {\n        const { minHeight, onClose, popup } = this.props;\n        const { items, migratedItems, searchItems, searchMigratedItems } = this.state;\n        const { searchParams } = this;\n\n        const messages = items.concat(migratedItems).map(x => this.getItemTemplate(x));\n        const searchMessages = searchItems.concat(searchMigratedItems).map(x => this.getItemTemplate(x));\n\n        return (\n            <>\n                <SharedMediaHeader\n                    title={this.getHeader()}\n                    onClick={this.handleHeaderClick}\n                    onClose={onClose}\n                    onSearch={this.hasSearch() ? this.handleSearch : null}\n                    onCloseSearch={this.handleCloseSearch}\n                />\n                <div\n                    ref={this.listRef}\n                    className={classNames('shared-media-list', this.getListClassName())}\n                    onScroll={this.handleScroll}\n                    style={{ minHeight: popup ? minHeight : null }}>\n                    {messages}\n                </div>\n                {Boolean(searchParams) && (\n                    <div\n                        ref={this.searchListRef}\n                        className={classNames('shared-media-search-list', this.getSearchListClassName())}\n                        onScroll={this.handleSearchScroll}>\n                        {searchMessages}\n                    </div>\n                )}\n            </>\n        );\n    }\n}\n\nSharedMediaBase.propTypes = {};\n\nexport default SharedMediaBase;\n"]},"metadata":{},"sourceType":"module"}