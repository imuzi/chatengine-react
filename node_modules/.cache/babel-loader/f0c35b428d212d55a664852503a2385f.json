{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _assertThisInitialized from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnLeft/DialogsList.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Archive from '../Tile/Archive';\nimport Dialog from '../Tile/Dialog';\nimport DialogPlaceholder from '../Tile/DialogPlaceholder';\nimport VirtualizedList from '../Additional/VirtualizedList';\nimport { loadChatsContent } from '../../Utils/File';\nimport { isAuthorizationReady, orderCompare } from '../../Utils/Common';\nimport { CHAT_SLICE_LIMIT, SCROLL_CHATS_PRECISION } from '../../Constants';\nimport AppStore from '../../Stores/ApplicationStore';\nimport BasicGroupStore from '../../Stores/BasicGroupStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport FileStore from '../../Stores/FileStore';\nimport SupergroupStore from '../../Stores/SupergroupStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './DialogsList.css';\nimport { scrollTop } from '../../Utils/DOM';\n\nvar DialogListItem =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DialogListItem, _React$Component);\n\n  function DialogListItem() {\n    _classCallCheck(this, DialogListItem);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DialogListItem).apply(this, arguments));\n  }\n\n  _createClass(DialogListItem, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState, nextContext) {\n      var _this$props = this.props,\n          chatId = _this$props.chatId,\n          style = _this$props.style,\n          hidden = _this$props.hidden;\n\n      if (nextProps.chatId !== chatId) {\n        // console.log('[vl] UserListItem.shouldUpdate true userId');\n        return true;\n      }\n\n      if (nextProps.hidden !== hidden) {\n        // console.log('[vl] UserListItem.shouldUpdate true userId');\n        return true;\n      }\n\n      if (nextProps.style.top !== style.top) {\n        // console.log('[vl] UserListItem.shouldUpdate true style');\n        return true;\n      } // console.log('[vl] UserListItem.shouldUpdate false');\n\n\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          chatId = _this$props2.chatId,\n          hidden = _this$props2.hidden,\n          style = _this$props2.style;\n      return React.createElement(\"div\", {\n        className: \"dialog-list-item\",\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(Dialog, {\n        chatId: chatId,\n        hidden: hidden,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return DialogListItem;\n}(React.Component);\n\nvar DialogsList =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(DialogsList, _React$Component2);\n\n  function DialogsList(props) {\n    var _this;\n\n    _classCallCheck(this, DialogsList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DialogsList).call(this, props));\n\n    _this.onClientUpdateLeaveChat = function (update) {\n      var inProgress = update.inProgress,\n          chatId = update.chatId;\n\n      if (inProgress) {\n        _this.hiddenChats.set(chatId, chatId);\n      } else {\n        _this.hiddenChats.delete(chatId);\n      }\n\n      _this.forceUpdate();\n    };\n\n    _this.onUpdateAuthorizationState = function (update) {\n      var authorizationState = update.authorization_state;\n\n      _this.setState({\n        authorizationState: authorizationState\n      }, function () {\n        return _this.loadFirstSlice();\n      });\n    };\n\n    _this.onFastUpdatingComplete = function (update) {\n      _this.onLoadNext(true); // this.setState({ chats: [] }, () => this.onLoadNext(true));\n\n    };\n\n    _this.loadFirstSlice =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var authorizationState;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              authorizationState = _this.state.authorizationState;\n\n              if (!isAuthorizationReady(authorizationState)) {\n                _context.next = 4;\n                break;\n              }\n\n              _context.next = 4;\n              return FileStore.initDB(function () {\n                return _this.onLoadNext(true);\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    _this.saveCache = function () {\n      var onSaveCache = _this.props.onSaveCache;\n      if (onSaveCache) onSaveCache();\n    };\n\n    _this.onUpdateChatOrder = function (update) {\n      var type = _this.props.type;\n      var chats = _this.state.chats;\n\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          loading = _assertThisInitialize.loading;\n\n      if (loading) return;\n      var chat_id = update.chat_id,\n          order = update.order;\n      var chat = ChatStore.get(chat_id);\n\n      if (!chat || !chat.chat_list || chat.chat_list['@type'] !== type) {\n        return;\n      }\n\n      var newChatIds = [];\n      var chatIds = [];\n\n      for (var i = 0; i < chats.length; i++) {\n        var _chat = ChatStore.get(chats[i]);\n\n        if (_chat && _chat.order !== '0') {\n          switch (_chat.type['@type']) {\n            case 'chatTypeBasicGroup':\n              {\n                var basicGroup = BasicGroupStore.get(_chat.type.basic_group_id);\n\n                if (basicGroup.status['@type'] !== 'chatMemberStatusLeft') {\n                  chatIds.push(_chat.id);\n                }\n\n                break;\n              }\n\n            case 'chatTypePrivate':\n              {\n                chatIds.push(_chat.id);\n                break;\n              }\n\n            case 'chatTypeSecret':\n              {\n                chatIds.push(_chat.id);\n                break;\n              }\n\n            case 'chatTypeSupergroup':\n              {\n                var supergroup = SupergroupStore.get(_chat.type.supergroup_id);\n\n                if (supergroup.status['@type'] !== 'chatMemberStatusLeft') {\n                  chatIds.push(_chat.id);\n                }\n\n                break;\n              }\n          }\n        }\n      }\n\n      if (order === '0') {\n        // unselect deleted chat\n        if (chat_id === AppStore.getChatId() && !chat.last_message) {\n          TdLibController.setChatId(0);\n          AppStore.changeChatDetailsVisibility(false);\n        }\n      } else {\n        if (chats.length > 0) {\n          var existingChat = chats.find(function (x) {\n            return x === chat_id;\n          });\n\n          if (!existingChat) {\n            // const minChatOrder = ChatStore.get(chats[chats.length - 1]).order;\n            // if (orderCompare(minChatOrder, chat.order) === 1) {\n            //     console.log('[dl] onUpdate return 3', type);\n            //     return;\n            // }\n            newChatIds.push(chat_id);\n          }\n        } else {\n          newChatIds.push(chat_id);\n        }\n      } // console.log('[dl] onUpdate reorderChats', type, chatIds, newChatIds);\n\n\n      _this.reorderChats(chatIds, newChatIds, function () {\n        _this.loadChatContents(newChatIds);\n\n        _this.saveCache();\n      });\n    };\n\n    _this.handleScroll = function () {\n      // console.log('[vl] onScroll');\n      var list = _this.listRef.current.getListRef().current;\n\n      if (!list) return; // console.log(`[vl] onScroll [scrollTop, offsetHeight, scrollHeight] = [${list.scrollTop}, ${list.offsetHeight}, ${list.scrollHeight}]`, list.scrollTop + list.offsetHeight, (list.scrollHeight - SCROLL_CHATS_PRECISION));\n\n      if (list.scrollTop <= SCROLL_CHATS_PRECISION) {\n        _this.onLoadPrev();\n      } else if (list.scrollTop + list.offsetHeight >= list.scrollHeight - list.offsetHeight) {\n        // console.log(`[vl] onScroll onLoadNext`);\n        _this.onLoadNext();\n      }\n    };\n\n    _this.renderItem = function (_ref2, source) {\n      var index = _ref2.index,\n          style = _ref2.style;\n      var x = source[index];\n      return React.createElement(DialogListItem, {\n        key: x,\n        chatId: x,\n        hidden: _this.hiddenChats.has(x),\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414\n        },\n        __self: this\n      }); // return <Dialog key={x} chatId={x} hidden={this.hiddenChats.has(x)} style={style} />\n    };\n\n    _this.hiddenChats = new Map();\n    _this.listRef = React.createRef();\n    var _authorizationState = AppStore.authorizationState;\n    _this.state = {\n      authorizationState: _authorizationState,\n      offset: 0,\n      chats: null,\n      fistSliceLoaded: false\n    };\n    return _this;\n  }\n\n  _createClass(DialogsList, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var _this$props3 = this.props,\n          theme = _this$props3.theme,\n          open = _this$props3.open,\n          showArchive = _this$props3.showArchive,\n          archiveTitle = _this$props3.archiveTitle,\n          items = _this$props3.items,\n          cacheItems = _this$props3.cacheItems;\n      var _this$state = this.state,\n          chats = _this$state.chats,\n          offset = _this$state.offset;\n\n      if (nextProps.theme !== theme) {\n        return true;\n      }\n\n      if (nextProps.open !== open) {\n        return true;\n      }\n\n      if (nextProps.items !== items) {\n        return true;\n      }\n\n      if (nextProps.cacheItems !== cacheItems) {\n        return true;\n      }\n\n      if (nextProps.showArchive !== showArchive) {\n        return true;\n      }\n\n      if (nextProps.archiveTitle !== archiveTitle) {\n        return true;\n      }\n\n      if (nextState.offset !== offset) {\n        return true;\n      }\n\n      if (nextState.chats !== chats) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"getSnapshotBeforeUpdate\",\n    value: function getSnapshotBeforeUpdate(prevProps, prevState) {\n      var list = this.listRef.current;\n      if (!list) return {\n        scrollTop: 0\n      };\n      return {\n        scrollTop: list.scrollTop\n      };\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      var list = this.listRef.current;\n      if (!list) return;\n      var scrollTop = snapshot.scrollTop; // if (prevState.offset > this.state.offset) {\n      //     list.scrollTop += ( - this.state.offset + prevState.offset) * 72;\n      // }\n      // list.scrollTop = scrollTop;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadFirstSlice();\n      AppStore.on('updateAuthorizationState', this.onUpdateAuthorizationState);\n      ChatStore.on('updateChatDraftMessage', this.onUpdateChatOrder);\n      ChatStore.on('updateChatIsPinned', this.onUpdateChatOrder);\n      ChatStore.on('updateChatIsSponsored', this.onUpdateChatOrder);\n      ChatStore.on('updateChatLastMessage', this.onUpdateChatOrder);\n      ChatStore.on('updateChatOrder', this.onUpdateChatOrder);\n      ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n      ChatStore.on('clientUpdateLeaveChat', this.onClientUpdateLeaveChat);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      AppStore.off('updateAuthorizationState', this.onUpdateAuthorizationState);\n      ChatStore.off('updateChatDraftMessage', this.onUpdateChatOrder);\n      ChatStore.off('updateChatIsPinned', this.onUpdateChatOrder);\n      ChatStore.off('updateChatIsSponsored', this.onUpdateChatOrder);\n      ChatStore.off('updateChatLastMessage', this.onUpdateChatOrder);\n      ChatStore.off('updateChatOrder', this.onUpdateChatOrder);\n      ChatStore.off('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n      ChatStore.off('clientUpdateLeaveChat', this.onClientUpdateLeaveChat);\n    }\n  }, {\n    key: \"reorderChats\",\n    value: function reorderChats(chatIds) {\n      var newChatIds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var callback = arguments.length > 2 ? arguments[2] : undefined;\n      var orderedChatIds = chatIds.concat(newChatIds).sort(function (a, b) {\n        return orderCompare(ChatStore.get(b).order, ChatStore.get(a).order);\n      });\n\n      if (!DialogsList.isDifferentOrder(this.state.chats, orderedChatIds)) {\n        if (callback) callback();\n        return;\n      }\n\n      this.setState({\n        chats: orderedChatIds\n      }, callback);\n    }\n  }, {\n    key: \"onLoadPrev\",\n    value: function onLoadPrev() {\n      this.setState({\n        offset: Math.max(this.state.offset - CHAT_SLICE_LIMIT, 0)\n      });\n    }\n  }, {\n    key: \"onLoadNext\",\n    value: function () {\n      var _onLoadNext = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var replace,\n            type,\n            _this$state2,\n            offset,\n            chats,\n            offsetOrder,\n            offsetChatId,\n            chat,\n            result,\n            _args2 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                replace = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : false;\n                type = this.props.type;\n                _this$state2 = this.state, offset = _this$state2.offset, chats = _this$state2.chats;\n\n                if (!(chats && offset + 2 * CHAT_SLICE_LIMIT < chats.length)) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                this.setState({\n                  offset: offset + CHAT_SLICE_LIMIT\n                });\n                return _context2.abrupt(\"return\");\n\n              case 6:\n                if (!this.loading) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 8:\n                offsetOrder = '9223372036854775807'; // 2^63 - 1\n\n                offsetChatId = 0;\n\n                if (!replace && chats && chats.length > 0) {\n                  chat = ChatStore.get(chats[chats.length - 1]);\n\n                  if (chat) {\n                    offsetOrder = chat.order;\n                    offsetChatId = chat.id;\n                  }\n                }\n\n                if (type === 'chatListMain') console.log('[update] GETCHATS start');\n                this.loading = true;\n                _context2.next = 15;\n                return TdLibController.send({\n                  '@type': 'getChats',\n                  chat_list: {\n                    '@type': type\n                  },\n                  offset_chat_id: offsetChatId,\n                  offset_order: offsetOrder,\n                  limit: CHAT_SLICE_LIMIT\n                }).finally(function () {\n                  _this2.loading = false;\n                  if (type === 'chatListMain') console.log('[update] GETCHATS stop');\n\n                  if (replace) {\n                    TdLibController.clientUpdate({\n                      '@type': 'clientUpdateDialogsReady'\n                    });\n                  }\n                });\n\n              case 15:\n                result = _context2.sent;\n\n                // TdLibController.send({\n                //     '@type': 'getChats',\n                //     offset_chat_id: offsetChatId,\n                //     offset_order: offsetOrder,\n                //     limit: CHAT_SLICE_LIMIT + 100\n                // });\n                if (result.chat_ids.length > 0 && result.chat_ids[0] === offsetChatId) {\n                  result.chat_ids.shift();\n                }\n\n                if (replace) {\n                  this.replaceChats(result.chat_ids, function () {\n                    _this2.loadChatContents(result.chat_ids);\n\n                    _this2.saveCache();\n                  });\n                } else {\n                  // console.log('DialogsList.onLoadNext setState start', offsetChatId, offsetOrder);\n                  this.appendChats(result.chat_ids, function () {\n                    // console.log('DialogsList.onLoadNext setState stop', offsetChatId, offsetOrder);\n                    _this2.loadChatContents(result.chat_ids);\n                  });\n                }\n\n              case 18:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function onLoadNext() {\n        return _onLoadNext.apply(this, arguments);\n      }\n\n      return onLoadNext;\n    }()\n  }, {\n    key: \"loadChatContents\",\n    value: function loadChatContents(chatIds) {\n      var store = FileStore.getStore();\n      loadChatsContent(store, chatIds);\n    }\n  }, {\n    key: \"appendChats\",\n    value: function appendChats(chatIds, callback) {\n      if (chatIds.length === 0) {\n        if (callback) callback();\n        return;\n      }\n\n      var chats = this.state.chats;\n      var newChats = (chats || []).concat(chatIds);\n      this.setState({\n        chats: newChats,\n        offset: newChats.length - 2 * CHAT_SLICE_LIMIT\n      }, callback);\n    }\n  }, {\n    key: \"replaceChats\",\n    value: function replaceChats(chats, callback) {\n      this.setState({\n        chats: chats,\n        offset: 0\n      }, callback);\n    }\n  }, {\n    key: \"scrollToTop\",\n    value: function scrollToTop() {\n      var list = this.listRef.current.getListRef().current;\n      scrollTop(list);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props4 = this.props,\n          type = _this$props4.type,\n          open = _this$props4.open,\n          cacheItems = _this$props4.cacheItems,\n          showArchive = _this$props4.showArchive,\n          archiveTitle = _this$props4.archiveTitle;\n      var _this$state3 = this.state,\n          chats = _this$state3.chats,\n          offset = _this$state3.offset; // console.log('[dl] render', type, open, chats, cacheChats);\n\n      if (!open) return null;\n      this.source = [];\n      var dialogs = null;\n\n      if (chats) {\n        var lastPinnedId = 0;\n        chats.forEach(function (x) {\n          var chat = ChatStore.get(x);\n\n          if (chat && chat.is_pinned) {\n            lastPinnedId = x;\n          }\n        });\n        this.source = chats; // dialogs = chats.slice(offset, offset + 2 * CHAT_SLICE_LIMIT).map(x => (\n        //     <Dialog key={x} chatId={x} isLastPinned={x === lastPinnedId} hidden={this.hiddenChats.has(x)} />\n        // ));\n      } else if (cacheItems) {\n        var _lastPinnedId = 0;\n        cacheItems.forEach(function (x) {\n          var chat = ChatStore.get(x);\n\n          if (chat && chat.is_pinned) {\n            _lastPinnedId = x;\n          }\n        });\n        this.source = cacheItems.map(function (x) {\n          return x.id;\n        }); // dialogs = cacheItems.map(x => (\n        //     <Dialog\n        //         key={x.id}\n        //         chatId={x.id}\n        //         isLastPinned={x === lastPinnedId}\n        //         hidden={this.hiddenChats.has(x.id)}\n        //     />\n        // ));\n      } else {\n        if (type === 'chatListMain') {\n          dialogs = Array.from(Array(10)).map(function (x, index) {\n            return React.createElement(DialogPlaceholder, {\n              key: index,\n              index: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 459\n              },\n              __self: this\n            });\n          });\n        }\n      }\n\n      return React.createElement(VirtualizedList, {\n        ref: this.listRef,\n        className: \"dialogs-list\",\n        source: this.source,\n        rowHeight: 76,\n        overScanCount: 20,\n        renderItem: function renderItem(x) {\n          return _this3.renderItem(x, _this3.source);\n        },\n        onScroll: this.handleScroll,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 464\n        },\n        __self: this\n      }) // <div ref={this.listRef} className='dialogs-list' onScroll={this.handleScroll}>\n      //     {showArchive && offset === 0 && <Archive title={archiveTitle} />}\n      //     {dialogs}\n      // </div>\n      ;\n    }\n  }], [{\n    key: \"isDifferentOrder\",\n    value: function isDifferentOrder(oldChatIds, newChatIds) {\n      if (oldChatIds.length === newChatIds.length) {\n        for (var i = 0; i < oldChatIds.length; i++) {\n          if (oldChatIds[i] !== newChatIds[i]) return true;\n        }\n\n        return false;\n      }\n\n      return true;\n    }\n  }]);\n\n  return DialogsList;\n}(React.Component);\n\nDialogsList.propTypes = {\n  type: PropTypes.oneOf(['chatListMain', 'chatListArchive']).isRequired,\n  showArchive: PropTypes.bool,\n  archiveTitle: PropTypes.string,\n  cacheItems: PropTypes.array,\n  items: PropTypes.array\n};\nexport default DialogsList;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnLeft/DialogsList.js"],"names":["React","PropTypes","Archive","Dialog","DialogPlaceholder","VirtualizedList","loadChatsContent","isAuthorizationReady","orderCompare","CHAT_SLICE_LIMIT","SCROLL_CHATS_PRECISION","AppStore","BasicGroupStore","ChatStore","FileStore","SupergroupStore","TdLibController","scrollTop","DialogListItem","nextProps","nextState","nextContext","props","chatId","style","hidden","top","Component","DialogsList","onClientUpdateLeaveChat","update","inProgress","hiddenChats","set","delete","forceUpdate","onUpdateAuthorizationState","authorizationState","authorization_state","setState","loadFirstSlice","onFastUpdatingComplete","onLoadNext","state","initDB","saveCache","onSaveCache","onUpdateChatOrder","type","chats","loading","chat_id","order","chat","get","chat_list","newChatIds","chatIds","i","length","basicGroup","basic_group_id","status","push","id","supergroup","supergroup_id","getChatId","last_message","setChatId","changeChatDetailsVisibility","existingChat","find","x","reorderChats","loadChatContents","handleScroll","list","listRef","current","getListRef","onLoadPrev","offsetHeight","scrollHeight","renderItem","source","index","has","Map","createRef","offset","fistSliceLoaded","theme","open","showArchive","archiveTitle","items","cacheItems","prevProps","prevState","snapshot","on","off","callback","orderedChatIds","concat","sort","a","b","isDifferentOrder","Math","max","replace","offsetOrder","offsetChatId","console","log","send","offset_chat_id","offset_order","limit","finally","clientUpdate","result","chat_ids","shift","replaceChats","appendChats","store","getStore","newChats","dialogs","lastPinnedId","forEach","is_pinned","map","Array","from","oldChatIds","propTypes","oneOf","isRequired","bool","string","array"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Archive from '../Tile/Archive';\nimport Dialog from '../Tile/Dialog';\nimport DialogPlaceholder from '../Tile/DialogPlaceholder';\nimport VirtualizedList from '../Additional/VirtualizedList';\nimport { loadChatsContent } from '../../Utils/File';\nimport { isAuthorizationReady, orderCompare } from '../../Utils/Common';\nimport { CHAT_SLICE_LIMIT, SCROLL_CHATS_PRECISION } from '../../Constants';\nimport AppStore from '../../Stores/ApplicationStore';\nimport BasicGroupStore from '../../Stores/BasicGroupStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport FileStore from '../../Stores/FileStore';\nimport SupergroupStore from '../../Stores/SupergroupStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './DialogsList.css';\nimport { scrollTop } from '../../Utils/DOM';\n\nclass DialogListItem extends React.Component {\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { chatId, style, hidden } = this.props;\n        if (nextProps.chatId !== chatId) {\n            // console.log('[vl] UserListItem.shouldUpdate true userId');\n            return true;\n        }\n\n        if (nextProps.hidden !== hidden) {\n            // console.log('[vl] UserListItem.shouldUpdate true userId');\n            return true;\n        }\n\n        if (nextProps.style.top !== style.top) {\n            // console.log('[vl] UserListItem.shouldUpdate true style');\n            return true;\n        }\n\n        // console.log('[vl] UserListItem.shouldUpdate false');\n        return false;\n    }\n\n    render() {\n        const { chatId, hidden, style } = this.props;\n\n        return (\n            <div className='dialog-list-item' style={style}>\n                <Dialog chatId={chatId} hidden={hidden} />\n            </div>\n        );\n    }\n}\n\nclass DialogsList extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.hiddenChats = new Map();\n\n        this.listRef = React.createRef();\n\n        const { authorizationState } = AppStore;\n\n        this.state = {\n            authorizationState,\n            offset: 0,\n            chats: null,\n            fistSliceLoaded: false\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const { theme, open, showArchive, archiveTitle, items, cacheItems } = this.props;\n        const { chats, offset } = this.state;\n\n        if (nextProps.theme !== theme) {\n            return true;\n        }\n\n        if (nextProps.open !== open) {\n            return true;\n        }\n\n        if (nextProps.items !== items) {\n            return true;\n        }\n\n        if (nextProps.cacheItems !== cacheItems) {\n            return true;\n        }\n\n        if (nextProps.showArchive !== showArchive) {\n            return true;\n        }\n\n        if (nextProps.archiveTitle !== archiveTitle) {\n            return true;\n        }\n\n        if (nextState.offset !== offset) {\n            return true;\n        }\n\n        if (nextState.chats !== chats) {\n            return true;\n        }\n\n        return false;\n    }\n\n    getSnapshotBeforeUpdate(prevProps, prevState) {\n        const { current: list } = this.listRef;\n        if (!list) return { scrollTop: 0 };\n\n        return { scrollTop: list.scrollTop };\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const { current: list } = this.listRef;\n        if (!list) return;\n\n        const { scrollTop } = snapshot;\n\n        // if (prevState.offset > this.state.offset) {\n        //     list.scrollTop += ( - this.state.offset + prevState.offset) * 72;\n        // }\n        // list.scrollTop = scrollTop;\n    }\n\n    componentDidMount() {\n        this.loadFirstSlice();\n\n        AppStore.on('updateAuthorizationState', this.onUpdateAuthorizationState);\n\n        ChatStore.on('updateChatDraftMessage', this.onUpdateChatOrder);\n        ChatStore.on('updateChatIsPinned', this.onUpdateChatOrder);\n        ChatStore.on('updateChatIsSponsored', this.onUpdateChatOrder);\n        ChatStore.on('updateChatLastMessage', this.onUpdateChatOrder);\n        ChatStore.on('updateChatOrder', this.onUpdateChatOrder);\n\n        ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.on('clientUpdateLeaveChat', this.onClientUpdateLeaveChat);\n    }\n\n    componentWillUnmount() {\n        AppStore.off('updateAuthorizationState', this.onUpdateAuthorizationState);\n\n        ChatStore.off('updateChatDraftMessage', this.onUpdateChatOrder);\n        ChatStore.off('updateChatIsPinned', this.onUpdateChatOrder);\n        ChatStore.off('updateChatIsSponsored', this.onUpdateChatOrder);\n        ChatStore.off('updateChatLastMessage', this.onUpdateChatOrder);\n        ChatStore.off('updateChatOrder', this.onUpdateChatOrder);\n\n        ChatStore.off('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.off('clientUpdateLeaveChat', this.onClientUpdateLeaveChat);\n    }\n\n    onClientUpdateLeaveChat = update => {\n        const { inProgress, chatId } = update;\n\n        if (inProgress) {\n            this.hiddenChats.set(chatId, chatId);\n        } else {\n            this.hiddenChats.delete(chatId);\n        }\n\n        this.forceUpdate();\n    };\n\n    onUpdateAuthorizationState = update => {\n        const { authorization_state: authorizationState } = update;\n\n        this.setState({ authorizationState }, () => this.loadFirstSlice());\n    };\n\n    onFastUpdatingComplete = update => {\n        this.onLoadNext(true);\n        // this.setState({ chats: [] }, () => this.onLoadNext(true));\n    };\n\n    loadFirstSlice = async () => {\n        const { authorizationState } = this.state;\n        if (isAuthorizationReady(authorizationState)) {\n            await FileStore.initDB(() => this.onLoadNext(true));\n        }\n    };\n\n    saveCache = () => {\n        const { onSaveCache } = this.props;\n\n        if (onSaveCache) onSaveCache();\n    };\n\n    onUpdateChatOrder = update => {\n        const { type } = this.props;\n        const { chats } = this.state;\n\n        const { loading } = this;\n        if (loading) return;\n\n        const { chat_id, order } = update;\n\n        const chat = ChatStore.get(chat_id);\n        if (!chat || !chat.chat_list || chat.chat_list['@type'] !== type) {\n            return;\n        }\n\n        const newChatIds = [];\n        const chatIds = [];\n        for (let i = 0; i < chats.length; i++) {\n            let chat = ChatStore.get(chats[i]);\n            if (chat && chat.order !== '0') {\n                switch (chat.type['@type']) {\n                    case 'chatTypeBasicGroup': {\n                        const basicGroup = BasicGroupStore.get(chat.type.basic_group_id);\n                        if (basicGroup.status['@type'] !== 'chatMemberStatusLeft') {\n                            chatIds.push(chat.id);\n                        }\n                        break;\n                    }\n                    case 'chatTypePrivate': {\n                        chatIds.push(chat.id);\n                        break;\n                    }\n                    case 'chatTypeSecret': {\n                        chatIds.push(chat.id);\n                        break;\n                    }\n                    case 'chatTypeSupergroup': {\n                        const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n                        if (supergroup.status['@type'] !== 'chatMemberStatusLeft') {\n                            chatIds.push(chat.id);\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n\n        if (order === '0') {\n            // unselect deleted chat\n            if (chat_id === AppStore.getChatId() && !chat.last_message) {\n                TdLibController.setChatId(0);\n                AppStore.changeChatDetailsVisibility(false);\n            }\n        } else {\n            if (chats.length > 0) {\n                const existingChat = chats.find(x => x === chat_id);\n                if (!existingChat) {\n                    // const minChatOrder = ChatStore.get(chats[chats.length - 1]).order;\n                    // if (orderCompare(minChatOrder, chat.order) === 1) {\n                    //     console.log('[dl] onUpdate return 3', type);\n                    //     return;\n                    // }\n                    newChatIds.push(chat_id);\n                }\n            } else {\n                newChatIds.push(chat_id);\n            }\n        }\n\n        // console.log('[dl] onUpdate reorderChats', type, chatIds, newChatIds);\n        this.reorderChats(chatIds, newChatIds, () => {\n            this.loadChatContents(newChatIds);\n            this.saveCache();\n        });\n    };\n\n    reorderChats(chatIds, newChatIds = [], callback) {\n        const orderedChatIds = chatIds.concat(newChatIds).sort((a, b) => {\n            return orderCompare(ChatStore.get(b).order, ChatStore.get(a).order);\n        });\n\n        if (!DialogsList.isDifferentOrder(this.state.chats, orderedChatIds)) {\n            if (callback) callback();\n            return;\n        }\n\n        this.setState({ chats: orderedChatIds }, callback);\n    }\n\n    static isDifferentOrder(oldChatIds, newChatIds) {\n        if (oldChatIds.length === newChatIds.length) {\n            for (let i = 0; i < oldChatIds.length; i++) {\n                if (oldChatIds[i] !== newChatIds[i]) return true;\n            }\n\n            return false;\n        }\n\n        return true;\n    }\n\n    handleScroll = () => {\n        // console.log('[vl] onScroll');\n        const list = this.listRef.current.getListRef().current;\n        if (!list) return;\n\n        // console.log(`[vl] onScroll [scrollTop, offsetHeight, scrollHeight] = [${list.scrollTop}, ${list.offsetHeight}, ${list.scrollHeight}]`, list.scrollTop + list.offsetHeight, (list.scrollHeight - SCROLL_CHATS_PRECISION));\n        if (list.scrollTop <= SCROLL_CHATS_PRECISION) {\n            this.onLoadPrev();\n        } else if (list.scrollTop + list.offsetHeight >= list.scrollHeight - list.offsetHeight) {\n            // console.log(`[vl] onScroll onLoadNext`);\n            this.onLoadNext();\n        }\n    };\n\n    onLoadPrev() {\n        this.setState({\n            offset: Math.max(this.state.offset - CHAT_SLICE_LIMIT, 0)\n        });\n    }\n\n    async onLoadNext(replace = false) {\n        const { type } = this.props;\n        const { offset, chats } = this.state;\n\n        if (chats && offset + 2 * CHAT_SLICE_LIMIT < chats.length) {\n            this.setState({\n                offset: offset + CHAT_SLICE_LIMIT\n            });\n            return;\n        }\n\n        if (this.loading) {\n            return;\n        }\n\n        let offsetOrder = '9223372036854775807'; // 2^63 - 1\n        let offsetChatId = 0;\n        if (!replace && chats && chats.length > 0) {\n            const chat = ChatStore.get(chats[chats.length - 1]);\n            if (chat) {\n                offsetOrder = chat.order;\n                offsetChatId = chat.id;\n            }\n        }\n\n        if (type === 'chatListMain') console.log('[update] GETCHATS start');\n        this.loading = true;\n        const result = await TdLibController.send({\n            '@type': 'getChats',\n            chat_list: { '@type': type },\n            offset_chat_id: offsetChatId,\n            offset_order: offsetOrder,\n            limit: CHAT_SLICE_LIMIT\n        }).finally(() => {\n            this.loading = false;\n            if (type === 'chatListMain') console.log('[update] GETCHATS stop');\n            if (replace) {\n                TdLibController.clientUpdate({ '@type': 'clientUpdateDialogsReady' });\n            }\n        });\n        // TdLibController.send({\n        //     '@type': 'getChats',\n        //     offset_chat_id: offsetChatId,\n        //     offset_order: offsetOrder,\n        //     limit: CHAT_SLICE_LIMIT + 100\n        // });\n\n        if (result.chat_ids.length > 0 && result.chat_ids[0] === offsetChatId) {\n            result.chat_ids.shift();\n        }\n\n        if (replace) {\n            this.replaceChats(result.chat_ids, () => {\n                this.loadChatContents(result.chat_ids);\n                this.saveCache();\n            });\n        } else {\n            // console.log('DialogsList.onLoadNext setState start', offsetChatId, offsetOrder);\n            this.appendChats(result.chat_ids, () => {\n                // console.log('DialogsList.onLoadNext setState stop', offsetChatId, offsetOrder);\n                this.loadChatContents(result.chat_ids);\n            });\n        }\n    }\n\n    loadChatContents(chatIds) {\n        const store = FileStore.getStore();\n        loadChatsContent(store, chatIds);\n    }\n\n    appendChats(chatIds, callback) {\n        if (chatIds.length === 0) {\n            if (callback) callback();\n            return;\n        }\n\n        const { chats } = this.state;\n\n        const newChats = (chats || []).concat(chatIds);\n        this.setState({ chats: newChats, offset: newChats.length - 2 * CHAT_SLICE_LIMIT }, callback);\n    }\n\n    replaceChats(chats, callback) {\n        this.setState({ chats, offset: 0 }, callback);\n    }\n\n    scrollToTop() {\n        const list = this.listRef.current.getListRef().current;\n\n        scrollTop(list);\n    }\n\n    renderItem = ({ index, style }, source) => {\n        const x = source[index];\n\n        return <DialogListItem key={x} chatId={x} hidden={this.hiddenChats.has(x)} style={style} />;\n\n        // return <Dialog key={x} chatId={x} hidden={this.hiddenChats.has(x)} style={style} />\n    };\n\n    render() {\n        const { type, open, cacheItems, showArchive, archiveTitle } = this.props;\n        const { chats, offset } = this.state;\n\n        // console.log('[dl] render', type, open, chats, cacheChats);\n        if (!open) return null;\n\n        this.source = [];\n        let dialogs = null;\n        if (chats) {\n            let lastPinnedId = 0;\n            chats.forEach(x => {\n                const chat = ChatStore.get(x);\n                if (chat && chat.is_pinned) {\n                    lastPinnedId = x;\n                }\n            });\n            this.source = chats;\n            // dialogs = chats.slice(offset, offset + 2 * CHAT_SLICE_LIMIT).map(x => (\n            //     <Dialog key={x} chatId={x} isLastPinned={x === lastPinnedId} hidden={this.hiddenChats.has(x)} />\n            // ));\n        } else if (cacheItems) {\n            let lastPinnedId = 0;\n            cacheItems.forEach(x => {\n                const chat = ChatStore.get(x);\n                if (chat && chat.is_pinned) {\n                    lastPinnedId = x;\n                }\n            });\n            this.source = cacheItems.map(x => x.id);\n            // dialogs = cacheItems.map(x => (\n            //     <Dialog\n            //         key={x.id}\n            //         chatId={x.id}\n            //         isLastPinned={x === lastPinnedId}\n            //         hidden={this.hiddenChats.has(x.id)}\n            //     />\n            // ));\n        } else {\n            if (type === 'chatListMain') {\n                dialogs = Array.from(Array(10)).map((x, index) => <DialogPlaceholder key={index} index={index} />);\n            }\n        }\n\n        return (\n            <VirtualizedList\n                ref={this.listRef}\n                className='dialogs-list'\n                source={this.source}\n                rowHeight={76}\n                overScanCount={20}\n                renderItem={x => this.renderItem(x, this.source)}\n                onScroll={this.handleScroll}\n            />\n            // <div ref={this.listRef} className='dialogs-list' onScroll={this.handleScroll}>\n            //     {showArchive && offset === 0 && <Archive title={archiveTitle} />}\n            //     {dialogs}\n            // </div>\n        );\n    }\n}\n\nDialogsList.propTypes = {\n    type: PropTypes.oneOf(['chatListMain', 'chatListArchive']).isRequired,\n    showArchive: PropTypes.bool,\n    archiveTitle: PropTypes.string,\n    cacheItems: PropTypes.array,\n    items: PropTypes.array\n};\n\nexport default DialogsList;\n"]},"metadata":{},"sourceType":"module"}