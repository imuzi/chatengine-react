{"ast":null,"code":"import _defineProperty from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Message/Media/Animation.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport FileProgress from '../../Viewer/FileProgress';\nimport { getFitSize } from '../../../Utils/Common';\nimport { isBlurredThumbnail } from '../../../Utils/Media';\nimport { getFileSize, getSrc, isGifMimeType } from '../../../Utils/File';\nimport { PHOTO_DISPLAY_SIZE, PHOTO_SIZE } from '../../../Constants';\nimport AppStore from '../../../Stores/ApplicationStore';\nimport FileStore from '../../../Stores/FileStore';\nimport InstantViewStore from '../../../Stores/InstantViewStore';\nimport MessageStore from '../../../Stores/MessageStore';\nimport './Animation.css';\n\nvar Animation =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Animation, _React$Component);\n\n  function Animation(props) {\n    var _this;\n\n    _classCallCheck(this, Animation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Animation).call(this, props));\n\n    _this.startStopPlayer = function () {\n      var player = _this.videoRef.current;\n      if (!player) return;\n\n      if (_this.windowFocused && (_this.inView && !_this.openMediaViewer && !_this.openProfileMediaViewer && !_this.openIV || _this.ivInView && !_this.openIVMedia)) {\n        player.play();\n      } else {\n        player.pause();\n      }\n    };\n\n    _this.onClientUpdateInstantViewContent = function (update) {\n      _this.openIV = Boolean(InstantViewStore.getCurrent());\n\n      _this.startStopPlayer();\n    };\n\n    _this.onClientUpdateProfileMediaViewerContent = function (update) {\n      _this.openProfileMediaViewer = Boolean(AppStore.profileMediaViewerContent);\n\n      _this.startStopPlayer();\n    };\n\n    _this.onClientUpdateMediaViewerContent = function (update) {\n      _this.openMediaViewer = Boolean(AppStore.mediaViewerContent);\n\n      _this.startStopPlayer();\n    };\n\n    _this.onClientUpdateInstantViewViewerContent = function (update) {\n      _this.openIVMedia = Boolean(InstantViewStore.viewerContent);\n\n      _this.startStopPlayer();\n    };\n\n    _this.onClientUpdateFocusWindow = function (update) {\n      _this.windowFocused = update.focused;\n\n      _this.startStopPlayer();\n    };\n\n    _this.onClientUpdateMessagesInView = function (update) {\n      var _this$props = _this.props,\n          chatId = _this$props.chatId,\n          messageId = _this$props.messageId;\n      var key = \"\".concat(chatId, \"_\").concat(messageId);\n      _this.inView = update.messages.has(key);\n\n      _this.startStopPlayer();\n    };\n\n    _this.onClientUpdateBlocksInView = function (update) {\n      var pageBlock = _this.props.pageBlock;\n      if (!pageBlock) return;\n      _this.ivInView = update.blocks.has(pageBlock);\n\n      _this.startStopPlayer();\n    };\n\n    _this.onClientUpdateAnimationBlob = function (update) {\n      var animation = _this.props.animation.animation;\n      var fileId = update.fileId;\n      if (!animation) return;\n\n      if (animation.id === fileId) {\n        _this.forceUpdate(function () {\n          _this.startStopPlayer();\n        });\n      }\n    };\n\n    _this.onClientUpdateAnimationThumbnailBlob = function (update) {\n      var thumbnail = _this.props.animation.thumbnail;\n      if (!thumbnail) return;\n      var fileId = update.fileId;\n\n      if (thumbnail.photo && thumbnail.photo.id === fileId) {\n        _this.forceUpdate();\n      }\n    };\n\n    _this.videoRef = React.createRef();\n\n    _this.setPlayerParams();\n\n    return _this;\n  }\n\n  _createClass(Animation, [{\n    key: \"setPlayerParams\",\n    value: function setPlayerParams() {\n      this.windowFocused = window.hasFocus;\n      this.inView = false;\n      this.openMediaViewer = Boolean(AppStore.mediaViewerContent);\n      this.openProfileMediaViewer = Boolean(AppStore.profileMediaViewerContent);\n      this.openIV = Boolean(InstantViewStore.getCurrent());\n      this.ivInView = false;\n      this.openIVMedia = Boolean(InstantViewStore.viewerContent);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      if (prevProps.animation !== this.props.animation) {\n        this.setPlayerParams();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      FileStore.on('clientUpdateAnimationThumbnailBlob', this.onClientUpdateAnimationThumbnailBlob);\n      FileStore.on('clientUpdateAnimationBlob', this.onClientUpdateAnimationBlob);\n      AppStore.on('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n      AppStore.on('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n      AppStore.on('clientUpdateProfileMediaViewerContent', this.onClientUpdateProfileMediaViewerContent);\n      MessageStore.on('clientUpdateMessagesInView', this.onClientUpdateMessagesInView);\n      InstantViewStore.on('clientUpdateInstantViewContent', this.onClientUpdateInstantViewContent);\n      InstantViewStore.on('clientUpdateInstantViewViewerContent', this.onClientUpdateInstantViewViewerContent);\n      InstantViewStore.on('clientUpdateBlocksInView', this.onClientUpdateBlocksInView);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      FileStore.off('clientUpdateAnimationThumbnailBlob', this.onClientUpdateAnimationThumbnailBlob);\n      FileStore.off('clientUpdateAnimationBlob', this.onClientUpdateAnimationBlob);\n      AppStore.off('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n      AppStore.off('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n      AppStore.off('clientUpdateProfileMediaViewerContent', this.onClientUpdateProfileMediaViewerContent);\n      MessageStore.off('clientUpdateMessagesInView', this.onClientUpdateMessagesInView);\n      InstantViewStore.off('clientUpdateInstantViewContent', this.onClientUpdateInstantViewContent);\n      InstantViewStore.off('clientUpdateInstantViewViewerContent', this.onClientUpdateInstantViewViewerContent);\n      InstantViewStore.off('clientUpdateBlocksInView', this.onClientUpdateBlocksInView);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          displaySize = _this$props2.displaySize,\n          openMedia = _this$props2.openMedia,\n          t = _this$props2.t,\n          title = _this$props2.title,\n          caption = _this$props2.caption,\n          type = _this$props2.type,\n          style = _this$props2.style;\n      var _this$props$animation = this.props.animation,\n          minithumbnail = _this$props$animation.minithumbnail,\n          thumbnail = _this$props$animation.thumbnail,\n          animation = _this$props$animation.animation,\n          mime_type = _this$props$animation.mime_type,\n          width = _this$props$animation.width,\n          height = _this$props$animation.height;\n      var fitPhotoSize = getFitSize({\n        width: width,\n        height: height\n      } || thumbnail, displaySize, false);\n      if (!fitPhotoSize) return null;\n\n      var animationStyle = _objectSpread({\n        width: fitPhotoSize.width,\n        height: fitPhotoSize.height\n      }, style);\n\n      var miniSrc = minithumbnail ? 'data:image/jpeg;base64, ' + minithumbnail.data : null;\n      var thumbnailSrc = getSrc(thumbnail ? thumbnail.photo : null);\n      var src = getSrc(animation);\n      var isBlurred = thumbnailSrc ? isBlurredThumbnail(thumbnail) : Boolean(miniSrc);\n      var isGif = isGifMimeType(mime_type);\n      var source = src ? React.createElement(\"source\", {\n        src: src,\n        type: mime_type,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }) : null;\n      return React.createElement(\"div\", {\n        className: classNames('animation', {\n          'animation-big': type === 'message',\n          'animation-title': title,\n          'media-title': title,\n          'animation-caption': caption,\n          pointer: openMedia\n        }),\n        style: animationStyle,\n        onClick: openMedia,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, src ? isGif ? React.createElement(\"img\", {\n        className: \"animation-preview\",\n        src: src,\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }) : React.createElement(\"video\", {\n        ref: this.videoRef,\n        className: \"media-viewer-content-animation\",\n        poster: thumbnailSrc || miniSrc,\n        muted: true,\n        autoPlay: true,\n        loop: true,\n        playsInline: true,\n        width: animationStyle.width,\n        height: animationStyle.height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, source) : React.createElement(React.Fragment, null, React.createElement(\"img\", {\n        className: classNames('animation-preview', {\n          'media-blurred': isBlurred,\n          'media-mini-blurred': !src && !thumbnailSrc && isBlurred\n        }),\n        src: thumbnailSrc || miniSrc,\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"animation-meta\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, getFileSize(animation))), React.createElement(FileProgress, {\n        file: animation,\n        download: true,\n        upload: true,\n        cancelButton: true,\n        icon: React.createElement(\"div\", {\n          className: \"animation-play\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229\n          },\n          __self: this\n        }, t('AttachGif')),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Animation;\n}(React.Component);\n\nAnimation.propTypes = {\n  chatId: PropTypes.number,\n  messageId: PropTypes.number,\n  pageBlock: PropTypes.object,\n  animation: PropTypes.object.isRequired,\n  openMedia: PropTypes.func,\n  size: PropTypes.number,\n  displaySize: PropTypes.number,\n  iv: PropTypes.bool\n};\nAnimation.defaultProps = {\n  size: PHOTO_SIZE,\n  displaySize: PHOTO_DISPLAY_SIZE,\n  iv: false\n};\nexport default withTranslation()(Animation);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Message/Media/Animation.js"],"names":["React","PropTypes","classNames","withTranslation","FileProgress","getFitSize","isBlurredThumbnail","getFileSize","getSrc","isGifMimeType","PHOTO_DISPLAY_SIZE","PHOTO_SIZE","AppStore","FileStore","InstantViewStore","MessageStore","Animation","props","startStopPlayer","player","videoRef","current","windowFocused","inView","openMediaViewer","openProfileMediaViewer","openIV","ivInView","openIVMedia","play","pause","onClientUpdateInstantViewContent","update","Boolean","getCurrent","onClientUpdateProfileMediaViewerContent","profileMediaViewerContent","onClientUpdateMediaViewerContent","mediaViewerContent","onClientUpdateInstantViewViewerContent","viewerContent","onClientUpdateFocusWindow","focused","onClientUpdateMessagesInView","chatId","messageId","key","messages","has","onClientUpdateBlocksInView","pageBlock","blocks","onClientUpdateAnimationBlob","animation","fileId","id","forceUpdate","onClientUpdateAnimationThumbnailBlob","thumbnail","photo","createRef","setPlayerParams","window","hasFocus","prevProps","prevState","snapshot","on","off","displaySize","openMedia","t","title","caption","type","style","minithumbnail","mime_type","width","height","fitPhotoSize","animationStyle","miniSrc","data","thumbnailSrc","src","isBlurred","isGif","source","pointer","Component","propTypes","number","object","isRequired","func","size","iv","bool","defaultProps"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport FileProgress from '../../Viewer/FileProgress';\nimport { getFitSize } from '../../../Utils/Common';\nimport { isBlurredThumbnail } from '../../../Utils/Media';\nimport { getFileSize, getSrc, isGifMimeType } from '../../../Utils/File';\nimport { PHOTO_DISPLAY_SIZE, PHOTO_SIZE } from '../../../Constants';\nimport AppStore from '../../../Stores/ApplicationStore';\nimport FileStore from '../../../Stores/FileStore';\nimport InstantViewStore from '../../../Stores/InstantViewStore';\nimport MessageStore from '../../../Stores/MessageStore';\nimport './Animation.css';\n\nclass Animation extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.videoRef = React.createRef();\n\n        this.setPlayerParams();\n    }\n\n    setPlayerParams() {\n        this.windowFocused = window.hasFocus;\n\n        this.inView = false;\n        this.openMediaViewer = Boolean(AppStore.mediaViewerContent);\n        this.openProfileMediaViewer = Boolean(AppStore.profileMediaViewerContent);\n        this.openIV = Boolean(InstantViewStore.getCurrent());\n\n        this.ivInView = false;\n        this.openIVMedia = Boolean(InstantViewStore.viewerContent);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.animation !== this.props.animation) {\n            this.setPlayerParams();\n        }\n    }\n\n    componentDidMount() {\n        FileStore.on('clientUpdateAnimationThumbnailBlob', this.onClientUpdateAnimationThumbnailBlob);\n        FileStore.on('clientUpdateAnimationBlob', this.onClientUpdateAnimationBlob);\n        AppStore.on('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n        AppStore.on('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n        AppStore.on('clientUpdateProfileMediaViewerContent', this.onClientUpdateProfileMediaViewerContent);\n        MessageStore.on('clientUpdateMessagesInView', this.onClientUpdateMessagesInView);\n        InstantViewStore.on('clientUpdateInstantViewContent', this.onClientUpdateInstantViewContent);\n        InstantViewStore.on('clientUpdateInstantViewViewerContent', this.onClientUpdateInstantViewViewerContent);\n        InstantViewStore.on('clientUpdateBlocksInView', this.onClientUpdateBlocksInView);\n    }\n\n    componentWillUnmount() {\n        FileStore.off('clientUpdateAnimationThumbnailBlob', this.onClientUpdateAnimationThumbnailBlob);\n        FileStore.off('clientUpdateAnimationBlob', this.onClientUpdateAnimationBlob);\n        AppStore.off('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n        AppStore.off('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n        AppStore.off('clientUpdateProfileMediaViewerContent', this.onClientUpdateProfileMediaViewerContent);\n        MessageStore.off('clientUpdateMessagesInView', this.onClientUpdateMessagesInView);\n        InstantViewStore.off('clientUpdateInstantViewContent', this.onClientUpdateInstantViewContent);\n        InstantViewStore.off('clientUpdateInstantViewViewerContent', this.onClientUpdateInstantViewViewerContent);\n        InstantViewStore.off('clientUpdateBlocksInView', this.onClientUpdateBlocksInView);\n    }\n\n    startStopPlayer = () => {\n        const player = this.videoRef.current;\n        if (!player) return;\n\n        if (\n            this.windowFocused &&\n            ((this.inView && !this.openMediaViewer && !this.openProfileMediaViewer && !this.openIV) ||\n                (this.ivInView && !this.openIVMedia))\n        ) {\n            player.play();\n        } else {\n            player.pause();\n        }\n    };\n\n    onClientUpdateInstantViewContent = update => {\n        this.openIV = Boolean(InstantViewStore.getCurrent());\n\n        this.startStopPlayer();\n    };\n\n    onClientUpdateProfileMediaViewerContent = update => {\n        this.openProfileMediaViewer = Boolean(AppStore.profileMediaViewerContent);\n\n        this.startStopPlayer();\n    };\n\n    onClientUpdateMediaViewerContent = update => {\n        this.openMediaViewer = Boolean(AppStore.mediaViewerContent);\n\n        this.startStopPlayer();\n    };\n\n    onClientUpdateInstantViewViewerContent = update => {\n        this.openIVMedia = Boolean(InstantViewStore.viewerContent);\n\n        this.startStopPlayer();\n    };\n\n    onClientUpdateFocusWindow = update => {\n        this.windowFocused = update.focused;\n\n        this.startStopPlayer();\n    };\n\n    onClientUpdateMessagesInView = update => {\n        const { chatId, messageId } = this.props;\n        const key = `${chatId}_${messageId}`;\n\n        this.inView = update.messages.has(key);\n\n        this.startStopPlayer();\n    };\n\n    onClientUpdateBlocksInView = update => {\n        const { pageBlock } = this.props;\n        if (!pageBlock) return;\n\n        this.ivInView = update.blocks.has(pageBlock);\n\n        this.startStopPlayer();\n    };\n\n    onClientUpdateAnimationBlob = update => {\n        const { animation } = this.props.animation;\n        const { fileId } = update;\n\n        if (!animation) return;\n\n        if (animation.id === fileId) {\n            this.forceUpdate(() => {\n                this.startStopPlayer();\n            });\n        }\n    };\n\n    onClientUpdateAnimationThumbnailBlob = update => {\n        const { thumbnail } = this.props.animation;\n        if (!thumbnail) return;\n\n        const { fileId } = update;\n\n        if (thumbnail.photo && thumbnail.photo.id === fileId) {\n            this.forceUpdate();\n        }\n    };\n\n    render() {\n        const { displaySize, openMedia, t, title, caption, type, style } = this.props;\n        const { minithumbnail, thumbnail, animation, mime_type, width, height } = this.props.animation;\n\n        const fitPhotoSize = getFitSize({ width, height } || thumbnail, displaySize, false);\n        if (!fitPhotoSize) return null;\n\n        const animationStyle = {\n            width: fitPhotoSize.width,\n            height: fitPhotoSize.height,\n            ...style\n        };\n\n        const miniSrc = minithumbnail ? 'data:image/jpeg;base64, ' + minithumbnail.data : null;\n        const thumbnailSrc = getSrc(thumbnail ? thumbnail.photo : null);\n        const src = getSrc(animation);\n\n        const isBlurred = thumbnailSrc ? isBlurredThumbnail(thumbnail) : Boolean(miniSrc);\n        const isGif = isGifMimeType(mime_type);\n        const source = src ? <source src={src} type={mime_type}/> : null;\n\n        return (\n            <div\n                className={classNames('animation', {\n                    'animation-big': type === 'message',\n                    'animation-title': title,\n                    'media-title': title,\n                    'animation-caption': caption,\n                    pointer: openMedia\n                })}\n                style={animationStyle}\n                onClick={openMedia}>\n                {src ? (\n                    isGif ? (\n                        <img className='animation-preview' src={src} alt='' />\n                    ) : (\n                        <video\n                            ref={this.videoRef}\n                            className='media-viewer-content-animation'\n                            poster={thumbnailSrc || miniSrc}\n                            muted\n                            autoPlay\n                            loop\n                            playsInline\n                            width={animationStyle.width}\n                            height={animationStyle.height}\n                        >\n                            {source}\n                        </video>\n                    )\n                ) : (\n                    <>\n                        <img\n                            className={classNames('animation-preview', {\n                                'media-blurred': isBlurred,\n                                'media-mini-blurred': !src && !thumbnailSrc && isBlurred\n                            })}\n                            src={thumbnailSrc || miniSrc}\n                            alt=''\n                        />\n                        <div className='animation-meta'>{getFileSize(animation)}</div>\n                    </>\n                )}\n                <FileProgress\n                    file={animation}\n                    download\n                    upload\n                    cancelButton\n                    icon={<div className='animation-play'>{t('AttachGif')}</div>}\n                />\n            </div>\n        );\n    }\n}\n\nAnimation.propTypes = {\n    chatId: PropTypes.number,\n    messageId: PropTypes.number,\n    pageBlock: PropTypes.object,\n    animation: PropTypes.object.isRequired,\n    openMedia: PropTypes.func,\n    size: PropTypes.number,\n    displaySize: PropTypes.number,\n    iv: PropTypes.bool\n};\n\nAnimation.defaultProps = {\n    size: PHOTO_SIZE,\n    displaySize: PHOTO_DISPLAY_SIZE,\n    iv: false\n};\n\nexport default withTranslation()(Animation);\n"]},"metadata":{},"sourceType":"module"}