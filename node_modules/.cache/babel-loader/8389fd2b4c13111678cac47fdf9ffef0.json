{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Message/ServiceMessage.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport { withRestoreRef, withSaveRef, compose } from '../../Utils/HOC';\nimport { withTranslation } from 'react-i18next';\nimport classNames from 'classnames';\nimport DayMeta from './DayMeta';\nimport UnreadSeparator from './UnreadSeparator';\nimport Photo from './Media/Photo';\nimport { openMedia } from '../../Utils/Message';\nimport { getServiceMessageContent } from '../../Utils/ServiceMessage';\nimport MessageStore from '../../Stores/MessageStore';\nimport './ServiceMessage.css';\nvar chatPhotoStyle = {\n  width: 64,\n  height: 64,\n  borderRadius: '50%',\n  margin: '0 auto 5px'\n};\n\nvar ServiceMessage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ServiceMessage, _React$Component);\n\n  function ServiceMessage(props) {\n    var _this;\n\n    _classCallCheck(this, ServiceMessage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ServiceMessage).call(this, props));\n\n    _this.onClientUpdateMessageHighlighted = function (update) {\n      var _this$props = _this.props,\n          chatId = _this$props.chatId,\n          messageId = _this$props.messageId;\n      var _this$state = _this.state,\n          selected = _this$state.selected,\n          highlighted = _this$state.highlighted;\n      if (selected) return;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        if (highlighted) {\n          _this.setState({\n            highlighted: false\n          }, function () {\n            setTimeout(function () {\n              _this.setState({\n                highlighted: true\n              });\n            }, 0);\n          });\n        } else {\n          _this.setState({\n            highlighted: true\n          });\n        }\n      } else if (highlighted) {\n        _this.setState({\n          highlighted: false\n        });\n      }\n    };\n\n    _this.handleAnimationEnd = function () {\n      _this.setState({\n        highlighted: false\n      });\n    };\n\n    _this.openMedia = function (event) {\n      if (event) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      var _this$props2 = _this.props,\n          chatId = _this$props2.chatId,\n          messageId = _this$props2.messageId;\n      openMedia(chatId, messageId);\n    };\n\n    var _this$props3 = _this.props,\n        _chatId = _this$props3.chatId,\n        _messageId = _this$props3.messageId;\n    _this.state = {\n      message: MessageStore.get(_chatId, _messageId),\n      highlighted: false\n    };\n    return _this;\n  }\n\n  _createClass(ServiceMessage, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var _this$props4 = this.props,\n          chatId = _this$props4.chatId,\n          messageId = _this$props4.messageId,\n          sendingState = _this$props4.sendingState,\n          showUnreadSeparator = _this$props4.showUnreadSeparator;\n      var highlighted = this.state.highlighted;\n\n      if (nextProps.chatId !== chatId) {\n        return true;\n      }\n\n      if (nextProps.messageId !== messageId) {\n        return true;\n      }\n\n      if (nextProps.sendingState !== sendingState) {\n        return true;\n      }\n\n      if (nextProps.showUnreadSeparator !== showUnreadSeparator) {\n        return true;\n      }\n\n      if (nextState.highlighted !== highlighted) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      MessageStore.on('clientUpdateMessageHighlighted', this.onClientUpdateMessageHighlighted);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      MessageStore.off('clientUpdateMessageHighlighted', this.onClientUpdateMessageHighlighted);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          chatId = _this$props5.chatId,\n          messageId = _this$props5.messageId,\n          showUnreadSeparator = _this$props5.showUnreadSeparator,\n          showDate = _this$props5.showDate;\n      var highlighted = this.state.highlighted;\n      var message = MessageStore.get(chatId, messageId);\n      if (!message) return null;\n      var content = message.content,\n          date = message.date;\n      if (!content) return null;\n      var photo = content.photo;\n      var text = getServiceMessageContent(message, true);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, showDate && React.createElement(DayMeta, {\n        date: date,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: classNames('service-message', {\n          'message-highlighted': highlighted\n        }),\n        onAnimationEnd: this.handleAnimationEnd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, showUnreadSeparator && React.createElement(UnreadSeparator, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"service-message-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"service-message-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, text))), photo && React.createElement(Photo, {\n        chatId: chatId,\n        messageId: messageId,\n        photo: photo,\n        style: chatPhotoStyle,\n        openMedia: this.openMedia,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return ServiceMessage;\n}(React.Component);\n\nvar enhance = compose(withSaveRef(), withTranslation(), withRestoreRef());\nexport default enhance(ServiceMessage);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Message/ServiceMessage.js"],"names":["React","withRestoreRef","withSaveRef","compose","withTranslation","classNames","DayMeta","UnreadSeparator","Photo","openMedia","getServiceMessageContent","MessageStore","chatPhotoStyle","width","height","borderRadius","margin","ServiceMessage","props","onClientUpdateMessageHighlighted","update","chatId","messageId","state","selected","highlighted","setState","setTimeout","handleAnimationEnd","event","preventDefault","stopPropagation","message","get","nextProps","nextState","sendingState","showUnreadSeparator","on","off","showDate","content","date","photo","text","Component","enhance"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport { withRestoreRef, withSaveRef, compose } from '../../Utils/HOC';\nimport { withTranslation } from 'react-i18next';\nimport classNames from 'classnames';\nimport DayMeta from './DayMeta';\nimport UnreadSeparator from './UnreadSeparator';\nimport Photo from './Media/Photo';\nimport { openMedia } from '../../Utils/Message';\nimport { getServiceMessageContent } from '../../Utils/ServiceMessage';\nimport MessageStore from '../../Stores/MessageStore';\nimport './ServiceMessage.css';\n\nconst chatPhotoStyle = {\n    width: 64,\n    height: 64,\n    borderRadius: '50%',\n    margin: '0 auto 5px'\n};\n\nclass ServiceMessage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const { chatId, messageId } = this.props;\n        this.state = {\n            message: MessageStore.get(chatId, messageId),\n            highlighted: false\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const { chatId, messageId, sendingState, showUnreadSeparator } = this.props;\n        const { highlighted } = this.state;\n\n        if (nextProps.chatId !== chatId) {\n            return true;\n        }\n\n        if (nextProps.messageId !== messageId) {\n            return true;\n        }\n\n        if (nextProps.sendingState !== sendingState) {\n            return true;\n        }\n\n        if (nextProps.showUnreadSeparator !== showUnreadSeparator) {\n            return true;\n        }\n\n        if (nextState.highlighted !== highlighted) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        MessageStore.on('clientUpdateMessageHighlighted', this.onClientUpdateMessageHighlighted);\n    }\n\n    componentWillUnmount() {\n        MessageStore.off('clientUpdateMessageHighlighted', this.onClientUpdateMessageHighlighted);\n    }\n\n    onClientUpdateMessageHighlighted = update => {\n        const { chatId, messageId } = this.props;\n        const { selected, highlighted } = this.state;\n\n        if (selected) return;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            if (highlighted) {\n                this.setState({ highlighted: false }, () => {\n                    setTimeout(() => {\n                        this.setState({ highlighted: true });\n                    }, 0);\n                });\n            } else {\n                this.setState({ highlighted: true });\n            }\n        } else if (highlighted) {\n            this.setState({ highlighted: false });\n        }\n    };\n\n    handleAnimationEnd = () => {\n        this.setState({ highlighted: false });\n    };\n\n    openMedia = event => {\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n\n        const { chatId, messageId } = this.props;\n\n        openMedia(chatId, messageId);\n    };\n\n    render() {\n        const { chatId, messageId, showUnreadSeparator, showDate } = this.props;\n        const { highlighted } = this.state;\n\n        const message = MessageStore.get(chatId, messageId);\n        if (!message) return null;\n\n        const { content, date } = message;\n        if (!content) return null;\n\n        const { photo } = content;\n\n        const text = getServiceMessageContent(message, true);\n\n        return (\n            <div>\n                {showDate && <DayMeta date={date} />}\n                <div\n                    className={classNames('service-message', { 'message-highlighted': highlighted })}\n                    onAnimationEnd={this.handleAnimationEnd}>\n                    {showUnreadSeparator && <UnreadSeparator />}\n                    <div className='service-message-wrapper'>\n                        <div className='service-message-content'>\n                            <div>{text}</div>\n                        </div>\n                    </div>\n                    {photo && (\n                        <Photo\n                            chatId={chatId}\n                            messageId={messageId}\n                            photo={photo}\n                            style={chatPhotoStyle}\n                            openMedia={this.openMedia}\n                        />\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst enhance = compose(\n    withSaveRef(),\n    withTranslation(),\n    withRestoreRef()\n);\n\nexport default enhance(ServiceMessage);\n"]},"metadata":{},"sourceType":"module"}