{"ast":null,"code":"import _defineProperty from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Message/Media/Photo.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport FileProgress from '../../Viewer/FileProgress';\nimport { getSize, getFitSize } from '../../../Utils/Common';\nimport { getSrc } from '../../../Utils/File';\nimport { isBlurredThumbnail } from '../../../Utils/Media';\nimport { PHOTO_SIZE, PHOTO_DISPLAY_SIZE, PHOTO_THUMBNAIL_SIZE } from '../../../Constants';\nimport FileStore from '../../../Stores/FileStore';\nimport './Photo.css';\n\nvar Photo =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Photo, _React$Component);\n\n  function Photo(props) {\n    var _this;\n\n    _classCallCheck(this, Photo);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Photo).call(this, props));\n\n    _this.onClientUpdatePhotoBlob = function (update) {\n      var _this$state = _this.state,\n          photoSize = _this$state.photoSize,\n          thumbSize = _this$state.thumbSize;\n      var fileId = update.fileId;\n\n      if (photoSize && photoSize.photo && photoSize.photo.id === fileId) {\n        _this.forceUpdate();\n      } else if (thumbSize && thumbSize.photo && thumbSize.photo.id === fileId) {\n        _this.forceUpdate();\n      }\n    };\n\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(Photo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      FileStore.on('clientUpdatePhotoBlob', this.onClientUpdatePhotoBlob);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      FileStore.off('clientUpdatePhotoBlob', this.onClientUpdatePhotoBlob);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          displaySize = _this$props.displaySize,\n          openMedia = _this$props.openMedia,\n          showProgress = _this$props.showProgress,\n          title = _this$props.title,\n          caption = _this$props.caption,\n          type = _this$props.type,\n          style = _this$props.style;\n      var _this$state2 = this.state,\n          thumbSize = _this$state2.thumbSize,\n          photoSize = _this$state2.photoSize,\n          minithumbnail = _this$state2.minithumbnail;\n      if (!photoSize) return null;\n      var miniSrc = minithumbnail ? 'data:image/jpeg;base64, ' + minithumbnail.data : null;\n      var thumbSrc = getSrc(thumbSize ? thumbSize.photo : null);\n      var src = getSrc(photoSize.photo);\n      var isBlurred = !thumbSrc && miniSrc || isBlurredThumbnail(thumbSize);\n      var fitPhotoSize = getFitSize(photoSize, displaySize, false);\n      if (!fitPhotoSize) return null; // console.log('[photo] render', displaySize, fitPhotoSize);\n\n      var photoStyle = _objectSpread({\n        width: fitPhotoSize.width,\n        height: fitPhotoSize.height\n      }, style);\n\n      var hasSrc = Boolean(src || thumbSrc || miniSrc);\n      return React.createElement(\"div\", {\n        className: classNames(className, 'photo', {\n          'photo-big': type === 'message',\n          'photo-title': title,\n          'photo-caption': caption,\n          pointer: openMedia\n        }),\n        style: photoStyle,\n        onClick: openMedia,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, hasSrc && React.createElement(\"img\", {\n        className: classNames('photo-image', {\n          'media-blurred': !src && isBlurred,\n          'media-mini-blurred': !src && !thumbSrc && isBlurred\n        }),\n        draggable: false,\n        src: src || thumbSrc || miniSrc,\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }), showProgress && React.createElement(FileProgress, {\n        file: photoSize.photo,\n        download: true,\n        upload: true,\n        cancelButton: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var photo = props.photo,\n          size = props.size,\n          thumbnailSize = props.thumbnailSize;\n\n      if (photo !== state.prevPhoto) {\n        return {\n          prevPhoto: photo,\n          photoSize: getSize(photo.sizes, size),\n          thumbSize: getSize(photo.sizes, thumbnailSize),\n          minithumbnail: photo ? photo.minithumbnail : null\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Photo;\n}(React.Component);\n\nPhoto.propTypes = {\n  chatId: PropTypes.number,\n  messageId: PropTypes.number,\n  photo: PropTypes.object.isRequired,\n  openMedia: PropTypes.func,\n  showProgress: PropTypes.bool,\n  size: PropTypes.number,\n  thumbnailSize: PropTypes.number,\n  displaySize: PropTypes.number,\n  style: PropTypes.object\n};\nPhoto.defaultProps = {\n  size: PHOTO_SIZE,\n  thumbnailSize: PHOTO_THUMBNAIL_SIZE,\n  displaySize: PHOTO_DISPLAY_SIZE,\n  showProgress: true\n};\nexport default Photo;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Message/Media/Photo.js"],"names":["React","PropTypes","classNames","FileProgress","getSize","getFitSize","getSrc","isBlurredThumbnail","PHOTO_SIZE","PHOTO_DISPLAY_SIZE","PHOTO_THUMBNAIL_SIZE","FileStore","Photo","props","onClientUpdatePhotoBlob","update","state","photoSize","thumbSize","fileId","photo","id","forceUpdate","on","off","className","displaySize","openMedia","showProgress","title","caption","type","style","minithumbnail","miniSrc","data","thumbSrc","src","isBlurred","fitPhotoSize","photoStyle","width","height","hasSrc","Boolean","pointer","size","thumbnailSize","prevPhoto","sizes","Component","propTypes","chatId","number","messageId","object","isRequired","func","bool","defaultProps"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport FileProgress from '../../Viewer/FileProgress';\nimport { getSize, getFitSize } from '../../../Utils/Common';\nimport { getSrc } from '../../../Utils/File';\nimport { isBlurredThumbnail } from '../../../Utils/Media';\nimport { PHOTO_SIZE, PHOTO_DISPLAY_SIZE, PHOTO_THUMBNAIL_SIZE } from '../../../Constants';\nimport FileStore from '../../../Stores/FileStore';\nimport './Photo.css';\n\nclass Photo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        const { photo, size, thumbnailSize } = props;\n        if (photo !== state.prevPhoto) {\n            return {\n                prevPhoto: photo,\n                photoSize: getSize(photo.sizes, size),\n                thumbSize: getSize(photo.sizes, thumbnailSize),\n                minithumbnail: photo ? photo.minithumbnail : null\n            };\n        }\n\n        return null;\n    }\n\n    componentDidMount() {\n        FileStore.on('clientUpdatePhotoBlob', this.onClientUpdatePhotoBlob);\n    }\n\n    componentWillUnmount() {\n        FileStore.off('clientUpdatePhotoBlob', this.onClientUpdatePhotoBlob);\n    }\n\n    onClientUpdatePhotoBlob = update => {\n        const { photoSize, thumbSize } = this.state;\n        const { fileId } = update;\n\n        if (photoSize && photoSize.photo && photoSize.photo.id === fileId) {\n            this.forceUpdate();\n        } else if (thumbSize && thumbSize.photo && thumbSize.photo.id === fileId) {\n            this.forceUpdate();\n        }\n    };\n\n    render() {\n        const { className, displaySize, openMedia, showProgress, title, caption, type, style } = this.props;\n        const { thumbSize, photoSize, minithumbnail } = this.state;\n\n        if (!photoSize) return null;\n\n        const miniSrc = minithumbnail ? 'data:image/jpeg;base64, ' + minithumbnail.data : null;\n        const thumbSrc = getSrc(thumbSize ? thumbSize.photo : null);\n        const src = getSrc(photoSize.photo);\n        const isBlurred = (!thumbSrc && miniSrc) || isBlurredThumbnail(thumbSize);\n\n        const fitPhotoSize = getFitSize(photoSize, displaySize, false);\n        if (!fitPhotoSize) return null;\n\n        // console.log('[photo] render', displaySize, fitPhotoSize);\n        const photoStyle = {\n            width: fitPhotoSize.width,\n            height: fitPhotoSize.height,\n            ...style\n        };\n\n        const hasSrc = Boolean(src || thumbSrc || miniSrc);\n\n        return (\n            <div\n                className={classNames(className, 'photo', {\n                    'photo-big': type === 'message',\n                    'photo-title': title,\n                    'photo-caption': caption,\n                    pointer: openMedia\n                })}\n                style={photoStyle}\n                onClick={openMedia}>\n                {hasSrc && (\n                    <img\n                        className={classNames('photo-image', {\n                            'media-blurred': !src && isBlurred,\n                            'media-mini-blurred': !src && !thumbSrc && isBlurred\n                        })}\n                        draggable={false}\n                        src={src || thumbSrc || miniSrc}\n                        alt=''\n                    />\n                )}\n                {showProgress && <FileProgress file={photoSize.photo} download upload cancelButton />}\n            </div>\n        );\n    }\n}\n\nPhoto.propTypes = {\n    chatId: PropTypes.number,\n    messageId: PropTypes.number,\n    photo: PropTypes.object.isRequired,\n    openMedia: PropTypes.func,\n    showProgress: PropTypes.bool,\n\n    size: PropTypes.number,\n    thumbnailSize: PropTypes.number,\n    displaySize: PropTypes.number,\n    style: PropTypes.object\n};\n\nPhoto.defaultProps = {\n    size: PHOTO_SIZE,\n    thumbnailSize: PHOTO_THUMBNAIL_SIZE,\n    displaySize: PHOTO_DISPLAY_SIZE,\n    showProgress: true\n};\n\nexport default Photo;\n"]},"metadata":{},"sourceType":"module"}