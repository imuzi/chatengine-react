{"ast":null,"code":"import _defineProperty from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Tile/UserTile.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport { getUserLetters, isDeletedUser } from '../../Utils/User';\nimport { getSrc, loadChatContent } from '../../Utils/File';\nimport UserStore from '../../Stores/UserStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport FileStore from '../../Stores/FileStore';\nimport './UserTile.css';\nimport DeletedAccountIcon from '../../Assets/Icons/DeletedAccount';\n\nvar UserTile =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(UserTile, _Component);\n\n  function UserTile(props) {\n    var _this;\n\n    _classCallCheck(this, UserTile);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UserTile).call(this, props));\n\n    _this.onClientUpdateUserBlob = function (update) {\n      var userId = _this.props.userId;\n      if (userId !== update.userId) return;\n\n      if (_this.state.loaded) {\n        _this.setState({\n          loaded: false\n        });\n      } else {\n        _this.forceUpdate();\n      }\n    };\n\n    _this.onClientUpdateChatBlob = function (update) {\n      var userId = _this.props.userId;\n      var chatId = update.chatId;\n      var chat = ChatStore.get(chatId);\n      if (!chat) return;\n      if (!chat.type) return;\n\n      switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup':\n        case 'chatTypeSupergroup':\n          {\n            return;\n          }\n\n        case 'chatTypePrivate':\n        case 'chatTypeSecret':\n          {\n            if (chat.type.user_id !== userId) return;\n\n            if (_this.state.loaded) {\n              _this.setState({\n                loaded: false\n              });\n            } else {\n              _this.forceUpdate();\n            }\n          }\n      }\n    };\n\n    _this.onUpdateChatPhoto = function (update) {\n      var userId = _this.props.userId;\n      var chat_id = update.chat_id,\n          photo = update.photo;\n      var chat = ChatStore.get(chat_id);\n      if (!chat) return;\n      if (!chat.type) return;\n\n      switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup':\n        case 'chatTypeSupergroup':\n          {\n            return;\n          }\n\n        case 'chatTypePrivate':\n        case 'chatTypeSecret':\n          {\n            if (chat.type.user_id !== userId) return;\n\n            if (_this.state.loaded) {\n              _this.setState({\n                loaded: false\n              });\n            } else {\n              _this.forceUpdate();\n            }\n\n            if (photo) {\n              var store = FileStore.getStore();\n              loadChatContent(store, chat);\n            }\n          }\n      }\n    };\n\n    _this.onUpdateChatTitle = function (update) {\n      var userId = _this.props.userId;\n      var chat = ChatStore.get(update.chat_id);\n      if (!chat) return;\n      if (!chat.type) return;\n\n      switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup':\n        case 'chatTypeSupergroup':\n          {\n            return;\n          }\n\n        case 'chatTypePrivate':\n        case 'chatTypeSecret':\n          {\n            if (chat.type.user_id !== userId && !chat.photo) return;\n\n            _this.forceUpdate();\n          }\n      }\n    };\n\n    _this.handleSelect = function (event) {\n      var _this$props = _this.props,\n          userId = _this$props.userId,\n          onSelect = _this$props.onSelect;\n      if (!onSelect) return;\n      event.stopPropagation();\n      onSelect(userId);\n    };\n\n    _this.handleLoad = function () {\n      _this.setState({\n        loaded: true\n      });\n    };\n\n    if (process.env.NODE_ENV !== 'production') {\n      _this.state = {\n        user: UserStore.get(_this.props.userId),\n        loaded: false\n      };\n    } else {\n      _this.state = {\n        loaded: false\n      };\n    }\n\n    return _this;\n  }\n\n  _createClass(UserTile, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (nextProps.userId !== this.props.userId) {\n        return true;\n      }\n\n      if (nextState.loaded !== this.state.loaded) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      FileStore.on('clientUpdateUserBlob', this.onClientUpdateUserBlob);\n      FileStore.on('clientUpdateChatBlob', this.onClientUpdateChatBlob);\n      ChatStore.on('updateChatPhoto', this.onUpdateChatPhoto);\n      ChatStore.on('updateChatTitle', this.onUpdateChatTitle);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      FileStore.off('clientUpdateUserBlob', this.onClientUpdateUserBlob);\n      FileStore.off('clientUpdateChatBlob', this.onClientUpdateChatBlob);\n      ChatStore.off('updateChatPhoto', this.onUpdateChatPhoto);\n      ChatStore.off('updateChatTitle', this.onUpdateChatTitle);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          className = _this$props2.className,\n          userId = _this$props2.userId,\n          fistName = _this$props2.fistName,\n          lastName = _this$props2.lastName,\n          onSelect = _this$props2.onSelect,\n          small = _this$props2.small,\n          dialog = _this$props2.dialog,\n          poll = _this$props2.poll,\n          t = _this$props2.t;\n      var loaded = this.state.loaded;\n      var user = UserStore.get(userId);\n      if (!user && !(fistName || lastName)) return null;\n\n      if (isDeletedUser(userId)) {\n        return React.createElement(\"div\", {\n          className: classNames(className, 'user-tile', 'tile_color_0', {\n            pointer: onSelect\n          }, {\n            'tile-dialog': dialog\n          }, {\n            'tile-small': small\n          }, {\n            'tile-poll': poll\n          }),\n          onClick: this.handleSelect,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"tile-photo\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"tile-saved-messages\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185\n          },\n          __self: this\n        }, React.createElement(DeletedAccountIcon, {\n          fontSize: \"default\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186\n          },\n          __self: this\n        }))));\n      }\n\n      var letters = getUserLetters(userId, fistName, lastName, t);\n      var src = getSrc(user && user.profile_photo ? user.profile_photo.small : null);\n      var tileLoaded = src && loaded;\n      var tileColor = \"tile_color_\".concat(Math.abs(userId) % 8 + 1);\n      return React.createElement(\"div\", {\n        className: classNames(className, 'user-tile', _defineProperty({}, tileColor, !tileLoaded), {\n          pointer: onSelect\n        }, {\n          'tile-dialog': dialog\n        }, {\n          'tile-small': small\n        }, {\n          'tile-poll': poll\n        }),\n        onClick: this.handleSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, !tileLoaded && React.createElement(\"div\", {\n        className: \"tile-photo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"tile-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, letters)), src && React.createElement(\"img\", {\n        className: \"tile-photo\",\n        src: src,\n        onLoad: this.handleLoad,\n        draggable: false,\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return UserTile;\n}(Component);\n\nUserTile.propTypes = {\n  userId: PropTypes.number.isRequired,\n  firstName: PropTypes.string,\n  lastName: PropTypes.string,\n  onSelect: PropTypes.func,\n  small: PropTypes.bool\n};\nexport default withTranslation()(UserTile);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Tile/UserTile.js"],"names":["React","Component","PropTypes","classNames","withTranslation","getUserLetters","isDeletedUser","getSrc","loadChatContent","UserStore","ChatStore","FileStore","DeletedAccountIcon","UserTile","props","onClientUpdateUserBlob","update","userId","state","loaded","setState","forceUpdate","onClientUpdateChatBlob","chatId","chat","get","type","user_id","onUpdateChatPhoto","chat_id","photo","store","getStore","onUpdateChatTitle","handleSelect","event","onSelect","stopPropagation","handleLoad","process","env","NODE_ENV","user","nextProps","nextState","on","off","className","fistName","lastName","small","dialog","poll","t","pointer","letters","src","profile_photo","tileLoaded","tileColor","Math","abs","propTypes","number","isRequired","firstName","string","func","bool"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport { getUserLetters, isDeletedUser } from '../../Utils/User';\nimport { getSrc, loadChatContent } from '../../Utils/File';\nimport UserStore from '../../Stores/UserStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport FileStore from '../../Stores/FileStore';\nimport './UserTile.css';\nimport DeletedAccountIcon from '../../Assets/Icons/DeletedAccount';\n\nclass UserTile extends Component {\n    constructor(props) {\n        super(props);\n\n        if (process.env.NODE_ENV !== 'production') {\n            this.state = {\n                user: UserStore.get(this.props.userId),\n                loaded: false\n            };\n        } else {\n            this.state = {\n                loaded: false\n            };\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextProps.userId !== this.props.userId) {\n            return true;\n        }\n\n        if (nextState.loaded !== this.state.loaded) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        FileStore.on('clientUpdateUserBlob', this.onClientUpdateUserBlob);\n        FileStore.on('clientUpdateChatBlob', this.onClientUpdateChatBlob);\n        ChatStore.on('updateChatPhoto', this.onUpdateChatPhoto);\n        ChatStore.on('updateChatTitle', this.onUpdateChatTitle);\n    }\n\n    componentWillUnmount() {\n        FileStore.off('clientUpdateUserBlob', this.onClientUpdateUserBlob);\n        FileStore.off('clientUpdateChatBlob', this.onClientUpdateChatBlob);\n        ChatStore.off('updateChatPhoto', this.onUpdateChatPhoto);\n        ChatStore.off('updateChatTitle', this.onUpdateChatTitle);\n    }\n\n    onClientUpdateUserBlob = update => {\n        const { userId } = this.props;\n\n        if (userId !== update.userId) return;\n\n        if (this.state.loaded) {\n            this.setState({ loaded: false });\n        } else {\n            this.forceUpdate();\n        }\n    };\n\n    onClientUpdateChatBlob = update => {\n        const { userId } = this.props;\n        const { chatId } = update;\n\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n        if (!chat.type) return;\n\n        switch (chat.type['@type']) {\n            case 'chatTypeBasicGroup':\n            case 'chatTypeSupergroup': {\n                return;\n            }\n            case 'chatTypePrivate':\n            case 'chatTypeSecret': {\n                if (chat.type.user_id !== userId) return;\n\n                if (this.state.loaded) {\n                    this.setState({ loaded: false });\n                } else {\n                    this.forceUpdate();\n                }\n            }\n        }\n    };\n\n    onUpdateChatPhoto = update => {\n        const { userId } = this.props;\n        const { chat_id, photo } = update;\n\n        const chat = ChatStore.get(chat_id);\n        if (!chat) return;\n        if (!chat.type) return;\n\n        switch (chat.type['@type']) {\n            case 'chatTypeBasicGroup':\n            case 'chatTypeSupergroup': {\n                return;\n            }\n            case 'chatTypePrivate':\n            case 'chatTypeSecret': {\n                if (chat.type.user_id !== userId) return;\n\n                if (this.state.loaded) {\n                    this.setState({ loaded: false });\n                } else {\n                    this.forceUpdate();\n                }\n\n                if (photo) {\n                    const store = FileStore.getStore();\n                    loadChatContent(store, chat);\n                }\n            }\n        }\n    };\n\n    onUpdateChatTitle = update => {\n        const { userId } = this.props;\n\n        const chat = ChatStore.get(update.chat_id);\n        if (!chat) return;\n        if (!chat.type) return;\n\n        switch (chat.type['@type']) {\n            case 'chatTypeBasicGroup':\n            case 'chatTypeSupergroup': {\n                return;\n            }\n            case 'chatTypePrivate':\n            case 'chatTypeSecret': {\n                if (chat.type.user_id !== userId && !chat.photo) return;\n\n                this.forceUpdate();\n            }\n        }\n    };\n\n    handleSelect = event => {\n        const { userId, onSelect } = this.props;\n        if (!onSelect) return;\n\n        event.stopPropagation();\n        onSelect(userId);\n    };\n\n    handleLoad = () => {\n        this.setState({ loaded: true });\n    };\n\n    render() {\n        const { className, userId, fistName, lastName, onSelect, small, dialog, poll, t } = this.props;\n        const { loaded } = this.state;\n\n        const user = UserStore.get(userId);\n        if (!user && !(fistName || lastName)) return null;\n\n        if (isDeletedUser(userId)) {\n            return (\n                <div\n                    className={classNames(\n                        className,\n                        'user-tile',\n                        'tile_color_0',\n                        { pointer: onSelect },\n                        { 'tile-dialog': dialog },\n                        { 'tile-small': small },\n                        { 'tile-poll': poll }\n                    )}\n                    onClick={this.handleSelect}>\n                    <div className='tile-photo'>\n                        <div className='tile-saved-messages'>\n                            <DeletedAccountIcon fontSize='default' />\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        const letters = getUserLetters(userId, fistName, lastName, t);\n        const src = getSrc(user && user.profile_photo ? user.profile_photo.small : null);\n        const tileLoaded = src && loaded;\n\n        const tileColor = `tile_color_${(Math.abs(userId) % 8) + 1}`;\n\n        return (\n            <div\n                className={classNames(\n                    className,\n                    'user-tile',\n                    { [tileColor]: !tileLoaded },\n                    { pointer: onSelect },\n                    { 'tile-dialog': dialog },\n                    { 'tile-small': small },\n                    { 'tile-poll': poll }\n                )}\n                onClick={this.handleSelect}>\n                {!tileLoaded && (\n                    <div className='tile-photo'>\n                        <span className='tile-text'>{letters}</span>\n                    </div>\n                )}\n                {src && <img className='tile-photo' src={src} onLoad={this.handleLoad} draggable={false} alt='' />}\n            </div>\n        );\n    }\n}\n\nUserTile.propTypes = {\n    userId: PropTypes.number.isRequired,\n    firstName: PropTypes.string,\n    lastName: PropTypes.string,\n    onSelect: PropTypes.func,\n    small: PropTypes.bool\n};\n\nexport default withTranslation()(UserTile);\n"]},"metadata":{},"sourceType":"module"}