{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnMiddle/DialogDetails.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport ChatInfoDialog from '../Popup/ChatInfoDialog';\nimport Footer from './Footer';\nimport Header from './Header';\nimport HeaderPlayer from '../Player/HeaderPlayer';\nimport MessagesList from './MessagesList';\nimport StickerSetDialog from '../Popup/StickerSetDialog';\nimport { getSrc } from '../../Utils/File';\nimport AppStore from '../../Stores/ApplicationStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport FileStore from '../../Stores/FileStore';\nimport './DialogDetails.css';\n\nvar DialogDetails =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DialogDetails, _Component);\n\n  function DialogDetails(props) {\n    var _this;\n\n    _classCallCheck(this, DialogDetails);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DialogDetails).call(this, props));\n\n    _this.onClientUpdateDocumentBlob = function (update) {\n      var wallpaper = _this.state.wallpaper;\n      if (!wallpaper) return;\n      var document = wallpaper.document;\n      if (!document) return;\n      var file = document.document;\n      if (!file) return;\n      var fileId = update.fileId;\n\n      if (file.id !== fileId) {\n        return;\n      }\n\n      if (_this.thumbnailTime) {\n        if (_this.thumbnailTime.wallpaper === wallpaper) {\n          var diff = new Date() - _this.thumbnailTime.time;\n\n          if (diff < 250) {\n            setTimeout(function () {\n              _this.forceUpdate();\n            }, 250);\n            return;\n          }\n        }\n      }\n\n      _this.forceUpdate();\n    };\n\n    _this.onClientUpdateDocumentThumbnailBlob = function (update) {\n      var wallpaper = _this.state.wallpaper;\n      if (!wallpaper) return;\n      var document = wallpaper.document;\n      if (!document) return;\n      var thumbnail = document.thumbnail;\n      if (!thumbnail) return;\n      var file = thumbnail.photo;\n      if (!file) return;\n      var fileId = update.fileId;\n\n      if (file.id !== fileId) {\n        return;\n      }\n\n      _this.thumbnailTime = {\n        wallpaper: wallpaper,\n        time: new Date()\n      };\n\n      _this.forceUpdate();\n    };\n\n    _this.onClientUpdateChatBackground = function (update) {\n      var wallpaper = update.wallpaper;\n      _this.thumbnailTime = {\n        wallpaper: wallpaper,\n        time: new Date()\n      };\n\n      _this.setState({\n        wallpaper: wallpaper\n      });\n    };\n\n    _this.onUpdateChatDetailsVisibility = function (update) {\n      _this.forceUpdate();\n    };\n\n    _this.onClientUpdateChatId = function (update) {\n      _this.setState({\n        chatId: update.nextChatId,\n        messageId: update.nextMessageId\n      });\n    };\n\n    _this.scrollToBottom = function () {\n      _this.messagesList.scrollToBottom();\n    };\n\n    _this.scrollToStart = function () {\n      _this.messagesList.scrollToStart();\n    };\n\n    _this.scrollToMessage = function () {\n      _this.messagesList.scrollToMessage();\n    };\n\n    _this.state = {\n      chatId: AppStore.getChatId(),\n      messageId: AppStore.getMessageId(),\n      selectedCount: 0,\n      wallpaper: null,\n      wallpaperSrc: null\n    };\n    return _this;\n  }\n\n  _createClass(DialogDetails, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var _this$state = this.state,\n          chatId = _this$state.chatId,\n          messageId = _this$state.messageId,\n          selectedCount = _this$state.selectedCount,\n          wallpaper = _this$state.wallpaper;\n\n      if (nextState.chatId !== chatId) {\n        return true;\n      }\n\n      if (nextState.messageId !== messageId) {\n        return true;\n      }\n\n      if (nextState.selectedCount !== selectedCount) {\n        return true;\n      }\n\n      if (nextState.wallpaper !== wallpaper) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      AppStore.on('clientUpdateChatDetailsVisibility', this.onUpdateChatDetailsVisibility);\n      AppStore.on('clientUpdateChatId', this.onClientUpdateChatId);\n      ChatStore.on('clientUpdateChatBackground', this.onClientUpdateChatBackground);\n      FileStore.on('clientUpdateDocumentThumbnailBlob', this.onClientUpdateDocumentThumbnailBlob);\n      FileStore.on('clientUpdateDocumentBlob', this.onClientUpdateDocumentBlob);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      AppStore.off('clientUpdateChatDetailsVisibility', this.onUpdateChatDetailsVisibility);\n      AppStore.off('clientUpdateChatId', this.onClientUpdateChatId);\n      ChatStore.off('clientUpdateChatBackground', this.onClientUpdateChatBackground);\n      FileStore.off('clientUpdateDocumentThumbnailBlob', this.onClientUpdateDocumentThumbnailBlob);\n      FileStore.off('clientUpdateDocumentBlob', this.onClientUpdateDocumentBlob);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      /*let groups = [];\n      if (this.props.history.length > 0){\n          let currentGroup = {\n              key: this.props.history[0].id,\n              date: this.props.history[0].date,\n              senderUserId: this.props.history[0].sender_user_id,\n              messages: [this.props.history[0]]\n          };\n           for (let i = 1; i < this.props.history.length; i++){\n              if (this.props.history[i].sender_user_id === currentGroup.senderUserId\n                  && Math.abs(this.props.history[i].date - currentGroup.date) <= 10 * 60\n                  && i % 20 !== 0){\n                  currentGroup.key += '_' + this.props.history[i].id;\n                  currentGroup.messages.push(this.props.history[i]);\n              }\n              else {\n                  groups.push(currentGroup);\n                  currentGroup = {\n                      key: this.props.history[i].id,\n                      date: this.props.history[i].date,\n                      senderUserId: this.props.history[i].sender_user_id,\n                      messages: [this.props.history[i]]\n                  };\n              }\n          }\n          groups.push(currentGroup);\n      }\n       this.groups = groups.map(x => {\n          return (<MessageGroup key={x.key} senderUserId={x.senderUserId} messages={x.messages} onSelectChat={this.props.onSelectChat}/>);\n      });*/\n      var _this$state2 = this.state,\n          chatId = _this$state2.chatId,\n          messageId = _this$state2.messageId,\n          wallpaper = _this$state2.wallpaper;\n      var style = null;\n      var src = null;\n\n      if (wallpaper) {\n        var document = wallpaper.document;\n\n        if (document) {\n          var thumbnail = document.thumbnail,\n              file = document.document;\n\n          if (file) {\n            src = getSrc(file);\n          }\n\n          if (!src && thumbnail) {\n            src = getSrc(thumbnail.photo);\n          }\n        }\n\n        style = {\n          backgroundImage: src ? \"url(\".concat(src, \")\") : null\n        };\n      }\n\n      return React.createElement(\"div\", {\n        className: \"dialog-details\",\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(HeaderPlayer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }), React.createElement(Header, {\n        chatId: chatId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }), React.createElement(MessagesList, {\n        ref: function ref(_ref) {\n          return _this2.messagesList = _ref;\n        },\n        chatId: chatId,\n        messageId: messageId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }), React.createElement(Footer, {\n        chatId: chatId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }), React.createElement(StickerSetDialog, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }), React.createElement(ChatInfoDialog, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return DialogDetails;\n}(Component);\n\nexport default DialogDetails;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnMiddle/DialogDetails.js"],"names":["React","Component","classNames","ChatInfoDialog","Footer","Header","HeaderPlayer","MessagesList","StickerSetDialog","getSrc","AppStore","ChatStore","FileStore","DialogDetails","props","onClientUpdateDocumentBlob","update","wallpaper","state","document","file","fileId","id","thumbnailTime","diff","Date","time","setTimeout","forceUpdate","onClientUpdateDocumentThumbnailBlob","thumbnail","photo","onClientUpdateChatBackground","setState","onUpdateChatDetailsVisibility","onClientUpdateChatId","chatId","nextChatId","messageId","nextMessageId","scrollToBottom","messagesList","scrollToStart","scrollToMessage","getChatId","getMessageId","selectedCount","wallpaperSrc","nextProps","nextState","on","off","style","src","backgroundImage","ref"],"mappings":";;;;;;;AAAA;;;;;;AAOA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,gBAAP,MAA6B,2BAA7B;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,OAAOC,QAAP,MAAqB,+BAArB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAO,qBAAP;;IAEMC,a;;;;;AACF,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,uFAAMA,KAAN;;AADe,UA8CnBC,0BA9CmB,GA8CU,UAAAC,MAAM,EAAI;AAAA,UAC3BC,SAD2B,GACb,MAAKC,KADQ,CAC3BD,SAD2B;AAEnC,UAAI,CAACA,SAAL,EAAgB;AAFmB,UAI3BE,QAJ2B,GAIdF,SAJc,CAI3BE,QAJ2B;AAKnC,UAAI,CAACA,QAAL,EAAe;AALoB,UAOjBC,IAPiB,GAORD,QAPQ,CAO3BA,QAP2B;AAQnC,UAAI,CAACC,IAAL,EAAW;AARwB,UAU3BC,MAV2B,GAUhBL,MAVgB,CAU3BK,MAV2B;;AAYnC,UAAID,IAAI,CAACE,EAAL,KAAYD,MAAhB,EAAwB;AACpB;AACH;;AAED,UAAI,MAAKE,aAAT,EAAwB;AACpB,YAAI,MAAKA,aAAL,CAAmBN,SAAnB,KAAiCA,SAArC,EAAgD;AAC5C,cAAMO,IAAI,GAAG,IAAIC,IAAJ,KAAa,MAAKF,aAAL,CAAmBG,IAA7C;;AACA,cAAIF,IAAI,GAAG,GAAX,EAAgB;AACZG,YAAAA,UAAU,CAAC,YAAM;AACb,oBAAKC,WAAL;AACH,aAFS,EAEP,GAFO,CAAV;AAGA;AACH;AACJ;AACJ;;AAED,YAAKA,WAAL;AACH,KA3EkB;;AAAA,UA6EnBC,mCA7EmB,GA6EmB,UAAAb,MAAM,EAAI;AAAA,UACpCC,SADoC,GACtB,MAAKC,KADiB,CACpCD,SADoC;AAE5C,UAAI,CAACA,SAAL,EAAgB;AAF4B,UAIpCE,QAJoC,GAIvBF,SAJuB,CAIpCE,QAJoC;AAK5C,UAAI,CAACA,QAAL,EAAe;AAL6B,UAOpCW,SAPoC,GAOtBX,QAPsB,CAOpCW,SAPoC;AAQ5C,UAAI,CAACA,SAAL,EAAgB;AAEhB,UAAMV,IAAI,GAAGU,SAAS,CAACC,KAAvB;AACA,UAAI,CAACX,IAAL,EAAW;AAXiC,UAapCC,MAboC,GAazBL,MAbyB,CAapCK,MAboC;;AAe5C,UAAID,IAAI,CAACE,EAAL,KAAYD,MAAhB,EAAwB;AACpB;AACH;;AAED,YAAKE,aAAL,GAAqB;AACjBN,QAAAA,SAAS,EAATA,SADiB;AAEjBS,QAAAA,IAAI,EAAE,IAAID,IAAJ;AAFW,OAArB;;AAIA,YAAKG,WAAL;AACH,KArGkB;;AAAA,UAuGnBI,4BAvGmB,GAuGY,UAAAhB,MAAM,EAAI;AAAA,UAC7BC,SAD6B,GACfD,MADe,CAC7BC,SAD6B;AAGrC,YAAKM,aAAL,GAAqB;AACjBN,QAAAA,SAAS,EAATA,SADiB;AAEjBS,QAAAA,IAAI,EAAE,IAAID,IAAJ;AAFW,OAArB;;AAIA,YAAKQ,QAAL,CAAc;AACVhB,QAAAA,SAAS,EAATA;AADU,OAAd;AAGH,KAjHkB;;AAAA,UAmHnBiB,6BAnHmB,GAmHa,UAAAlB,MAAM,EAAI;AACtC,YAAKY,WAAL;AACH,KArHkB;;AAAA,UAuHnBO,oBAvHmB,GAuHI,UAAAnB,MAAM,EAAI;AAC7B,YAAKiB,QAAL,CAAc;AACVG,QAAAA,MAAM,EAAEpB,MAAM,CAACqB,UADL;AAEVC,QAAAA,SAAS,EAAEtB,MAAM,CAACuB;AAFR,OAAd;AAIH,KA5HkB;;AAAA,UA8HnBC,cA9HmB,GA8HF,YAAM;AACnB,YAAKC,YAAL,CAAkBD,cAAlB;AACH,KAhIkB;;AAAA,UAkInBE,aAlImB,GAkIH,YAAM;AAClB,YAAKD,YAAL,CAAkBC,aAAlB;AACH,KApIkB;;AAAA,UAsInBC,eAtImB,GAsID,YAAM;AACpB,YAAKF,YAAL,CAAkBE,eAAlB;AACH,KAxIkB;;AAGf,UAAKzB,KAAL,GAAa;AACTkB,MAAAA,MAAM,EAAE1B,QAAQ,CAACkC,SAAT,EADC;AAETN,MAAAA,SAAS,EAAE5B,QAAQ,CAACmC,YAAT,EAFF;AAGTC,MAAAA,aAAa,EAAE,CAHN;AAIT7B,MAAAA,SAAS,EAAE,IAJF;AAKT8B,MAAAA,YAAY,EAAE;AALL,KAAb;AAHe;AAUlB;;;;0CAEqBC,S,EAAWC,S,EAAW;AAAA,wBACgB,KAAK/B,KADrB;AAAA,UAChCkB,MADgC,eAChCA,MADgC;AAAA,UACxBE,SADwB,eACxBA,SADwB;AAAA,UACbQ,aADa,eACbA,aADa;AAAA,UACE7B,SADF,eACEA,SADF;;AAExC,UAAIgC,SAAS,CAACb,MAAV,KAAqBA,MAAzB,EAAiC;AAC7B,eAAO,IAAP;AACH;;AACD,UAAIa,SAAS,CAACX,SAAV,KAAwBA,SAA5B,EAAuC;AACnC,eAAO,IAAP;AACH;;AACD,UAAIW,SAAS,CAACH,aAAV,KAA4BA,aAAhC,EAA+C;AAC3C,eAAO,IAAP;AACH;;AACD,UAAIG,SAAS,CAAChC,SAAV,KAAwBA,SAA5B,EAAuC;AACnC,eAAO,IAAP;AACH;;AAED,aAAO,KAAP;AACH;;;wCAEmB;AAChBP,MAAAA,QAAQ,CAACwC,EAAT,CAAY,mCAAZ,EAAiD,KAAKhB,6BAAtD;AACAxB,MAAAA,QAAQ,CAACwC,EAAT,CAAY,oBAAZ,EAAkC,KAAKf,oBAAvC;AACAxB,MAAAA,SAAS,CAACuC,EAAV,CAAa,4BAAb,EAA2C,KAAKlB,4BAAhD;AACApB,MAAAA,SAAS,CAACsC,EAAV,CAAa,mCAAb,EAAkD,KAAKrB,mCAAvD;AACAjB,MAAAA,SAAS,CAACsC,EAAV,CAAa,0BAAb,EAAyC,KAAKnC,0BAA9C;AACH;;;2CAEsB;AACnBL,MAAAA,QAAQ,CAACyC,GAAT,CAAa,mCAAb,EAAkD,KAAKjB,6BAAvD;AACAxB,MAAAA,QAAQ,CAACyC,GAAT,CAAa,oBAAb,EAAmC,KAAKhB,oBAAxC;AACAxB,MAAAA,SAAS,CAACwC,GAAV,CAAc,4BAAd,EAA4C,KAAKnB,4BAAjD;AACApB,MAAAA,SAAS,CAACuC,GAAV,CAAc,mCAAd,EAAmD,KAAKtB,mCAAxD;AACAjB,MAAAA,SAAS,CAACuC,GAAV,CAAc,0BAAd,EAA0C,KAAKpC,0BAA/C;AACH;;;6BA8FQ;AAAA;;AACL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADK,yBAiCoC,KAAKG,KAjCzC;AAAA,UAiCGkB,MAjCH,gBAiCGA,MAjCH;AAAA,UAiCWE,SAjCX,gBAiCWA,SAjCX;AAAA,UAiCsBrB,SAjCtB,gBAiCsBA,SAjCtB;AAmCL,UAAImC,KAAK,GAAG,IAAZ;AACA,UAAIC,GAAG,GAAG,IAAV;;AACA,UAAIpC,SAAJ,EAAe;AAAA,YACHE,QADG,GACUF,SADV,CACHE,QADG;;AAEX,YAAIA,QAAJ,EAAc;AAAA,cACFW,SADE,GAC4BX,QAD5B,CACFW,SADE;AAAA,cACmBV,IADnB,GAC4BD,QAD5B,CACSA,QADT;;AAEV,cAAIC,IAAJ,EAAU;AACNiC,YAAAA,GAAG,GAAG5C,MAAM,CAACW,IAAD,CAAZ;AACH;;AAED,cAAI,CAACiC,GAAD,IAAQvB,SAAZ,EAAuB;AACnBuB,YAAAA,GAAG,GAAG5C,MAAM,CAACqB,SAAS,CAACC,KAAX,CAAZ;AACH;AACJ;;AAEDqB,QAAAA,KAAK,GAAG;AACJE,UAAAA,eAAe,EAAED,GAAG,iBAAUA,GAAV,SAAmB;AADnC,SAAR;AAGH;;AAED,aACI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAgC,QAAA,KAAK,EAAED,KAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,MAAD;AAAQ,QAAA,MAAM,EAAEhB,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI,oBAAC,YAAD;AAAc,QAAA,GAAG,EAAE,aAAAmB,IAAG;AAAA,iBAAK,MAAI,CAACd,YAAL,GAAoBc,IAAzB;AAAA,SAAtB;AAAqD,QAAA,MAAM,EAAEnB,MAA7D;AAAqE,QAAA,SAAS,EAAEE,SAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,EAII,oBAAC,MAAD;AAAQ,QAAA,MAAM,EAAEF,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,EAKI,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,EAMI,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANJ,CADJ;AAWH;;;;EA7MuBnC,S;;AAgN5B,eAAeY,aAAf","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport ChatInfoDialog from '../Popup/ChatInfoDialog';\nimport Footer from './Footer';\nimport Header from './Header';\nimport HeaderPlayer from '../Player/HeaderPlayer';\nimport MessagesList from './MessagesList';\nimport StickerSetDialog from '../Popup/StickerSetDialog';\nimport { getSrc } from '../../Utils/File';\nimport AppStore from '../../Stores/ApplicationStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport FileStore from '../../Stores/FileStore';\nimport './DialogDetails.css';\n\nclass DialogDetails extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            chatId: AppStore.getChatId(),\n            messageId: AppStore.getMessageId(),\n            selectedCount: 0,\n            wallpaper: null,\n            wallpaperSrc: null\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const { chatId, messageId, selectedCount, wallpaper } = this.state;\n        if (nextState.chatId !== chatId) {\n            return true;\n        }\n        if (nextState.messageId !== messageId) {\n            return true;\n        }\n        if (nextState.selectedCount !== selectedCount) {\n            return true;\n        }\n        if (nextState.wallpaper !== wallpaper) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        AppStore.on('clientUpdateChatDetailsVisibility', this.onUpdateChatDetailsVisibility);\n        AppStore.on('clientUpdateChatId', this.onClientUpdateChatId);\n        ChatStore.on('clientUpdateChatBackground', this.onClientUpdateChatBackground);\n        FileStore.on('clientUpdateDocumentThumbnailBlob', this.onClientUpdateDocumentThumbnailBlob);\n        FileStore.on('clientUpdateDocumentBlob', this.onClientUpdateDocumentBlob);\n    }\n\n    componentWillUnmount() {\n        AppStore.off('clientUpdateChatDetailsVisibility', this.onUpdateChatDetailsVisibility);\n        AppStore.off('clientUpdateChatId', this.onClientUpdateChatId);\n        ChatStore.off('clientUpdateChatBackground', this.onClientUpdateChatBackground);\n        FileStore.off('clientUpdateDocumentThumbnailBlob', this.onClientUpdateDocumentThumbnailBlob);\n        FileStore.off('clientUpdateDocumentBlob', this.onClientUpdateDocumentBlob);\n    }\n\n    onClientUpdateDocumentBlob = update => {\n        const { wallpaper } = this.state;\n        if (!wallpaper) return;\n\n        const { document } = wallpaper;\n        if (!document) return;\n\n        const { document: file } = document;\n        if (!file) return;\n\n        const { fileId } = update;\n\n        if (file.id !== fileId) {\n            return;\n        }\n\n        if (this.thumbnailTime) {\n            if (this.thumbnailTime.wallpaper === wallpaper) {\n                const diff = new Date() - this.thumbnailTime.time;\n                if (diff < 250) {\n                    setTimeout(() => {\n                        this.forceUpdate();\n                    }, 250);\n                    return;\n                }\n            }\n        }\n\n        this.forceUpdate();\n    };\n\n    onClientUpdateDocumentThumbnailBlob = update => {\n        const { wallpaper } = this.state;\n        if (!wallpaper) return;\n\n        const { document } = wallpaper;\n        if (!document) return;\n\n        const { thumbnail } = document;\n        if (!thumbnail) return;\n\n        const file = thumbnail.photo;\n        if (!file) return;\n\n        const { fileId } = update;\n\n        if (file.id !== fileId) {\n            return;\n        }\n\n        this.thumbnailTime = {\n            wallpaper,\n            time: new Date()\n        };\n        this.forceUpdate();\n    };\n\n    onClientUpdateChatBackground = update => {\n        const { wallpaper } = update;\n\n        this.thumbnailTime = {\n            wallpaper,\n            time: new Date()\n        };\n        this.setState({\n            wallpaper\n        });\n    };\n\n    onUpdateChatDetailsVisibility = update => {\n        this.forceUpdate();\n    };\n\n    onClientUpdateChatId = update => {\n        this.setState({\n            chatId: update.nextChatId,\n            messageId: update.nextMessageId\n        });\n    };\n\n    scrollToBottom = () => {\n        this.messagesList.scrollToBottom();\n    };\n\n    scrollToStart = () => {\n        this.messagesList.scrollToStart();\n    };\n\n    scrollToMessage = () => {\n        this.messagesList.scrollToMessage();\n    };\n\n    render() {\n        /*let groups = [];\n        if (this.props.history.length > 0){\n            let currentGroup = {\n                key: this.props.history[0].id,\n                date: this.props.history[0].date,\n                senderUserId: this.props.history[0].sender_user_id,\n                messages: [this.props.history[0]]\n            };\n\n            for (let i = 1; i < this.props.history.length; i++){\n                if (this.props.history[i].sender_user_id === currentGroup.senderUserId\n                    && Math.abs(this.props.history[i].date - currentGroup.date) <= 10 * 60\n                    && i % 20 !== 0){\n                    currentGroup.key += '_' + this.props.history[i].id;\n                    currentGroup.messages.push(this.props.history[i]);\n                }\n                else {\n                    groups.push(currentGroup);\n                    currentGroup = {\n                        key: this.props.history[i].id,\n                        date: this.props.history[i].date,\n                        senderUserId: this.props.history[i].sender_user_id,\n                        messages: [this.props.history[i]]\n                    };\n                }\n            }\n            groups.push(currentGroup);\n        }\n\n        this.groups = groups.map(x => {\n            return (<MessageGroup key={x.key} senderUserId={x.senderUserId} messages={x.messages} onSelectChat={this.props.onSelectChat}/>);\n        });*/\n        const { chatId, messageId, wallpaper } = this.state;\n\n        let style = null;\n        let src = null;\n        if (wallpaper) {\n            const { document } = wallpaper;\n            if (document) {\n                const { thumbnail, document: file } = document;\n                if (file) {\n                    src = getSrc(file);\n                }\n\n                if (!src && thumbnail) {\n                    src = getSrc(thumbnail.photo);\n                }\n            }\n\n            style = {\n                backgroundImage: src ? `url(${src})` : null\n            }\n        }\n\n        return (\n            <div className='dialog-details' style={style}>\n                <HeaderPlayer />\n                <Header chatId={chatId} />\n                <MessagesList ref={ref => (this.messagesList = ref)} chatId={chatId} messageId={messageId} />\n                <Footer chatId={chatId} />\n                <StickerSetDialog />\n                <ChatInfoDialog />\n                {/*<Footer />*/}\n            </div>\n        );\n    }\n}\n\nexport default DialogDetails;\n"]},"metadata":{},"sourceType":"module"}