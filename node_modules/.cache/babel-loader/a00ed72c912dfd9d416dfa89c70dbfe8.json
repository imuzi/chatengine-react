{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Player/Playlist.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { openMedia } from '../../Utils/Message';\nimport { getMedia } from '../../Utils/Media';\nimport { SCROLL_PRECISION } from '../../Constants';\nimport PlayerStore from '../../Stores/PlayerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './Playlist.css';\n\nvar Playlist =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Playlist, _React$Component);\n\n  function Playlist(props) {\n    var _this;\n\n    _classCallCheck(this, Playlist);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Playlist).call(this, props));\n\n    _this.scrollToActive = function () {\n      var list = _this.listRef.current;\n      if (!list) return;\n\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          messageId = _assertThisInitialize.messageId;\n\n      if (!messageId) return;\n\n      var item = _this.itemRefMap.get(messageId);\n\n      if (!item) return;\n      var node = ReactDOM.findDOMNode(item);\n      if (!node) return;\n      list.scrollTop = node.offsetTop - 15;\n    };\n\n    _this.onClientUpdateMediaTitleMouseOver = function (update) {\n      var over = update.over;\n\n      if (over) {\n        _this.setState({\n          playlistMouseOver: over\n        }, function () {\n          _this.tryOpen();\n        });\n      } else {\n        _this.setState({\n          playlistMouseOver: over\n        }, function () {\n          _this.tryClose();\n        });\n      }\n    };\n\n    _this.onClientUpdateMediaActive = function (update) {\n      var chatId = update.chatId,\n          messageId = update.messageId;\n      _this.chatId = chatId;\n      _this.messageId = messageId;\n    };\n\n    _this.onClientUpdateMediaPlaylistLoading = function (update) {\n      var _assertThisInitialize2 = _assertThisInitialized(_this),\n          chatId = _assertThisInitialize2.chatId,\n          messageId = _assertThisInitialize2.messageId;\n\n      if (update.chatId === chatId && update.messageId === messageId) {\n        _this.setState({\n          playlist: null\n        });\n      }\n    };\n\n    _this.onClientUpdateMediaPlaylist = function (update) {\n      var _assertThisInitialize3 = _assertThisInitialized(_this),\n          chatId = _assertThisInitialize3.chatId,\n          messageId = _assertThisInitialize3.messageId;\n\n      var playlist = update.playlist;\n\n      if (chatId === playlist.chatId && messageId === playlist.messageId) {\n        _this.setState({\n          playlist: playlist\n        });\n      }\n    };\n\n    _this.tryOpen = function () {\n      clearTimeout(_this.openTimeout);\n      _this.openTimeout = setTimeout(function () {\n        var _this$state = _this.state,\n            titleMouseOver = _this$state.titleMouseOver,\n            playlistMouseOver = _this$state.playlistMouseOver;\n\n        _this.setState({\n          open: titleMouseOver || playlistMouseOver\n        });\n      }, 250);\n    };\n\n    _this.tryClose = function () {\n      clearTimeout(_this.timeout);\n      _this.timeout = setTimeout(function () {\n        var _this$state2 = _this.state,\n            titleMouseOver = _this$state2.titleMouseOver,\n            playlistMouseOver = _this$state2.playlistMouseOver;\n\n        _this.setState({\n          open: titleMouseOver || playlistMouseOver\n        });\n      }, 250);\n    };\n\n    _this.handleMouseEnter = function () {\n      _this.setState({\n        playlistMouseOver: true,\n        open: true\n      });\n    };\n\n    _this.handleMouseLeave = function () {\n      _this.setState({\n        playlistMouseOver: false\n      }, function () {\n        _this.tryClose();\n      });\n    };\n\n    _this.handleScroll = function () {\n      var list = _this.listRef.current;\n      if (!list) return;\n\n      if (list.scrollTop <= SCROLL_PRECISION) {\n        TdLibController.clientUpdate({\n          '@type': 'clientUpdateMediaPlaylistNext'\n        });\n      } else if (list.scrollTop + list.offsetHeight >= list.scrollHeight - SCROLL_PRECISION) {\n        TdLibController.clientUpdate({\n          '@type': 'clientUpdateMediaPlaylistPrev'\n        });\n      }\n    };\n\n    _this.listRef = React.createRef();\n    _this.itemRefMap = new Map();\n    var message = PlayerStore.message,\n        _playlist = PlayerStore.playlist;\n    _this.chatId = message ? message.chat_id : 0;\n    _this.messageId = message ? message.id : 0;\n    _this.state = {\n      open: false,\n      titleMouseOver: false,\n      playlistMouseOver: false,\n      playlist: _playlist\n    };\n    return _this;\n  }\n\n  _createClass(Playlist, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      var open = this.state.open;\n\n      if (!prevState.open && open) {\n        this.scrollToActive();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      PlayerStore.on('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n      PlayerStore.on('clientUpdateMediaPlaylist', this.onClientUpdateMediaPlaylist);\n      PlayerStore.on('clientUpdateMediaPlaylistLoading', this.onClientUpdateMediaPlaylistLoading);\n      PlayerStore.on('clientUpdateMediaTitleMouseOver', this.onClientUpdateMediaTitleMouseOver);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      PlayerStore.off('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n      PlayerStore.off('clientUpdateMediaPlaylist', this.onClientUpdateMediaPlaylist);\n      PlayerStore.off('clientUpdateMediaPlaylistLoading', this.onClientUpdateMediaPlaylistLoading);\n      PlayerStore.off('clientUpdateMediaTitleMouseOver', this.onClientUpdateMediaTitleMouseOver);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state3 = this.state,\n          open = _this$state3.open,\n          playlist = _this$state3.playlist;\n      if (!open) return null;\n      if (!playlist) return null;\n      var messages = playlist.messages;\n      if (!messages) return null;\n      if (messages.length <= 1) return null;\n      this.itemRefMap.clear();\n      return React.createElement(\"div\", {\n        className: \"playlist\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"playlist-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        ref: this.listRef,\n        className: \"playlist-items\",\n        onMouseEnter: this.handleMouseEnter,\n        onMouseLeave: this.handleMouseLeave,\n        onScroll: this.handleScroll,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, playlist.messages.slice(0).reverse().map(function (x) {\n        return React.createElement(\"div\", {\n          key: x.id,\n          ref: function ref(el) {\n            return _this2.itemRefMap.set(x.id, el);\n          },\n          className: \"playlist-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 206\n          },\n          __self: this\n        }, getMedia(x, function () {\n          return openMedia(x.chat_id, x.id);\n        }));\n      }))));\n    }\n  }]);\n\n  return Playlist;\n}(React.Component);\n\nexport default Playlist;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Player/Playlist.js"],"names":["React","ReactDOM","openMedia","getMedia","SCROLL_PRECISION","PlayerStore","TdLibController","Playlist","props","scrollToActive","list","listRef","current","messageId","item","itemRefMap","get","node","findDOMNode","scrollTop","offsetTop","onClientUpdateMediaTitleMouseOver","update","over","setState","playlistMouseOver","tryOpen","tryClose","onClientUpdateMediaActive","chatId","onClientUpdateMediaPlaylistLoading","playlist","onClientUpdateMediaPlaylist","clearTimeout","openTimeout","setTimeout","state","titleMouseOver","open","timeout","handleMouseEnter","handleMouseLeave","handleScroll","clientUpdate","offsetHeight","scrollHeight","createRef","Map","message","chat_id","id","prevProps","prevState","snapshot","on","off","messages","length","clear","slice","reverse","map","x","el","set","Component"],"mappings":";;;;;;;;AAAA;;;;;;AAOA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,QAAZ,MAA0B,WAA1B;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAO,gBAAP;;IAEMC,Q;;;;;AACF,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,kFAAMA,KAAN;;AADe,UA2BnBC,cA3BmB,GA2BF,YAAM;AACnB,UAAMC,IAAI,GAAG,MAAKC,OAAL,CAAaC,OAA1B;AACA,UAAI,CAACF,IAAL,EAAW;;AAFQ;AAAA,UAIXG,SAJW,yBAIXA,SAJW;;AAKnB,UAAI,CAACA,SAAL,EAAgB;;AAEhB,UAAMC,IAAI,GAAG,MAAKC,UAAL,CAAgBC,GAAhB,CAAoBH,SAApB,CAAb;;AACA,UAAI,CAACC,IAAL,EAAW;AAEX,UAAMG,IAAI,GAAGhB,QAAQ,CAACiB,WAAT,CAAqBJ,IAArB,CAAb;AACA,UAAI,CAACG,IAAL,EAAW;AAEXP,MAAAA,IAAI,CAACS,SAAL,GAAiBF,IAAI,CAACG,SAAL,GAAiB,EAAlC;AACH,KAzCkB;;AAAA,UAyDnBC,iCAzDmB,GAyDiB,UAAAC,MAAM,EAAI;AAAA,UAClCC,IADkC,GACzBD,MADyB,CAClCC,IADkC;;AAG1C,UAAIA,IAAJ,EAAU;AACN,cAAKC,QAAL,CACI;AACIC,UAAAA,iBAAiB,EAAEF;AADvB,SADJ,EAII,YAAM;AACF,gBAAKG,OAAL;AACH,SANL;AAQH,OATD,MASO;AACH,cAAKF,QAAL,CACI;AACIC,UAAAA,iBAAiB,EAAEF;AADvB,SADJ,EAII,YAAM;AACF,gBAAKI,QAAL;AACH,SANL;AAQH;AACJ,KA/EkB;;AAAA,UAiFnBC,yBAjFmB,GAiFS,UAAAN,MAAM,EAAI;AAAA,UAC1BO,MAD0B,GACJP,MADI,CAC1BO,MAD0B;AAAA,UAClBhB,SADkB,GACJS,MADI,CAClBT,SADkB;AAGlC,YAAKgB,MAAL,GAAcA,MAAd;AACA,YAAKhB,SAAL,GAAiBA,SAAjB;AACH,KAtFkB;;AAAA,UAwFnBiB,kCAxFmB,GAwFkB,UAAAR,MAAM,EAAI;AAAA;AAAA,UACnCO,MADmC,0BACnCA,MADmC;AAAA,UAC3BhB,SAD2B,0BAC3BA,SAD2B;;AAG3C,UAAIS,MAAM,CAACO,MAAP,KAAkBA,MAAlB,IAA4BP,MAAM,CAACT,SAAP,KAAqBA,SAArD,EAAgE;AAC5D,cAAKW,QAAL,CAAc;AACVO,UAAAA,QAAQ,EAAE;AADA,SAAd;AAGH;AACJ,KAhGkB;;AAAA,UAkGnBC,2BAlGmB,GAkGW,UAAAV,MAAM,EAAI;AAAA;AAAA,UAC5BO,MAD4B,0BAC5BA,MAD4B;AAAA,UACpBhB,SADoB,0BACpBA,SADoB;;AAAA,UAE5BkB,QAF4B,GAEfT,MAFe,CAE5BS,QAF4B;;AAIpC,UAAIF,MAAM,KAAKE,QAAQ,CAACF,MAApB,IAA8BhB,SAAS,KAAKkB,QAAQ,CAAClB,SAAzD,EAAoE;AAChE,cAAKW,QAAL,CAAc;AACVO,UAAAA,QAAQ,EAAEA;AADA,SAAd;AAGH;AACJ,KA3GkB;;AAAA,UA6GnBL,OA7GmB,GA6GT,YAAM;AACZO,MAAAA,YAAY,CAAC,MAAKC,WAAN,CAAZ;AAEA,YAAKA,WAAL,GAAmBC,UAAU,CAAC,YAAM;AAAA,0BACc,MAAKC,KADnB;AAAA,YACxBC,cADwB,eACxBA,cADwB;AAAA,YACRZ,iBADQ,eACRA,iBADQ;;AAEhC,cAAKD,QAAL,CAAc;AACVc,UAAAA,IAAI,EAAED,cAAc,IAAIZ;AADd,SAAd;AAGH,OAL4B,EAK1B,GAL0B,CAA7B;AAMH,KAtHkB;;AAAA,UAwHnBE,QAxHmB,GAwHR,YAAM;AACbM,MAAAA,YAAY,CAAC,MAAKM,OAAN,CAAZ;AAEA,YAAKA,OAAL,GAAeJ,UAAU,CAAC,YAAM;AAAA,2BACkB,MAAKC,KADvB;AAAA,YACpBC,cADoB,gBACpBA,cADoB;AAAA,YACJZ,iBADI,gBACJA,iBADI;;AAE5B,cAAKD,QAAL,CAAc;AACVc,UAAAA,IAAI,EAAED,cAAc,IAAIZ;AADd,SAAd;AAGH,OALwB,EAKtB,GALsB,CAAzB;AAMH,KAjIkB;;AAAA,UAmInBe,gBAnImB,GAmIA,YAAM;AACrB,YAAKhB,QAAL,CAAc;AACVC,QAAAA,iBAAiB,EAAE,IADT;AAEVa,QAAAA,IAAI,EAAE;AAFI,OAAd;AAIH,KAxIkB;;AAAA,UA0InBG,gBA1ImB,GA0IA,YAAM;AACrB,YAAKjB,QAAL,CACI;AACIC,QAAAA,iBAAiB,EAAE;AADvB,OADJ,EAII,YAAM;AACF,cAAKE,QAAL;AACH,OANL;AAQH,KAnJkB;;AAAA,UAqJnBe,YArJmB,GAqJJ,YAAM;AACjB,UAAMhC,IAAI,GAAG,MAAKC,OAAL,CAAaC,OAA1B;AACA,UAAI,CAACF,IAAL,EAAW;;AAEX,UAAIA,IAAI,CAACS,SAAL,IAAkBf,gBAAtB,EAAwC;AACpCE,QAAAA,eAAe,CAACqC,YAAhB,CAA6B;AACzB,mBAAS;AADgB,SAA7B;AAGH,OAJD,MAIO,IAAIjC,IAAI,CAACS,SAAL,GAAiBT,IAAI,CAACkC,YAAtB,IAAsClC,IAAI,CAACmC,YAAL,GAAoBzC,gBAA9D,EAAgF;AACnFE,QAAAA,eAAe,CAACqC,YAAhB,CAA6B;AACzB,mBAAS;AADgB,SAA7B;AAGH;AACJ,KAlKkB;;AAGf,UAAKhC,OAAL,GAAeX,KAAK,CAAC8C,SAAN,EAAf;AACA,UAAK/B,UAAL,GAAkB,IAAIgC,GAAJ,EAAlB;AAJe,QAMPC,OANO,GAMe3C,WANf,CAMP2C,OANO;AAAA,QAMEjB,SANF,GAMe1B,WANf,CAME0B,QANF;AAQf,UAAKF,MAAL,GAAcmB,OAAO,GAAGA,OAAO,CAACC,OAAX,GAAqB,CAA1C;AACA,UAAKpC,SAAL,GAAiBmC,OAAO,GAAGA,OAAO,CAACE,EAAX,GAAgB,CAAxC;AAEA,UAAKd,KAAL,GAAa;AACTE,MAAAA,IAAI,EAAE,KADG;AAETD,MAAAA,cAAc,EAAE,KAFP;AAGTZ,MAAAA,iBAAiB,EAAE,KAHV;AAITM,MAAAA,QAAQ,EAAEA;AAJD,KAAb;AAXe;AAiBlB;;;;uCAEkBoB,S,EAAWC,S,EAAWC,Q,EAAU;AAAA,UACvCf,IADuC,GAC9B,KAAKF,KADyB,CACvCE,IADuC;;AAG/C,UAAI,CAACc,SAAS,CAACd,IAAX,IAAmBA,IAAvB,EAA6B;AACzB,aAAK7B,cAAL;AACH;AACJ;;;wCAkBmB;AAChBJ,MAAAA,WAAW,CAACiD,EAAZ,CAAe,yBAAf,EAA0C,KAAK1B,yBAA/C;AACAvB,MAAAA,WAAW,CAACiD,EAAZ,CAAe,2BAAf,EAA4C,KAAKtB,2BAAjD;AACA3B,MAAAA,WAAW,CAACiD,EAAZ,CAAe,kCAAf,EAAmD,KAAKxB,kCAAxD;AACAzB,MAAAA,WAAW,CAACiD,EAAZ,CAAe,iCAAf,EAAkD,KAAKjC,iCAAvD;AACH;;;2CAEsB;AACnBhB,MAAAA,WAAW,CAACkD,GAAZ,CAAgB,yBAAhB,EAA2C,KAAK3B,yBAAhD;AACAvB,MAAAA,WAAW,CAACkD,GAAZ,CAAgB,2BAAhB,EAA6C,KAAKvB,2BAAlD;AACA3B,MAAAA,WAAW,CAACkD,GAAZ,CAAgB,kCAAhB,EAAoD,KAAKzB,kCAAzD;AACAzB,MAAAA,WAAW,CAACkD,GAAZ,CAAgB,iCAAhB,EAAmD,KAAKlC,iCAAxD;AACH;;;6BA6GQ;AAAA;;AAAA,yBACsB,KAAKe,KAD3B;AAAA,UACGE,IADH,gBACGA,IADH;AAAA,UACSP,QADT,gBACSA,QADT;AAEL,UAAI,CAACO,IAAL,EAAW,OAAO,IAAP;AACX,UAAI,CAACP,QAAL,EAAe,OAAO,IAAP;AAHV,UAKGyB,QALH,GAKgBzB,QALhB,CAKGyB,QALH;AAML,UAAI,CAACA,QAAL,EAAe,OAAO,IAAP;AACf,UAAIA,QAAQ,CAACC,MAAT,IAAmB,CAAvB,EAA0B,OAAO,IAAP;AAE1B,WAAK1C,UAAL,CAAgB2C,KAAhB;AAEA,aACI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AACI,QAAA,GAAG,EAAE,KAAK/C,OADd;AAEI,QAAA,SAAS,EAAC,gBAFd;AAGI,QAAA,YAAY,EAAE,KAAK6B,gBAHvB;AAII,QAAA,YAAY,EAAE,KAAKC,gBAJvB;AAKI,QAAA,QAAQ,EAAE,KAAKC,YALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMKX,QAAQ,CAACyB,QAAT,CACIG,KADJ,CACU,CADV,EAEIC,OAFJ,GAGIC,GAHJ,CAGQ,UAAAC,CAAC;AAAA,eACF;AAAK,UAAA,GAAG,EAAEA,CAAC,CAACZ,EAAZ;AAAgB,UAAA,GAAG,EAAE,aAAAa,EAAE;AAAA,mBAAI,MAAI,CAAChD,UAAL,CAAgBiD,GAAhB,CAAoBF,CAAC,CAACZ,EAAtB,EAA0Ba,EAA1B,CAAJ;AAAA,WAAvB;AAA0D,UAAA,SAAS,EAAC,eAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACK5D,QAAQ,CAAC2D,CAAD,EAAI;AAAA,iBAAM5D,SAAS,CAAC4D,CAAC,CAACb,OAAH,EAAYa,CAAC,CAACZ,EAAd,CAAf;AAAA,SAAJ,CADb,CADE;AAAA,OAHT,CANL,CADJ,CADJ,CADJ;AAqBH;;;;EArMkBlD,KAAK,CAACiE,S;;AAwM7B,eAAe1D,QAAf","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { openMedia } from '../../Utils/Message';\nimport { getMedia } from '../../Utils/Media';\nimport { SCROLL_PRECISION } from '../../Constants';\nimport PlayerStore from '../../Stores/PlayerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './Playlist.css';\n\nclass Playlist extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.listRef = React.createRef();\n        this.itemRefMap = new Map();\n\n        const { message, playlist } = PlayerStore;\n\n        this.chatId = message ? message.chat_id : 0;\n        this.messageId = message ? message.id : 0;\n\n        this.state = {\n            open: false,\n            titleMouseOver: false,\n            playlistMouseOver: false,\n            playlist: playlist\n        };\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const { open } = this.state;\n\n        if (!prevState.open && open) {\n            this.scrollToActive();\n        }\n    }\n\n    scrollToActive = () => {\n        const list = this.listRef.current;\n        if (!list) return;\n\n        const { messageId } = this;\n        if (!messageId) return;\n\n        const item = this.itemRefMap.get(messageId);\n        if (!item) return;\n\n        const node = ReactDOM.findDOMNode(item);\n        if (!node) return;\n\n        list.scrollTop = node.offsetTop - 15;\n    };\n\n    componentDidMount() {\n        PlayerStore.on('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.on('clientUpdateMediaPlaylist', this.onClientUpdateMediaPlaylist);\n        PlayerStore.on('clientUpdateMediaPlaylistLoading', this.onClientUpdateMediaPlaylistLoading);\n        PlayerStore.on('clientUpdateMediaTitleMouseOver', this.onClientUpdateMediaTitleMouseOver);\n    }\n\n    componentWillUnmount() {\n        PlayerStore.off('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.off('clientUpdateMediaPlaylist', this.onClientUpdateMediaPlaylist);\n        PlayerStore.off('clientUpdateMediaPlaylistLoading', this.onClientUpdateMediaPlaylistLoading);\n        PlayerStore.off('clientUpdateMediaTitleMouseOver', this.onClientUpdateMediaTitleMouseOver);\n    }\n\n    onClientUpdateMediaTitleMouseOver = update => {\n        const { over } = update;\n\n        if (over) {\n            this.setState(\n                {\n                    playlistMouseOver: over\n                },\n                () => {\n                    this.tryOpen();\n                }\n            );\n        } else {\n            this.setState(\n                {\n                    playlistMouseOver: over\n                },\n                () => {\n                    this.tryClose();\n                }\n            );\n        }\n    };\n\n    onClientUpdateMediaActive = update => {\n        const { chatId, messageId } = update;\n\n        this.chatId = chatId;\n        this.messageId = messageId;\n    };\n\n    onClientUpdateMediaPlaylistLoading = update => {\n        const { chatId, messageId } = this;\n\n        if (update.chatId === chatId && update.messageId === messageId) {\n            this.setState({\n                playlist: null\n            });\n        }\n    };\n\n    onClientUpdateMediaPlaylist = update => {\n        const { chatId, messageId } = this;\n        const { playlist } = update;\n\n        if (chatId === playlist.chatId && messageId === playlist.messageId) {\n            this.setState({\n                playlist: playlist\n            });\n        }\n    };\n\n    tryOpen = () => {\n        clearTimeout(this.openTimeout);\n\n        this.openTimeout = setTimeout(() => {\n            const { titleMouseOver, playlistMouseOver } = this.state;\n            this.setState({\n                open: titleMouseOver || playlistMouseOver\n            });\n        }, 250);\n    };\n\n    tryClose = () => {\n        clearTimeout(this.timeout);\n\n        this.timeout = setTimeout(() => {\n            const { titleMouseOver, playlistMouseOver } = this.state;\n            this.setState({\n                open: titleMouseOver || playlistMouseOver\n            });\n        }, 250);\n    };\n\n    handleMouseEnter = () => {\n        this.setState({\n            playlistMouseOver: true,\n            open: true\n        });\n    };\n\n    handleMouseLeave = () => {\n        this.setState(\n            {\n                playlistMouseOver: false\n            },\n            () => {\n                this.tryClose();\n            }\n        );\n    };\n\n    handleScroll = () => {\n        const list = this.listRef.current;\n        if (!list) return;\n\n        if (list.scrollTop <= SCROLL_PRECISION) {\n            TdLibController.clientUpdate({\n                '@type': 'clientUpdateMediaPlaylistNext'\n            });\n        } else if (list.scrollTop + list.offsetHeight >= list.scrollHeight - SCROLL_PRECISION) {\n            TdLibController.clientUpdate({\n                '@type': 'clientUpdateMediaPlaylistPrev'\n            });\n        }\n    };\n\n    render() {\n        const { open, playlist } = this.state;\n        if (!open) return null;\n        if (!playlist) return null;\n\n        const { messages } = playlist;\n        if (!messages) return null;\n        if (messages.length <= 1) return null;\n\n        this.itemRefMap.clear();\n\n        return (\n            <div className='playlist'>\n                <div className='playlist-wrapper'>\n                    <div\n                        ref={this.listRef}\n                        className='playlist-items'\n                        onMouseEnter={this.handleMouseEnter}\n                        onMouseLeave={this.handleMouseLeave}\n                        onScroll={this.handleScroll}>\n                        {playlist.messages\n                            .slice(0)\n                            .reverse()\n                            .map(x => (\n                                <div key={x.id} ref={el => this.itemRefMap.set(x.id, el)} className='playlist-item'>\n                                    {getMedia(x, () => openMedia(x.chat_id, x.id))}\n                                </div>\n                            ))}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Playlist;\n"]},"metadata":{},"sourceType":"module"}