{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar data = null;\nexport function loadData() {\n  return _loadData.apply(this, arguments);\n}\n\nfunction _loadData() {\n  _loadData = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var response, text, lines, data2;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!data) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            _context.prev = 2;\n            _context.next = 5;\n            return fetch('data/countries.txt');\n\n          case 5:\n            response = _context.sent;\n            _context.next = 8;\n            return response.text();\n\n          case 8:\n            text = _context.sent;\n            lines = text.split('\\n');\n            data2 = [];\n            lines.forEach(function (x) {\n              var split = x.split(';');\n              var item = {\n                prefix: split[0],\n                code: split[1],\n                name: split[2],\n                pattern: split[3],\n                count: Number(split[4]),\n                emoji: split[5]\n              };\n              data2.push(item);\n            });\n            data2.forEach(function (x) {\n              x.phone = '+' + x.prefix;\n            });\n            data = data2.filter(function (x) {\n              return x.emoji;\n            });\n            return _context.abrupt(\"return\", data);\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](2);\n            console.error(_context.t0);\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 17]]);\n  }));\n  return _loadData.apply(this, arguments);\n}\n\nfunction clearPhone(phone) {\n  if (!phone) return phone;\n  return phone.replace(/ /g, '').replace('+', '').toLowerCase();\n}\n\nfunction isPhoneWithOptionCode(phone, option) {\n  if (!phone) return false;\n  if (!option) return false;\n  phone = clearPhone(phone);\n  var code = clearPhone(option.phone);\n  return phone.startsWith(code) && option.pattern;\n}\n\nfunction getCountryFromPhone(phone, data) {\n  if (!data) return null;\n  var index = data.findIndex(function (x) {\n    return isPhoneWithOptionCode(phone, x);\n  });\n  return index !== -1 ? data[index] : null;\n}\n\nfunction formatByPattern(phone, pattern) {\n  phone = clearPhone(phone);\n  var result = '';\n  var index = 0;\n\n  for (var i = 0; i < pattern.length && index < phone.length; i++) {\n    if (pattern[i] >= '0' && pattern[i] <= '9') {\n      result += pattern[i];\n\n      if (phone[index] === pattern[i]) {\n        index++;\n      }\n    } else if (pattern[i] === ' ') {\n      result += pattern[i];\n    } else if (pattern[i] === 'X') {\n      result += phone[index++];\n    }\n  }\n\n  result += ' ' + phone.substring(index);\n  return '+' + result;\n}\n\nexport function formatPhoneNumber(phone) {\n  if (!phone) return phone;\n  if (!data) return phone.startsWith('+') ? phone : '+' + phone;\n  var country = getCountryFromPhone(phone, data);\n  if (!country) return phone.startsWith('+') ? phone : '+' + phone;\n  return formatByPattern(phone, country.pattern);\n}","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Utils/Phone.js"],"names":["data","loadData","fetch","response","text","lines","split","data2","forEach","x","item","prefix","code","name","pattern","count","Number","emoji","push","phone","filter","console","error","clearPhone","replace","toLowerCase","isPhoneWithOptionCode","option","startsWith","getCountryFromPhone","index","findIndex","formatByPattern","result","i","length","substring","formatPhoneNumber","country"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nlet data = null;\nexport async function loadData() {\n    if (data) return;\n\n    try {\n        const response = await fetch('data/countries.txt');\n        const text = await response.text();\n\n        const lines = text.split('\\n');\n        const data2 = [];\n        lines.forEach(x => {\n            const split = x.split(';');\n            const item = {\n                prefix: split[0],\n                code: split[1],\n                name: split[2],\n                pattern: split[3],\n                count: Number(split[4]),\n                emoji: split[5]\n            };\n            data2.push(item);\n        });\n        data2.forEach(x => {\n            x.phone = '+' + x.prefix;\n        });\n\n        data = data2.filter(x => x.emoji);\n\n        return data;\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nfunction clearPhone(phone) {\n    if (!phone) return phone;\n\n    return phone\n        .replace(/ /g, '')\n        .replace('+', '')\n        .toLowerCase();\n}\n\nfunction isPhoneWithOptionCode(phone, option) {\n    if (!phone) return false;\n    if (!option) return false;\n\n    phone = clearPhone(phone);\n    const code = clearPhone(option.phone);\n\n    return phone.startsWith(code) && option.pattern;\n}\n\nfunction getCountryFromPhone(phone, data) {\n    if (!data) return null;\n\n    const index = data.findIndex(x => isPhoneWithOptionCode(phone, x));\n\n    return index !== -1 ? data[index] : null;\n}\n\nfunction formatByPattern(phone, pattern) {\n    phone = clearPhone(phone);\n\n    let result = '';\n    let index = 0;\n    for (let i = 0; i < pattern.length && index < phone.length; i++) {\n        if (pattern[i] >= '0' && pattern[i] <= '9') {\n            result += pattern[i];\n            if (phone[index] === pattern[i]) {\n                index++;\n            }\n        } else if (pattern[i] === ' ') {\n            result += pattern[i];\n        } else if (pattern[i] === 'X') {\n            result += phone[index++];\n        }\n    }\n\n    result += ' ' + phone.substring(index);\n\n    return '+' + result;\n}\n\nexport function formatPhoneNumber(phone) {\n    if (!phone) return phone;\n    if (!data) return phone.startsWith('+') ? phone : '+' + phone;\n\n    const country = getCountryFromPhone(phone, data);\n    if (!country) return phone.startsWith('+') ? phone : '+' + phone;\n\n    return formatByPattern(phone, country.pattern);\n}\n"]},"metadata":{},"sourceType":"module"}