{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Tile/DialogContent.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { getChatTypingString, getChatDraft, getLastMessageSenderName, getLastMessageContent, showChatDraft } from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport './DialogContent.css';\n\nvar DialogContent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DialogContent, _React$Component);\n\n  function DialogContent() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DialogContent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DialogContent)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onClientUpdateClearHistory = function (update) {\n      var chatId = _this.props.chatId;\n\n      if (chatId === update.chatId) {\n        _this.clearHistory = update.inProgress;\n\n        _this.forceUpdate();\n      }\n    };\n\n    _this.onFastUpdatingComplete = function (update) {\n      _this.forceUpdate();\n    };\n\n    _this.onUpdate = function (update) {\n      var chatId = _this.props.chatId;\n      if (chatId !== update.chat_id) return;\n\n      _this.forceUpdate();\n    };\n\n    return _this;\n  }\n\n  _createClass(DialogContent, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var _this$props = this.props,\n          chatId = _this$props.chatId,\n          t = _this$props.t;\n\n      if (nextProps.chatId !== chatId) {\n        return true;\n      }\n\n      if (nextProps.t !== t) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n      ChatStore.on('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n      ChatStore.on('updateChatDraftMessage', this.onUpdate);\n      ChatStore.on('updateChatLastMessage', this.onUpdate);\n      ChatStore.on('updateChatReadInbox', this.onUpdate);\n      ChatStore.on('updateUserChatAction', this.onUpdate);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      ChatStore.off('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n      ChatStore.off('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n      ChatStore.off('updateChatDraftMessage', this.onUpdate);\n      ChatStore.off('updateChatLastMessage', this.onUpdate);\n      ChatStore.off('updateChatReadInbox', this.onUpdate);\n      ChatStore.off('updateUserChatAction', this.onUpdate);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          chatId = _this$props2.chatId,\n          t = _this$props2.t;\n      if (this.clearHistory) return React.createElement(\"div\", {\n        className: \"dialog-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"\\xA0\");\n      var chat = ChatStore.get(chatId);\n      if (!chat) return React.createElement(\"div\", {\n        className: \"dialog-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"\\xA0\");\n      var contentControl = null;\n      var typingString = getChatTypingString(chatId);\n\n      if (typingString) {\n        contentControl = React.createElement(\"span\", {\n          className: \"dialog-content-accent\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }, typingString);\n      }\n\n      if (!contentControl) {\n        var draft = getChatDraft(chatId);\n\n        if (showChatDraft(chatId)) {\n          var text = draft.text || \"\\xA0\";\n          contentControl = React.createElement(React.Fragment, null, React.createElement(\"span\", {\n            className: \"dialog-content-draft\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 95\n            },\n            __self: this\n          }, t('Draft') + ': '), text);\n        }\n      }\n\n      if (!contentControl) {\n        var content = getLastMessageContent(chat, t) || \"\\xA0\";\n        var senderName = getLastMessageSenderName(chat, t);\n        contentControl = React.createElement(React.Fragment, null, senderName && React.createElement(\"span\", {\n          className: \"dialog-content-accent\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, senderName, \": \"), content);\n      }\n\n      return React.createElement(\"div\", {\n        className: \"dialog-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, contentControl);\n    }\n  }]);\n\n  return DialogContent;\n}(React.Component);\n\nexport default withTranslation()(DialogContent);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Tile/DialogContent.js"],"names":["React","withTranslation","getChatTypingString","getChatDraft","getLastMessageSenderName","getLastMessageContent","showChatDraft","ChatStore","DialogContent","onClientUpdateClearHistory","update","chatId","props","clearHistory","inProgress","forceUpdate","onFastUpdatingComplete","onUpdate","chat_id","nextProps","nextState","t","on","off","chat","get","contentControl","typingString","draft","text","content","senderName","Component"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport {\n    getChatTypingString,\n    getChatDraft,\n    getLastMessageSenderName,\n    getLastMessageContent,\n    showChatDraft\n} from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport './DialogContent.css';\n\nclass DialogContent extends React.Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        const { chatId, t } = this.props;\n\n        if (nextProps.chatId !== chatId) {\n            return true;\n        }\n\n        if (nextProps.t !== t) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.on('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.on('updateChatDraftMessage', this.onUpdate);\n        ChatStore.on('updateChatLastMessage', this.onUpdate);\n        ChatStore.on('updateChatReadInbox', this.onUpdate);\n        ChatStore.on('updateUserChatAction', this.onUpdate);\n    }\n\n    componentWillUnmount() {\n        ChatStore.off('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.off('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.off('updateChatDraftMessage', this.onUpdate);\n        ChatStore.off('updateChatLastMessage', this.onUpdate);\n        ChatStore.off('updateChatReadInbox', this.onUpdate);\n        ChatStore.off('updateUserChatAction', this.onUpdate);\n    }\n\n    onClientUpdateClearHistory = update => {\n        const { chatId } = this.props;\n\n        if (chatId === update.chatId) {\n            this.clearHistory = update.inProgress;\n            this.forceUpdate();\n        }\n    };\n\n    onFastUpdatingComplete = update => {\n        this.forceUpdate();\n    };\n\n    onUpdate = update => {\n        const { chatId } = this.props;\n\n        if (chatId !== update.chat_id) return;\n\n        this.forceUpdate();\n    };\n\n    render() {\n        const { chatId, t } = this.props;\n\n        if (this.clearHistory) return <div className='dialog-content'>{'\\u00A0'}</div>;\n\n        const chat = ChatStore.get(chatId);\n        if (!chat) return <div className='dialog-content'>{'\\u00A0'}</div>;\n\n        let contentControl = null;\n        const typingString = getChatTypingString(chatId);\n        if (typingString) {\n            contentControl = <span className='dialog-content-accent'>{typingString}</span>;\n        }\n\n        if (!contentControl) {\n            const draft = getChatDraft(chatId);\n            if (showChatDraft(chatId)) {\n                const text = draft.text || '\\u00A0';\n\n                contentControl = (\n                    <>\n                        <span className='dialog-content-draft'>{t('Draft') + ': '}</span>\n                        {text}\n                    </>\n                );\n            }\n        }\n\n        if (!contentControl) {\n            const content = getLastMessageContent(chat, t) || '\\u00A0';\n            const senderName = getLastMessageSenderName(chat, t);\n            contentControl = (\n                <>\n                    {senderName && <span className='dialog-content-accent'>{senderName}: </span>}\n                    {content}\n                </>\n            );\n        }\n\n        return <div className='dialog-content'>{contentControl}</div>;\n    }\n}\n\nexport default withTranslation()(DialogContent);\n"]},"metadata":{},"sourceType":"module"}