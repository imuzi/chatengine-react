{"ast":null,"code":"import _toConsumableArray from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Message/Media/Poll.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport FireworksComponent from './FireworksControl';\nimport PollOption from './PollOption';\nimport UserTile from '../../Tile/UserTile';\nimport { setPollAnswer } from '../../../Actions/Poll';\nimport MessageStore from './../../../Stores/MessageStore';\nimport TdLibController from './../../../Controllers/TdLibController';\nimport './Poll.css';\nimport PollResultsDialog from '../../Popup/PollResultsDialog';\n\nvar Poll =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Poll, _React$Component);\n\n  function Poll(props) {\n    var _this;\n\n    _classCallCheck(this, Poll);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Poll).call(this, props));\n\n    _this.getTotalVoterCountString = function (count) {\n      var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (key) {\n        return key;\n      };\n      if (!count) return t('NoVotes');\n      if (count === 1) return '1 answer';\n      return count + ' answers';\n    };\n\n    _this.handleSubmit = function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n      var _this$props = _this.props,\n          chatId = _this$props.chatId,\n          messageId = _this$props.messageId,\n          poll = _this$props.poll;\n      if (!poll) return;\n      var type = poll.type;\n      if (!type) return;\n\n      if (_this.viewResults(poll)) {\n        return;\n      }\n\n      if (!type.allow_multiple_answers) {\n        return;\n      }\n\n      var optionIds = [];\n      poll.options.forEach(function (x, index) {\n        if (x.isMultiChoosen) {\n          optionIds.push(index);\n        }\n      });\n\n      if (!optionIds.length) {\n        return;\n      }\n\n      setPollAnswer(chatId, messageId, optionIds);\n    };\n\n    _this.handleVote = function (index) {\n      var _this$props2 = _this.props,\n          chatId = _this$props2.chatId,\n          messageId = _this$props2.messageId,\n          poll = _this$props2.poll;\n      if (!poll) return;\n      var type = poll.type;\n      if (!type) return;\n\n      if (type['@type'] === 'pollTypeRegular' && type.allow_multiple_answers) {\n        poll.options[index].isMultiChoosen = !poll.options[index].isMultiChoosen;\n\n        _this.forceUpdate();\n      } else {\n        setPollAnswer(chatId, messageId, [index]);\n      }\n    };\n\n    _this.handleOpenResults = function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n      var poll = _this.props.poll;\n\n      _this.setState({\n        viewResultsPoll: poll\n      });\n    };\n\n    _this.handleCloseResults = function () {\n      _this.setState({\n        viewResultsPoll: null\n      });\n    };\n\n    _this.fireworksRef = React.createRef();\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(Poll, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      var _this$props3 = this.props,\n          chatId = _this$props3.chatId,\n          messageId = _this$props3.messageId,\n          poll = _this$props3.poll;\n\n      if (poll && poll.type['@type'] === 'pollTypeQuiz') {\n        var prevPoll = prevProps.poll;\n\n        if (prevPoll.type.correct_option_id === -1 && poll.type.correct_option_id !== -1) {\n          var fireworks = this.fireworksRef.current;\n          if (!fireworks) return;\n\n          if (poll.options[poll.type.correct_option_id].is_chosen) {\n            fireworks.start();\n          } else {\n            TdLibController.clientUpdate({\n              '@type': 'clientUpdateMessageShake',\n              chatId: chatId,\n              messageId: messageId\n            });\n          }\n        }\n      }\n    }\n  }, {\n    key: \"viewResults\",\n    value: function viewResults(poll) {\n      if (!poll) return false;\n      var options = poll.options,\n          is_closed = poll.is_closed,\n          is_anonymous = poll.is_anonymous;\n\n      if (is_anonymous) {\n        return false;\n      }\n\n      return is_closed || options.some(function (x) {\n        return x.is_chosen;\n      });\n    }\n  }, {\n    key: \"getOptionType\",\n    value: function getOptionType(index, poll) {\n      var types = ['regular', 'correct', 'incorrect'];\n      var defaultTypeId = 0;\n      var correctTypeId = 1;\n      var incorrectTypeId = 2;\n      if (!poll) return types[defaultTypeId];\n      var option = poll.options[index];\n      if (!option) return types[defaultTypeId];\n      if (!option.is_chosen) return types[defaultTypeId];\n      var type = poll.type;\n      if (!type) return types[defaultTypeId];\n      if (type['@type'] !== 'pollTypeQuiz') return types[defaultTypeId];\n      var correct_option_id = type.correct_option_id;\n      if (correct_option_id === -1) return types[defaultTypeId];\n      return correct_option_id === index ? types[correctTypeId] : types[incorrectTypeId];\n    }\n  }, {\n    key: \"getOptionIsCorrect\",\n    value: function getOptionIsCorrect(index, poll) {\n      if (!poll) return false;\n      var option = poll.options[index];\n      if (!option) return false;\n      var type = poll.type;\n      if (!type) return false;\n      if (type['@type'] !== 'pollTypeQuiz') return false;\n      var correct_option_id = type.correct_option_id;\n      if (correct_option_id === -1) return false;\n      return correct_option_id === index;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props4 = this.props,\n          chatId = _this$props4.chatId,\n          messageId = _this$props4.messageId,\n          poll = _this$props4.poll,\n          t = _this$props4.t,\n          meta = _this$props4.meta;\n      var viewResultsPoll = this.state.viewResultsPoll;\n      var question = poll.question,\n          options = poll.options,\n          total_voter_count = poll.total_voter_count,\n          type = poll.type,\n          is_closed = poll.is_closed,\n          is_anonymous = poll.is_anonymous,\n          recent_voter_user_ids = poll.recent_voter_user_ids;\n      var subtitle = t('FinalResults');\n\n      if (!is_closed) {\n        switch (type['@type']) {\n          case 'pollTypeRegular':\n            {\n              subtitle = is_anonymous ? t('AnonymousPoll') : t('PublicPoll');\n              break;\n            }\n\n          case 'pollTypeQuiz':\n            {\n              subtitle = is_anonymous ? t('AnonymousQuizPoll') : t('QuizPoll');\n              break;\n            }\n        }\n      }\n\n      var message = MessageStore.get(chatId, messageId);\n      if (!message) return null;\n      var isQuiz = type && type['@type'] === 'pollTypeQuiz';\n      var canBeSelected = !is_closed && options.every(function (x) {\n        return !x.is_chosen;\n      });\n      var isSelected = !is_closed && options.some(function (x) {\n        return x.is_chosen;\n      });\n      var maxVoterCount = Math.max.apply(Math, _toConsumableArray(options.map(function (x) {\n        return x.voter_count;\n      })));\n      var showViewResults = this.viewResults(poll);\n      var showButton = type.allow_multiple_answers && !isSelected || showViewResults;\n      var buttonEnabled = showViewResults || options.some(function (x) {\n        return x.isMultiChoosen;\n      });\n      var recentVoters = [];\n\n      if (recent_voter_user_ids) {\n        recentVoters = recent_voter_user_ids.map(function (id) {\n          return React.createElement(UserTile, {\n            key: id,\n            poll: true,\n            userId: id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 204\n            },\n            __self: this\n          });\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"poll\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, isQuiz && React.createElement(FireworksComponent, {\n        ref: this.fireworksRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"poll-question\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"poll-question-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, question), React.createElement(\"div\", {\n        className: \"poll-question-subtitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: {\n          marginRight: 6\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, subtitle), recentVoters)), React.createElement(\"div\", {\n        className: \"poll-options\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, options.map(function (x, index) {\n        return React.createElement(PollOption, {\n          key: index,\n          type: _this2.getOptionType(index, poll),\n          isCorrect: _this2.getOptionIsCorrect(index, poll),\n          option: x,\n          canBeSelected: canBeSelected,\n          closed: is_closed,\n          maxVoterCount: maxVoterCount,\n          onVote: function onVote() {\n            return _this2.handleVote(index);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219\n          },\n          __self: this\n        });\n      })), showButton ? React.createElement(Button, {\n        fullWidth: true,\n        color: \"primary\",\n        classes: {\n          root: 'poll-button',\n          textPrimary: 'message-control',\n          disabled: 'message-control-disabled'\n        },\n        TouchRippleProps: {\n          classes: {\n            child: 'touch-ripple-current-color'\n          }\n        },\n        disabled: !buttonEnabled,\n        onClick: showViewResults ? this.handleOpenResults : this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, showViewResults ? t('PollViewResults') : t('PollSubmitVotes')) : React.createElement(\"div\", {\n        className: \"poll-total-count\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, this.getTotalVoterCountString(total_voter_count, t), meta), Boolean(viewResultsPoll) && React.createElement(PollResultsDialog, {\n        chatId: chatId,\n        messageId: messageId,\n        poll: viewResultsPoll,\n        onClose: this.handleCloseResults,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Poll;\n}(React.Component);\n\nPoll.propTypes = {\n  chatId: PropTypes.number.isRequired,\n  messageId: PropTypes.number.isRequired,\n  poll: PropTypes.object.isRequired,\n  openMedia: PropTypes.func\n};\nexport default withTranslation()(Poll);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Message/Media/Poll.js"],"names":["React","PropTypes","withTranslation","Button","Dialog","DialogContent","DialogTitle","FireworksComponent","PollOption","UserTile","setPollAnswer","MessageStore","TdLibController","PollResultsDialog","Poll","props","getTotalVoterCountString","count","t","key","handleSubmit","event","preventDefault","stopPropagation","chatId","messageId","poll","type","viewResults","allow_multiple_answers","optionIds","options","forEach","x","index","isMultiChoosen","push","length","handleVote","forceUpdate","handleOpenResults","setState","viewResultsPoll","handleCloseResults","fireworksRef","createRef","state","prevProps","prevState","snapshot","prevPoll","correct_option_id","fireworks","current","is_chosen","start","clientUpdate","is_closed","is_anonymous","some","types","defaultTypeId","correctTypeId","incorrectTypeId","option","meta","question","total_voter_count","recent_voter_user_ids","subtitle","message","get","isQuiz","canBeSelected","every","isSelected","maxVoterCount","Math","max","map","voter_count","showViewResults","showButton","buttonEnabled","recentVoters","id","marginRight","getOptionType","getOptionIsCorrect","root","textPrimary","disabled","classes","child","Boolean","Component","propTypes","number","isRequired","object","openMedia","func"],"mappings":";;;;;;;;AAAA;;;;;;AAOA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,kBAAP,MAA+B,oBAA/B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,eAAP,MAA4B,wCAA5B;AACA,OAAO,YAAP;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;;IAEMC,I;;;;;AACF,gBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8EAAMA,KAAN;;AADe,UA6BnBC,wBA7BmB,GA6BQ,UAACC,KAAD,EAA2B;AAAA,UAAnBC,CAAmB,uEAAf,UAAAC,GAAG;AAAA,eAAIA,GAAJ;AAAA,OAAY;AAClD,UAAI,CAACF,KAAL,EAAY,OAAOC,CAAC,CAAC,SAAD,CAAR;AACZ,UAAID,KAAK,KAAK,CAAd,EAAiB,OAAO,UAAP;AAEjB,aAAOA,KAAK,GAAG,UAAf;AACH,KAlCkB;;AAAA,UAoCnBG,YApCmB,GAoCJ,UAAAC,KAAK,EAAI;AACpBA,MAAAA,KAAK,CAACC,cAAN;AACAD,MAAAA,KAAK,CAACE,eAAN;AAFoB,wBAIgB,MAAKR,KAJrB;AAAA,UAIZS,MAJY,eAIZA,MAJY;AAAA,UAIJC,SAJI,eAIJA,SAJI;AAAA,UAIOC,IAJP,eAIOA,IAJP;AAKpB,UAAI,CAACA,IAAL,EAAW;AALS,UAOZC,IAPY,GAOHD,IAPG,CAOZC,IAPY;AAQpB,UAAI,CAACA,IAAL,EAAW;;AAEX,UAAI,MAAKC,WAAL,CAAiBF,IAAjB,CAAJ,EAA4B;AACxB;AACH;;AAED,UAAI,CAACC,IAAI,CAACE,sBAAV,EAAkC;AAC9B;AACH;;AAED,UAAMC,SAAS,GAAG,EAAlB;AACAJ,MAAAA,IAAI,CAACK,OAAL,CAAaC,OAAb,CAAqB,UAACC,CAAD,EAAIC,KAAJ,EAAc;AAC/B,YAAID,CAAC,CAACE,cAAN,EAAsB;AAClBL,UAAAA,SAAS,CAACM,IAAV,CAAeF,KAAf;AACH;AACJ,OAJD;;AAMA,UAAI,CAACJ,SAAS,CAACO,MAAf,EAAuB;AACnB;AACH;;AAED3B,MAAAA,aAAa,CAACc,MAAD,EAASC,SAAT,EAAoBK,SAApB,CAAb;AACH,KAlEkB;;AAAA,UAoEnBQ,UApEmB,GAoEN,UAAAJ,KAAK,EAAI;AAAA,yBACkB,MAAKnB,KADvB;AAAA,UACVS,MADU,gBACVA,MADU;AAAA,UACFC,SADE,gBACFA,SADE;AAAA,UACSC,IADT,gBACSA,IADT;AAElB,UAAI,CAACA,IAAL,EAAW;AAFO,UAIVC,IAJU,GAIDD,IAJC,CAIVC,IAJU;AAKlB,UAAI,CAACA,IAAL,EAAW;;AAEX,UAAIA,IAAI,CAAC,OAAD,CAAJ,KAAkB,iBAAlB,IAAuCA,IAAI,CAACE,sBAAhD,EAAwE;AACpEH,QAAAA,IAAI,CAACK,OAAL,CAAaG,KAAb,EAAoBC,cAApB,GAAqC,CAACT,IAAI,CAACK,OAAL,CAAaG,KAAb,EAAoBC,cAA1D;;AACA,cAAKI,WAAL;AACH,OAHD,MAGO;AACH7B,QAAAA,aAAa,CAACc,MAAD,EAASC,SAAT,EAAoB,CAACS,KAAD,CAApB,CAAb;AACH;AACJ,KAjFkB;;AAAA,UAmInBM,iBAnImB,GAmIC,UAAAnB,KAAK,EAAI;AACzBA,MAAAA,KAAK,CAACC,cAAN;AACAD,MAAAA,KAAK,CAACE,eAAN;AAFyB,UAIjBG,IAJiB,GAIR,MAAKX,KAJG,CAIjBW,IAJiB;;AAMzB,YAAKe,QAAL,CAAc;AACVC,QAAAA,eAAe,EAAEhB;AADP,OAAd;AAGH,KA5IkB;;AAAA,UA8InBiB,kBA9ImB,GA8IE,YAAM;AACvB,YAAKF,QAAL,CAAc;AACVC,QAAAA,eAAe,EAAE;AADP,OAAd;AAGH,KAlJkB;;AAGf,UAAKE,YAAL,GAAoB5C,KAAK,CAAC6C,SAAN,EAApB;AACA,UAAKC,KAAL,GAAa,EAAb;AAJe;AAKlB;;;;uCAEkBC,S,EAAWC,S,EAAWC,Q,EAAU;AAAA,yBACX,KAAKlC,KADM;AAAA,UACvCS,MADuC,gBACvCA,MADuC;AAAA,UAC/BC,SAD+B,gBAC/BA,SAD+B;AAAA,UACpBC,IADoB,gBACpBA,IADoB;;AAG/C,UAAIA,IAAI,IAAIA,IAAI,CAACC,IAAL,CAAU,OAAV,MAAuB,cAAnC,EAAmD;AAAA,YACjCuB,QADiC,GACpBH,SADoB,CACvCrB,IADuC;;AAE/C,YAAIwB,QAAQ,CAACvB,IAAT,CAAcwB,iBAAd,KAAoC,CAAC,CAArC,IAA0CzB,IAAI,CAACC,IAAL,CAAUwB,iBAAV,KAAgC,CAAC,CAA/E,EAAkF;AAC9E,cAAMC,SAAS,GAAG,KAAKR,YAAL,CAAkBS,OAApC;AACA,cAAI,CAACD,SAAL,EAAgB;;AAEhB,cAAI1B,IAAI,CAACK,OAAL,CAAaL,IAAI,CAACC,IAAL,CAAUwB,iBAAvB,EAA0CG,SAA9C,EAAyD;AACrDF,YAAAA,SAAS,CAACG,KAAV;AACH,WAFD,MAEO;AACH3C,YAAAA,eAAe,CAAC4C,YAAhB,CAA6B;AACzB,uBAAS,0BADgB;AAEzBhC,cAAAA,MAAM,EAANA,MAFyB;AAGzBC,cAAAA,SAAS,EAATA;AAHyB,aAA7B;AAKH;AACJ;AACJ;AACJ;;;gCAwDWC,I,EAAM;AACd,UAAI,CAACA,IAAL,EAAW,OAAO,KAAP;AADG,UAGNK,OAHM,GAG+BL,IAH/B,CAGNK,OAHM;AAAA,UAGG0B,SAHH,GAG+B/B,IAH/B,CAGG+B,SAHH;AAAA,UAGcC,YAHd,GAG+BhC,IAH/B,CAGcgC,YAHd;;AAId,UAAIA,YAAJ,EAAkB;AACd,eAAO,KAAP;AACH;;AAED,aAAOD,SAAS,IAAI1B,OAAO,CAAC4B,IAAR,CAAa,UAAA1B,CAAC;AAAA,eAAIA,CAAC,CAACqB,SAAN;AAAA,OAAd,CAApB;AACH;;;kCAEapB,K,EAAOR,I,EAAM;AACvB,UAAMkC,KAAK,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,WAAvB,CAAd;AACA,UAAMC,aAAa,GAAG,CAAtB;AACA,UAAMC,aAAa,GAAG,CAAtB;AACA,UAAMC,eAAe,GAAG,CAAxB;AACA,UAAI,CAACrC,IAAL,EAAW,OAAOkC,KAAK,CAACC,aAAD,CAAZ;AAEX,UAAMG,MAAM,GAAGtC,IAAI,CAACK,OAAL,CAAaG,KAAb,CAAf;AACA,UAAI,CAAC8B,MAAL,EAAa,OAAOJ,KAAK,CAACC,aAAD,CAAZ;AACb,UAAI,CAACG,MAAM,CAACV,SAAZ,EAAuB,OAAOM,KAAK,CAACC,aAAD,CAAZ;AATA,UAWflC,IAXe,GAWND,IAXM,CAWfC,IAXe;AAYvB,UAAI,CAACA,IAAL,EAAW,OAAOiC,KAAK,CAACC,aAAD,CAAZ;AACX,UAAIlC,IAAI,CAAC,OAAD,CAAJ,KAAkB,cAAtB,EAAsC,OAAOiC,KAAK,CAACC,aAAD,CAAZ;AAbf,UAefV,iBAfe,GAeOxB,IAfP,CAefwB,iBAfe;AAgBvB,UAAIA,iBAAiB,KAAK,CAAC,CAA3B,EAA8B,OAAOS,KAAK,CAACC,aAAD,CAAZ;AAE9B,aAAOV,iBAAiB,KAAKjB,KAAtB,GAA8B0B,KAAK,CAACE,aAAD,CAAnC,GAAqDF,KAAK,CAACG,eAAD,CAAjE;AACH;;;uCAEkB7B,K,EAAOR,I,EAAM;AAC5B,UAAI,CAACA,IAAL,EAAW,OAAO,KAAP;AAEX,UAAMsC,MAAM,GAAGtC,IAAI,CAACK,OAAL,CAAaG,KAAb,CAAf;AACA,UAAI,CAAC8B,MAAL,EAAa,OAAO,KAAP;AAJe,UAMpBrC,IANoB,GAMXD,IANW,CAMpBC,IANoB;AAO5B,UAAI,CAACA,IAAL,EAAW,OAAO,KAAP;AACX,UAAIA,IAAI,CAAC,OAAD,CAAJ,KAAkB,cAAtB,EAAsC,OAAO,KAAP;AARV,UAUpBwB,iBAVoB,GAUExB,IAVF,CAUpBwB,iBAVoB;AAW5B,UAAIA,iBAAiB,KAAK,CAAC,CAA3B,EAA8B,OAAO,KAAP;AAE9B,aAAOA,iBAAiB,KAAKjB,KAA7B;AACH;;;6BAmBQ;AAAA;;AAAA,yBACwC,KAAKnB,KAD7C;AAAA,UACGS,MADH,gBACGA,MADH;AAAA,UACWC,SADX,gBACWA,SADX;AAAA,UACsBC,IADtB,gBACsBA,IADtB;AAAA,UAC4BR,CAD5B,gBAC4BA,CAD5B;AAAA,UAC+B+C,IAD/B,gBAC+BA,IAD/B;AAAA,UAEGvB,eAFH,GAEuB,KAAKI,KAF5B,CAEGJ,eAFH;AAAA,UAGGwB,QAHH,GAGkGxC,IAHlG,CAGGwC,QAHH;AAAA,UAGanC,OAHb,GAGkGL,IAHlG,CAGaK,OAHb;AAAA,UAGsBoC,iBAHtB,GAGkGzC,IAHlG,CAGsByC,iBAHtB;AAAA,UAGyCxC,IAHzC,GAGkGD,IAHlG,CAGyCC,IAHzC;AAAA,UAG+C8B,SAH/C,GAGkG/B,IAHlG,CAG+C+B,SAH/C;AAAA,UAG0DC,YAH1D,GAGkGhC,IAHlG,CAG0DgC,YAH1D;AAAA,UAGwEU,qBAHxE,GAGkG1C,IAHlG,CAGwE0C,qBAHxE;AAKL,UAAIC,QAAQ,GAAGnD,CAAC,CAAC,cAAD,CAAhB;;AACA,UAAI,CAACuC,SAAL,EAAgB;AACZ,gBAAQ9B,IAAI,CAAC,OAAD,CAAZ;AACI,eAAK,iBAAL;AAAwB;AACpB0C,cAAAA,QAAQ,GAAGX,YAAY,GAAGxC,CAAC,CAAC,eAAD,CAAJ,GAAwBA,CAAC,CAAC,YAAD,CAAhD;AACA;AACH;;AACD,eAAK,cAAL;AAAqB;AACjBmD,cAAAA,QAAQ,GAAGX,YAAY,GAAGxC,CAAC,CAAC,mBAAD,CAAJ,GAA4BA,CAAC,CAAC,UAAD,CAApD;AACA;AACH;AARL;AAUH;;AAED,UAAMoD,OAAO,GAAG3D,YAAY,CAAC4D,GAAb,CAAiB/C,MAAjB,EAAyBC,SAAzB,CAAhB;AACA,UAAI,CAAC6C,OAAL,EAAc,OAAO,IAAP;AAEd,UAAME,MAAM,GAAG7C,IAAI,IAAIA,IAAI,CAAC,OAAD,CAAJ,KAAkB,cAAzC;AACA,UAAM8C,aAAa,GAAG,CAAChB,SAAD,IAAc1B,OAAO,CAAC2C,KAAR,CAAc,UAAAzC,CAAC;AAAA,eAAI,CAACA,CAAC,CAACqB,SAAP;AAAA,OAAf,CAApC;AACA,UAAMqB,UAAU,GAAG,CAAClB,SAAD,IAAc1B,OAAO,CAAC4B,IAAR,CAAa,UAAA1B,CAAC;AAAA,eAAIA,CAAC,CAACqB,SAAN;AAAA,OAAd,CAAjC;AACA,UAAMsB,aAAa,GAAGC,IAAI,CAACC,GAAL,OAAAD,IAAI,qBAAQ9C,OAAO,CAACgD,GAAR,CAAY,UAAA9C,CAAC;AAAA,eAAIA,CAAC,CAAC+C,WAAN;AAAA,OAAb,CAAR,EAA1B;AACA,UAAMC,eAAe,GAAG,KAAKrD,WAAL,CAAiBF,IAAjB,CAAxB;AACA,UAAMwD,UAAU,GAAIvD,IAAI,CAACE,sBAAL,IAA+B,CAAC8C,UAAjC,IAAgDM,eAAnE;AACA,UAAME,aAAa,GAAGF,eAAe,IAAIlD,OAAO,CAAC4B,IAAR,CAAa,UAAA1B,CAAC;AAAA,eAAIA,CAAC,CAACE,cAAN;AAAA,OAAd,CAAzC;AACA,UAAIiD,YAAY,GAAG,EAAnB;;AACA,UAAIhB,qBAAJ,EAA2B;AACvBgB,QAAAA,YAAY,GAAGhB,qBAAqB,CAACW,GAAtB,CAA0B,UAAAM,EAAE;AAAA,iBAAI,oBAAC,QAAD;AAAU,YAAA,GAAG,EAAEA,EAAf;AAAmB,YAAA,IAAI,MAAvB;AAAwB,YAAA,MAAM,EAAEA,EAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAJ;AAAA,SAA5B,CAAf;AACH;;AAED,aACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKb,MAAM,IAAI,oBAAC,kBAAD;AAAoB,QAAA,GAAG,EAAE,KAAK5B,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADf,EAEI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAsCsB,QAAtC,CADJ,EAEI;AAAK,QAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAM,QAAA,KAAK,EAAE;AAAEoB,UAAAA,WAAW,EAAE;AAAf,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAkCjB,QAAlC,CADJ,EAEKe,YAFL,CAFJ,CAFJ,EASI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKrD,OAAO,CAACgD,GAAR,CAAY,UAAC9C,CAAD,EAAIC,KAAJ;AAAA,eACT,oBAAC,UAAD;AACI,UAAA,GAAG,EAAEA,KADT;AAEI,UAAA,IAAI,EAAE,MAAI,CAACqD,aAAL,CAAmBrD,KAAnB,EAA0BR,IAA1B,CAFV;AAGI,UAAA,SAAS,EAAE,MAAI,CAAC8D,kBAAL,CAAwBtD,KAAxB,EAA+BR,IAA/B,CAHf;AAII,UAAA,MAAM,EAAEO,CAJZ;AAKI,UAAA,aAAa,EAAEwC,aALnB;AAMI,UAAA,MAAM,EAAEhB,SANZ;AAOI,UAAA,aAAa,EAAEmB,aAPnB;AAQI,UAAA,MAAM,EAAE;AAAA,mBAAM,MAAI,CAACtC,UAAL,CAAgBJ,KAAhB,CAAN;AAAA,WARZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADS;AAAA,OAAZ,CADL,CATJ,EAuBKgD,UAAU,GACP,oBAAC,MAAD;AACI,QAAA,SAAS,MADb;AAEI,QAAA,KAAK,EAAC,SAFV;AAGI,QAAA,OAAO,EAAE;AACLO,UAAAA,IAAI,EAAE,aADD;AAELC,UAAAA,WAAW,EAAE,iBAFR;AAGLC,UAAAA,QAAQ,EAAE;AAHL,SAHb;AAQI,QAAA,gBAAgB,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,KAAK,EAAE;AAAT;AAAX,SARtB;AASI,QAAA,QAAQ,EAAE,CAACV,aATf;AAUI,QAAA,OAAO,EAAEF,eAAe,GAAG,KAAKzC,iBAAR,GAA4B,KAAKpB,YAV7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAWK6D,eAAe,GAAG/D,CAAC,CAAC,iBAAD,CAAJ,GAA0BA,CAAC,CAAC,iBAAD,CAX/C,CADO,GAeP;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKF,wBAAL,CAA8BmD,iBAA9B,EAAiDjD,CAAjD,CADL,EAEK+C,IAFL,CAtCR,EA2CK6B,OAAO,CAACpD,eAAD,CAAP,IACG,oBAAC,iBAAD;AACI,QAAA,MAAM,EAAElB,MADZ;AAEI,QAAA,SAAS,EAAEC,SAFf;AAGI,QAAA,IAAI,EAAEiB,eAHV;AAII,QAAA,OAAO,EAAE,KAAKC,kBAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA5CR,CADJ;AAsDH;;;;EA7Oc3C,KAAK,CAAC+F,S;;AAgPzBjF,IAAI,CAACkF,SAAL,GAAiB;AACbxE,EAAAA,MAAM,EAAEvB,SAAS,CAACgG,MAAV,CAAiBC,UADZ;AAEbzE,EAAAA,SAAS,EAAExB,SAAS,CAACgG,MAAV,CAAiBC,UAFf;AAGbxE,EAAAA,IAAI,EAAEzB,SAAS,CAACkG,MAAV,CAAiBD,UAHV;AAIbE,EAAAA,SAAS,EAAEnG,SAAS,CAACoG;AAJR,CAAjB;AAOA,eAAenG,eAAe,GAAGY,IAAH,CAA9B","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport FireworksComponent from './FireworksControl';\nimport PollOption from './PollOption';\nimport UserTile from '../../Tile/UserTile';\nimport { setPollAnswer } from '../../../Actions/Poll';\nimport MessageStore from './../../../Stores/MessageStore';\nimport TdLibController from './../../../Controllers/TdLibController';\nimport './Poll.css';\nimport PollResultsDialog from '../../Popup/PollResultsDialog';\n\nclass Poll extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.fireworksRef = React.createRef();\n        this.state = {};\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const { chatId, messageId, poll } = this.props;\n\n        if (poll && poll.type['@type'] === 'pollTypeQuiz') {\n            const { poll: prevPoll } = prevProps;\n            if (prevPoll.type.correct_option_id === -1 && poll.type.correct_option_id !== -1) {\n                const fireworks = this.fireworksRef.current;\n                if (!fireworks) return;\n\n                if (poll.options[poll.type.correct_option_id].is_chosen) {\n                    fireworks.start();\n                } else {\n                    TdLibController.clientUpdate({\n                        '@type': 'clientUpdateMessageShake',\n                        chatId,\n                        messageId\n                    });\n                }\n            }\n        }\n    }\n\n    getTotalVoterCountString = (count, t = key => key) => {\n        if (!count) return t('NoVotes');\n        if (count === 1) return '1 answer';\n\n        return count + ' answers';\n    };\n\n    handleSubmit = event => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const { chatId, messageId, poll } = this.props;\n        if (!poll) return;\n\n        const { type } = poll;\n        if (!type) return;\n\n        if (this.viewResults(poll)) {\n            return;\n        }\n\n        if (!type.allow_multiple_answers) {\n            return;\n        }\n\n        const optionIds = [];\n        poll.options.forEach((x, index) => {\n            if (x.isMultiChoosen) {\n                optionIds.push(index);\n            }\n        });\n\n        if (!optionIds.length) {\n            return;\n        }\n\n        setPollAnswer(chatId, messageId, optionIds);\n    };\n\n    handleVote = index => {\n        const { chatId, messageId, poll } = this.props;\n        if (!poll) return;\n\n        const { type } = poll;\n        if (!type) return;\n\n        if (type['@type'] === 'pollTypeRegular' && type.allow_multiple_answers) {\n            poll.options[index].isMultiChoosen = !poll.options[index].isMultiChoosen;\n            this.forceUpdate();\n        } else {\n            setPollAnswer(chatId, messageId, [index]);\n        }\n    };\n\n    viewResults(poll) {\n        if (!poll) return false;\n\n        const { options, is_closed, is_anonymous } = poll;\n        if (is_anonymous) {\n            return false;\n        }\n\n        return is_closed || options.some(x => x.is_chosen);\n    }\n\n    getOptionType(index, poll) {\n        const types = ['regular', 'correct', 'incorrect'];\n        const defaultTypeId = 0;\n        const correctTypeId = 1;\n        const incorrectTypeId = 2;\n        if (!poll) return types[defaultTypeId];\n\n        const option = poll.options[index];\n        if (!option) return types[defaultTypeId];\n        if (!option.is_chosen) return types[defaultTypeId];\n\n        const { type } = poll;\n        if (!type) return types[defaultTypeId];\n        if (type['@type'] !== 'pollTypeQuiz') return types[defaultTypeId];\n\n        const { correct_option_id } = type;\n        if (correct_option_id === -1) return types[defaultTypeId];\n\n        return correct_option_id === index ? types[correctTypeId] : types[incorrectTypeId];\n    }\n\n    getOptionIsCorrect(index, poll) {\n        if (!poll) return false;\n\n        const option = poll.options[index];\n        if (!option) return false;\n\n        const { type } = poll;\n        if (!type) return false;\n        if (type['@type'] !== 'pollTypeQuiz') return false;\n\n        const { correct_option_id } = type;\n        if (correct_option_id === -1) return false;\n\n        return correct_option_id === index;\n    }\n\n    handleOpenResults = event => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const { poll } = this.props;\n\n        this.setState({\n            viewResultsPoll: poll\n        });\n    };\n\n    handleCloseResults = () => {\n        this.setState({\n            viewResultsPoll: null\n        });\n    };\n\n    render() {\n        const { chatId, messageId, poll, t, meta } = this.props;\n        const { viewResultsPoll } = this.state;\n        const { question, options, total_voter_count, type, is_closed, is_anonymous, recent_voter_user_ids } = poll;\n\n        let subtitle = t('FinalResults');\n        if (!is_closed) {\n            switch (type['@type']) {\n                case 'pollTypeRegular': {\n                    subtitle = is_anonymous ? t('AnonymousPoll') : t('PublicPoll');\n                    break;\n                }\n                case 'pollTypeQuiz': {\n                    subtitle = is_anonymous ? t('AnonymousQuizPoll') : t('QuizPoll');\n                    break;\n                }\n            }\n        }\n\n        const message = MessageStore.get(chatId, messageId);\n        if (!message) return null;\n\n        const isQuiz = type && type['@type'] === 'pollTypeQuiz';\n        const canBeSelected = !is_closed && options.every(x => !x.is_chosen);\n        const isSelected = !is_closed && options.some(x => x.is_chosen);\n        const maxVoterCount = Math.max(...options.map(x => x.voter_count));\n        const showViewResults = this.viewResults(poll);\n        const showButton = (type.allow_multiple_answers && !isSelected) || showViewResults;\n        const buttonEnabled = showViewResults || options.some(x => x.isMultiChoosen);\n        let recentVoters = [];\n        if (recent_voter_user_ids) {\n            recentVoters = recent_voter_user_ids.map(id => <UserTile key={id} poll userId={id} />);\n        }\n\n        return (\n            <div className='poll'>\n                {isQuiz && <FireworksComponent ref={this.fireworksRef} />}\n                <div className='poll-question'>\n                    <div className='poll-question-title'>{question}</div>\n                    <div className='poll-question-subtitle'>\n                        <span style={{ marginRight: 6 }}>{subtitle}</span>\n                        {recentVoters}\n                    </div>\n                </div>\n                <div className='poll-options'>\n                    {options.map((x, index) => (\n                        <PollOption\n                            key={index}\n                            type={this.getOptionType(index, poll)}\n                            isCorrect={this.getOptionIsCorrect(index, poll)}\n                            option={x}\n                            canBeSelected={canBeSelected}\n                            closed={is_closed}\n                            maxVoterCount={maxVoterCount}\n                            onVote={() => this.handleVote(index)}\n                        />\n                    ))}\n                </div>\n                {showButton ? (\n                    <Button\n                        fullWidth\n                        color='primary'\n                        classes={{\n                            root: 'poll-button',\n                            textPrimary: 'message-control',\n                            disabled: 'message-control-disabled'\n                        }}\n                        TouchRippleProps={{ classes: { child: 'touch-ripple-current-color' } }}\n                        disabled={!buttonEnabled}\n                        onClick={showViewResults ? this.handleOpenResults : this.handleSubmit}>\n                        {showViewResults ? t('PollViewResults') : t('PollSubmitVotes')}\n                    </Button>\n                ) : (\n                    <div className='poll-total-count'>\n                        {this.getTotalVoterCountString(total_voter_count, t)}\n                        {meta}\n                    </div>\n                )}\n                {Boolean(viewResultsPoll) && (\n                    <PollResultsDialog\n                        chatId={chatId}\n                        messageId={messageId}\n                        poll={viewResultsPoll}\n                        onClose={this.handleCloseResults}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nPoll.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    messageId: PropTypes.number.isRequired,\n    poll: PropTypes.object.isRequired,\n    openMedia: PropTypes.func\n};\n\nexport default withTranslation()(Poll);\n"]},"metadata":{},"sourceType":"module"}