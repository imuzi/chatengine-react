{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Player/HeaderPlayer.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport PlayArrowIcon from '../../Assets/Icons/PlayArrow';\nimport PauseIcon from '../../Assets/Icons/Pause';\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\nimport CloseIcon from '../../Assets/Icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport VolumeButton from '../Player/VolumeButton';\nimport RepeatButton from '../Player/RepeatButton';\nimport ShuffleButton from '../Player/ShuffleButton';\nimport PlaybackRateButton from './PlaybackRateButton';\nimport Time from '../Player/Time';\nimport Playlist from '../Player/Playlist';\nimport { getSrc } from '../../Utils/File';\nimport { openChat } from '../../Actions/Client';\nimport { getDurationString } from '../../Utils/Common';\nimport { getDate, getDateHint, getMediaTitle, hasAudio } from '../../Utils/Message';\nimport { PLAYER_PLAYBACKRATE_FAST, PLAYER_PLAYBACKRATE_NORMAL, PLAYER_STARTTIME } from '../../Constants';\nimport PlayerStore from '../../Stores/PlayerStore';\nimport FileStore from '../../Stores/FileStore';\nimport AppStore from '../../Stores/ApplicationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './HeaderPlayer.css';\n\nvar HeaderPlayer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(HeaderPlayer, _React$Component);\n\n  function HeaderPlayer(props) {\n    var _this;\n\n    _classCallCheck(this, HeaderPlayer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HeaderPlayer).call(this, props));\n\n    _this.onClientUpdateMediaPlaybackRate = function (update) {\n      var playbackRate = update.playbackRate;\n      var player = _this.videoRef.current;\n      if (!player) return;\n      player.playbackRate = playbackRate;\n    };\n\n    _this.onClientUpdateMediaVolume = function (update) {\n      var volume = update.volume;\n      var player = _this.videoRef.current;\n      if (!player) return;\n      player.volume = volume;\n    };\n\n    _this.onClientUpdateMediaSeek = function (update) {\n      var chatId = update.chatId,\n          messageId = update.messageId,\n          value = update.value;\n      var message = _this.state.message;\n      if (!message) return;\n      var chat_id = message.chat_id,\n          id = message.id,\n          content = message.content;\n      if (!content) return;\n      if (chatId !== chat_id || messageId !== id) return;\n      var player = _this.videoRef.current;\n      if (!player) return;\n      if (!player.duration) return;\n      player.currentTime = value * player.duration;\n    };\n\n    _this.onClientUpdateMediaViewerContent = function (update) {\n      _this.playingMediaViewer = Boolean(AppStore.mediaViewerContent);\n    };\n\n    _this.onClientUpdateMediaViewerEnded = function (update) {\n      _this.playingMediaViewer = false;\n    };\n\n    _this.onClientUpdateMediaViewerPause = function (update) {\n      _this.playingMediaViewer = false;\n    };\n\n    _this.onClientUpdateMediaViewerPlay = function (update) {\n      _this.playingMediaViewer = true;\n      var player = _this.videoRef.current;\n      if (!player) return;\n      player.pause();\n    };\n\n    _this.startPlayingFile = function (message) {\n      var chat_id = message.chat_id,\n          id = message.id;\n      var prevSrc = _this.state.src;\n\n      var src = _this.getMediaSrc(message);\n\n      var mimeType = _this.getMediaMimeType(message);\n\n      var playing = Boolean(src);\n      var playlist = PlayerStore.playlist;\n\n      _this.setState({\n        message: message,\n        playlist: playlist,\n        playing: playing,\n        src: src,\n        mimeType: mimeType\n      }, function () {\n        var player = _this.videoRef.current;\n        if (!player) return;\n\n        if (prevSrc !== src) {\n          player.load();\n        }\n\n        player.currentTime = _this.startTime;\n\n        if (_this.playingMediaViewer) {\n          player.pause();\n          TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaPause',\n            chatId: chat_id,\n            messageId: id\n          });\n        } else if (player.paused) {\n          player.play();\n        }\n      });\n    };\n\n    _this.onClientUpdateMediaBlob = function (update) {\n      var chatId = update.chatId,\n          messageId = update.messageId;\n      var message = _this.state.message;\n      if (!message) return;\n      var chat_id = message.chat_id,\n          id = message.id,\n          content = message.content;\n      if (!content) return;\n      if (chatId !== chat_id || messageId !== id) return;\n\n      switch (content['@type']) {\n        case 'messageText':\n          {\n            var web_page = content.web_page;\n\n            if (web_page) {\n              var audio = web_page.audio,\n                  voice_note = web_page.voice_note,\n                  video_note = web_page.video_note;\n\n              if (audio) {\n                var file = audio.audio;\n\n                if (file) {\n                  _this.startPlayingFile(message);\n                }\n              }\n\n              if (voice_note) {\n                var voice = voice_note.voice;\n\n                if (voice) {\n                  _this.startPlayingFile(message);\n                }\n              }\n\n              if (video_note) {\n                var video = video_note.video;\n\n                if (video) {\n                  _this.startPlayingFile(message);\n                }\n              }\n            }\n\n            break;\n          }\n\n        case 'messageAudio':\n          {\n            var _audio = content.audio;\n\n            if (_audio) {\n              var _file = _audio.audio;\n\n              if (_file) {\n                _this.startPlayingFile(message);\n              }\n            }\n\n            break;\n          }\n\n        case 'messageVoiceNote':\n          {\n            var _voice_note = content.voice_note;\n\n            if (_voice_note) {\n              var _voice = _voice_note.voice;\n\n              if (_voice) {\n                _this.startPlayingFile(message);\n              }\n            }\n\n            break;\n          }\n\n        case 'messageVideoNote':\n          {\n            var _video_note = content.video_note;\n\n            if (_video_note) {\n              var _video = _video_note.video;\n\n              if (_video) {\n                _this.startPlayingFile(message);\n              }\n            }\n\n            break;\n          }\n      }\n    };\n\n    _this.onClientUpdateMediaPlaylist = function (update) {\n      var playlist = update.playlist;\n      var chatId = playlist.chatId,\n          messageId = playlist.messageId;\n      var message = _this.state.message;\n\n      if (message && message.chat_id === chatId && message.id === messageId) {\n        _this.setState({\n          playlist: playlist\n        });\n      }\n    };\n\n    _this.onClientUpdateMediaClose = function (update) {\n      _this.setState({\n        message: null,\n        playlist: null,\n        playing: false,\n        src: null,\n        mimeType: null\n      });\n    };\n\n    _this.onClientUpdateMediaActive = function (update) {\n      var chatId = update.chatId,\n          messageId = update.messageId;\n      var _this$state = _this.state,\n          message = _this$state.message,\n          src = _this$state.src;\n\n      if (message && message.chat_id === chatId && message.id === messageId) {\n        if (!src) return;\n        var player = _this.videoRef.current;\n        if (!player) return;\n\n        if (player.paused) {\n          player.play();\n        } else {\n          player.pause();\n        }\n      } else {\n        _this.startPlayingFile(PlayerStore.message);\n      }\n    };\n\n    _this.handlePrev = function () {\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMediaPrev'\n      });\n    };\n\n    _this.handlePlay = function () {\n      var message = _this.state.message;\n      if (!message) return;\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMediaActive',\n        chatId: message.chat_id,\n        messageId: message.id\n      });\n    };\n\n    _this.handleNext = function () {\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMediaNext'\n      });\n    };\n\n    _this.getMediaMimeType = function (message) {\n      if (message) {\n        var content = message.content;\n\n        if (content) {\n          var audio = content.audio,\n              voice_note = content.voice_note,\n              video_note = content.video_note,\n              web_page = content.web_page;\n\n          if (audio) {\n            return audio.mime_type;\n          }\n\n          if (voice_note) {\n            return voice_note.mime_type;\n          }\n\n          if (video_note) {\n            return 'video/mp4';\n          }\n\n          if (web_page) {\n            if (web_page.audio) {\n              return web_page.audio.mime_type;\n            }\n\n            if (web_page.voice_note) {\n              return web_page.voice_note.mime_type;\n            }\n\n            if (web_page.video_note) {\n              return 'video/mp4';\n            }\n          }\n        }\n      }\n\n      return '';\n    };\n\n    _this.getMediaSrc = function (message) {\n      if (message) {\n        var content = message.content;\n\n        if (content) {\n          var audio = content.audio,\n              voice_note = content.voice_note,\n              video_note = content.video_note,\n              web_page = content.web_page;\n\n          if (audio) {\n            var file = audio.audio;\n\n            if (file) {\n              return getSrc(file);\n            }\n          }\n\n          if (voice_note) {\n            var voice = voice_note.voice;\n\n            if (voice) {\n              return getSrc(voice);\n            }\n          }\n\n          if (video_note) {\n            var video = video_note.video;\n\n            if (video) {\n              return getSrc(video);\n            }\n          }\n\n          if (web_page) {\n            if (web_page.audio) {\n              var _file2 = web_page.audio.audio;\n\n              if (_file2) {\n                return getSrc(_file2);\n              }\n            }\n\n            if (web_page.voice_note) {\n              var _voice2 = web_page.voice_note.voice;\n\n              if (_voice2) {\n                return getSrc(_voice2);\n              }\n            }\n\n            if (web_page.video_note) {\n              var _video2 = web_page.video_note.video;\n\n              if (_video2) {\n                return getSrc(_video2);\n              }\n            }\n          }\n        }\n      }\n\n      return '';\n    };\n\n    _this.handleEnded = function () {\n      var moveNext = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var message = _this.state.message;\n      if (!message) return;\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMediaEnding',\n        chatId: message.chat_id,\n        messageId: message.id,\n        moveNext: moveNext\n      });\n\n      _this.setState({//playing: false,\n        //message: null,\n        //src: null\n      }, function () {\n        TdLibController.clientUpdate({\n          '@type': 'clientUpdateMediaEnd',\n          chatId: message.chat_id,\n          messageId: message.id,\n          moveNext: moveNext\n        });\n      });\n    };\n\n    _this.handleVideoEnded = function () {\n      _this.handleEnded(true);\n    };\n\n    _this.handleClose = function () {\n      var player = _this.videoRef.current;\n\n      if (player) {\n        player.pause();\n      }\n\n      _this.handleEnded(false);\n    };\n\n    _this.handleTimeUpdate = function () {\n      var message = _this.state.message;\n      if (!message) return;\n      var player = _this.videoRef.current;\n      if (!player) return;\n\n      _this.setState({\n        currentTime: player.currentTime,\n        currentTimeString: getDurationString(Math.floor(player.currentTime || 0))\n      });\n\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMediaTime',\n        chatId: message.chat_id,\n        messageId: message.id,\n        duration: player.duration,\n        currentTime: player.currentTime,\n        timestamp: Date.now()\n      });\n    };\n\n    _this.handleCanPlay = function () {\n      var message = _this.state.message;\n      if (!message) return;\n      var player = _this.videoRef.current;\n      if (!player) return;\n      var playbackRate = PlayerStore.playbackRate,\n          volume = PlayerStore.volume;\n      var chat_id = message.chat_id,\n          id = message.id;\n      var audio = hasAudio(chat_id, id);\n      player.playbackRate = audio ? PLAYER_PLAYBACKRATE_NORMAL : playbackRate;\n      player.volume = volume;\n      player.muted = false;\n\n      if (audio) {\n        return;\n      }\n\n      var stream = null;\n\n      if ('captureStream' in player) {\n        stream = player.captureStream();\n      } else if ('mozCaptureStream' in player) {\n        stream = player.mozCaptureStream();\n      }\n\n      if (!stream) {\n        return;\n      }\n\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMediaCaptureStream',\n        chatId: message.chat_id,\n        messageId: message.id,\n        stream: stream\n      });\n    };\n\n    _this.handleVideoPlay = function () {\n      var message = _this.state.message;\n      if (!message) return;\n\n      _this.setState({\n        playing: true\n      });\n\n      var player = _this.videoRef.current;\n      if (!player) return;\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMediaPlay',\n        chatId: message.chat_id,\n        messageId: message.id,\n        currentTime: player.currentTime,\n        duration: player.duration,\n        timestamp: Date.now()\n      });\n    };\n\n    _this.handleVideoPause = function () {\n      var message = _this.state.message;\n      if (!message) return;\n\n      _this.setState({\n        playing: false\n      });\n\n      var player = _this.videoRef.current;\n      if (!player) return;\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMediaPause',\n        chatId: message.chat_id,\n        messageId: message.id\n      });\n    };\n\n    _this.handlePlaybackRate = function () {\n      var playbackRate = _this.state.playbackRate;\n      var nextPlaybackRate = playbackRate === PLAYER_PLAYBACKRATE_NORMAL ? PLAYER_PLAYBACKRATE_FAST : PLAYER_PLAYBACKRATE_NORMAL;\n\n      _this.setState({\n        playbackRate: nextPlaybackRate\n      }, function () {\n        var player = _this.videoRef.current;\n        if (!player) return;\n        player.playbackRate = nextPlaybackRate;\n      });\n\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMediaPlaybackRate',\n        playbackRate: nextPlaybackRate\n      });\n    };\n\n    _this.hasPrev = function (message, playlist) {\n      if (!message) return false;\n      if (!playlist || !playlist.messages.length) return false;\n      var chat_id = message.chat_id,\n          id = message.id;\n      var index = playlist.messages.findIndex(function (x) {\n        return x.chat_id === chat_id && x.id === id;\n      });\n      if (index === -1) return false;\n      return index + 1 < playlist.messages.length;\n    };\n\n    _this.hasNext = function (message, playlist) {\n      if (!message) return false;\n      if (!playlist || !playlist.messages.length) return false;\n      var chat_id = message.chat_id,\n          id = message.id;\n      var index = playlist.messages.findIndex(function (x) {\n        return x.chat_id === chat_id && x.id === id;\n      });\n      if (index === -1) return false;\n      return index - 1 >= 0;\n    };\n\n    _this.handleTitleMouseEnter = function () {\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMediaTitleMouseOver',\n        over: true\n      });\n    };\n\n    _this.handleTitleMouseLeave = function () {\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMediaTitleMouseOver',\n        over: false\n      });\n    };\n\n    _this.handleTitleClick = function () {\n      var message = _this.state.message;\n      if (!message) return;\n      openChat(message.chat_id, message.id);\n    };\n\n    _this.videoRef = React.createRef();\n    var _message = PlayerStore.message,\n        _playlist = PlayerStore.playlist;\n    _this.startTime = PLAYER_STARTTIME;\n    _this.state = {\n      currentTime: 0,\n      currentTimeString: getDurationString(0),\n      message: _message,\n      playlist: _playlist,\n      playing: false,\n      src: _this.getMediaSrc(_message),\n      mimeType: _this.getMediaMimeType(_message)\n    };\n    return _this;\n  }\n\n  _createClass(HeaderPlayer, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState, nextContext) {\n      var theme = this.props.theme;\n      var _this$state2 = this.state,\n          message = _this$state2.message,\n          playlist = _this$state2.playlist,\n          src = _this$state2.src,\n          playing = _this$state2.playing;\n\n      if (nextProps.theme !== theme) {\n        return true;\n      }\n\n      if (nextState.message !== message) {\n        return true;\n      }\n\n      if (nextState.playlist !== playlist) {\n        return true;\n      }\n\n      if (nextState.src !== src) {\n        return true;\n      }\n\n      if (nextState.playing !== playing) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      FileStore.on('clientUpdateVoiceNoteBlob', this.onClientUpdateMediaBlob);\n      FileStore.on('clientUpdateVideoNoteBlob', this.onClientUpdateMediaBlob);\n      FileStore.on('clientUpdateAudioBlob', this.onClientUpdateMediaBlob);\n      PlayerStore.on('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n      PlayerStore.on('clientUpdateMediaClose', this.onClientUpdateMediaClose);\n      PlayerStore.on('clientUpdateMediaPlaylist', this.onClientUpdateMediaPlaylist);\n      PlayerStore.on('clientUpdateMediaViewerPlay', this.onClientUpdateMediaViewerPlay);\n      PlayerStore.on('clientUpdateMediaViewerPause', this.onClientUpdateMediaViewerPause);\n      PlayerStore.on('clientUpdateMediaViewerEnded', this.onClientUpdateMediaViewerEnded);\n      PlayerStore.on('clientUpdateMediaVolume', this.onClientUpdateMediaVolume);\n      PlayerStore.on('clientUpdateMediaPlaybackRate', this.onClientUpdateMediaPlaybackRate);\n      PlayerStore.on('clientUpdateMediaSeek', this.onClientUpdateMediaSeek);\n      AppStore.on('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      FileStore.off('clientUpdateVoiceNoteBlob', this.onClientUpdateMediaBlob);\n      FileStore.off('clientUpdateVideoNoteBlob', this.onClientUpdateMediaBlob);\n      FileStore.off('clientUpdateAudioBlob', this.onClientUpdateMediaBlob);\n      PlayerStore.off('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n      PlayerStore.off('clientUpdateMediaClose', this.onClientUpdateMediaClose);\n      PlayerStore.off('clientUpdateMediaPlaylist', this.onClientUpdateMediaPlaylist);\n      PlayerStore.off('clientUpdateMediaViewerPlay', this.onClientUpdateMediaViewerPlay);\n      PlayerStore.off('clientUpdateMediaViewerPause', this.onClientUpdateMediaViewerPause);\n      PlayerStore.off('clientUpdateMediaViewerEnded', this.onClientUpdateMediaViewerEnded);\n      PlayerStore.off('clientUpdateMediaVolume', this.onClientUpdateMediaVolume);\n      PlayerStore.off('clientUpdateMediaPlaybackRate', this.onClientUpdateMediaPlaybackRate);\n      PlayerStore.off('clientUpdateMediaSeek', this.onClientUpdateMediaSeek);\n      AppStore.off('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var t = this.props.t;\n      var _this$state3 = this.state,\n          playing = _this$state3.playing,\n          message = _this$state3.message,\n          playlist = _this$state3.playlist,\n          src = _this$state3.src,\n          mimeType = _this$state3.mimeType;\n      var audio = false;\n\n      if (message) {\n        var chat_id = message.chat_id,\n            id = message.id;\n        audio = hasAudio(chat_id, id);\n      }\n\n      var date = message ? message.date : null;\n      var title = getMediaTitle(message, t);\n      var dateHintStr = getDateHint(date);\n      var dateStr = getDate(date);\n      var showDate = !audio;\n      var showPlaybackRate = !audio;\n      var showRepeat = audio;\n      var showShuffle = audio;\n      var hasPrev = this.hasPrev(message, playlist);\n      var hasNext = this.hasNext(message, playlist);\n      var source = src ? React.createElement(\"source\", {\n        src: src,\n        type: mimeType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 675\n        },\n        __self: this\n      }) : null;\n      return React.createElement(React.Fragment, null, React.createElement(\"video\", {\n        className: \"header-player-video\",\n        ref: this.videoRef,\n        autoPlay: true,\n        controls: false,\n        width: 44,\n        height: 44,\n        onCanPlay: this.handleCanPlay,\n        onPlay: this.handleVideoPlay,\n        onPause: this.handleVideoPause,\n        onTimeUpdate: this.handleTimeUpdate,\n        onEnded: this.handleVideoEnded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 679\n        },\n        __self: this\n      }, source), message && React.createElement(\"div\", {\n        className: \"header-player\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 695\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        disabled: !hasPrev,\n        className: \"header-player-button\",\n        color: \"primary\",\n        onClick: this.handlePrev,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 696\n        },\n        __self: this\n      }, React.createElement(SkipPreviousIcon, {\n        fontSize: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 701\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        className: \"header-player-button\",\n        color: \"primary\",\n        disabled: !src,\n        onClick: this.handlePlay,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 703\n        },\n        __self: this\n      }, playing ? React.createElement(PauseIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 708\n        },\n        __self: this\n      }) : React.createElement(PlayArrowIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 708\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        disabled: !hasNext,\n        className: \"header-player-button\",\n        color: \"primary\",\n        onClick: this.handleNext,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 710\n        },\n        __self: this\n      }, React.createElement(SkipNextIcon, {\n        fontSize: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 715\n        },\n        __self: this\n      })), React.createElement(Playlist, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 717\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"header-player-content\",\n        onMouseEnter: this.handleTitleMouseEnter,\n        onMouseLeave: this.handleTitleMouseLeave,\n        onClick: this.handleTitleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 718\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header-player-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 723\n        },\n        __self: this\n      }, title, showDate && React.createElement(\"span\", {\n        title: dateHintStr,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 726\n        },\n        __self: this\n      }, \"\\xA0\", dateStr)), \"\\xA0\", React.createElement(Time, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 733\n        },\n        __self: this\n      })), React.createElement(VolumeButton, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 735\n        },\n        __self: this\n      }), showPlaybackRate && React.createElement(PlaybackRateButton, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 736\n        },\n        __self: this\n      }), showRepeat && React.createElement(RepeatButton, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 737\n        },\n        __self: this\n      }), showShuffle && React.createElement(ShuffleButton, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 738\n        },\n        __self: this\n      }), React.createElement(IconButton, {\n        className: \"header-player-button\",\n        onClick: this.handleClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 739\n        },\n        __self: this\n      }, React.createElement(CloseIcon, {\n        fontSize: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 740\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return HeaderPlayer;\n}(React.Component);\n\nexport default withTranslation()(HeaderPlayer);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Player/HeaderPlayer.js"],"names":["React","withTranslation","PlayArrowIcon","PauseIcon","SkipNextIcon","SkipPreviousIcon","CloseIcon","IconButton","VolumeButton","RepeatButton","ShuffleButton","PlaybackRateButton","Time","Playlist","getSrc","openChat","getDurationString","getDate","getDateHint","getMediaTitle","hasAudio","PLAYER_PLAYBACKRATE_FAST","PLAYER_PLAYBACKRATE_NORMAL","PLAYER_STARTTIME","PlayerStore","FileStore","AppStore","TdLibController","HeaderPlayer","props","onClientUpdateMediaPlaybackRate","update","playbackRate","player","videoRef","current","onClientUpdateMediaVolume","volume","onClientUpdateMediaSeek","chatId","messageId","value","message","state","chat_id","id","content","duration","currentTime","onClientUpdateMediaViewerContent","playingMediaViewer","Boolean","mediaViewerContent","onClientUpdateMediaViewerEnded","onClientUpdateMediaViewerPause","onClientUpdateMediaViewerPlay","pause","startPlayingFile","prevSrc","src","getMediaSrc","mimeType","getMediaMimeType","playing","playlist","setState","load","startTime","clientUpdate","paused","play","onClientUpdateMediaBlob","web_page","audio","voice_note","video_note","file","voice","video","onClientUpdateMediaPlaylist","onClientUpdateMediaClose","onClientUpdateMediaActive","handlePrev","handlePlay","handleNext","mime_type","handleEnded","moveNext","handleVideoEnded","handleClose","handleTimeUpdate","currentTimeString","Math","floor","timestamp","Date","now","handleCanPlay","muted","stream","captureStream","mozCaptureStream","handleVideoPlay","handleVideoPause","handlePlaybackRate","nextPlaybackRate","hasPrev","messages","length","index","findIndex","x","hasNext","handleTitleMouseEnter","over","handleTitleMouseLeave","handleTitleClick","createRef","nextProps","nextState","nextContext","theme","on","off","t","date","title","dateHintStr","dateStr","showDate","showPlaybackRate","showRepeat","showShuffle","source","Component"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport PlayArrowIcon from '../../Assets/Icons/PlayArrow';\nimport PauseIcon from '../../Assets/Icons/Pause';\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\nimport CloseIcon from '../../Assets/Icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport VolumeButton from '../Player/VolumeButton';\nimport RepeatButton from '../Player/RepeatButton';\nimport ShuffleButton from '../Player/ShuffleButton';\nimport PlaybackRateButton from './PlaybackRateButton';\nimport Time from '../Player/Time';\nimport Playlist from '../Player/Playlist';\nimport { getSrc } from '../../Utils/File';\nimport { openChat } from '../../Actions/Client';\nimport { getDurationString } from '../../Utils/Common';\nimport { getDate, getDateHint, getMediaTitle, hasAudio } from '../../Utils/Message';\nimport { PLAYER_PLAYBACKRATE_FAST, PLAYER_PLAYBACKRATE_NORMAL, PLAYER_STARTTIME } from '../../Constants';\nimport PlayerStore from '../../Stores/PlayerStore';\nimport FileStore from '../../Stores/FileStore';\nimport AppStore from '../../Stores/ApplicationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './HeaderPlayer.css';\n\nclass HeaderPlayer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.videoRef = React.createRef();\n\n        const { message, playlist } = PlayerStore;\n\n        this.startTime = PLAYER_STARTTIME;\n\n        this.state = {\n            currentTime: 0,\n            currentTimeString: getDurationString(0),\n            message: message,\n            playlist: playlist,\n            playing: false,\n            src: this.getMediaSrc(message),\n            mimeType: this.getMediaMimeType(message)\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { theme } = this.props;\n        const { message, playlist, src, playing } = this.state;\n\n        if (nextProps.theme !== theme) {\n            return true;\n        }\n\n        if (nextState.message !== message) {\n            return true;\n        }\n\n        if (nextState.playlist !== playlist) {\n            return true;\n        }\n\n        if (nextState.src !== src) {\n            return true;\n        }\n\n        if (nextState.playing !== playing) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        FileStore.on('clientUpdateVoiceNoteBlob', this.onClientUpdateMediaBlob);\n        FileStore.on('clientUpdateVideoNoteBlob', this.onClientUpdateMediaBlob);\n        FileStore.on('clientUpdateAudioBlob', this.onClientUpdateMediaBlob);\n        PlayerStore.on('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.on('clientUpdateMediaClose', this.onClientUpdateMediaClose);\n        PlayerStore.on('clientUpdateMediaPlaylist', this.onClientUpdateMediaPlaylist);\n        PlayerStore.on('clientUpdateMediaViewerPlay', this.onClientUpdateMediaViewerPlay);\n        PlayerStore.on('clientUpdateMediaViewerPause', this.onClientUpdateMediaViewerPause);\n        PlayerStore.on('clientUpdateMediaViewerEnded', this.onClientUpdateMediaViewerEnded);\n        PlayerStore.on('clientUpdateMediaVolume', this.onClientUpdateMediaVolume);\n        PlayerStore.on('clientUpdateMediaPlaybackRate', this.onClientUpdateMediaPlaybackRate);\n        PlayerStore.on('clientUpdateMediaSeek', this.onClientUpdateMediaSeek);\n\n        AppStore.on('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n    }\n\n    componentWillUnmount() {\n        FileStore.off('clientUpdateVoiceNoteBlob', this.onClientUpdateMediaBlob);\n        FileStore.off('clientUpdateVideoNoteBlob', this.onClientUpdateMediaBlob);\n        FileStore.off('clientUpdateAudioBlob', this.onClientUpdateMediaBlob);\n        PlayerStore.off('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.off('clientUpdateMediaClose', this.onClientUpdateMediaClose);\n        PlayerStore.off('clientUpdateMediaPlaylist', this.onClientUpdateMediaPlaylist);\n        PlayerStore.off('clientUpdateMediaViewerPlay', this.onClientUpdateMediaViewerPlay);\n        PlayerStore.off('clientUpdateMediaViewerPause', this.onClientUpdateMediaViewerPause);\n        PlayerStore.off('clientUpdateMediaViewerEnded', this.onClientUpdateMediaViewerEnded);\n        PlayerStore.off('clientUpdateMediaVolume', this.onClientUpdateMediaVolume);\n        PlayerStore.off('clientUpdateMediaPlaybackRate', this.onClientUpdateMediaPlaybackRate);\n        PlayerStore.off('clientUpdateMediaSeek', this.onClientUpdateMediaSeek);\n\n        AppStore.off('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n    }\n\n    onClientUpdateMediaPlaybackRate = update => {\n        const { playbackRate } = update;\n\n        const player = this.videoRef.current;\n        if (!player) return;\n\n        player.playbackRate = playbackRate;\n    };\n\n    onClientUpdateMediaVolume = update => {\n        const { volume } = update;\n\n        const player = this.videoRef.current;\n        if (!player) return;\n\n        player.volume = volume;\n    };\n\n    onClientUpdateMediaSeek = update => {\n        const { chatId, messageId, value } = update;\n        const { message } = this.state;\n\n        if (!message) return;\n\n        const { chat_id, id, content } = message;\n        if (!content) return;\n        if (chatId !== chat_id || messageId !== id) return;\n\n        const player = this.videoRef.current;\n        if (!player) return;\n        if (!player.duration) return;\n\n        player.currentTime = value * player.duration;\n    };\n\n    onClientUpdateMediaViewerContent = update => {\n        this.playingMediaViewer = Boolean(AppStore.mediaViewerContent);\n    };\n\n    onClientUpdateMediaViewerEnded = update => {\n        this.playingMediaViewer = false;\n    };\n\n    onClientUpdateMediaViewerPause = update => {\n        this.playingMediaViewer = false;\n    };\n\n    onClientUpdateMediaViewerPlay = update => {\n        this.playingMediaViewer = true;\n\n        const player = this.videoRef.current;\n        if (!player) return;\n\n        player.pause();\n    };\n\n    startPlayingFile = message => {\n        const { chat_id, id } = message;\n\n        const { src: prevSrc } = this.state;\n\n        const src = this.getMediaSrc(message);\n        const mimeType = this.getMediaMimeType(message);\n        const playing = Boolean(src);\n        const { playlist } = PlayerStore;\n\n        this.setState(\n            {\n                message,\n                playlist,\n                playing,\n                src,\n                mimeType\n            },\n            () => {\n                const player = this.videoRef.current;\n                if (!player) return;\n\n                if (prevSrc !== src) {\n                    player.load();\n                }\n                player.currentTime = this.startTime;\n                if (this.playingMediaViewer) {\n                    player.pause();\n\n                    TdLibController.clientUpdate({\n                        '@type': 'clientUpdateMediaPause',\n                        chatId: chat_id,\n                        messageId: id\n                    });\n                } else if (player.paused) {\n                    player.play();\n                }\n            }\n        );\n    };\n\n    onClientUpdateMediaBlob = update => {\n        const { chatId, messageId } = update;\n        const { message } = this.state;\n\n        if (!message) return;\n\n        const { chat_id, id, content } = message;\n        if (!content) return;\n        if (chatId !== chat_id || messageId !== id) return;\n\n        switch (content['@type']) {\n            case 'messageText': {\n                const { web_page } = content;\n                if (web_page) {\n                    const { audio, voice_note, video_note } = web_page;\n\n                    if (audio) {\n                        const file = audio.audio;\n                        if (file) {\n                            this.startPlayingFile(message);\n                        }\n                    }\n\n                    if (voice_note) {\n                        const { voice } = voice_note;\n                        if (voice) {\n                            this.startPlayingFile(message);\n                        }\n                    }\n\n                    if (video_note) {\n                        const { video } = video_note;\n                        if (video) {\n                            this.startPlayingFile(message);\n                        }\n                    }\n                }\n\n                break;\n            }\n            case 'messageAudio': {\n                const { audio } = content;\n                if (audio) {\n                    const file = audio.audio;\n                    if (file) {\n                        this.startPlayingFile(message);\n                    }\n                }\n\n                break;\n            }\n            case 'messageVoiceNote': {\n                const { voice_note } = content;\n                if (voice_note) {\n                    const { voice } = voice_note;\n                    if (voice) {\n                        this.startPlayingFile(message);\n                    }\n                }\n\n                break;\n            }\n            case 'messageVideoNote': {\n                const { video_note } = content;\n                if (video_note) {\n                    const { video } = video_note;\n                    if (video) {\n                        this.startPlayingFile(message);\n                    }\n                }\n\n                break;\n            }\n        }\n    };\n\n    onClientUpdateMediaPlaylist = update => {\n        const { playlist } = update;\n        const { chatId, messageId } = playlist;\n        const { message } = this.state;\n\n        if (message && message.chat_id === chatId && message.id === messageId) {\n            this.setState({ playlist: playlist });\n        }\n    };\n\n    onClientUpdateMediaClose = update => {\n        this.setState({\n            message: null,\n            playlist: null,\n            playing: false,\n            src: null,\n            mimeType: null\n        });\n    };\n\n    onClientUpdateMediaActive = update => {\n        const { chatId, messageId } = update;\n        const { message, src } = this.state;\n\n        if (message && message.chat_id === chatId && message.id === messageId) {\n            if (!src) return;\n\n            const player = this.videoRef.current;\n            if (!player) return;\n\n            if (player.paused) {\n                player.play();\n            } else {\n                player.pause();\n            }\n        } else {\n            this.startPlayingFile(PlayerStore.message);\n        }\n    };\n\n    handlePrev = () => {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaPrev'\n        });\n    };\n\n    handlePlay = () => {\n        const { message } = this.state;\n        if (!message) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaActive',\n            chatId: message.chat_id,\n            messageId: message.id\n        });\n    };\n\n    handleNext = () => {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaNext'\n        });\n    };\n\n    getMediaMimeType = message => {\n        if (message) {\n            const { content } = message;\n            if (content) {\n                const { audio, voice_note, video_note, web_page } = content;\n\n                if (audio) {\n                    return audio.mime_type;\n                }\n\n                if (voice_note) {\n                    return voice_note.mime_type;\n                }\n\n                if (video_note) {\n                    return 'video/mp4';\n                }\n\n                if (web_page) {\n                    if (web_page.audio) {\n                        return web_page.audio.mime_type;\n                    }\n\n                    if (web_page.voice_note) {\n                        return web_page.voice_note.mime_type;\n                    }\n\n                    if (web_page.video_note) {\n                        return 'video/mp4';\n                    }\n                }\n            }\n        }\n\n        return '';\n    };\n\n    getMediaSrc = message => {\n        if (message) {\n            const { content } = message;\n            if (content) {\n                const { audio, voice_note, video_note, web_page } = content;\n\n                if (audio) {\n                    const file = audio.audio;\n                    if (file) {\n                        return getSrc(file);\n                    }\n                }\n\n                if (voice_note) {\n                    const { voice } = voice_note;\n                    if (voice) {\n                        return getSrc(voice);\n                    }\n                }\n\n                if (video_note) {\n                    const { video } = video_note;\n                    if (video) {\n                        return getSrc(video);\n                    }\n                }\n\n                if (web_page) {\n                    if (web_page.audio) {\n                        const file = web_page.audio.audio;\n                        if (file) {\n                            return getSrc(file);\n                        }\n                    }\n\n                    if (web_page.voice_note) {\n                        const { voice } = web_page.voice_note;\n                        if (voice) {\n                            return getSrc(voice);\n                        }\n                    }\n\n                    if (web_page.video_note) {\n                        const { video } = web_page.video_note;\n                        if (video) {\n                            return getSrc(video);\n                        }\n                    }\n                }\n            }\n        }\n\n        return '';\n    };\n\n    handleEnded = (moveNext = true) => {\n        const { message } = this.state;\n        if (!message) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaEnding',\n            chatId: message.chat_id,\n            messageId: message.id,\n            moveNext: moveNext\n        });\n\n        this.setState(\n            {\n                //playing: false,\n                //message: null,\n                //src: null\n            },\n            () => {\n                TdLibController.clientUpdate({\n                    '@type': 'clientUpdateMediaEnd',\n                    chatId: message.chat_id,\n                    messageId: message.id,\n                    moveNext: moveNext\n                });\n            }\n        );\n    };\n\n    handleVideoEnded = () => {\n        this.handleEnded(true);\n    };\n\n    handleClose = () => {\n        const player = this.videoRef.current;\n        if (player) {\n            player.pause();\n        }\n\n        this.handleEnded(false);\n    };\n\n    handleTimeUpdate = () => {\n        const { message } = this.state;\n        if (!message) return;\n\n        const player = this.videoRef.current;\n        if (!player) return;\n\n        this.setState({\n            currentTime: player.currentTime,\n            currentTimeString: getDurationString(Math.floor(player.currentTime || 0))\n        });\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaTime',\n            chatId: message.chat_id,\n            messageId: message.id,\n            duration: player.duration,\n            currentTime: player.currentTime,\n            timestamp: Date.now()\n        });\n    };\n\n    handleCanPlay = () => {\n        const { message } = this.state;\n        if (!message) return;\n\n        const player = this.videoRef.current;\n        if (!player) return;\n\n        const { playbackRate, volume } = PlayerStore;\n\n        const { chat_id, id } = message;\n        const audio = hasAudio(chat_id, id);\n\n        player.playbackRate = audio ? PLAYER_PLAYBACKRATE_NORMAL : playbackRate;\n        player.volume = volume;\n        player.muted = false;\n\n        if (audio) {\n            return;\n        }\n\n        let stream = null;\n        if ('captureStream' in player) {\n            stream = player.captureStream();\n        } else if ('mozCaptureStream' in player) {\n            stream = player.mozCaptureStream();\n        }\n\n        if (!stream) {\n            return;\n        }\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaCaptureStream',\n            chatId: message.chat_id,\n            messageId: message.id,\n            stream: stream\n        });\n    };\n\n    handleVideoPlay = () => {\n        const { message } = this.state;\n        if (!message) return;\n\n        this.setState({\n            playing: true\n        });\n\n        const player = this.videoRef.current;\n        if (!player) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaPlay',\n            chatId: message.chat_id,\n            messageId: message.id,\n            currentTime: player.currentTime,\n            duration: player.duration,\n            timestamp: Date.now()\n        });\n    };\n\n    handleVideoPause = () => {\n        const { message } = this.state;\n        if (!message) return;\n\n        this.setState({\n            playing: false\n        });\n\n        const player = this.videoRef.current;\n        if (!player) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaPause',\n            chatId: message.chat_id,\n            messageId: message.id\n        });\n    };\n\n    handlePlaybackRate = () => {\n        const { playbackRate } = this.state;\n\n        const nextPlaybackRate =\n            playbackRate === PLAYER_PLAYBACKRATE_NORMAL ? PLAYER_PLAYBACKRATE_FAST : PLAYER_PLAYBACKRATE_NORMAL;\n\n        this.setState(\n            {\n                playbackRate: nextPlaybackRate\n            },\n            () => {\n                const player = this.videoRef.current;\n                if (!player) return;\n\n                player.playbackRate = nextPlaybackRate;\n            }\n        );\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaPlaybackRate',\n            playbackRate: nextPlaybackRate\n        });\n    };\n\n    hasPrev = (message, playlist) => {\n        if (!message) return false;\n        if (!playlist || !playlist.messages.length) return false;\n\n        const { chat_id, id } = message;\n\n        const index = playlist.messages.findIndex(x => x.chat_id === chat_id && x.id === id);\n        if (index === -1) return false;\n\n        return index + 1 < playlist.messages.length;\n    };\n\n    hasNext = (message, playlist) => {\n        if (!message) return false;\n        if (!playlist || !playlist.messages.length) return false;\n\n        const { chat_id, id } = message;\n\n        const index = playlist.messages.findIndex(x => x.chat_id === chat_id && x.id === id);\n        if (index === -1) return false;\n\n        return index - 1 >= 0;\n    };\n\n    handleTitleMouseEnter = () => {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaTitleMouseOver',\n            over: true\n        });\n    };\n\n    handleTitleMouseLeave = () => {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaTitleMouseOver',\n            over: false\n        });\n    };\n\n    handleTitleClick = () => {\n        const { message } = this.state;\n        if (!message) return;\n\n        openChat(message.chat_id, message.id);\n    };\n\n    render() {\n        const { t } = this.props;\n        const { playing, message, playlist, src, mimeType } = this.state;\n\n        let audio = false;\n        if (message) {\n            const { chat_id, id } = message;\n            audio = hasAudio(chat_id, id);\n        }\n\n        const date = message ? message.date : null;\n\n        const title = getMediaTitle(message, t);\n        const dateHintStr = getDateHint(date);\n        const dateStr = getDate(date);\n        const showDate = !audio;\n        const showPlaybackRate = !audio;\n        const showRepeat = audio;\n        const showShuffle = audio;\n        const hasPrev = this.hasPrev(message, playlist);\n        const hasNext = this.hasNext(message, playlist);\n\n        const source = src ? <source src={src} type={mimeType}/> : null;\n\n        return (\n            <>\n                <video\n                    className='header-player-video'\n                    ref={this.videoRef}\n                    autoPlay={true}\n                    controls={false}\n                    width={44}\n                    height={44}\n                    onCanPlay={this.handleCanPlay}\n                    onPlay={this.handleVideoPlay}\n                    onPause={this.handleVideoPause}\n                    onTimeUpdate={this.handleTimeUpdate}\n                    onEnded={this.handleVideoEnded}\n                >\n                    {source}\n                </video>\n                {message && (\n                    <div className='header-player'>\n                        <IconButton\n                            disabled={!hasPrev}\n                            className='header-player-button'\n                            color='primary'\n                            onClick={this.handlePrev}>\n                            <SkipPreviousIcon fontSize='small' />\n                        </IconButton>\n                        <IconButton\n                            className='header-player-button'\n                            color='primary'\n                            disabled={!src}\n                            onClick={this.handlePlay}>\n                            {playing ? <PauseIcon /> : <PlayArrowIcon />}\n                        </IconButton>\n                        <IconButton\n                            disabled={!hasNext}\n                            className='header-player-button'\n                            color='primary'\n                            onClick={this.handleNext}>\n                            <SkipNextIcon fontSize='small' />\n                        </IconButton>\n                        <Playlist />\n                        <div\n                            className='header-player-content'\n                            onMouseEnter={this.handleTitleMouseEnter}\n                            onMouseLeave={this.handleTitleMouseLeave}\n                            onClick={this.handleTitleClick}>\n                            <div className='header-player-title'>\n                                {title}\n                                {showDate && (\n                                    <span title={dateHintStr}>\n                                        &nbsp;\n                                        {dateStr}\n                                    </span>\n                                )}\n                            </div>\n                            &nbsp;\n                            <Time />\n                        </div>\n                        <VolumeButton />\n                        {showPlaybackRate && <PlaybackRateButton />}\n                        {showRepeat && <RepeatButton />}\n                        {showShuffle && <ShuffleButton />}\n                        <IconButton className='header-player-button' onClick={this.handleClose}>\n                            <CloseIcon fontSize='small' />\n                        </IconButton>\n                    </div>\n                )}\n            </>\n        );\n    }\n}\n\nexport default withTranslation()(HeaderPlayer);\n"]},"metadata":{},"sourceType":"module"}