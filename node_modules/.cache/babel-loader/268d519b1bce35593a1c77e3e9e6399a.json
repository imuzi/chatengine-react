{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Auth/Code.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/EditOutlined';\nimport TextField from '@material-ui/core/TextField';\nimport HeaderProgress from '../ColumnMiddle/HeaderProgress';\nimport { cleanProgressStatus, formatPhoneNumber, isConnecting } from './Phone';\nimport AppStore from '../../Stores/ApplicationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './Code.css';\n\nvar Code =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Code, _React$Component);\n\n  function Code(props) {\n    var _this;\n\n    _classCallCheck(this, Code);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Code).call(this, props));\n\n    _this.onUpdateConnectionState = function (update) {\n      var state = update.state;\n\n      _this.setState({\n        connecting: isConnecting(state)\n      });\n    };\n\n    _this.handleNext = function () {\n      if (_this.code && _this.isValid(_this.code)) {\n        _this.setState({\n          error: ''\n        });\n\n        _this.handleDone();\n      } else {\n        _this.setState({\n          error: 'Invalid code. Please try again.'\n        });\n      }\n    };\n\n    _this.handleDone = function () {\n      var t = _this.props.t;\n      var code = _this.code;\n\n      _this.setState({\n        loading: true\n      });\n\n      TdLibController.send({\n        '@type': 'checkAuthenticationCode',\n        code: code,\n        first_name: 'A',\n        last_name: 'B'\n      }).then(function (result) {}).catch(function (error) {\n        var errorString = null;\n\n        if (error && error['@type'] === 'error' && error.message) {\n          if (error.message === 'PHONE_CODE_INVALID') {\n            errorString = t('InvalidCode');\n          } else {\n            errorString = error.message;\n          }\n        } else {\n          errorString = JSON.stringify(error);\n        }\n\n        _this.setState({\n          error: errorString\n        }, function () {\n          setTimeout(function () {\n            return _this.inputRef.current.focus();\n          }, 100);\n        });\n      }).finally(function () {\n        _this.setState({\n          loading: false\n        });\n      });\n    };\n\n    _this.handleBack = function () {\n      _this.props.onChangePhone();\n    };\n\n    _this.handleChange = function (e) {\n      var prevCode = _this.code || '';\n      _this.code = e.target.value || '';\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMonkeyTracking',\n        prevCode: prevCode,\n        code: _this.code\n      });\n\n      if (_this.code && _this.codeLength > 0 && _this.code.length === _this.codeLength) {\n        _this.handleNext();\n      }\n    };\n\n    _this.handleKeyPress = function (e) {\n      if (e.key === 'Enter') {\n        e.preventDefault();\n\n        _this.handleNext();\n      }\n    };\n\n    _this.state = {\n      connecting: isConnecting(AppStore.connectionState),\n      error: '',\n      loading: false\n    };\n    _this.inputRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(Code, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMonkeyIdle'\n      });\n      AppStore.on('updateConnectionState', this.onUpdateConnectionState);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      AppStore.off('updateConnectionState', this.onUpdateConnectionState);\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid(code) {\n      var isBad = !code.match(/^[\\d\\-+\\s]+$/);\n\n      if (!isBad) {\n        code = code.replace(/\\D/g, '');\n\n        if (code.length !== 5) {\n          isBad = true;\n        }\n      }\n\n      return !isBad;\n    }\n  }, {\n    key: \"getPhoneNumber\",\n    value: function getPhoneNumber(codeInfo) {\n      if (!codeInfo) return null;\n      return codeInfo.phone_number;\n    }\n  }, {\n    key: \"getCodeLength\",\n    value: function getCodeLength(codeInfo) {\n      if (!codeInfo) return 0;\n      if (!codeInfo.type) return 0;\n\n      switch (codeInfo.type['@type']) {\n        case 'authenticationCodeTypeCall':\n          {\n            return codeInfo.type.length;\n          }\n\n        case 'authenticationCodeTypeFlashCall':\n          {\n            return 0;\n          }\n\n        case 'authenticationCodeTypeSms':\n          {\n            return codeInfo.type.length;\n          }\n\n        case 'authenticationCodeTypeTelegramMessage':\n          {\n            return codeInfo.type.length;\n          }\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"getSubtitle\",\n    value: function getSubtitle(codeInfo) {\n      var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (k) {\n        return k;\n      };\n      if (!codeInfo) return 'Subtitle';\n      if (!codeInfo.type) return 'Subtitle';\n\n      switch (codeInfo.type['@type']) {\n        case 'authenticationCodeTypeCall':\n          {\n            return 'NebulaChat dialed your number';\n          }\n\n        case 'authenticationCodeTypeFlashCall':\n          {\n            return 'NebulaChat dialed your number';\n          }\n\n        case 'authenticationCodeTypeSms':\n          {\n            return 'We have sent you a message with activation code to your phone. Please enter it below.';\n          }\n\n        case 'authenticationCodeTypeTelegramMessage':\n          {\n            return \"Please enter the code you've just received in your previous NebulaChat app.\";\n          }\n      }\n\n      return 'Subtitle';\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          codeInfo = _this$props.codeInfo,\n          t = _this$props.t;\n      var _this$state = this.state,\n          connecting = _this$state.connecting,\n          loading = _this$state.loading,\n          error = _this$state.error;\n      this.phoneNumber = this.getPhoneNumber(codeInfo);\n      this.codeLength = this.getCodeLength(codeInfo);\n      var subtitle = this.getSubtitle(codeInfo);\n      var title = 'Title';\n\n      if (connecting) {\n        title = cleanProgressStatus(t('Connecting'));\n      } else if (this.phoneNumber) {\n        title = formatPhoneNumber(this.phoneNumber);\n      }\n\n      return React.createElement(\"form\", {\n        className: \"auth-root\",\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: classNames('code-title', 'auth-title'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"body1\",\n        className: \"auth-title-typography\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, title), connecting && React.createElement(HeaderProgress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        \"aria-label\": \"edit\",\n        onClick: this.handleBack,\n        disabled: loading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(EditIcon, {\n        fontSize: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }))), React.createElement(Typography, {\n        variant: \"body1\",\n        className: \"auth-subtitle\",\n        style: {\n          width: 300\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, subtitle), React.createElement(TextField, {\n        classes: {\n          root: 'auth-input'\n        },\n        inputRef: this.inputRef,\n        variant: \"outlined\",\n        color: \"primary\",\n        disabled: loading,\n        error: Boolean(error),\n        helperText: error,\n        fullWidth: true,\n        autoFocus: true,\n        autoComplete: \"off\",\n        label: t('Code'),\n        maxLength: this.codeLength > 0 ? this.codeLength : 256,\n        onChange: this.handleChange,\n        onKeyPress: this.handleKeyPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Code;\n}(React.Component);\n\nexport default withTranslation()(Code);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Auth/Code.js"],"names":["React","classNames","withTranslation","Typography","IconButton","EditIcon","TextField","HeaderProgress","cleanProgressStatus","formatPhoneNumber","isConnecting","AppStore","TdLibController","Code","props","onUpdateConnectionState","update","state","setState","connecting","handleNext","code","isValid","error","handleDone","t","loading","send","first_name","last_name","then","result","catch","errorString","message","JSON","stringify","setTimeout","inputRef","current","focus","finally","handleBack","onChangePhone","handleChange","e","prevCode","target","value","clientUpdate","codeLength","length","handleKeyPress","key","preventDefault","connectionState","createRef","on","off","isBad","match","replace","codeInfo","phone_number","type","k","phoneNumber","getPhoneNumber","getCodeLength","subtitle","getSubtitle","title","width","root","Boolean","Component"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/EditOutlined';\nimport TextField from '@material-ui/core/TextField';\nimport HeaderProgress from '../ColumnMiddle/HeaderProgress';\nimport { cleanProgressStatus, formatPhoneNumber, isConnecting } from './Phone';\nimport AppStore from '../../Stores/ApplicationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './Code.css';\n\nclass Code extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            connecting: isConnecting(AppStore.connectionState),\n            error: '',\n            loading: false\n        };\n\n        this.inputRef = React.createRef();\n    }\n\n    componentDidMount() {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMonkeyIdle'\n        });\n\n        AppStore.on('updateConnectionState', this.onUpdateConnectionState);\n    }\n\n    componentWillUnmount() {\n        AppStore.off('updateConnectionState', this.onUpdateConnectionState);\n    }\n\n    onUpdateConnectionState = update => {\n        const { state } = update;\n\n        this.setState({ connecting: isConnecting(state) });\n    };\n\n    handleNext = () => {\n        if (this.code && this.isValid(this.code)) {\n            this.setState({ error: '' });\n            this.handleDone();\n        } else {\n            this.setState({ error: 'Invalid code. Please try again.' });\n        }\n    };\n\n    handleDone = () => {\n        const { t } = this.props;\n        const code = this.code;\n\n        this.setState({ loading: true });\n        TdLibController.send({\n            '@type': 'checkAuthenticationCode',\n            code: code,\n            first_name: 'A',\n            last_name: 'B'\n        })\n            .then(result => {})\n            .catch(error => {\n                let errorString = null;\n                if (error && error['@type'] === 'error' && error.message) {\n                    if (error.message === 'PHONE_CODE_INVALID') {\n                        errorString = t('InvalidCode');\n                    } else {\n                        errorString = error.message;\n                    }\n                } else {\n                    errorString = JSON.stringify(error);\n                }\n\n                this.setState({ error: errorString }, () => {\n                    setTimeout(() => this.inputRef.current.focus(), 100);\n                });\n            })\n            .finally(() => {\n                this.setState({ loading: false });\n            });\n    };\n\n    handleBack = () => {\n        this.props.onChangePhone();\n    };\n\n    isValid(code) {\n        let isBad = !code.match(/^[\\d\\-+\\s]+$/);\n        if (!isBad) {\n            code = code.replace(/\\D/g, '');\n            if (code.length !== 5) {\n                isBad = true;\n            }\n        }\n\n        return !isBad;\n    }\n\n    handleChange = e => {\n        const prevCode = this.code || '';\n        this.code = e.target.value || '';\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMonkeyTracking',\n            prevCode,\n            code: this.code\n        });\n\n        if (this.code && this.codeLength > 0 && this.code.length === this.codeLength) {\n            this.handleNext();\n        }\n    };\n\n    handleKeyPress = e => {\n        if (e.key === 'Enter') {\n            e.preventDefault();\n            this.handleNext();\n        }\n    };\n\n    getPhoneNumber(codeInfo) {\n        if (!codeInfo) return null;\n        return codeInfo.phone_number;\n    }\n\n    getCodeLength(codeInfo) {\n        if (!codeInfo) return 0;\n        if (!codeInfo.type) return 0;\n\n        switch (codeInfo.type['@type']) {\n            case 'authenticationCodeTypeCall': {\n                return codeInfo.type.length;\n            }\n            case 'authenticationCodeTypeFlashCall': {\n                return 0;\n            }\n            case 'authenticationCodeTypeSms': {\n                return codeInfo.type.length;\n            }\n            case 'authenticationCodeTypeTelegramMessage': {\n                return codeInfo.type.length;\n            }\n        }\n\n        return 0;\n    }\n\n    getSubtitle(codeInfo, t = k => k) {\n        if (!codeInfo) return 'Subtitle';\n        if (!codeInfo.type) return 'Subtitle';\n\n        switch (codeInfo.type['@type']) {\n            case 'authenticationCodeTypeCall': {\n                return 'NebulaChat dialed your number';\n            }\n            case 'authenticationCodeTypeFlashCall': {\n                return 'NebulaChat dialed your number';\n            }\n            case 'authenticationCodeTypeSms': {\n                return 'We have sent you a message with activation code to your phone. Please enter it below.';\n            }\n            case 'authenticationCodeTypeTelegramMessage': {\n                return \"Please enter the code you've just received in your previous NebulaChat app.\";\n            }\n        }\n\n        return 'Subtitle';\n    }\n\n    render() {\n        const { codeInfo, t } = this.props;\n        const { connecting, loading, error } = this.state;\n\n        this.phoneNumber = this.getPhoneNumber(codeInfo);\n        this.codeLength = this.getCodeLength(codeInfo);\n        const subtitle = this.getSubtitle(codeInfo);\n\n        let title = 'Title';\n        if (connecting) {\n            title = cleanProgressStatus(t('Connecting'));\n        } else if (this.phoneNumber) {\n            title = formatPhoneNumber(this.phoneNumber);\n        }\n\n        return (\n            <form className='auth-root' autoComplete='off'>\n                <div className={classNames('code-title', 'auth-title')}>\n                    <Typography variant='body1' className='auth-title-typography'>\n                        <span>{title}</span>\n                        {connecting && <HeaderProgress />}\n                    </Typography>\n                    <IconButton aria-label='edit' onClick={this.handleBack} disabled={loading}>\n                        <EditIcon fontSize='small' />\n                    </IconButton>\n                </div>\n                <Typography variant='body1' className='auth-subtitle' style={{ width: 300 }}>\n                    {subtitle}\n                </Typography>\n                <TextField\n                    classes={{ root: 'auth-input' }}\n                    inputRef={this.inputRef}\n                    variant='outlined'\n                    color='primary'\n                    disabled={loading}\n                    error={Boolean(error)}\n                    helperText={error}\n                    fullWidth\n                    autoFocus\n                    autoComplete='off'\n                    label={t('Code')}\n                    maxLength={this.codeLength > 0 ? this.codeLength : 256}\n                    onChange={this.handleChange}\n                    onKeyPress={this.handleKeyPress}\n                />\n            </form>\n        );\n    }\n}\n\nexport default withTranslation()(Code);\n"]},"metadata":{},"sourceType":"module"}