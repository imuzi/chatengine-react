{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Additional/MentionLink.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport { openChat, openUser } from '../../Actions/Client';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './MentionLink.css';\nimport { isGroupChat } from '../../Utils/Chat';\n\nvar MentionLink =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MentionLink, _React$Component);\n\n  function MentionLink(props) {\n    var _this;\n\n    _classCallCheck(this, MentionLink);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MentionLink).call(this, props));\n\n    _this.handleClick =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(event) {\n        var _this$props, userId, username, popup, chat;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event.stopPropagation();\n                event.preventDefault();\n                _this$props = _this.props, userId = _this$props.userId, username = _this$props.username, popup = _this$props.popup;\n\n                if (!userId) {\n                  _context.next = 7;\n                  break;\n                }\n\n                openUser(userId, popup);\n                _context.next = 12;\n                break;\n\n              case 7:\n                if (!username) {\n                  _context.next = 12;\n                  break;\n                }\n\n                _context.next = 10;\n                return TdLibController.send({\n                  '@type': 'searchPublicChat',\n                  username: username\n                }).catch(function () {\n                  _this.setState({\n                    error: true\n                  });\n                });\n\n              case 10:\n                chat = _context.sent;\n\n                if (chat) {\n                  if (isGroupChat(chat.id)) {\n                    openChat(chat.id, null, false);\n                  } else {\n                    openChat(chat.id, null, popup);\n                  }\n                }\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.handleClose = function () {\n      _this.setState({\n        error: false\n      });\n    };\n\n    _this.handleDialogClick = function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    };\n\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(MentionLink, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          t = _this$props2.t,\n          title = _this$props2.title,\n          username = _this$props2.username;\n      var error = this.state.error;\n      return React.createElement(React.Fragment, null, React.createElement(\"a\", {\n        title: title,\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, children), error && React.createElement(Dialog, {\n        transitionDuration: 0,\n        open: true,\n        onClose: this.handleClose,\n        onClick: this.handleDialogClick,\n        \"aria-labelledby\": \"confirm-dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(DialogTitle, {\n        id: \"confirm-dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, t('Error')), React.createElement(DialogContent, {\n        classes: {\n          root: 'safe-link-content-root'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(DialogContentText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Can't find username \".concat(username, \".\"))), React.createElement(DialogActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.handleClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, t('Ok')))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var userId = props.userId,\n          username = props.username;\n\n      if (state.prevUserId !== userId || state.prevUsername !== username) {\n        return {\n          prevUserId: userId,\n          prevUsername: username,\n          error: false\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return MentionLink;\n}(React.Component);\n\nMentionLink.propTypes = {\n  userId: PropTypes.number,\n  username: PropTypes.string,\n  title: PropTypes.string,\n  popup: PropTypes.bool\n};\nMentionLink.defaultProps = {\n  popup: true\n};\nexport default withTranslation()(MentionLink);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Additional/MentionLink.js"],"names":["React","PropTypes","withTranslation","Button","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","openChat","openUser","TdLibController","isGroupChat","MentionLink","props","handleClick","event","stopPropagation","preventDefault","userId","username","popup","send","catch","setState","error","chat","id","handleClose","handleDialogClick","state","children","t","title","root","prevUserId","prevUsername","Component","propTypes","number","string","bool","defaultProps"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport { openChat, openUser } from '../../Actions/Client';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './MentionLink.css';\nimport { isGroupChat } from '../../Utils/Chat';\n\nclass MentionLink extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        const { userId, username } = props;\n\n        if (state.prevUserId !== userId || state.prevUsername !== username) {\n            return {\n                prevUserId: userId,\n                prevUsername: username,\n                error: false\n            };\n        }\n\n        return null;\n    }\n\n    handleClick = async event => {\n        event.stopPropagation();\n        event.preventDefault();\n\n        const { userId, username, popup } = this.props;\n        if (userId) {\n            openUser(userId, popup);\n        } else if (username) {\n            const chat = await TdLibController.send({\n                '@type': 'searchPublicChat',\n                username\n            }).catch(() => {\n                this.setState({ error: true });\n            });\n\n            if (chat) {\n                if (isGroupChat(chat.id)) {\n                    openChat(chat.id, null, false);\n                } else {\n                    openChat(chat.id, null, popup);\n                }\n            }\n        }\n    };\n\n    handleClose = () => {\n        this.setState({ error: false });\n    };\n\n    handleDialogClick = event => {\n        event.preventDefault();\n        event.stopPropagation();\n    };\n\n    render() {\n        const { children, t, title, username } = this.props;\n        const { error } = this.state;\n\n        return (\n            <>\n                <a title={title} onClick={this.handleClick}>\n                    {children}\n                </a>\n                {error && (\n                    <Dialog\n                        transitionDuration={0}\n                        open={true}\n                        onClose={this.handleClose}\n                        onClick={this.handleDialogClick}\n                        aria-labelledby='confirm-dialog-title'>\n                        <DialogTitle id='confirm-dialog-title'>{t('Error')}</DialogTitle>\n                        <DialogContent classes={{ root: 'safe-link-content-root' }}>\n                            <DialogContentText>{`Can't find username ${username}.`}</DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={this.handleClose}>{t('Ok')}</Button>\n                        </DialogActions>\n                    </Dialog>\n                )}\n            </>\n        );\n    }\n}\n\nMentionLink.propTypes = {\n    userId: PropTypes.number,\n    username: PropTypes.string,\n    title: PropTypes.string,\n    popup: PropTypes.bool\n};\n\nMentionLink.defaultProps = {\n    popup: true\n};\n\nexport default withTranslation()(MentionLink);\n"]},"metadata":{},"sourceType":"module"}