{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport EventEmitter from './EventEmitter';\nimport TdLibController from '../Controllers/TdLibController';\n\nvar MessageStore =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(MessageStore, _EventEmitter);\n\n  function MessageStore() {\n    var _this;\n\n    _classCallCheck(this, MessageStore);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MessageStore).call(this));\n\n    _this.reset = function () {\n      _this.items = new Map();\n      _this.selectedItems = new Map();\n    };\n\n    _this.onUpdate = function (update) {\n      switch (update['@type']) {\n        case 'updateAuthorizationState':\n          {\n            var authorization_state = update.authorization_state;\n            if (!authorization_state) break;\n\n            switch (authorization_state['@type']) {\n              case 'authorizationStateClosed':\n                {\n                  _this.reset();\n\n                  break;\n                }\n            }\n\n            break;\n          }\n\n        case 'updateNewMessage':\n          _this.set(update.message);\n\n          _this.emit('updateNewMessage', update);\n\n          break;\n\n        case 'updateDeleteMessages':\n          _this.emit('updateDeleteMessages', update);\n\n          break;\n\n        case 'updateMessageEdited':\n          {\n            var chat = _this.items.get(update.chat_id);\n\n            if (chat) {\n              var message = chat.get(update.message_id);\n\n              if (message) {\n                message.reply_markup = update.reply_markup;\n                message.edit_date = update.edit_date;\n              }\n            }\n\n            _this.emit('updateMessageEdited', update);\n\n            break;\n          }\n\n        case 'updateMessageViews':\n          {\n            var _chat = _this.items.get(update.chat_id);\n\n            if (_chat) {\n              var _message = _chat.get(update.message_id);\n\n              if (_message && update.views > _message.views) {\n                _message.views = update.views;\n              }\n            }\n\n            _this.emit('updateMessageViews', update);\n\n            break;\n          }\n\n        case 'updateMessageContent':\n          {\n            var _chat2 = _this.items.get(update.chat_id);\n\n            if (_chat2) {\n              var _message2 = _chat2.get(update.message_id);\n\n              if (_message2) {\n                update.old_content = _message2.content;\n                _message2.content = update.new_content;\n              }\n            }\n\n            _this.emit('updateMessageContent', update);\n\n            break;\n          }\n\n        case 'updateMessageContentOpened':\n          {\n            var chat_id = update.chat_id,\n                message_id = update.message_id;\n\n            var _message3 = _this.get(chat_id, message_id);\n\n            if (_message3) {\n              var content = _message3.content;\n\n              switch (content['@type']) {\n                case 'messageVoiceNote':\n                  {\n                    _message3.content.is_listened = true;\n                    break;\n                  }\n\n                case 'messageVideoNote':\n                  {\n                    _message3.content.is_viewed = true;\n                    break;\n                  }\n              }\n            }\n\n            _this.emit('updateMessageContentOpened', update);\n\n            break;\n          }\n\n        case 'updateMessageSendSucceeded':\n          {\n            var _chat3 = _this.items.get(update.message.chat_id);\n\n            if (_chat3) {\n              var _message4 = _chat3.get(update.old_message_id);\n\n              if (_message4) {\n                _message4.sending_state = update.message.sending_state;\n              }\n\n              if (update.old_message_id !== update.message.id) {\n                _this.set(update.message);\n              }\n            }\n\n            _this.set(update.message);\n\n            _this.emit('updateMessageSendSucceeded', update);\n\n            break;\n          }\n\n        case 'updateMessageSendFailed':\n          {\n            if (update.message.sending_state) {\n              update.message.sending_state.error_code = update.error_code;\n              update.message.sending_state.error_message = update.error_message;\n            }\n\n            var _chat4 = _this.items.get(update.message.chat_id);\n\n            if (_chat4) {\n              var _message5 = _chat4.get(update.old_message_id);\n\n              if (_message5) {\n                _message5.sending_state = update.message.sending_state;\n\n                if (_message5.sending_state) {\n                  _message5.sending_state.error_code = update.error_code;\n                  _message5.sending_state.error_message = update.error_message;\n                }\n              }\n\n              if (update.old_message_id !== update.message.id) {\n                _this.set(update.message);\n              }\n            }\n\n            _this.emit('updateMessageSendFailed', update);\n\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    _this.onClientUpdate = function (update) {\n      switch (update['@type']) {\n        case 'clientUpdateChatId':\n          {\n            if (_this.selectedItems.size > 0) {\n              _this.selectedItems.clear();\n\n              _this.emit('clientUpdateClearSelection', {\n                '@type': 'clientUpdateClearSelection'\n              });\n            }\n\n            break;\n          }\n\n        case 'clientUpdateClearSelection':\n          {\n            _this.selectedItems.clear();\n\n            _this.emit('clientUpdateClearSelection', update);\n\n            break;\n          }\n\n        case 'clientUpdateMessageShake':\n          {\n            _this.emit('clientUpdateMessageShake', update);\n\n            break;\n          }\n\n        case 'clientUpdateMessageHighlighted':\n          {\n            _this.emit('clientUpdateMessageHighlighted', update);\n\n            break;\n          }\n\n        case 'clientUpdateMessageSelected':\n          {\n            if (update.selected) {\n              _this.selectedItems.set(\"chatId=\".concat(update.chatId, \"_messageId=\").concat(update.messageId), {\n                chatId: update.chatId,\n                messageId: update.messageId\n              });\n            } else {\n              _this.selectedItems.delete(\"chatId=\".concat(update.chatId, \"_messageId=\").concat(update.messageId));\n            }\n\n            _this.emit('clientUpdateMessageSelected', update);\n\n            break;\n          }\n\n        case 'clientUpdateMessagesInView':\n          {\n            _this.emit('clientUpdateMessagesInView', update);\n\n            break;\n          }\n\n        case 'clientUpdateOpenReply':\n          {\n            _this.emit('clientUpdateOpenReply', update);\n\n            break;\n          }\n\n        case 'clientUpdateReply':\n          {\n            _this.emit('clientUpdateReply', update);\n\n            break;\n          }\n\n        case 'clientUpdateTryEditMessage':\n          {\n            _this.emit('clientUpdateTryEditMessage', update);\n\n            break;\n          }\n      }\n    };\n\n    _this.addTdLibListener = function () {\n      TdLibController.on('update', _this.onUpdate);\n      TdLibController.on('clientUpdate', _this.onClientUpdate);\n    };\n\n    _this.removeTdLibListener = function () {\n      TdLibController.off('update', _this.onUpdate);\n      TdLibController.off('clientUpdate', _this.onClientUpdate);\n    };\n\n    _this.reset();\n\n    _this.addTdLibListener();\n\n    return _this;\n  }\n\n  _createClass(MessageStore, [{\n    key: \"hasSelectedMessage\",\n    value: function hasSelectedMessage(chatId, messageId) {\n      return this.selectedItems.has(\"chatId=\".concat(chatId, \"_messageId=\").concat(messageId));\n    }\n  }, {\n    key: \"load\",\n    value: function load(chatId, messageId) {\n      var _this2 = this;\n\n      TdLibController.send({\n        '@type': 'getMessage',\n        chat_id: chatId,\n        message_id: messageId\n      }).then(function (message) {\n        _this2.set(message);\n\n        _this2.emit('getMessageResult', message);\n      }).catch(function (error) {\n        var deletedMessage = {\n          '@type': 'deletedMessage',\n          chat_id: chatId,\n          id: messageId,\n          content: null\n        };\n\n        _this2.set(deletedMessage);\n\n        _this2.emit('getMessageResult', deletedMessage);\n      });\n    }\n  }, {\n    key: \"get\",\n    value: function get(chatId, messageId) {\n      var chat = this.items.get(chatId);\n\n      if (!chat) {\n        //this.load(chatId, messageId);\n        return null;\n      }\n\n      var message = chat.get(messageId);\n\n      if (!message) {\n        //this.load(chatId, messageId);\n        return null;\n      }\n\n      return message;\n    }\n  }, {\n    key: \"set\",\n    value: function set(message) {\n      if (!message) return;\n      var chat = this.items.get(message.chat_id);\n\n      if (!chat) {\n        chat = new Map();\n        this.items.set(message.chat_id, chat);\n      }\n\n      chat.set(message.id, message);\n    }\n  }, {\n    key: \"setItems\",\n    value: function setItems(messages) {\n      for (var i = 0; i < messages.length; i++) {\n        this.set(messages[i]);\n      }\n    }\n  }]);\n\n  return MessageStore;\n}(EventEmitter);\n\nvar store = new MessageStore();\nwindow.message = store;\nexport default store;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Stores/MessageStore.js"],"names":["EventEmitter","TdLibController","MessageStore","reset","items","Map","selectedItems","onUpdate","update","authorization_state","set","message","emit","chat","get","chat_id","message_id","reply_markup","edit_date","views","old_content","content","new_content","is_listened","is_viewed","old_message_id","sending_state","id","error_code","error_message","onClientUpdate","size","clear","selected","chatId","messageId","delete","addTdLibListener","on","removeTdLibListener","off","has","send","then","catch","error","deletedMessage","messages","i","length","store","window"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport EventEmitter from './EventEmitter';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass MessageStore extends EventEmitter {\n    constructor() {\n        super();\n\n        this.reset();\n\n        this.addTdLibListener();\n    }\n\n    reset = () => {\n        this.items = new Map();\n        this.selectedItems = new Map();\n    };\n\n    onUpdate = update => {\n        switch (update['@type']) {\n            case 'updateAuthorizationState': {\n                const { authorization_state } = update;\n                if (!authorization_state) break;\n\n                switch (authorization_state['@type']) {\n                    case 'authorizationStateClosed': {\n                        this.reset();\n                        break;\n                    }\n                }\n\n                break;\n            }\n            case 'updateNewMessage':\n                this.set(update.message);\n                this.emit('updateNewMessage', update);\n                break;\n            case 'updateDeleteMessages':\n                this.emit('updateDeleteMessages', update);\n                break;\n            case 'updateMessageEdited': {\n                const chat = this.items.get(update.chat_id);\n                if (chat) {\n                    const message = chat.get(update.message_id);\n                    if (message) {\n                        message.reply_markup = update.reply_markup;\n                        message.edit_date = update.edit_date;\n                    }\n                }\n                this.emit('updateMessageEdited', update);\n                break;\n            }\n            case 'updateMessageViews': {\n                const chat = this.items.get(update.chat_id);\n                if (chat) {\n                    const message = chat.get(update.message_id);\n                    if (message && update.views > message.views) {\n                        message.views = update.views;\n                    }\n                }\n                this.emit('updateMessageViews', update);\n                break;\n            }\n            case 'updateMessageContent': {\n                const chat = this.items.get(update.chat_id);\n                if (chat) {\n                    const message = chat.get(update.message_id);\n                    if (message) {\n                        update.old_content = message.content;\n                        message.content = update.new_content;\n                    }\n                }\n                this.emit('updateMessageContent', update);\n                break;\n            }\n            case 'updateMessageContentOpened': {\n                const { chat_id, message_id } = update;\n\n                const message = this.get(chat_id, message_id);\n                if (message) {\n                    const { content } = message;\n                    switch (content['@type']) {\n                        case 'messageVoiceNote': {\n                            message.content.is_listened = true;\n                            break;\n                        }\n                        case 'messageVideoNote': {\n                            message.content.is_viewed = true;\n                            break;\n                        }\n                    }\n                }\n\n                this.emit('updateMessageContentOpened', update);\n                break;\n            }\n            case 'updateMessageSendSucceeded': {\n                const chat = this.items.get(update.message.chat_id);\n                if (chat) {\n                    const message = chat.get(update.old_message_id);\n                    if (message) {\n                        message.sending_state = update.message.sending_state;\n                    }\n                    if (update.old_message_id !== update.message.id) {\n                        this.set(update.message);\n                    }\n                }\n\n                this.set(update.message);\n                this.emit('updateMessageSendSucceeded', update);\n                break;\n            }\n            case 'updateMessageSendFailed': {\n                if (update.message.sending_state) {\n                    update.message.sending_state.error_code = update.error_code;\n                    update.message.sending_state.error_message = update.error_message;\n                }\n\n                const chat = this.items.get(update.message.chat_id);\n                if (chat) {\n                    const message = chat.get(update.old_message_id);\n                    if (message) {\n                        message.sending_state = update.message.sending_state;\n                        if (message.sending_state) {\n                            message.sending_state.error_code = update.error_code;\n                            message.sending_state.error_message = update.error_message;\n                        }\n                    }\n                    if (update.old_message_id !== update.message.id) {\n                        this.set(update.message);\n                    }\n                }\n                this.emit('updateMessageSendFailed', update);\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    onClientUpdate = update => {\n        switch (update['@type']) {\n            case 'clientUpdateChatId': {\n                if (this.selectedItems.size > 0) {\n                    this.selectedItems.clear();\n\n                    this.emit('clientUpdateClearSelection', { '@type': 'clientUpdateClearSelection' });\n                }\n\n                break;\n            }\n            case 'clientUpdateClearSelection': {\n                this.selectedItems.clear();\n\n                this.emit('clientUpdateClearSelection', update);\n                break;\n            }\n            case 'clientUpdateMessageShake': {\n                this.emit('clientUpdateMessageShake', update);\n                break;\n            }\n            case 'clientUpdateMessageHighlighted': {\n                this.emit('clientUpdateMessageHighlighted', update);\n                break;\n            }\n            case 'clientUpdateMessageSelected': {\n                if (update.selected) {\n                    this.selectedItems.set(`chatId=${update.chatId}_messageId=${update.messageId}`, {\n                        chatId: update.chatId,\n                        messageId: update.messageId\n                    });\n                } else {\n                    this.selectedItems.delete(`chatId=${update.chatId}_messageId=${update.messageId}`);\n                }\n\n                this.emit('clientUpdateMessageSelected', update);\n                break;\n            }\n            case 'clientUpdateMessagesInView': {\n                this.emit('clientUpdateMessagesInView', update);\n                break;\n            }\n            case 'clientUpdateOpenReply': {\n                this.emit('clientUpdateOpenReply', update);\n                break;\n            }\n            case 'clientUpdateReply': {\n                this.emit('clientUpdateReply', update);\n                break;\n            }\n            case 'clientUpdateTryEditMessage': {\n                this.emit('clientUpdateTryEditMessage', update);\n                break;\n            }\n        }\n    };\n\n    hasSelectedMessage(chatId, messageId) {\n        return this.selectedItems.has(`chatId=${chatId}_messageId=${messageId}`);\n    }\n\n    addTdLibListener = () => {\n        TdLibController.on('update', this.onUpdate);\n        TdLibController.on('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.off('update', this.onUpdate);\n        TdLibController.off('clientUpdate', this.onClientUpdate);\n    };\n\n    load(chatId, messageId) {\n        TdLibController.send({\n            '@type': 'getMessage',\n            chat_id: chatId,\n            message_id: messageId\n        })\n            .then(message => {\n                this.set(message);\n                this.emit('getMessageResult', message);\n            })\n            .catch(error => {\n                const deletedMessage = {\n                    '@type': 'deletedMessage',\n                    chat_id: chatId,\n                    id: messageId,\n                    content: null\n                };\n                this.set(deletedMessage);\n                this.emit('getMessageResult', deletedMessage);\n            });\n    }\n\n    get(chatId, messageId) {\n        let chat = this.items.get(chatId);\n        if (!chat) {\n            //this.load(chatId, messageId);\n            return null;\n        }\n\n        let message = chat.get(messageId);\n        if (!message) {\n            //this.load(chatId, messageId);\n            return null;\n        }\n\n        return message;\n    }\n\n    set(message) {\n        if (!message) return;\n\n        let chat = this.items.get(message.chat_id);\n        if (!chat) {\n            chat = new Map();\n            this.items.set(message.chat_id, chat);\n        }\n\n        chat.set(message.id, message);\n    }\n\n    setItems(messages) {\n        for (let i = 0; i < messages.length; i++) {\n            this.set(messages[i]);\n        }\n    }\n}\n\nconst store = new MessageStore();\nwindow.message = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}