{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnMiddle/PinnedMessage.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport ReplyTile from '../Tile/ReplyTile';\nimport { canPinMessages } from '../../Utils/Chat';\nimport { getContent, getReplyMinithumbnail, getReplyPhotoSize, isDeletedMessage } from '../../Utils/Message';\nimport { loadMessageContents } from '../../Utils/File';\nimport { openChat } from '../../Actions/Client';\nimport AppStore from '../../Stores/ApplicationStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport FileStore from '../../Stores/FileStore';\nimport MessageStore from '../../Stores/MessageStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './PinnedMessage.css';\n\nvar PinnedMessage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PinnedMessage, _React$Component);\n\n  function PinnedMessage(props) {\n    var _this;\n\n    _classCallCheck(this, PinnedMessage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PinnedMessage).call(this, props));\n\n    _this.onClientUpdateUnpin = function (update) {\n      var chatId = update.chatId;\n      if (_this.props.chatId !== chatId) return;\n\n      _this.handleDelete();\n    };\n\n    _this.onClientUpdateDialogsReady = function (update) {\n      var messageId = _this.state.messageId;\n\n      if (messageId) {\n        _this.loadContent();\n      }\n    };\n\n    _this.onClientUpdateSetChatClientData = function (update) {\n      var chatId = update.chatId,\n          clientData = update.clientData;\n      if (_this.props.chatId !== chatId) return;\n\n      _this.setState({\n        clientData: clientData\n      });\n    };\n\n    _this.onUpdateChatPinnedMessage = function (update) {\n      var chat_id = update.chat_id,\n          messageId = update.pinned_message_id;\n      var chatId = _this.props.chatId;\n      if (chatId !== chat_id) return;\n\n      _this.setState({\n        messageId: messageId\n      });\n    };\n\n    _this.loadContent = function () {\n      var chatId = _this.props.chatId;\n      var messageId = _this.state.messageId;\n      if (!chatId) return;\n      if (!messageId) return;\n      var message = MessageStore.get(chatId, messageId);\n      if (message) return;\n      TdLibController.send({\n        '@type': 'getMessage',\n        chat_id: chatId,\n        message_id: messageId\n      }).then(function (result) {\n        MessageStore.set(result);\n        var store = FileStore.getStore();\n        loadMessageContents(store, [result]);\n\n        _this.forceUpdate();\n      }).catch(function (error) {\n        var code = error.code,\n            message = error.message;\n\n        if (message !== 'Chat not found') {\n          var deletedMessage = {\n            '@type': 'deletedMessage',\n            chat_id: chatId,\n            id: messageId,\n            content: null\n          };\n          MessageStore.set(deletedMessage);\n\n          _this.forceUpdate();\n        }\n      });\n    };\n\n    _this.handleClick = function (event) {\n      var chatId = _this.props.chatId;\n      var messageId = _this.state.messageId;\n      if (!messageId) return;\n      openChat(chatId, messageId);\n    };\n\n    _this.handleDelete =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(event) {\n        var chatId, messageId, canPin, data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (event) {\n                  event.preventDefault();\n                  event.stopPropagation();\n                }\n\n                chatId = _this.props.chatId;\n                messageId = _this.state.messageId;\n                canPin = canPinMessages(chatId);\n\n                if (!canPin) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _this.setState({\n                  confirm: true\n                });\n\n                _context.next = 11;\n                break;\n\n              case 8:\n                data = ChatStore.getClientData(chatId);\n                _context.next = 11;\n                return TdLibController.clientUpdate({\n                  '@type': 'clientUpdateSetChatClientData',\n                  chatId: chatId,\n                  clientData: Object.assign({}, data, {\n                    unpinned_message_id: messageId\n                  })\n                });\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.handleUnpin =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var chatId;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              chatId = _this.props.chatId;\n\n              _this.handleClose();\n\n              TdLibController.send({\n                '@type': 'unpinChatMessage',\n                chat_id: chatId\n              });\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    _this.handleClose = function () {\n      _this.setState({\n        confirm: false\n      });\n    };\n\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(PinnedMessage, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      var messageId = this.state.messageId;\n\n      if (messageId && prevState.messageId !== messageId) {\n        this.loadContent();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadContent();\n      AppStore.on('clientUpdateDialogsReady', this.onClientUpdateDialogsReady);\n      ChatStore.on('clientUpdateSetChatClientData', this.onClientUpdateSetChatClientData);\n      ChatStore.on('clientUpdateUnpin', this.onClientUpdateUnpin);\n      ChatStore.on('updateChatPinnedMessage', this.onUpdateChatPinnedMessage);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      AppStore.off('clientUpdateDialogsReady', this.onClientUpdateDialogsReady);\n      ChatStore.off('clientUpdateSetChatClientData', this.onClientUpdateSetChatClientData);\n      ChatStore.off('clientUpdateUnpin', this.onClientUpdateUnpin);\n      ChatStore.off('updateChatPinnedMessage', this.onUpdateChatPinnedMessage);\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState, nextContext) {\n      var _this$props = this.props,\n          chatId = _this$props.chatId,\n          t = _this$props.t,\n          theme = _this$props.theme;\n      var _this$state = this.state,\n          clientData = _this$state.clientData,\n          confirm = _this$state.confirm,\n          messageId = _this$state.messageId;\n\n      if (nextProps.t !== t) {\n        return true;\n      }\n\n      if (nextProps.theme !== theme) {\n        return true;\n      }\n\n      if (nextProps.chatId !== chatId) {\n        return true;\n      }\n\n      if (nextState.clientData !== clientData) {\n        return true;\n      }\n\n      if (nextState.confirm !== confirm) {\n        return true;\n      }\n\n      if (nextState.messageId !== messageId) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          chatId = _this$props2.chatId,\n          t = _this$props2.t;\n      var _this$state2 = this.state,\n          messageId = _this$state2.messageId,\n          confirm = _this$state2.confirm;\n      if (!chatId) return null;\n\n      var _ChatStore$getClientD = ChatStore.getClientData(chatId),\n          unpinned_message_id = _ChatStore$getClientD.unpinned_message_id;\n\n      if (unpinned_message_id === messageId) return null;\n      var message = MessageStore.get(chatId, messageId);\n      if (!message) return null;\n      var content = !message ? t('Loading') : getContent(message, t);\n      var photoSize = getReplyPhotoSize(chatId, messageId);\n      var minithumbnail = getReplyMinithumbnail(chatId, messageId);\n\n      if (isDeletedMessage(message)) {\n        content = t('DeletedMessage');\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"pinned-message\",\n        onMouseDown: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"border reply-border\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }), photoSize && React.createElement(ReplyTile, {\n        chatId: chatId,\n        messageId: messageId,\n        photoSize: photoSize,\n        minithumbnail: minithumbnail,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"pinned-message-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pinned-message-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, t('PinnedMessage')), React.createElement(\"div\", {\n        className: \"pinned-message-subtitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, content))), confirm && React.createElement(Dialog, {\n        transitionDuration: 0,\n        open: true,\n        onClose: this.handleClose,\n        \"aria-labelledby\": \"unpin-message-confirmation\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, React.createElement(DialogTitle, {\n        id: \"unpin-message-confirmation\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, t('Confirm')), React.createElement(DialogContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }, React.createElement(DialogContentText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }, t('UnpinMessageAlert'))), React.createElement(DialogActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.handleClose,\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, t('Cancel')), React.createElement(Button, {\n        onClick: this.handleUnpin,\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, t('Ok')))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var prevPropsChatId = state.prevPropsChatId;\n      var chatId = props.chatId;\n\n      if (prevPropsChatId !== chatId) {\n        var chat = ChatStore.get(chatId);\n        return {\n          prevPropsChatId: chatId,\n          clientData: ChatStore.getClientData(chatId),\n          messageId: chat && chat.pinned_message_id ? chat.pinned_message_id : 0,\n          confirm: false\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return PinnedMessage;\n}(React.Component);\n\nPinnedMessage.propTypes = {\n  chatId: PropTypes.number.isRequired\n};\nexport default withTranslation()(PinnedMessage);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnMiddle/PinnedMessage.js"],"names":["React","PropTypes","withTranslation","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","ReplyTile","canPinMessages","getContent","getReplyMinithumbnail","getReplyPhotoSize","isDeletedMessage","loadMessageContents","openChat","AppStore","ChatStore","FileStore","MessageStore","TdLibController","PinnedMessage","props","onClientUpdateUnpin","update","chatId","handleDelete","onClientUpdateDialogsReady","messageId","state","loadContent","onClientUpdateSetChatClientData","clientData","setState","onUpdateChatPinnedMessage","chat_id","pinned_message_id","message","get","send","message_id","then","result","set","store","getStore","forceUpdate","catch","error","code","deletedMessage","id","content","handleClick","event","preventDefault","stopPropagation","canPin","confirm","data","getClientData","clientUpdate","Object","assign","unpinned_message_id","handleUnpin","handleClose","prevProps","prevState","snapshot","on","off","nextProps","nextState","nextContext","t","theme","photoSize","minithumbnail","prevPropsChatId","chat","Component","propTypes","number","isRequired"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport ReplyTile from '../Tile/ReplyTile';\nimport { canPinMessages } from '../../Utils/Chat';\nimport { getContent, getReplyMinithumbnail, getReplyPhotoSize, isDeletedMessage } from '../../Utils/Message';\nimport { loadMessageContents } from '../../Utils/File';\nimport { openChat } from '../../Actions/Client';\nimport AppStore from '../../Stores/ApplicationStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport FileStore from '../../Stores/FileStore';\nimport MessageStore from '../../Stores/MessageStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './PinnedMessage.css';\n\nclass PinnedMessage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        const { prevPropsChatId } = state;\n        const { chatId } = props;\n\n        if (prevPropsChatId !== chatId) {\n            const chat = ChatStore.get(chatId);\n            return {\n                prevPropsChatId: chatId,\n                clientData: ChatStore.getClientData(chatId),\n                messageId: chat && chat.pinned_message_id ? chat.pinned_message_id : 0,\n                confirm: false\n            };\n        }\n\n        return null;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const { messageId } = this.state;\n\n        if (messageId && prevState.messageId !== messageId) {\n            this.loadContent();\n        }\n    }\n\n    componentDidMount() {\n        this.loadContent();\n\n        AppStore.on('clientUpdateDialogsReady', this.onClientUpdateDialogsReady);\n        ChatStore.on('clientUpdateSetChatClientData', this.onClientUpdateSetChatClientData);\n        ChatStore.on('clientUpdateUnpin', this.onClientUpdateUnpin);\n        ChatStore.on('updateChatPinnedMessage', this.onUpdateChatPinnedMessage);\n    }\n\n    componentWillUnmount() {\n        AppStore.off('clientUpdateDialogsReady', this.onClientUpdateDialogsReady);\n        ChatStore.off('clientUpdateSetChatClientData', this.onClientUpdateSetChatClientData);\n        ChatStore.off('clientUpdateUnpin', this.onClientUpdateUnpin);\n        ChatStore.off('updateChatPinnedMessage', this.onUpdateChatPinnedMessage);\n    }\n\n    onClientUpdateUnpin = update => {\n        const { chatId } = update;\n\n        if (this.props.chatId !== chatId) return;\n\n        this.handleDelete();\n    };\n\n    onClientUpdateDialogsReady = update => {\n        const { messageId } = this.state;\n\n        if (messageId) {\n            this.loadContent();\n        }\n    };\n\n    onClientUpdateSetChatClientData = update => {\n        const { chatId, clientData } = update;\n\n        if (this.props.chatId !== chatId) return;\n\n        this.setState({ clientData });\n    };\n\n    onUpdateChatPinnedMessage = update => {\n        const { chat_id, pinned_message_id: messageId } = update;\n        const { chatId } = this.props;\n\n        if (chatId !== chat_id) return;\n\n        this.setState({ messageId });\n    };\n\n    loadContent = () => {\n        const { chatId } = this.props;\n        const { messageId } = this.state;\n\n        if (!chatId) return;\n        if (!messageId) return;\n\n        const message = MessageStore.get(chatId, messageId);\n        if (message) return;\n\n        TdLibController.send({\n            '@type': 'getMessage',\n            chat_id: chatId,\n            message_id: messageId\n        })\n            .then(result => {\n                MessageStore.set(result);\n\n                const store = FileStore.getStore();\n                loadMessageContents(store, [result]);\n\n                this.forceUpdate();\n            })\n            .catch(error => {\n                const { code, message } = error;\n                if (message !== 'Chat not found') {\n                    const deletedMessage = {\n                        '@type': 'deletedMessage',\n                        chat_id: chatId,\n                        id: messageId,\n                        content: null\n                    };\n\n                    MessageStore.set(deletedMessage);\n                    this.forceUpdate();\n                }\n            });\n    };\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { chatId, t, theme } = this.props;\n        const { clientData, confirm, messageId } = this.state;\n\n        if (nextProps.t !== t) {\n            return true;\n        }\n\n        if (nextProps.theme !== theme) {\n            return true;\n        }\n\n        if (nextProps.chatId !== chatId) {\n            return true;\n        }\n\n        if (nextState.clientData !== clientData) {\n            return true;\n        }\n\n        if (nextState.confirm !== confirm) {\n            return true;\n        }\n\n        if (nextState.messageId !== messageId) {\n            return true;\n        }\n\n        return false;\n    }\n\n    handleClick = event => {\n        const { chatId } = this.props;\n        const { messageId } = this.state;\n\n        if (!messageId) return;\n\n        openChat(chatId, messageId);\n    };\n\n    handleDelete = async event => {\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n\n        const { chatId } = this.props;\n        const { messageId } = this.state;\n\n        const canPin = canPinMessages(chatId);\n        if (canPin) {\n            this.setState({ confirm: true });\n        } else {\n            const data = ChatStore.getClientData(chatId);\n            await TdLibController.clientUpdate({\n                '@type': 'clientUpdateSetChatClientData',\n                chatId: chatId,\n                clientData: Object.assign({}, data, { unpinned_message_id: messageId })\n            });\n        }\n    };\n\n    handleUnpin = async () => {\n        const { chatId } = this.props;\n\n        this.handleClose();\n\n        TdLibController.send({\n            '@type': 'unpinChatMessage',\n            chat_id: chatId\n        });\n    };\n\n    handleClose = () => {\n        this.setState({ confirm: false });\n    };\n\n    render() {\n        const { chatId, t } = this.props;\n        const { messageId, confirm } = this.state;\n\n        if (!chatId) return null;\n\n        const { unpinned_message_id } = ChatStore.getClientData(chatId);\n        if (unpinned_message_id === messageId) return null;\n\n        const message = MessageStore.get(chatId, messageId);\n        if (!message) return null;\n\n        let content = !message ? t('Loading') : getContent(message, t);\n        const photoSize = getReplyPhotoSize(chatId, messageId);\n        const minithumbnail = getReplyMinithumbnail(chatId, messageId);\n\n        if (isDeletedMessage(message)) {\n            content = t('DeletedMessage');\n        }\n\n        return (\n            <>\n                <div className='pinned-message' onMouseDown={this.handleClick}>\n                    <div className='border reply-border' />\n                    {photoSize && (\n                        <ReplyTile\n                            chatId={chatId}\n                            messageId={messageId}\n                            photoSize={photoSize}\n                            minithumbnail={minithumbnail}\n                        />\n                    )}\n                    <div className='pinned-message-content'>\n                        <div className='pinned-message-title'>{t('PinnedMessage')}</div>\n                        <div className='pinned-message-subtitle'>{content}</div>\n                    </div>\n                </div>\n                {confirm && (\n                    <Dialog\n                        transitionDuration={0}\n                        open\n                        onClose={this.handleClose}\n                        aria-labelledby='unpin-message-confirmation'>\n                        <DialogTitle id='unpin-message-confirmation'>{t('Confirm')}</DialogTitle>\n                        <DialogContent>\n                            <DialogContentText>{t('UnpinMessageAlert')}</DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={this.handleClose} color='primary'>\n                                {t('Cancel')}\n                            </Button>\n                            <Button onClick={this.handleUnpin} color='primary'>\n                                {t('Ok')}\n                            </Button>\n                        </DialogActions>\n                    </Dialog>\n                )}\n            </>\n        );\n    }\n}\n\nPinnedMessage.propTypes = {\n    chatId: PropTypes.number.isRequired\n};\n\nexport default withTranslation()(PinnedMessage);\n"]},"metadata":{},"sourceType":"module"}