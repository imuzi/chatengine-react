{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport { isChatMuted } from '../../Utils/Chat';\nimport { debounce } from '../../Utils/Common';\nimport { toggleChatNotificationSettings } from '../../Actions/Chat';\nimport { NOTIFICATION_DEBOUNCE_DELAY_MS } from '../../Constants';\nimport ChatStore from '../../Stores/ChatStore';\nimport NotificationStore from '../../Stores/NotificationStore';\n\nvar Notifications =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Notifications, _React$Component);\n\n  function Notifications(props) {\n    var _this;\n\n    _classCallCheck(this, Notifications);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Notifications).call(this, props));\n\n    _this.onUpdateChatNotificationSettings = function (update) {\n      var chat_id = update.chat_id;\n      var chatId = _this.props.chatId;\n      if (!chat_id) return;\n      if (chat_id !== chatId) return;\n\n      _this.setState({\n        isMuted: isChatMuted(chatId)\n      });\n    };\n\n    _this.onUpdateScopeNotificationSettings = function (update) {\n      var chatId = _this.props.chatId;\n      var chat = ChatStore.get(chatId);\n\n      switch (update.scope['@type']) {\n        case 'notificationSettingsScopeGroupChats':\n          {\n            if (chat.type['@type'] === 'chatTypeBasicGroup' || chat.type['@type'] === 'chatTypeSupergroup') {\n              _this.setState({\n                isMuted: isChatMuted(chatId)\n              });\n            }\n\n            break;\n          }\n\n        case 'notificationSettingsScopePrivateChats':\n          {\n            if (chat.type['@type'] === 'chatTypePrivate' || chat.type['@type'] === 'chatTypeSecret') {\n              _this.setState({\n                isMuted: isChatMuted(chatId)\n              });\n            }\n\n            break;\n          }\n      }\n    };\n\n    _this.handleSetChatNotifications = function () {\n      _this.setState({\n        isMuted: !_this.state.isMuted\n      });\n\n      _this.debouncedSetChatNotificationSettings();\n    };\n\n    _this.setChatNotificationSettings = function () {\n      var chatId = _this.props.chatId;\n      var isMuted = _this.state.isMuted;\n      toggleChatNotificationSettings(chatId, isMuted);\n    };\n\n    var _chatId = props.chatId;\n    _this.state = {\n      prevChatId: _chatId,\n      isMuted: isChatMuted(_chatId)\n    };\n    _this.debouncedSetChatNotificationSettings = debounce(_this.setChatNotificationSettings, NOTIFICATION_DEBOUNCE_DELAY_MS);\n    return _this;\n  }\n\n  _createClass(Notifications, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      ChatStore.on('updateChatNotificationSettings', this.onUpdateChatNotificationSettings);\n      NotificationStore.on('updateScopeNotificationSettings', this.onUpdateScopeNotificationSettings);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      ChatStore.off('updateChatNotificationSettings', this.onUpdateChatNotificationSettings);\n      NotificationStore.off('updateScopeNotificationSettings', this.onUpdateScopeNotificationSettings);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.chatId !== state.prevChatId) {\n        var chatId = props.chatId;\n        return {\n          prevChatId: chatId,\n          isMuted: isChatMuted(chatId)\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Notifications;\n}(React.Component);\n\nexport default Notifications;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnMiddle/Notifications.js"],"names":["React","isChatMuted","debounce","toggleChatNotificationSettings","NOTIFICATION_DEBOUNCE_DELAY_MS","ChatStore","NotificationStore","Notifications","props","onUpdateChatNotificationSettings","update","chat_id","chatId","setState","isMuted","onUpdateScopeNotificationSettings","chat","get","scope","type","handleSetChatNotifications","state","debouncedSetChatNotificationSettings","setChatNotificationSettings","prevChatId","on","off","Component"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport { isChatMuted } from '../../Utils/Chat';\nimport { debounce } from '../../Utils/Common';\nimport { toggleChatNotificationSettings } from '../../Actions/Chat';\nimport { NOTIFICATION_DEBOUNCE_DELAY_MS } from '../../Constants';\nimport ChatStore from '../../Stores/ChatStore';\nimport NotificationStore from '../../Stores/NotificationStore';\n\nclass Notifications extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const { chatId } = props;\n\n        this.state = {\n            prevChatId: chatId,\n            isMuted: isChatMuted(chatId)\n        };\n\n        this.debouncedSetChatNotificationSettings = debounce(\n            this.setChatNotificationSettings,\n            NOTIFICATION_DEBOUNCE_DELAY_MS\n        );\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.chatId !== state.prevChatId) {\n            const { chatId } = props;\n\n            return {\n                prevChatId: chatId,\n                isMuted: isChatMuted(chatId)\n            };\n        }\n        return null;\n    }\n\n    componentDidMount() {\n        ChatStore.on('updateChatNotificationSettings', this.onUpdateChatNotificationSettings);\n        NotificationStore.on('updateScopeNotificationSettings', this.onUpdateScopeNotificationSettings);\n    }\n\n    componentWillUnmount() {\n        ChatStore.off('updateChatNotificationSettings', this.onUpdateChatNotificationSettings);\n        NotificationStore.off('updateScopeNotificationSettings', this.onUpdateScopeNotificationSettings);\n    }\n\n    onUpdateChatNotificationSettings = update => {\n        const { chat_id } = update;\n        const { chatId } = this.props;\n\n        if (!chat_id) return;\n        if (chat_id !== chatId) return;\n\n        this.setState({ isMuted: isChatMuted(chatId) });\n    };\n\n    onUpdateScopeNotificationSettings = update => {\n        const { chatId } = this.props;\n        const chat = ChatStore.get(chatId);\n\n        switch (update.scope['@type']) {\n            case 'notificationSettingsScopeGroupChats': {\n                if (chat.type['@type'] === 'chatTypeBasicGroup' || chat.type['@type'] === 'chatTypeSupergroup') {\n                    this.setState({ isMuted: isChatMuted(chatId) });\n                }\n                break;\n            }\n            case 'notificationSettingsScopePrivateChats': {\n                if (chat.type['@type'] === 'chatTypePrivate' || chat.type['@type'] === 'chatTypeSecret') {\n                    this.setState({ isMuted: isChatMuted(chatId) });\n                }\n                break;\n            }\n        }\n    };\n\n    handleSetChatNotifications = () => {\n        this.setState({ isMuted: !this.state.isMuted });\n        this.debouncedSetChatNotificationSettings();\n    };\n\n    setChatNotificationSettings = () => {\n        const { chatId } = this.props;\n        const { isMuted } = this.state;\n\n        toggleChatNotificationSettings(chatId, isMuted);\n    };\n}\n\nexport default Notifications;\n"]},"metadata":{},"sourceType":"module"}