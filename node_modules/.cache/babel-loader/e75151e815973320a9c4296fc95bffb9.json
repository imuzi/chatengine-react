{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport EventEmitter from './EventEmitter';\nimport TdLibController from '../Controllers/TdLibController';\n\nvar BasicGroupStore =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(BasicGroupStore, _EventEmitter);\n\n  function BasicGroupStore() {\n    var _this;\n\n    _classCallCheck(this, BasicGroupStore);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BasicGroupStore).call(this));\n\n    _this.reset = function () {\n      _this.items = new Map();\n      _this.fullInfoItems = new Map();\n    };\n\n    _this.onUpdate = function (update) {\n      switch (update['@type']) {\n        case 'updateAuthorizationState':\n          {\n            var authorization_state = update.authorization_state;\n            if (!authorization_state) break;\n\n            switch (authorization_state['@type']) {\n              case 'authorizationStateClosed':\n                {\n                  _this.reset();\n\n                  break;\n                }\n            }\n\n            break;\n          }\n\n        case 'updateBasicGroup':\n          {\n            _this.set(update.basic_group);\n\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'updateBasicGroupFullInfo':\n          {\n            _this.setFullInfo(update.basic_group_id, update.basic_group_full_info);\n\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    _this.onClientUpdate = function (update) {};\n\n    _this.addTdLibListener = function () {\n      TdLibController.on('update', _this.onUpdate);\n      TdLibController.on('clientUpdate', _this.onClientUpdate);\n    };\n\n    _this.removeTdLibListener = function () {\n      TdLibController.off('update', _this.onUpdate);\n      TdLibController.off('clientUpdate', _this.onClientUpdate);\n    };\n\n    _this.reset();\n\n    _this.addTdLibListener();\n\n    return _this;\n  }\n\n  _createClass(BasicGroupStore, [{\n    key: \"get\",\n    value: function get(groupId) {\n      return this.items.get(groupId);\n    }\n  }, {\n    key: \"set\",\n    value: function set(group) {\n      this.items.set(group.id, group);\n    }\n  }, {\n    key: \"getFullInfo\",\n    value: function getFullInfo(id) {\n      return this.fullInfoItems.get(id);\n    }\n  }, {\n    key: \"setFullInfo\",\n    value: function setFullInfo(id, fullInfo) {\n      this.fullInfoItems.set(id, fullInfo);\n    }\n  }]);\n\n  return BasicGroupStore;\n}(EventEmitter);\n\nvar store = new BasicGroupStore();\nwindow.basicgroup = store;\nexport default store;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Stores/BasicGroupStore.js"],"names":["EventEmitter","TdLibController","BasicGroupStore","reset","items","Map","fullInfoItems","onUpdate","update","authorization_state","set","basic_group","emit","setFullInfo","basic_group_id","basic_group_full_info","onClientUpdate","addTdLibListener","on","removeTdLibListener","off","groupId","get","group","id","fullInfo","store","window","basicgroup"],"mappings":";;;;;;AAAA;;;;;;AAOA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,OAAOC,eAAP,MAA4B,gCAA5B;;IAEMC,e;;;;;AACF,6BAAc;AAAA;;AAAA;;AACV;;AADU,UAQdC,KARc,GAQN,YAAM;AACV,YAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACA,YAAKC,aAAL,GAAqB,IAAID,GAAJ,EAArB;AACH,KAXa;;AAAA,UAadE,QAbc,GAaH,UAAAC,MAAM,EAAI;AACjB,cAAQA,MAAM,CAAC,OAAD,CAAd;AACI,aAAK,0BAAL;AAAiC;AAAA,gBACrBC,mBADqB,GACGD,MADH,CACrBC,mBADqB;AAE7B,gBAAI,CAACA,mBAAL,EAA0B;;AAE1B,oBAAQA,mBAAmB,CAAC,OAAD,CAA3B;AACI,mBAAK,0BAAL;AAAiC;AAC7B,wBAAKN,KAAL;;AACA;AACH;AAJL;;AAOA;AACH;;AACD,aAAK,kBAAL;AAAyB;AACrB,kBAAKO,GAAL,CAASF,MAAM,CAACG,WAAhB;;AAEA,kBAAKC,IAAL,CAAUJ,MAAM,CAAC,OAAD,CAAhB,EAA2BA,MAA3B;;AACA;AACH;;AACD,aAAK,0BAAL;AAAiC;AAC7B,kBAAKK,WAAL,CAAiBL,MAAM,CAACM,cAAxB,EAAwCN,MAAM,CAACO,qBAA/C;;AAEA,kBAAKH,IAAL,CAAUJ,MAAM,CAAC,OAAD,CAAhB,EAA2BA,MAA3B;;AACA;AACH;;AACD;AACI;AA3BR;AA6BH,KA3Ca;;AAAA,UA6CdQ,cA7Cc,GA6CG,UAAAR,MAAM,EAAI,CAAE,CA7Cf;;AAAA,UA+CdS,gBA/Cc,GA+CK,YAAM;AACrBhB,MAAAA,eAAe,CAACiB,EAAhB,CAAmB,QAAnB,EAA6B,MAAKX,QAAlC;AACAN,MAAAA,eAAe,CAACiB,EAAhB,CAAmB,cAAnB,EAAmC,MAAKF,cAAxC;AACH,KAlDa;;AAAA,UAoDdG,mBApDc,GAoDQ,YAAM;AACxBlB,MAAAA,eAAe,CAACmB,GAAhB,CAAoB,QAApB,EAA8B,MAAKb,QAAnC;AACAN,MAAAA,eAAe,CAACmB,GAAhB,CAAoB,cAApB,EAAoC,MAAKJ,cAAzC;AACH,KAvDa;;AAGV,UAAKb,KAAL;;AAEA,UAAKc,gBAAL;;AALU;AAMb;;;;wBAmDGI,O,EAAS;AACT,aAAO,KAAKjB,KAAL,CAAWkB,GAAX,CAAeD,OAAf,CAAP;AACH;;;wBAEGE,K,EAAO;AACP,WAAKnB,KAAL,CAAWM,GAAX,CAAea,KAAK,CAACC,EAArB,EAAyBD,KAAzB;AACH;;;gCAEWC,E,EAAI;AACZ,aAAO,KAAKlB,aAAL,CAAmBgB,GAAnB,CAAuBE,EAAvB,CAAP;AACH;;;gCAEWA,E,EAAIC,Q,EAAU;AACtB,WAAKnB,aAAL,CAAmBI,GAAnB,CAAuBc,EAAvB,EAA2BC,QAA3B;AACH;;;;EAxEyBzB,Y;;AA2E9B,IAAM0B,KAAK,GAAG,IAAIxB,eAAJ,EAAd;AACAyB,MAAM,CAACC,UAAP,GAAoBF,KAApB;AACA,eAAeA,KAAf","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport EventEmitter from './EventEmitter';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass BasicGroupStore extends EventEmitter {\n    constructor() {\n        super();\n\n        this.reset();\n\n        this.addTdLibListener();\n    }\n\n    reset = () => {\n        this.items = new Map();\n        this.fullInfoItems = new Map();\n    };\n\n    onUpdate = update => {\n        switch (update['@type']) {\n            case 'updateAuthorizationState': {\n                const { authorization_state } = update;\n                if (!authorization_state) break;\n\n                switch (authorization_state['@type']) {\n                    case 'authorizationStateClosed': {\n                        this.reset();\n                        break;\n                    }\n                }\n\n                break;\n            }\n            case 'updateBasicGroup': {\n                this.set(update.basic_group);\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'updateBasicGroupFullInfo': {\n                this.setFullInfo(update.basic_group_id, update.basic_group_full_info);\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    onClientUpdate = update => {};\n\n    addTdLibListener = () => {\n        TdLibController.on('update', this.onUpdate);\n        TdLibController.on('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.off('update', this.onUpdate);\n        TdLibController.off('clientUpdate', this.onClientUpdate);\n    };\n\n    get(groupId) {\n        return this.items.get(groupId);\n    }\n\n    set(group) {\n        this.items.set(group.id, group);\n    }\n\n    getFullInfo(id) {\n        return this.fullInfoItems.get(id);\n    }\n\n    setFullInfo(id, fullInfo) {\n        this.fullInfoItems.set(id, fullInfo);\n    }\n}\n\nconst store = new BasicGroupStore();\nwindow.basicgroup = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}