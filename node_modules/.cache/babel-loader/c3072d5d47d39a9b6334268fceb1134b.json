{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Message/Media/VideoNote.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\nimport DownloadIcon from '../../../Assets/Icons/Download';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport FileProgress from '../../Viewer/FileProgress';\nimport MediaStatus from './MediaStatus';\nimport { getFileSize, getSrc } from '../../../Utils/File';\nimport { isBlurredThumbnail } from '../../../Utils/Media';\nimport { clamp, getDurationString } from '../../../Utils/Common';\nimport { PHOTO_DISPLAY_SIZE, PHOTO_SIZE } from '../../../Constants';\nimport PlayerStore from '../../../Stores/PlayerStore';\nimport FileStore from '../../../Stores/FileStore';\nimport MessageStore from '../../../Stores/MessageStore';\nimport ApplicationStore from '../../../Stores/ApplicationStore';\nimport './VideoNote.css';\nimport InstantViewStore from '../../../Stores/InstantViewStore';\nvar circleStyle = {\n  circle: 'video-note-progress-circle'\n};\n\nvar VideoNote =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(VideoNote, _React$Component);\n\n  function VideoNote(props) {\n    var _this;\n\n    _classCallCheck(this, VideoNote);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VideoNote).call(this, props));\n\n    _this.startStopPlayer = function () {\n      var player = _this.videoRef.current;\n\n      if (player) {\n        if (_this.inView && _this.windowFocused && !_this.openMediaViewer && !_this.openProfileMediaViewer && !_this.openIV) {\n          player.play();\n        } else {\n          if (_this.state.active) {\n            return;\n          }\n\n          player.pause();\n        }\n      }\n    };\n\n    _this.onClientUpdateInstantViewContent = function (update) {\n      _this.openIV = Boolean(InstantViewStore.getCurrent());\n\n      _this.startStopPlayer();\n    };\n\n    _this.onClientUpdateProfileMediaViewerContent = function (update) {\n      _this.openProfileMediaViewer = Boolean(ApplicationStore.profileMediaViewerContent);\n\n      _this.startStopPlayer();\n    };\n\n    _this.onClientUpdateMediaViewerContent = function (update) {\n      _this.openMediaViewer = Boolean(ApplicationStore.mediaViewerContent);\n\n      _this.startStopPlayer();\n    };\n\n    _this.onClientUpdateFocusWindow = function (update) {\n      _this.windowFocused = update.focused;\n\n      _this.startStopPlayer();\n    };\n\n    _this.onClientUpdateMessagesInView = function (update) {\n      var _this$props = _this.props,\n          chatId = _this$props.chatId,\n          messageId = _this$props.messageId;\n      var key = \"\".concat(chatId, \"_\").concat(messageId);\n      _this.inView = update.messages.has(key);\n\n      _this.startStopPlayer();\n    };\n\n    _this.onClientUpdateMediaCaptureStream = function (update) {\n      var _this$props2 = _this.props,\n          chatId = _this$props2.chatId,\n          messageId = _this$props2.messageId;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        var player = _this.videoRef.current;\n\n        if (player) {\n          _this.setState({\n            srcObject: update.stream\n          }, function () {\n            _this.updateVideoSrc();\n          });\n        }\n      }\n    };\n\n    _this.onClientUpdateMediaTime = function (update) {\n      var _this$props3 = _this.props,\n          chatId = _this$props3.chatId,\n          messageId = _this$props3.messageId;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        var player = _this.videoRef.current;\n\n        if (player) {\n          _this.setState({\n            currentTime: update.currentTime,\n            videoDuration: update.duration\n          });\n        }\n      }\n    };\n\n    _this.onClientUpdateMediaEnd = function (update) {\n      var _this$props4 = _this.props,\n          chatId = _this$props4.chatId,\n          messageId = _this$props4.messageId;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        _this.setState({\n          active: false,\n          srcObject: null,\n          currentTime: 0\n        }, function () {\n          var player = _this.videoRef.current;\n          if (!player) return;\n\n          _this.updateVideoSrc();\n\n          if (!window.hasFocus) {\n            player.pause();\n          }\n        });\n      }\n    };\n\n    _this.onClientUpdateMediaActive = function (update) {\n      var _this$props5 = _this.props,\n          chatId = _this$props5.chatId,\n          messageId = _this$props5.messageId;\n      var video = _this.props.videoNote.video;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        if (_this.state.active) {} else {\n          _this.setState({\n            active: true,\n            currentTime: null\n          });\n        }\n      } else if (_this.state.active) {\n        _this.setState({\n          active: false,\n          srcObject: null,\n          currentTime: 0\n        }, function () {\n          var player = _this.videoRef.current;\n          if (!player) return;\n\n          _this.updateVideoSrc();\n\n          if (!window.hasFocus) {\n            player.pause();\n          }\n        });\n      }\n    };\n\n    _this.onClientUpdateVideoNoteBlob = function (update) {\n      var video = _this.props.videoNote.video;\n      var fileId = update.fileId;\n      if (!video) return;\n\n      if (video.id === fileId) {\n        _this.setState({\n          src: getSrc(video)\n        }, function () {\n          _this.updateVideoSrc();\n        });\n      }\n    };\n\n    _this.onClientUpdateVideoNoteThumbnailBlob = function (update) {\n      var thumbnail = _this.props.videoNote.thumbnail;\n      if (!thumbnail) return;\n      var fileId = update.fileId;\n\n      if (thumbnail.photo && thumbnail.photo.id === fileId) {\n        _this.forceUpdate();\n      }\n    };\n\n    _this.handleCanPlay = function () {// const player = this.videoRef.current;\n      // if (player){\n      //     if (this.state.active){\n      //         player.muted = false;\n      //     }\n      //     else{\n      //         player.muted = true;\n      //     }\n      // }\n    };\n\n    _this.videoRef = React.createRef();\n    _this.sourceRef = React.createRef();\n    var _chatId = props.chatId,\n        _messageId = props.messageId;\n    var _video = props.videoNote.video;\n    var time = PlayerStore.time,\n        message = PlayerStore.message,\n        videoStream = PlayerStore.videoStream;\n    var active = message && message.chat_id === _chatId && message.id === _messageId;\n    _this.state = {\n      active: active,\n      srcObject: active ? videoStream : null,\n      src: getSrc(_video),\n      currentTime: active && time ? time.currentTime : 0.0,\n      videoDuration: active && time ? time.duration : 0.0\n    };\n    _this.windowFocused = window.hasFocus;\n    _this.inView = false;\n    _this.openMediaViewer = Boolean(ApplicationStore.mediaViewerContent);\n    _this.openProfileMediaViewer = Boolean(ApplicationStore.profileMediaViewerContent);\n    _this.openIV = Boolean(InstantViewStore.getCurrent());\n    return _this;\n  }\n\n  _createClass(VideoNote, [{\n    key: \"updateVideoSrc\",\n    value: function updateVideoSrc() {\n      var _this$state = this.state,\n          srcObject = _this$state.srcObject,\n          src = _this$state.src;\n      var player = this.videoRef.current;\n      if (!player) return;\n\n      if (srcObject) {\n        //player.scr = null;\n        player.srcObject = srcObject;\n        return;\n      }\n\n      var stream = player.srcObject;\n\n      if (stream) {\n        //console.log('clientUpdate release srcObject');\n        var tracks = stream.getTracks();\n        tracks.forEach(function (track) {\n          //console.log('clientUpdate release track');\n          track.stop();\n        });\n      }\n\n      if (player.srcObject) {\n        //console.log('clientUpdate release video.srcObject');\n        player.srcObject = null;\n      }\n\n      var source = this.sourceRef.current;\n      if (!source) return;\n\n      if (source.src !== src) {\n        source.src = src;\n        player.load();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateVideoSrc();\n      FileStore.on('clientUpdateVideoNoteThumbnailBlob', this.onClientUpdateVideoNoteThumbnailBlob);\n      FileStore.on('clientUpdateVideoNoteBlob', this.onClientUpdateVideoNoteBlob);\n      MessageStore.on('clientUpdateMessagesInView', this.onClientUpdateMessagesInView);\n      ApplicationStore.on('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n      ApplicationStore.on('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n      ApplicationStore.on('clientUpdateProfileMediaViewerContent', this.onClientUpdateProfileMediaViewerContent);\n      InstantViewStore.on('clientUpdateInstantViewContent', this.onClientUpdateInstantViewContent);\n      PlayerStore.on('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n      PlayerStore.on('clientUpdateMediaCaptureStream', this.onClientUpdateMediaCaptureStream);\n      PlayerStore.on('clientUpdateMediaTime', this.onClientUpdateMediaTime);\n      PlayerStore.on('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      FileStore.off('clientUpdateVideoNoteThumbnailBlob', this.onClientUpdateVideoNoteThumbnailBlob);\n      FileStore.off('clientUpdateVideoNoteBlob', this.onClientUpdateVideoNoteBlob);\n      MessageStore.off('clientUpdateMessagesInView', this.onClientUpdateMessagesInView);\n      ApplicationStore.off('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n      ApplicationStore.off('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n      ApplicationStore.off('clientUpdateProfileMediaViewerContent', this.onClientUpdateProfileMediaViewerContent);\n      InstantViewStore.off('clientUpdateInstantViewContent', this.onClientUpdateInstantViewContent);\n      PlayerStore.off('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n      PlayerStore.off('clientUpdateMediaCaptureStream', this.onClientUpdateMediaCaptureStream);\n      PlayerStore.off('clientUpdateMediaTime', this.onClientUpdateMediaTime);\n      PlayerStore.off('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          displaySize = _this$props6.displaySize,\n          chatId = _this$props6.chatId,\n          messageId = _this$props6.messageId,\n          openMedia = _this$props6.openMedia;\n      var _this$state2 = this.state,\n          active = _this$state2.active,\n          currentTime = _this$state2.currentTime,\n          videoDuration = _this$state2.videoDuration;\n      var _this$props$videoNote = this.props.videoNote,\n          minithumbnail = _this$props$videoNote.minithumbnail,\n          thumbnail = _this$props$videoNote.thumbnail,\n          video = _this$props$videoNote.video,\n          duration = _this$props$videoNote.duration;\n      var message = MessageStore.get(chatId, messageId);\n      if (!message) return null;\n      var style = {\n        width: 200,\n        height: 200\n      };\n      if (!style) return null;\n      var miniSrc = minithumbnail ? 'data:image/jpeg;base64, ' + minithumbnail.data : null;\n      var thumbnailSrc = getSrc(thumbnail ? thumbnail.photo : null);\n      var src = getSrc(video);\n      var isBlurred = thumbnailSrc ? isBlurredThumbnail(thumbnail) : Boolean(miniSrc);\n      var progress = 0;\n\n      if (videoDuration && currentTime) {\n        var progressTime = currentTime + 0.25;\n        progress = clamp(progressTime / videoDuration * 100, 0, 100);\n      }\n\n      return React.createElement(\"div\", {\n        className: classNames('video-note', {\n          'video-note-playing': active\n        }),\n        style: style,\n        onClick: openMedia,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }, src ? React.createElement(React.Fragment, null, React.createElement(\"video\", {\n        ref: this.videoRef,\n        className: classNames('media-viewer-content-image', 'video-note-round'),\n        poster: thumbnailSrc || miniSrc,\n        muted: true,\n        autoPlay: true,\n        loop: true,\n        playsInline: true,\n        width: style.width,\n        height: style.height,\n        onCanPlay: this.handleCanPlay,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338\n        },\n        __self: this\n      }, React.createElement(\"source\", {\n        ref: this.sourceRef,\n        src: null,\n        type: \"video/mp4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"video-note-player\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"video-note-progress\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353\n        },\n        __self: this\n      }, React.createElement(CircularProgress, {\n        classes: circleStyle,\n        variant: \"static\",\n        value: progress,\n        size: 200,\n        thickness: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"animation-meta\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362\n        },\n        __self: this\n      }, getDurationString(active ? Math.floor(currentTime) : duration), React.createElement(MediaStatus, {\n        chatId: chatId,\n        messageId: messageId,\n        icon: \"\\xA0\\u2022\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"video-note-muted\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366\n        },\n        __self: this\n      }, React.createElement(VolumeOffIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        },\n        __self: this\n      })))) : React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"video-note-round\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: classNames('animation-preview', {\n          'media-blurred': isBlurred,\n          'media-mini-blurred': !src && !thumbnailSrc && isBlurred\n        }),\n        style: style,\n        src: thumbnailSrc || miniSrc,\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"animation-meta\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384\n        },\n        __self: this\n      }, getDurationString(duration) + ' ' + getFileSize(video), React.createElement(MediaStatus, {\n        chatId: chatId,\n        messageId: messageId,\n        icon: \"\\xA0\\u2022\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"video-note-muted\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388\n        },\n        __self: this\n      }, React.createElement(VolumeOffIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389\n        },\n        __self: this\n      }))), React.createElement(FileProgress, {\n        file: video,\n        download: true,\n        upload: true,\n        cancelButton: true,\n        icon: React.createElement(DownloadIcon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 393\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return VideoNote;\n}(React.Component);\n\nVideoNote.propTypes = {\n  chatId: PropTypes.number.isRequired,\n  messageId: PropTypes.number.isRequired,\n  videoNote: PropTypes.object.isRequired,\n  openMedia: PropTypes.func,\n  size: PropTypes.number,\n  displaySize: PropTypes.number\n};\nVideoNote.defaultProps = {\n  size: PHOTO_SIZE,\n  displaySize: PHOTO_DISPLAY_SIZE\n};\nexport default VideoNote;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Message/Media/VideoNote.js"],"names":["React","PropTypes","classNames","VolumeOffIcon","DownloadIcon","CircularProgress","FileProgress","MediaStatus","getFileSize","getSrc","isBlurredThumbnail","clamp","getDurationString","PHOTO_DISPLAY_SIZE","PHOTO_SIZE","PlayerStore","FileStore","MessageStore","ApplicationStore","InstantViewStore","circleStyle","circle","VideoNote","props","startStopPlayer","player","videoRef","current","inView","windowFocused","openMediaViewer","openProfileMediaViewer","openIV","play","state","active","pause","onClientUpdateInstantViewContent","update","Boolean","getCurrent","onClientUpdateProfileMediaViewerContent","profileMediaViewerContent","onClientUpdateMediaViewerContent","mediaViewerContent","onClientUpdateFocusWindow","focused","onClientUpdateMessagesInView","chatId","messageId","key","messages","has","onClientUpdateMediaCaptureStream","setState","srcObject","stream","updateVideoSrc","onClientUpdateMediaTime","currentTime","videoDuration","duration","onClientUpdateMediaEnd","window","hasFocus","onClientUpdateMediaActive","video","videoNote","onClientUpdateVideoNoteBlob","fileId","id","src","onClientUpdateVideoNoteThumbnailBlob","thumbnail","photo","forceUpdate","handleCanPlay","createRef","sourceRef","time","message","videoStream","chat_id","tracks","getTracks","forEach","track","stop","source","load","on","off","displaySize","openMedia","minithumbnail","get","style","width","height","miniSrc","data","thumbnailSrc","isBlurred","progress","progressTime","Math","floor","Component","propTypes","number","isRequired","object","func","size","defaultProps"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\nimport DownloadIcon from '../../../Assets/Icons/Download';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport FileProgress from '../../Viewer/FileProgress';\nimport MediaStatus from './MediaStatus';\nimport { getFileSize, getSrc } from '../../../Utils/File';\nimport { isBlurredThumbnail } from '../../../Utils/Media';\nimport { clamp, getDurationString } from '../../../Utils/Common';\nimport { PHOTO_DISPLAY_SIZE, PHOTO_SIZE } from '../../../Constants';\nimport PlayerStore from '../../../Stores/PlayerStore';\nimport FileStore from '../../../Stores/FileStore';\nimport MessageStore from '../../../Stores/MessageStore';\nimport ApplicationStore from '../../../Stores/ApplicationStore';\nimport './VideoNote.css';\nimport InstantViewStore from '../../../Stores/InstantViewStore';\n\nconst circleStyle = {\n    circle: 'video-note-progress-circle'\n};\n\nclass VideoNote extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.videoRef = React.createRef();\n        this.sourceRef = React.createRef();\n\n        const { chatId, messageId } = props;\n        const { video } = props.videoNote;\n\n        const { time, message, videoStream } = PlayerStore;\n        const active = message && message.chat_id === chatId && message.id === messageId;\n\n        this.state = {\n            active: active,\n            srcObject: active ? videoStream : null,\n            src: getSrc(video),\n            currentTime: active && time ? time.currentTime : 0.0,\n            videoDuration: active && time ? time.duration : 0.0\n        };\n\n        this.windowFocused = window.hasFocus;\n        this.inView = false;\n        this.openMediaViewer = Boolean(ApplicationStore.mediaViewerContent);\n        this.openProfileMediaViewer = Boolean(ApplicationStore.profileMediaViewerContent);\n        this.openIV = Boolean(InstantViewStore.getCurrent());\n    }\n\n    updateVideoSrc() {\n        const { srcObject, src } = this.state;\n\n        const player = this.videoRef.current;\n        if (!player) return;\n\n        if (srcObject) {\n            //player.scr = null;\n            player.srcObject = srcObject;\n            return;\n        }\n\n        const stream = player.srcObject;\n        if (stream) {\n            //console.log('clientUpdate release srcObject');\n            const tracks = stream.getTracks();\n\n            tracks.forEach(track => {\n                //console.log('clientUpdate release track');\n                track.stop();\n            });\n        }\n\n        if (player.srcObject) {\n            //console.log('clientUpdate release video.srcObject');\n            player.srcObject = null;\n        }\n\n        const source = this.sourceRef.current;\n        if (!source) return;\n\n        if (source.src !== src) {\n            source.src = src;\n            player.load();\n        }\n    }\n\n    componentDidMount() {\n        this.updateVideoSrc();\n\n        FileStore.on('clientUpdateVideoNoteThumbnailBlob', this.onClientUpdateVideoNoteThumbnailBlob);\n        FileStore.on('clientUpdateVideoNoteBlob', this.onClientUpdateVideoNoteBlob);\n\n        MessageStore.on('clientUpdateMessagesInView', this.onClientUpdateMessagesInView);\n\n        ApplicationStore.on('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n        ApplicationStore.on('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n        ApplicationStore.on('clientUpdateProfileMediaViewerContent', this.onClientUpdateProfileMediaViewerContent);\n        InstantViewStore.on('clientUpdateInstantViewContent', this.onClientUpdateInstantViewContent);\n\n        PlayerStore.on('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.on('clientUpdateMediaCaptureStream', this.onClientUpdateMediaCaptureStream);\n        PlayerStore.on('clientUpdateMediaTime', this.onClientUpdateMediaTime);\n        PlayerStore.on('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n    }\n\n    componentWillUnmount() {\n        FileStore.off('clientUpdateVideoNoteThumbnailBlob', this.onClientUpdateVideoNoteThumbnailBlob);\n        FileStore.off('clientUpdateVideoNoteBlob', this.onClientUpdateVideoNoteBlob);\n\n        MessageStore.off('clientUpdateMessagesInView', this.onClientUpdateMessagesInView);\n\n        ApplicationStore.off('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n        ApplicationStore.off('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n        ApplicationStore.off('clientUpdateProfileMediaViewerContent', this.onClientUpdateProfileMediaViewerContent);\n        InstantViewStore.off('clientUpdateInstantViewContent', this.onClientUpdateInstantViewContent);\n\n        PlayerStore.off('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.off('clientUpdateMediaCaptureStream', this.onClientUpdateMediaCaptureStream);\n        PlayerStore.off('clientUpdateMediaTime', this.onClientUpdateMediaTime);\n        PlayerStore.off('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n    }\n\n    startStopPlayer = () => {\n        const player = this.videoRef.current;\n        if (player) {\n            if (\n                this.inView &&\n                this.windowFocused &&\n                !this.openMediaViewer &&\n                !this.openProfileMediaViewer &&\n                !this.openIV\n            ) {\n                player.play();\n            } else {\n                if (this.state.active) {\n                    return;\n                }\n\n                player.pause();\n            }\n        }\n    };\n\n    onClientUpdateInstantViewContent = update => {\n        this.openIV = Boolean(InstantViewStore.getCurrent());\n\n        this.startStopPlayer();\n    };\n\n    onClientUpdateProfileMediaViewerContent = update => {\n        this.openProfileMediaViewer = Boolean(ApplicationStore.profileMediaViewerContent);\n\n        this.startStopPlayer();\n    };\n\n    onClientUpdateMediaViewerContent = update => {\n        this.openMediaViewer = Boolean(ApplicationStore.mediaViewerContent);\n\n        this.startStopPlayer();\n    };\n\n    onClientUpdateFocusWindow = update => {\n        this.windowFocused = update.focused;\n\n        this.startStopPlayer();\n    };\n\n    onClientUpdateMessagesInView = update => {\n        const { chatId, messageId } = this.props;\n        const key = `${chatId}_${messageId}`;\n\n        this.inView = update.messages.has(key);\n\n        this.startStopPlayer();\n    };\n\n    onClientUpdateMediaCaptureStream = update => {\n        const { chatId, messageId } = this.props;\n        if (chatId === update.chatId && messageId === update.messageId) {\n            const player = this.videoRef.current;\n            if (player) {\n                this.setState({ srcObject: update.stream }, () => {\n                    this.updateVideoSrc();\n                });\n            }\n        }\n    };\n\n    onClientUpdateMediaTime = update => {\n        const { chatId, messageId } = this.props;\n        if (chatId === update.chatId && messageId === update.messageId) {\n            const player = this.videoRef.current;\n            if (player) {\n                this.setState({\n                    currentTime: update.currentTime,\n                    videoDuration: update.duration\n                });\n            }\n        }\n    };\n\n    onClientUpdateMediaEnd = update => {\n        const { chatId, messageId } = this.props;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            this.setState(\n                {\n                    active: false,\n                    srcObject: null,\n                    currentTime: 0\n                },\n                () => {\n                    const player = this.videoRef.current;\n                    if (!player) return;\n\n                    this.updateVideoSrc();\n\n                    if (!window.hasFocus) {\n                        player.pause();\n                    }\n                }\n            );\n        }\n    };\n\n    onClientUpdateMediaActive = update => {\n        const { chatId, messageId } = this.props;\n        const { video } = this.props.videoNote;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            if (this.state.active) {\n            } else {\n                this.setState({\n                    active: true,\n                    currentTime: null\n                });\n            }\n        } else if (this.state.active) {\n            this.setState(\n                {\n                    active: false,\n                    srcObject: null,\n                    currentTime: 0\n                },\n                () => {\n                    const player = this.videoRef.current;\n                    if (!player) return;\n\n                    this.updateVideoSrc();\n\n                    if (!window.hasFocus) {\n                        player.pause();\n                    }\n                }\n            );\n        }\n    };\n\n    onClientUpdateVideoNoteBlob = update => {\n        const { video } = this.props.videoNote;\n        const { fileId } = update;\n\n        if (!video) return;\n\n        if (video.id === fileId) {\n            this.setState(\n                {\n                    src: getSrc(video)\n                },\n                () => {\n                    this.updateVideoSrc();\n                }\n            );\n        }\n    };\n\n    onClientUpdateVideoNoteThumbnailBlob = update => {\n        const { thumbnail } = this.props.videoNote;\n        if (!thumbnail) return;\n\n        const { fileId } = update;\n\n        if (thumbnail.photo && thumbnail.photo.id === fileId) {\n            this.forceUpdate();\n        }\n    };\n\n    handleCanPlay = () => {\n        // const player = this.videoRef.current;\n        // if (player){\n        //     if (this.state.active){\n        //         player.muted = false;\n        //     }\n        //     else{\n        //         player.muted = true;\n        //     }\n        // }\n    };\n\n    render() {\n        const { displaySize, chatId, messageId, openMedia } = this.props;\n        const { active, currentTime, videoDuration } = this.state;\n        const { minithumbnail, thumbnail, video, duration } = this.props.videoNote;\n\n        const message = MessageStore.get(chatId, messageId);\n        if (!message) return null;\n\n        const style = { width: 200, height: 200 };\n        if (!style) return null;\n\n        const miniSrc = minithumbnail ? 'data:image/jpeg;base64, ' + minithumbnail.data : null;\n        const thumbnailSrc = getSrc(thumbnail ? thumbnail.photo : null);\n        const src = getSrc(video);\n        const isBlurred = thumbnailSrc ? isBlurredThumbnail(thumbnail) : Boolean(miniSrc);\n\n        let progress = 0;\n        if (videoDuration && currentTime) {\n            const progressTime = currentTime + 0.25;\n            progress = clamp(progressTime / videoDuration * 100, 0, 100);\n        }\n\n        return (\n            <div\n                className={classNames('video-note', { 'video-note-playing': active })}\n                style={style}\n                onClick={openMedia}>\n                {src ? (\n                    <>\n                        <video\n                            ref={this.videoRef}\n                            className={classNames('media-viewer-content-image', 'video-note-round')}\n                            poster={thumbnailSrc || miniSrc}\n                            muted\n                            autoPlay\n                            loop\n                            playsInline\n                            width={style.width}\n                            height={style.height}\n                            onCanPlay={this.handleCanPlay}\n                        >\n                            <source ref={this.sourceRef} src={null} type='video/mp4'/>\n                        </video>\n                        <div className='video-note-player'>\n                            <div className='video-note-progress'>\n                                <CircularProgress\n                                    classes={circleStyle}\n                                    variant='static'\n                                    value={progress}\n                                    size={200}\n                                    thickness={1}\n                                />\n                            </div>\n                            <div className='animation-meta'>\n                                {getDurationString(active ? Math.floor(currentTime) : duration)}\n                                <MediaStatus chatId={chatId} messageId={messageId} icon={'\\u00A0•'} />\n                            </div>\n                            <div className='video-note-muted'>\n                                <VolumeOffIcon />\n                            </div>\n                        </div>\n                    </>\n                ) : (\n                    <>\n                        <div className='video-note-round'>\n                            <img\n                                className={classNames('animation-preview', {\n                                    'media-blurred': isBlurred,\n                                    'media-mini-blurred': !src && !thumbnailSrc && isBlurred\n                                })}\n                                style={style}\n                                src={thumbnailSrc || miniSrc}\n                                alt=''\n                            />\n                        </div>\n                        <div className='animation-meta'>\n                            {getDurationString(duration) + ' ' + getFileSize(video)}\n                            <MediaStatus chatId={chatId} messageId={messageId} icon={'\\u00A0•'} />\n                        </div>\n                        <div className='video-note-muted'>\n                            <VolumeOffIcon />\n                        </div>\n                    </>\n                )}\n                <FileProgress file={video} download upload cancelButton icon={<DownloadIcon />} />\n            </div>\n        );\n    }\n}\n\nVideoNote.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    messageId: PropTypes.number.isRequired,\n    videoNote: PropTypes.object.isRequired,\n    openMedia: PropTypes.func,\n    size: PropTypes.number,\n    displaySize: PropTypes.number\n};\n\nVideoNote.defaultProps = {\n    size: PHOTO_SIZE,\n    displaySize: PHOTO_DISPLAY_SIZE\n};\n\nexport default VideoNote;\n"]},"metadata":{},"sourceType":"module"}