{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Popup/SidebarDialog.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport Contacts from '../ColumnLeft/Contacts';\nimport DialogsHeader from '../ColumnLeft/DialogsHeader';\nimport Search from '../ColumnLeft/Search/Search';\nimport Settings from '../ColumnLeft/Settings/Settings';\nimport AppStore from '../../Stores/ApplicationStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport './ChatInfoDialog.css';\nimport { openChat } from '../../Actions/Client';\n\nvar SidebarDialog =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SidebarDialog, _React$Component);\n\n  function SidebarDialog(props) {\n    var _this;\n\n    _classCallCheck(this, SidebarDialog);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SidebarDialog).call(this, props));\n\n    _this.onClientUpdateSearchChat = function (update) {\n      var isSmallWidth = AppStore.isSmallWidth;\n      if (!isSmallWidth) return;\n      var chatId = update.chatId,\n          query = update.query;\n      var _this$state = _this.state,\n          openSearch = _this$state.openSearch,\n          searchChatId = _this$state.searchChatId,\n          searchText = _this$state.searchText;\n\n      if (openSearch && chatId === searchChatId && query === searchText) {\n        return;\n      }\n\n      _this.query = query;\n\n      _this.setState({\n        openSearch: true,\n        searchChatId: chatId,\n        searchText: null\n      });\n    };\n\n    _this.handleDialogEnter = function () {\n      if (!_this.query) return;\n      var header = _this.headerRef.current;\n\n      if (header) {\n        header.setInitQuery(_this.query);\n      }\n\n      _this.query = null;\n    };\n\n    _this.onClientUpdateSettings = function (update) {\n      var isSmallWidth = AppStore.isSmallWidth;\n      if (!isSmallWidth) return;\n      var open = update.open,\n          chatId = update.chatId;\n\n      _this.setState({\n        openSettings: open,\n        meChatId: chatId\n      });\n    };\n\n    _this.onClientUpdateContacts =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(update) {\n        var isSmallWidth, open;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                isSmallWidth = AppStore.isSmallWidth;\n\n                if (isSmallWidth) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                open = update.open;\n\n                _this.setState({\n                  openContacts: open\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.handleClose = function () {\n      _this.setState({\n        openSettings: false,\n        openContacts: false,\n        openSearch: false\n      });\n    };\n\n    _this.handleSearch = function (visible) {\n      _this.setState({\n        openSearch: visible,\n        searchChatId: 0,\n        searchText: null\n      });\n    };\n\n    _this.handleSearchTextChange = function (text) {\n      _this.setState({\n        searchText: text,\n        query: null\n      });\n    };\n\n    _this.handleSelectMessage = function (chatId, messageId, openSearch) {\n      openChat(chatId, messageId);\n\n      _this.handleCloseSearch();\n    };\n\n    _this.handleCloseSearch = function () {\n      _this.setState({\n        openSearch: false,\n        searchChatId: 0,\n        searchText: null\n      });\n    };\n\n    _this.headerRef = React.createRef();\n    _this.state = {\n      openSearch: false,\n      openSettings: false,\n      openContacts: false\n    };\n    return _this;\n  }\n\n  _createClass(SidebarDialog, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState, nextContext) {\n      var _this$state2 = this.state,\n          openSearch = _this$state2.openSearch,\n          searchText = _this$state2.searchText,\n          openSettings = _this$state2.openSettings,\n          openContacts = _this$state2.openContacts;\n\n      if (nextState.openSearch !== openSearch) {\n        return true;\n      }\n\n      if (nextState.searchText !== searchText) {\n        return true;\n      }\n\n      if (nextState.openSettings !== openSettings) {\n        return true;\n      }\n\n      if (nextState.openContacts !== openContacts) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      AppStore.on('clientUpdateSearchChat', this.onClientUpdateSearchChat);\n      ChatStore.on('clientUpdateSettings', this.onClientUpdateSettings);\n      ChatStore.on('clientUpdateContacts', this.onClientUpdateContacts);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      AppStore.off('clientUpdateSearchChat', this.onClientUpdateSearchChat);\n      ChatStore.off('clientUpdateSettings', this.onClientUpdateSettings);\n      ChatStore.off('clientUpdateContacts', this.onClientUpdateContacts);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state3 = this.state,\n          meChatId = _this$state3.meChatId,\n          searchChatId = _this$state3.searchChatId,\n          searchText = _this$state3.searchText,\n          openSearch = _this$state3.openSearch,\n          openContacts = _this$state3.openContacts,\n          openSettings = _this$state3.openSettings;\n\n      if (!openSearch && !openContacts && !openSettings) {\n        return null;\n      }\n\n      return React.createElement(Dialog, {\n        open: true,\n        transitionDuration: 0,\n        onClose: this.handleClose,\n        classes: {\n          root: 'chat-info-dialog-root',\n          container: 'chat-info-dialog-container',\n          paper: 'chat-info-dialog-paper'\n        },\n        onEnter: this.handleDialogEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, openSettings && React.createElement(Settings, {\n        chatId: meChatId,\n        popup: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }), openContacts && React.createElement(Contacts, {\n        popup: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }), openSearch && React.createElement(React.Fragment, null, React.createElement(DialogsHeader, {\n        ref: this.headerRef,\n        openSearch: true,\n        timeout: 0,\n        onClick: this.handleHeaderClick,\n        onSearch: this.handleSearch,\n        onSearchTextChange: this.handleSearchTextChange,\n        popup: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"search-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(Search, {\n        chatId: searchChatId,\n        text: searchText,\n        onSelectMessage: this.handleSelectMessage,\n        onClose: this.handleCloseSearch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return SidebarDialog;\n}(React.Component);\n\nSidebarDialog.propTypes = {};\nexport default SidebarDialog;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Popup/SidebarDialog.js"],"names":["React","Dialog","Contacts","DialogsHeader","Search","Settings","AppStore","ChatStore","openChat","SidebarDialog","props","onClientUpdateSearchChat","update","isSmallWidth","chatId","query","state","openSearch","searchChatId","searchText","setState","handleDialogEnter","header","headerRef","current","setInitQuery","onClientUpdateSettings","open","openSettings","meChatId","onClientUpdateContacts","openContacts","handleClose","handleSearch","visible","handleSearchTextChange","text","handleSelectMessage","messageId","handleCloseSearch","createRef","nextProps","nextState","nextContext","on","off","root","container","paper","handleHeaderClick","Component","propTypes"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport Contacts from '../ColumnLeft/Contacts';\nimport DialogsHeader from '../ColumnLeft/DialogsHeader';\nimport Search from '../ColumnLeft/Search/Search';\nimport Settings from '../ColumnLeft/Settings/Settings';\nimport AppStore from '../../Stores/ApplicationStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport './ChatInfoDialog.css';\nimport { openChat } from '../../Actions/Client';\n\nclass SidebarDialog extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.headerRef = React.createRef();\n\n        this.state = {\n            openSearch: false,\n            openSettings: false,\n            openContacts: false\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { openSearch, searchText, openSettings, openContacts } = this.state;\n\n        if (nextState.openSearch !== openSearch) {\n            return true;\n        }\n\n        if (nextState.searchText !== searchText) {\n            return true;\n        }\n\n        if (nextState.openSettings !== openSettings) {\n            return true;\n        }\n\n        if (nextState.openContacts !== openContacts) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        AppStore.on('clientUpdateSearchChat', this.onClientUpdateSearchChat);\n        ChatStore.on('clientUpdateSettings', this.onClientUpdateSettings);\n        ChatStore.on('clientUpdateContacts', this.onClientUpdateContacts);\n    }\n\n    componentWillUnmount() {\n        AppStore.off('clientUpdateSearchChat', this.onClientUpdateSearchChat);\n        ChatStore.off('clientUpdateSettings', this.onClientUpdateSettings);\n        ChatStore.off('clientUpdateContacts', this.onClientUpdateContacts);\n    }\n\n    onClientUpdateSearchChat = update => {\n        const { isSmallWidth } = AppStore;\n        if (!isSmallWidth) return;\n\n        const { chatId, query } = update;\n        const { openSearch, searchChatId, searchText } = this.state;\n\n        if (openSearch && chatId === searchChatId && query === searchText) {\n            return;\n        }\n\n        this.query = query;\n        this.setState(\n            {\n                openSearch: true,\n                searchChatId: chatId,\n                searchText: null\n            }\n        );\n    };\n\n    handleDialogEnter = () => {\n        if (!this.query) return;\n\n        const header = this.headerRef.current;\n        if (header) {\n            header.setInitQuery(this.query);\n        }\n\n        this.query = null;\n    };\n\n    onClientUpdateSettings = update => {\n        const { isSmallWidth } = AppStore;\n        if (!isSmallWidth) return;\n\n        const { open, chatId } = update;\n\n        this.setState({ openSettings: open, meChatId: chatId });\n    };\n\n    onClientUpdateContacts = async update => {\n        const { isSmallWidth } = AppStore;\n        if (!isSmallWidth) return;\n\n        const { open } = update;\n\n        this.setState({ openContacts: open });\n    };\n\n    handleClose = () => {\n        this.setState({\n            openSettings: false,\n            openContacts: false,\n            openSearch: false\n        });\n    };\n\n    handleSearch = visible => {\n        this.setState({\n            openSearch: visible,\n            searchChatId: 0,\n            searchText: null\n        });\n    };\n\n    handleSearchTextChange = text => {\n        this.setState({\n            searchText: text,\n            query: null\n        });\n    };\n\n    handleSelectMessage = (chatId, messageId, openSearch) => {\n        openChat(chatId, messageId);\n\n        this.handleCloseSearch();\n    };\n\n    handleCloseSearch = () => {\n        this.setState({\n            openSearch: false,\n            searchChatId: 0,\n            searchText: null\n        });\n    };\n\n    render() {\n        const { meChatId, searchChatId, searchText, openSearch, openContacts, openSettings } = this.state;\n        if (!openSearch && !openContacts && !openSettings) {\n            return null;\n        }\n\n        return (\n            <Dialog\n                open\n                transitionDuration={0}\n                onClose={this.handleClose}\n                classes={{\n                    root: 'chat-info-dialog-root',\n                    container: 'chat-info-dialog-container',\n                    paper: 'chat-info-dialog-paper'\n                }}\n                onEnter={this.handleDialogEnter}\n                >\n                {openSettings && <Settings chatId={meChatId} popup/>}\n                {openContacts && <Contacts popup />}\n                {openSearch && (\n                    <>\n                        <DialogsHeader\n                            ref={this.headerRef}\n                            openSearch={true}\n                            timeout={0}\n                            onClick={this.handleHeaderClick}\n                            onSearch={this.handleSearch}\n                            onSearchTextChange={this.handleSearchTextChange}\n                            popup\n                        />\n                        <div className='search-content'>\n                            <Search\n                                chatId={searchChatId}\n                                text={searchText}\n                                onSelectMessage={this.handleSelectMessage}\n                                onClose={this.handleCloseSearch}\n                            />\n                        </div>\n                    </>\n                )}\n            </Dialog>\n        );\n    }\n}\n\nSidebarDialog.propTypes = {};\n\nexport default SidebarDialog;\n"]},"metadata":{},"sourceType":"module"}