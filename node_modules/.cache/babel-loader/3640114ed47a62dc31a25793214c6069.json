{"ast":null,"code":"import _defineProperty from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Message/Media/Video.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport PlayArrowIcon from '../../../Assets/Icons/PlayArrow';\nimport { getFitSize, getDurationString } from '../../../Utils/Common';\nimport { getFileSize, getSrc } from '../../../Utils/File';\nimport { isBlurredThumbnail } from '../../../Utils/Media';\nimport { PHOTO_DISPLAY_SIZE, PHOTO_SIZE } from '../../../Constants';\nimport FileStore from '../../../Stores/FileStore';\nimport './Video.css';\n\nvar Video =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Video, _React$Component);\n\n  function Video() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Video);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Video)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onClientUpdateVideoThumbnailBlob = function (update) {\n      var thumbnail = _this.props.video.thumbnail;\n      var fileId = update.fileId;\n      if (!thumbnail) return;\n\n      if (thumbnail.photo && thumbnail.photo.id === fileId) {\n        _this.forceUpdate();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Video, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      FileStore.on('clientUpdateVideoThumbnailBlob', this.onClientUpdateVideoThumbnailBlob);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      FileStore.off('clientUpdateVideoThumbnailBlob', this.onClientUpdateVideoThumbnailBlob);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          displaySize = _this$props.displaySize,\n          openMedia = _this$props.openMedia,\n          title = _this$props.title,\n          caption = _this$props.caption,\n          type = _this$props.type,\n          style = _this$props.style;\n      var _this$props$video = this.props.video,\n          minithumbnail = _this$props$video.minithumbnail,\n          thumbnail = _this$props$video.thumbnail,\n          video = _this$props$video.video,\n          width = _this$props$video.width,\n          height = _this$props$video.height,\n          duration = _this$props$video.duration;\n      var fitPhotoSize = getFitSize({\n        width: width,\n        height: height\n      } || thumbnail, displaySize);\n      if (!fitPhotoSize) return null;\n\n      var videoStyle = _objectSpread({\n        width: fitPhotoSize.width,\n        height: fitPhotoSize.height\n      }, style);\n\n      var miniSrc = minithumbnail ? 'data:image/jpeg;base64, ' + minithumbnail.data : null;\n      var thumbnailSrc = getSrc(thumbnail ? thumbnail.photo : null);\n      var isBlurred = thumbnailSrc ? isBlurredThumbnail(thumbnail) : Boolean(miniSrc);\n      return React.createElement(\"div\", {\n        className: classNames('video', {\n          'video-big': type === 'message',\n          'video-title': title,\n          'video-caption': caption,\n          pointer: openMedia\n        }),\n        style: videoStyle,\n        onClick: openMedia,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: classNames('video-preview', {\n          'media-blurred': isBlurred,\n          'media-mini-blurred': !thumbnailSrc && isBlurred\n        }),\n        src: thumbnailSrc || miniSrc,\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"video-play\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(PlayArrowIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"video-meta\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, getDurationString(duration) + ' ' + getFileSize(video)));\n    }\n  }]);\n\n  return Video;\n}(React.Component);\n\nVideo.propTypes = {\n  chatId: PropTypes.number,\n  messageId: PropTypes.number,\n  video: PropTypes.object.isRequired,\n  openMedia: PropTypes.func,\n  size: PropTypes.number,\n  displaySize: PropTypes.number\n};\nVideo.defaultProps = {\n  size: PHOTO_SIZE,\n  displaySize: PHOTO_DISPLAY_SIZE\n};\nexport default Video;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Message/Media/Video.js"],"names":["React","PropTypes","classNames","PlayArrowIcon","getFitSize","getDurationString","getFileSize","getSrc","isBlurredThumbnail","PHOTO_DISPLAY_SIZE","PHOTO_SIZE","FileStore","Video","onClientUpdateVideoThumbnailBlob","update","thumbnail","props","video","fileId","photo","id","forceUpdate","on","off","displaySize","openMedia","title","caption","type","style","minithumbnail","width","height","duration","fitPhotoSize","videoStyle","miniSrc","data","thumbnailSrc","isBlurred","Boolean","pointer","Component","propTypes","chatId","number","messageId","object","isRequired","func","size","defaultProps"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport PlayArrowIcon from '../../../Assets/Icons/PlayArrow';\nimport { getFitSize, getDurationString } from '../../../Utils/Common';\nimport { getFileSize, getSrc } from '../../../Utils/File';\nimport { isBlurredThumbnail } from '../../../Utils/Media';\nimport { PHOTO_DISPLAY_SIZE, PHOTO_SIZE } from '../../../Constants';\nimport FileStore from '../../../Stores/FileStore';\nimport './Video.css';\n\nclass Video extends React.Component {\n    componentDidMount() {\n        FileStore.on('clientUpdateVideoThumbnailBlob', this.onClientUpdateVideoThumbnailBlob);\n    }\n\n    componentWillUnmount() {\n        FileStore.off('clientUpdateVideoThumbnailBlob', this.onClientUpdateVideoThumbnailBlob);\n    }\n\n    onClientUpdateVideoThumbnailBlob = update => {\n        const { thumbnail } = this.props.video;\n        const { fileId } = update;\n\n        if (!thumbnail) return;\n\n        if (thumbnail.photo && thumbnail.photo.id === fileId) {\n            this.forceUpdate();\n        }\n    };\n\n    render() {\n        const { displaySize, openMedia, title, caption, type, style } = this.props;\n        const { minithumbnail, thumbnail, video, width, height, duration } = this.props.video;\n\n        const fitPhotoSize = getFitSize({ width, height } || thumbnail, displaySize);\n        if (!fitPhotoSize) return null;\n\n        const videoStyle = {\n            width: fitPhotoSize.width,\n            height: fitPhotoSize.height,\n            ...style\n        };\n\n        const miniSrc = minithumbnail ? 'data:image/jpeg;base64, ' + minithumbnail.data : null;\n        const thumbnailSrc = getSrc(thumbnail ? thumbnail.photo : null);\n        const isBlurred = thumbnailSrc ? isBlurredThumbnail(thumbnail) : Boolean(miniSrc);\n\n        return (\n            <div\n                className={classNames('video', {\n                    'video-big': type === 'message',\n                    'video-title': title,\n                    'video-caption': caption,\n                    pointer: openMedia\n                })}\n                style={videoStyle}\n                onClick={openMedia}>\n                <img\n                    className={classNames('video-preview', {\n                        'media-blurred': isBlurred,\n                        'media-mini-blurred': !thumbnailSrc && isBlurred\n                    })}\n                    src={thumbnailSrc || miniSrc}\n                    alt=''\n                />\n                <div className='video-play'>\n                    <PlayArrowIcon />\n                </div>\n                <div className='video-meta'>{getDurationString(duration) + ' ' + getFileSize(video)}</div>\n            </div>\n        );\n    }\n}\n\nVideo.propTypes = {\n    chatId: PropTypes.number,\n    messageId: PropTypes.number,\n    video: PropTypes.object.isRequired,\n    openMedia: PropTypes.func,\n    size: PropTypes.number,\n    displaySize: PropTypes.number\n};\n\nVideo.defaultProps = {\n    size: PHOTO_SIZE,\n    displaySize: PHOTO_DISPLAY_SIZE\n};\n\nexport default Video;\n"]},"metadata":{},"sourceType":"module"}