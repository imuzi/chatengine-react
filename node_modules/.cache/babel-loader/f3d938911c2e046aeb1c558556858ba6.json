{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport EventEmitter from './EventEmitter';\nimport { KEY_AUTH_STATE } from '../Constants';\nimport TdLibController from '../Controllers/TdLibController';\n\nvar AuthorizationStore =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(AuthorizationStore, _EventEmitter);\n\n  function AuthorizationStore() {\n    var _this;\n\n    _classCallCheck(this, AuthorizationStore);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AuthorizationStore).call(this));\n\n    _this.reset = function () {\n      _this.current = null;\n    };\n\n    _this.onUpdate = function (update) {\n      switch (update['@type']) {\n        case 'updateAuthorizationState':\n          {\n            var authorization_state = update.authorization_state;\n            _this.current = authorization_state;\n\n            _this.save(authorization_state);\n\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    _this.onClientUpdate = function (update) {\n      switch (update['@type']) {\n        case 'clientUpdateMonkeyIdle':\n          {\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'clientUpdateMonkeyTracking':\n          {\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'clientUpdateMonkeyClose':\n          {\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'clientUpdateMonkeyPeek':\n          {\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    _this.addTdLibListener = function () {\n      TdLibController.on('update', _this.onUpdate);\n      TdLibController.on('clientUpdate', _this.onClientUpdate);\n    };\n\n    _this.removeTdLibListener = function () {\n      TdLibController.off('update', _this.onUpdate);\n      TdLibController.off('clientUpdate', _this.onClientUpdate);\n    };\n\n    _this.reset();\n\n    _this.load();\n\n    _this.addTdLibListener();\n\n    return _this;\n  }\n\n  _createClass(AuthorizationStore, [{\n    key: \"load\",\n    value: function load() {\n      try {\n        var value = localStorage.getItem(KEY_AUTH_STATE);\n\n        if (value) {\n          this.current = JSON.parse(value);\n        } else {\n          this.current = null;\n        }\n      } catch (_unused) {}\n    }\n  }, {\n    key: \"save\",\n    value: function save(state) {\n      if (state) {\n        localStorage.setItem(KEY_AUTH_STATE, JSON.stringify(state));\n      } else {\n        localStorage.removeItem(KEY_AUTH_STATE);\n      }\n    }\n  }]);\n\n  return AuthorizationStore;\n}(EventEmitter);\n\nvar store = new AuthorizationStore();\nwindow.authorization = store;\nexport default store;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Stores/AuthorizationStore.js"],"names":["EventEmitter","KEY_AUTH_STATE","TdLibController","AuthorizationStore","reset","current","onUpdate","update","authorization_state","save","emit","onClientUpdate","addTdLibListener","on","removeTdLibListener","off","load","value","localStorage","getItem","JSON","parse","state","setItem","stringify","removeItem","store","window","authorization"],"mappings":";;;;;;AAAA;;;;;;AAOA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,eAAP,MAA4B,gCAA5B;;IAEMC,kB;;;;;AACF,gCAAc;AAAA;;AAAA;;AACV;;AADU,UA4BdC,KA5Bc,GA4BN,YAAM;AACV,YAAKC,OAAL,GAAe,IAAf;AACH,KA9Ba;;AAAA,UAgCdC,QAhCc,GAgCH,UAAAC,MAAM,EAAI;AACjB,cAAQA,MAAM,CAAC,OAAD,CAAd;AACI,aAAK,0BAAL;AAAiC;AAAA,gBACrBC,mBADqB,GACGD,MADH,CACrBC,mBADqB;AAG7B,kBAAKH,OAAL,GAAeG,mBAAf;;AACA,kBAAKC,IAAL,CAAUD,mBAAV;;AAEA,kBAAKE,IAAL,CAAUH,MAAM,CAAC,OAAD,CAAhB,EAA2BA,MAA3B;;AACA;AACH;;AACD;AACI;AAXR;AAaH,KA9Ca;;AAAA,UAgDdI,cAhDc,GAgDG,UAAAJ,MAAM,EAAI;AACvB,cAAQA,MAAM,CAAC,OAAD,CAAd;AACI,aAAK,wBAAL;AAA+B;AAC3B,kBAAKG,IAAL,CAAUH,MAAM,CAAC,OAAD,CAAhB,EAA2BA,MAA3B;;AACA;AACH;;AACD,aAAK,4BAAL;AAAmC;AAC/B,kBAAKG,IAAL,CAAUH,MAAM,CAAC,OAAD,CAAhB,EAA2BA,MAA3B;;AACA;AACH;;AACD,aAAK,yBAAL;AAAgC;AAC5B,kBAAKG,IAAL,CAAUH,MAAM,CAAC,OAAD,CAAhB,EAA2BA,MAA3B;;AACA;AACH;;AACD,aAAK,wBAAL;AAA+B;AAC3B,kBAAKG,IAAL,CAAUH,MAAM,CAAC,OAAD,CAAhB,EAA2BA,MAA3B;;AACA;AACH;;AACD;AACI;AAlBR;AAoBH,KArEa;;AAAA,UAuEdK,gBAvEc,GAuEK,YAAM;AACrBV,MAAAA,eAAe,CAACW,EAAhB,CAAmB,QAAnB,EAA6B,MAAKP,QAAlC;AACAJ,MAAAA,eAAe,CAACW,EAAhB,CAAmB,cAAnB,EAAmC,MAAKF,cAAxC;AACH,KA1Ea;;AAAA,UA4EdG,mBA5Ec,GA4EQ,YAAM;AACxBZ,MAAAA,eAAe,CAACa,GAAhB,CAAoB,QAApB,EAA8B,MAAKT,QAAnC;AACAJ,MAAAA,eAAe,CAACa,GAAhB,CAAoB,cAApB,EAAoC,MAAKJ,cAAzC;AACH,KA/Ea;;AAGV,UAAKP,KAAL;;AACA,UAAKY,IAAL;;AAEA,UAAKJ,gBAAL;;AANU;AAOb;;;;2BAEM;AACH,UAAI;AACA,YAAMK,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBlB,cAArB,CAAd;;AACA,YAAIgB,KAAJ,EAAW;AACP,eAAKZ,OAAL,GAAee,IAAI,CAACC,KAAL,CAAWJ,KAAX,CAAf;AACH,SAFD,MAEO;AACH,eAAKZ,OAAL,GAAe,IAAf;AACH;AACJ,OAPD,CAOE,gBAAM,CAAE;AACb;;;yBAEIiB,K,EAAO;AACR,UAAIA,KAAJ,EAAW;AACPJ,QAAAA,YAAY,CAACK,OAAb,CAAqBtB,cAArB,EAAqCmB,IAAI,CAACI,SAAL,CAAeF,KAAf,CAArC;AACH,OAFD,MAEO;AACHJ,QAAAA,YAAY,CAACO,UAAb,CAAwBxB,cAAxB;AACH;AACJ;;;;EA3B4BD,Y;;AAmFjC,IAAM0B,KAAK,GAAG,IAAIvB,kBAAJ,EAAd;AACAwB,MAAM,CAACC,aAAP,GAAuBF,KAAvB;AACA,eAAeA,KAAf","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport EventEmitter from './EventEmitter';\nimport { KEY_AUTH_STATE } from '../Constants';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass AuthorizationStore extends EventEmitter {\n    constructor() {\n        super();\n\n        this.reset();\n        this.load();\n\n        this.addTdLibListener();\n    }\n\n    load() {\n        try {\n            const value = localStorage.getItem(KEY_AUTH_STATE);\n            if (value) {\n                this.current = JSON.parse(value);\n            } else {\n                this.current = null;\n            }\n        } catch {}\n    }\n\n    save(state) {\n        if (state) {\n            localStorage.setItem(KEY_AUTH_STATE, JSON.stringify(state));\n        } else {\n            localStorage.removeItem(KEY_AUTH_STATE);\n        }\n    }\n\n    reset = () => {\n        this.current = null;\n    };\n\n    onUpdate = update => {\n        switch (update['@type']) {\n            case 'updateAuthorizationState': {\n                const { authorization_state } = update;\n\n                this.current = authorization_state;\n                this.save(authorization_state);\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    onClientUpdate = update => {\n        switch (update['@type']) {\n            case 'clientUpdateMonkeyIdle': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMonkeyTracking': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMonkeyClose': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMonkeyPeek': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    addTdLibListener = () => {\n        TdLibController.on('update', this.onUpdate);\n        TdLibController.on('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.off('update', this.onUpdate);\n        TdLibController.off('clientUpdate', this.onClientUpdate);\n    };\n}\n\nconst store = new AuthorizationStore();\nwindow.authorization = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}