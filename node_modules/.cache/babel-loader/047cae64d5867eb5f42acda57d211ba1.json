{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport dateFormat from '../Utils/Date';\nimport { getUserFullName, getUserShortName, getUserStatus, isUserOnline } from './User';\nimport { getSupergroupStatus } from './Supergroup';\nimport { getBasicGroupStatus } from './BasicGroup';\nimport { getLetters } from './Common';\nimport { getContent } from './Message';\nimport { isServiceMessage } from './ServiceMessage';\nimport { formatPhoneNumber } from './Phone';\nimport { getChannelStatus } from './Channel';\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../Constants';\nimport BasicGroupStore from '../Stores/BasicGroupStore';\nimport ChatStore from '../Stores/ChatStore';\nimport NotificationStore from '../Stores/NotificationStore';\nimport SupergroupStore from '../Stores/SupergroupStore';\nimport UserStore from '../Stores/UserStore';\nimport TdLibController from '../Controllers/TdLibController';\nexport function canUnpinMessage(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  var pinned_message_id = chat.pinned_message_id;\n  return pinned_message_id > 0;\n}\nexport function isChatArchived(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  var chat_list = chat.chat_list;\n  if (!chat_list) return false;\n  return chat_list['@type'] === 'chatListArchive';\n}\nexport function canSetChatChatList(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  var is_sponsored = chat.is_sponsored,\n      chat_list = chat.chat_list;\n  if (is_sponsored) return false;\n  if (!chat_list) return false;\n\n  if (chat_list['@type'] === 'chatListMain') {\n    if (isMeChat(chatId) || chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function draftEquals(draft1, draft2) {\n  if (!draft1 && !draft2) return true;\n  if (draft1 && !draft2) return false;\n  if (draft2 && !draft1) return false;\n  var inputMessageText1 = draft1.input_message_text,\n      replyToMessageId1 = draft1.reply_to_message_id;\n  var inputMessageText2 = draft2.input_message_text,\n      replyToMessageId2 = draft2.reply_to_message_id;\n\n  if (replyToMessageId1 !== replyToMessageId2) {\n    return false;\n  }\n\n  if (inputMessageText1['@type'] !== inputMessageText2['@type']) {\n    return false;\n  }\n\n  if (inputMessageText1['@type'] !== 'inputMessageText') {\n    return true;\n  }\n\n  var formattedText1 = inputMessageText1.text;\n  var formattedText2 = inputMessageText2.text;\n  if (!formattedText1 && !formattedText2) return true;\n  if (formattedText1 && !formattedText2) return false;\n  if (formattedText2 && !formattedText1) return false;\n  var text1 = formattedText1.text,\n      entities1 = formattedText1.entities;\n  var text2 = formattedText2.text,\n      entities2 = formattedText2.entities;\n\n  if (text1 !== text2) {\n    return false;\n  }\n\n  return entitiesEquals(entities1, entities2);\n}\n\nfunction entitiesEquals(entities1, entities2) {\n  if (!entities1 && !entities2) return true;\n  if (entities1 && !entities2) return false;\n  if (entities2 && !entities1) return false;\n\n  if (entities1.length !== entities2.length) {\n    return false;\n  }\n\n  var map = new Map();\n  entities1.forEach(function (x) {\n    map.set(\"\".concat(x.type['@type'], \"_\").concat(x.offset, \"_\").concat(x.length), x);\n  });\n  return entities2.every(function (x) {\n    return map.has(\"\".concat(x.type['@type'], \"_\").concat(x.offset, \"_\").concat(x.length));\n  });\n}\n\nfunction getGroupChatTypingString(inputTypingManager) {\n  if (!inputTypingManager) return null;\n  var size = inputTypingManager.actions.size;\n\n  if (size > 2) {\n    return \"\".concat(size, \" people are typing\");\n  } else if (size > 1) {\n    var firstUser;\n    var secondUser;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = inputTypingManager.actions.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var userId = _step.value;\n\n        if (!firstUser) {\n          firstUser = UserStore.get(userId);\n        } else if (!secondUser) {\n          secondUser = UserStore.get(userId);\n          break;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    if (!firstUser || !secondUser) {\n      return \"\".concat(size, \" people are typing\");\n    }\n\n    firstUser = firstUser.first_name ? firstUser.first_name : firstUser.second_name;\n    secondUser = secondUser.first_name ? secondUser.first_name : secondUser.second_name;\n\n    if (!firstUser || !secondUser) {\n      return \"\".concat(size, \" people are typing\");\n    }\n\n    return \"\".concat(firstUser, \" and \").concat(secondUser, \" are typing\");\n  } else {\n    var _firstUser;\n\n    if (inputTypingManager.actions.size >= 1) {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = inputTypingManager.actions.keys()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var _userId = _step2.value;\n\n          if (!_firstUser) {\n            _firstUser = UserStore.get(_userId);\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      if (!_firstUser) {\n        return \"1 person is typing\";\n      }\n\n      _firstUser = _firstUser.first_name ? _firstUser.first_name : _firstUser.second_name;\n\n      if (!_firstUser) {\n        return \"1 person is typing\";\n      }\n\n      var action = inputTypingManager.actions.values().next().value.action;\n\n      switch (action['@type']) {\n        case 'chatActionRecordingVideo':\n          return \"\".concat(_firstUser, \" is recording a video\");\n\n        case 'chatActionRecordingVideoNote':\n          return \"\".concat(_firstUser, \" is recording a video message\");\n\n        case 'chatActionRecordingVoiceNote':\n          return \"\".concat(_firstUser, \" is recording a voice message\");\n\n        case 'chatActionStartPlayingGame':\n          return \"\".concat(_firstUser, \" is playing a game\");\n\n        case 'chatActionUploadingDocument':\n          return \"\".concat(_firstUser, \" is sending a file\");\n\n        case 'chatActionUploadingPhoto':\n          return \"\".concat(_firstUser, \" is sending a photo\");\n\n        case 'chatActionUploadingVideo':\n          return \"\".concat(_firstUser, \" is sending a video\");\n\n        case 'chatActionUploadingVideoNote':\n          return \"\".concat(_firstUser, \" is sending a video message\");\n\n        case 'chatActionUploadingVoiceNote':\n          return \"\".concat(_firstUser, \" is sending a voice message\");\n\n        case 'chatActionChoosingContact':\n        case 'chatActionChoosingLocation':\n        case 'chatActionTyping':\n        default:\n          return \"\".concat(_firstUser, \" is typing\");\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction getPrivateChatTypingString(inputTypingManager) {\n  if (!inputTypingManager) return null;\n\n  if (inputTypingManager.actions.size >= 1) {\n    var action = inputTypingManager.actions.values().next().value.action;\n\n    switch (action['@type']) {\n      case 'chatActionRecordingVideo':\n        return 'recording a video';\n\n      case 'chatActionRecordingVideoNote':\n        return 'recording a video message';\n\n      case 'chatActionRecordingVoiceNote':\n        return 'recording a voice message';\n\n      case 'chatActionStartPlayingGame':\n        return 'playing a game';\n\n      case 'chatActionUploadingDocument':\n        return 'sending a file';\n\n      case 'chatActionUploadingPhoto':\n        return 'sending a photo';\n\n      case 'chatActionUploadingVideo':\n        return 'sending a video';\n\n      case 'chatActionUploadingVideoNote':\n        return 'sending a video message';\n\n      case 'chatActionUploadingVoiceNote':\n        return 'sending a voice message';\n\n      case 'chatActionChoosingContact':\n      case 'chatActionChoosingLocation':\n      case 'chatActionTyping':\n      default:\n        return 'typing';\n    }\n  }\n\n  return null;\n}\n\nfunction getChatTypingString(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return null;\n  if (!chat.type) return null;\n  var typingManager = ChatStore.getTypingManager(chat.id);\n  if (!typingManager) return null;\n\n  switch (chat.type['@type']) {\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        var typingString = getPrivateChatTypingString(typingManager);\n        return typingString ? typingString + '...' : null;\n      }\n\n    case 'chatTypeBasicGroup':\n    case 'chatTypeSupergroup':\n      {\n        var _typingString = getGroupChatTypingString(typingManager);\n\n        return _typingString ? _typingString + '...' : null;\n      }\n  }\n\n  return null;\n}\n\nfunction getMessageSenderFullName(message) {\n  var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (k) {\n    return k;\n  };\n  if (!message) return null;\n  if (isServiceMessage(message)) return null;\n  if (!message.sender_user_id) return null;\n  return getUserFullName(message.sender_user_id, null, t);\n}\n\nfunction getMessageSenderName(message) {\n  var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (k) {\n    return k;\n  };\n  if (!message) return null;\n  if (isServiceMessage(message)) return null;\n  var chat = ChatStore.get(message.chat_id);\n\n  if (chat && chat.type['@type'] !== 'chatTypeBasicGroup' && chat.type['@type'] !== 'chatTypeSupergroup') {\n    return null;\n  }\n\n  return getUserShortName(message.sender_user_id, t);\n}\n\nfunction getLastMessageSenderName(chat) {\n  var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (k) {\n    return k;\n  };\n  if (!chat) return null;\n  return getMessageSenderName(chat.last_message, t);\n}\n\nfunction getLastMessageContent(chat) {\n  var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (key) {\n    return key;\n  };\n  if (!chat) return null;\n  var last_message = chat.last_message;\n  if (!last_message) return null;\n  return getContent(last_message, t);\n}\n\nfunction showChatUnreadMessageIcon(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  var is_marked_as_unread = chat.is_marked_as_unread,\n      last_message = chat.last_message,\n      last_read_outbox_message_id = chat.last_read_outbox_message_id;\n  if (!last_message) return false;\n  var is_outgoing = last_message.is_outgoing;\n  return is_outgoing && last_message.id > last_read_outbox_message_id && !is_marked_as_unread && !showChatDraft(chatId);\n}\n\nfunction showChatUnreadMentionCount(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  var unread_mention_count = chat.unread_mention_count;\n  return unread_mention_count > 0;\n}\n\nfunction showChatUnreadCount(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  var is_marked_as_unread = chat.is_marked_as_unread,\n      unread_count = chat.unread_count,\n      unread_mention_count = chat.unread_mention_count;\n  return unread_count > 1 || unread_count === 1 && unread_mention_count === 0 || is_marked_as_unread && unread_count === 0 && unread_mention_count === 0;\n}\n\nfunction isChatUnread(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  var is_marked_as_unread = chat.is_marked_as_unread,\n      unread_count = chat.unread_count,\n      unread_mention_count = chat.unread_mention_count;\n  return is_marked_as_unread || unread_count > 0;\n}\n\nfunction isChatMuted(chatId) {\n  return getChatMuteFor(chatId) > 0;\n}\n\nfunction getChatMuteFor(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return 0;\n  var notification_settings = chat.notification_settings;\n  if (!notification_settings) return 0;\n  var use_default_mute_for = notification_settings.use_default_mute_for,\n      mute_for = notification_settings.mute_for;\n\n  if (use_default_mute_for) {\n    var settings = getScopeNotificationSettings(chatId);\n    return settings ? settings.mute_for : false;\n  }\n\n  return mute_for;\n}\n\nexport function getScopeNotificationSettings(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return null;\n\n  switch (chat.type['@type']) {\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        return NotificationStore.settings.get('notificationSettingsScopePrivateChats');\n      }\n\n    case 'chatTypeBasicGroup':\n    case 'chatTypeSupergroup':\n      {\n        var settings = null;\n\n        if (isChannelChat(chatId)) {\n          settings = NotificationStore.settings.get('notificationSettingsScopeChannelChats');\n        } else {\n          settings = NotificationStore.settings.get('notificationSettingsScopeGroupChats');\n        }\n\n        return settings;\n      }\n  }\n\n  return null;\n}\n\nfunction getMessageDate(message) {\n  var date = new Date(message.date * 1000);\n  var dayStart = new Date();\n  dayStart.setHours(0, 0, 0, 0);\n\n  if (date > dayStart) {\n    return dateFormat(date, 'H:MM');\n  }\n\n  var now = new Date();\n  var day = now.getDay();\n  var weekStart = now.getDate() - day + (day === 0 ? -6 : 1);\n  var monday = new Date(now.setDate(weekStart));\n\n  if (date > monday) {\n    return dateFormat(date, 'ddd');\n  }\n\n  return dateFormat(date, 'd.mm.yyyy');\n}\n\nfunction getLastMessageDate(chat) {\n  if (!chat) return null;\n  if (!chat.last_message) return null;\n  if (!chat.last_message.date) return null;\n  if (showChatDraft(chat.id)) return null;\n  return getMessageDate(chat.last_message);\n}\n\nfunction getChatSubtitleWithoutTyping(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return null;\n  var type = chat.type;\n  if (!type) return null;\n\n  switch (type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        var basicGroup = BasicGroupStore.get(type.basic_group_id);\n\n        if (basicGroup) {\n          return getBasicGroupStatus(basicGroup, chatId);\n        }\n\n        break;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        var user = UserStore.get(type.user_id);\n\n        if (user) {\n          return getUserStatus(user);\n        }\n\n        break;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        var supergroup = SupergroupStore.get(type.supergroup_id);\n\n        if (supergroup) {\n          return supergroup.is_channel ? getChannelStatus(supergroup, chatId) : getSupergroupStatus(supergroup, chatId);\n        }\n\n        break;\n      }\n  }\n\n  return null;\n}\n\nfunction getChatSubtitle(chatId) {\n  var showSavedMessages = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (isMeChat(chatId) && showSavedMessages) {\n    return null;\n  }\n\n  var chatTypingString = getChatTypingString(chatId);\n\n  if (chatTypingString) {\n    return chatTypingString;\n  }\n\n  return getChatSubtitleWithoutTyping(chatId);\n}\n\nfunction getChatLetters(chat, t) {\n  if (!chat) return null;\n  var title = chat.title || t('HiddenName');\n  if (title.length === 0) return null;\n  var letters = getLetters(title);\n\n  if (letters && letters.length > 0) {\n    return letters;\n  }\n\n  return chat.title.charAt(0);\n}\n\nfunction isAccentChatSubtitleWithoutTyping(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  if (!chat.type) return false;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        return false;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        var user = UserStore.get(chat.type.user_id);\n\n        if (user) {\n          return isUserOnline(user);\n        }\n\n        break;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        return false;\n      }\n  }\n\n  return false;\n}\n\nfunction isAccentChatSubtitle(chatId) {\n  var typingString = getChatTypingString(chatId);\n  if (typingString) return false;\n  return isAccentChatSubtitleWithoutTyping(chatId);\n}\n\nfunction getChatUsername(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return null;\n  if (!chat.type) return null;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        return null;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        var user = UserStore.get(chat.type.user_id);\n\n        if (user) {\n          return user.username;\n        }\n\n        break;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        var supergroup = SupergroupStore.get(chat.type.supergroup_id);\n\n        if (supergroup) {\n          return supergroup.username;\n        }\n\n        break;\n      }\n  }\n\n  return null;\n}\n\nfunction getChatPhoneNumber(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return null;\n  if (!chat.type) return null;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        return null;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        var user = UserStore.get(chat.type.user_id);\n\n        if (user) {\n          return formatPhoneNumber(user.phone_number);\n        }\n\n        break;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        return null;\n      }\n  }\n\n  return null;\n}\n\nfunction getChatBio(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return null;\n  if (!chat.type) return null;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        var fullInfo = BasicGroupStore.getFullInfo(chat.type.basic_group_id);\n\n        if (fullInfo) {\n          return fullInfo.description;\n        }\n\n        break;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        var _fullInfo = UserStore.getFullInfo(chat.type.user_id);\n\n        if (_fullInfo) {\n          return _fullInfo.bio;\n        }\n\n        break;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        var _fullInfo2 = SupergroupStore.getFullInfo(chat.type.supergroup_id);\n\n        if (_fullInfo2) {\n          return _fullInfo2.description;\n        }\n\n        break;\n      }\n  }\n\n  return null;\n}\n\nfunction isPrivateChat(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  if (!chat.type) return false;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n    case 'chatTypeSupergroup':\n      {\n        return false;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        return true;\n      }\n  }\n\n  return false;\n}\n\nfunction isGroupChat(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  if (!chat.type) return false;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n    case 'chatTypeSupergroup':\n      {\n        return true;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        return false;\n      }\n  }\n\n  return false;\n}\n\nfunction isChannelChat(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  if (!chat.type) return false;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeSupergroup':\n      {\n        var supergroup = SupergroupStore.get(chat.type.supergroup_id);\n        return supergroup && supergroup.is_channel;\n      }\n\n    case 'chatTypeBasicGroup':\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        return false;\n      }\n  }\n\n  return false;\n}\n\nfunction isChatMember(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  var type = chat.type;\n  if (!type) return false;\n\n  switch (type['@type']) {\n    case 'chatTypeSupergroup':\n      {\n        var supergroup = SupergroupStore.get(type.supergroup_id);\n\n        if (supergroup && supergroup.status) {\n          switch (supergroup.status['@type']) {\n            case 'chatMemberStatusAdministrator':\n              {\n                return true;\n              }\n\n            case 'chatMemberStatusBanned':\n              {\n                return false;\n              }\n\n            case 'chatMemberStatusCreator':\n              {\n                return supergroup.status.is_member;\n              }\n\n            case 'chatMemberStatusLeft':\n              {\n                return false;\n              }\n\n            case 'chatMemberStatusMember':\n              {\n                return true;\n              }\n\n            case 'chatMemberStatusRestricted':\n              {\n                return supergroup.status.is_member;\n              }\n          }\n        }\n\n        break;\n      }\n\n    case 'chatTypeBasicGroup':\n      {\n        var basicGroup = BasicGroupStore.get(type.basic_group_id);\n\n        if (basicGroup && basicGroup.status) {\n          switch (basicGroup.status['@type']) {\n            case 'chatMemberStatusAdministrator':\n              {\n                return true;\n              }\n\n            case 'chatMemberStatusBanned':\n              {\n                return false;\n              }\n\n            case 'chatMemberStatusCreator':\n              {\n                return basicGroup.status.is_member;\n              }\n\n            case 'chatMemberStatusLeft':\n              {\n                return false;\n              }\n\n            case 'chatMemberStatusMember':\n              {\n                return true;\n              }\n\n            case 'chatMemberStatusRestricted':\n              {\n                return basicGroup.status.is_member;\n              }\n          }\n        }\n\n        break;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        return true;\n      }\n  }\n\n  return false;\n}\n\nfunction getChatTitle(chatId) {\n  var showSavedMessages = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var t = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (key) {\n    return key;\n  };\n  var chat = ChatStore.get(chatId);\n  if (!chat) return null;\n\n  if (isMeChat(chatId) && showSavedMessages) {\n    return t('SavedMessages');\n  }\n\n  return chat.title || t('HiddenName');\n}\n\nexport function isDeletedPrivateChat(chatId) {\n  var fallbackValue = false;\n  var chat = ChatStore.get(chatId);\n  if (!chat) return fallbackValue;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n    case 'chatTypeSupergroup':\n      {\n        return false;\n      }\n\n    case 'chatTypeSecret':\n    case 'chatTypePrivate':\n      {\n        var user = UserStore.get(chat.type.user_id);\n        return user && user.type['@type'] === 'userTypeDeleted';\n      }\n  }\n\n  return fallbackValue;\n}\n\nfunction isMeChat(chatId) {\n  var fallbackValue = false;\n  var chat = ChatStore.get(chatId);\n  if (!chat) return fallbackValue;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n    case 'chatTypeSupergroup':\n      {\n        return false;\n      }\n\n    case 'chatTypeSecret':\n    case 'chatTypePrivate':\n      {\n        return UserStore.getMyId() === chat.type.user_id;\n      }\n  }\n\n  return fallbackValue;\n}\n\nfunction getGroupChatMembers(chatId) {\n  var fallbackValue = [];\n  var chat = ChatStore.get(chatId);\n  if (!chat) return fallbackValue;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        var fullInfo = BasicGroupStore.getFullInfo(chat.type.basic_group_id);\n\n        if (fullInfo) {\n          return fullInfo.members || fallbackValue;\n        }\n\n        break;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        break;\n      }\n\n    case 'chatTypeSecret':\n    case 'chatTypePrivate':\n      {\n        break;\n      }\n  }\n\n  return fallbackValue;\n}\n\nfunction getChatFullInfo(_x) {\n  return _getChatFullInfo.apply(this, arguments);\n}\n\nfunction _getChatFullInfo() {\n  _getChatFullInfo = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(chatId) {\n    var chat, type;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            chat = ChatStore.get(chatId);\n\n            if (chat) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", null);\n\n          case 3:\n            type = chat.type;\n\n            if (type) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", null);\n\n          case 6:\n            _context.t0 = type['@type'];\n            _context.next = _context.t0 === 'chatTypePrivate' ? 9 : _context.t0 === 'chatTypeSecret' ? 12 : _context.t0 === 'chatTypeBasicGroup' ? 15 : _context.t0 === 'chatTypeSupergroup' ? 18 : 21;\n            break;\n\n          case 9:\n            _context.next = 11;\n            return TdLibController.send({\n              '@type': 'getUserFullInfo',\n              user_id: type.user_id\n            });\n\n          case 11:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 12:\n            _context.next = 14;\n            return TdLibController.send({\n              '@type': 'getUserFullInfo',\n              user_id: type.user_id\n            });\n\n          case 14:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 15:\n            _context.next = 17;\n            return TdLibController.send({\n              '@type': 'getBasicGroupFullInfo',\n              basic_group_id: type.basic_group_id\n            });\n\n          case 17:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 18:\n            _context.next = 20;\n            return TdLibController.send({\n              '@type': 'getSupergroupFullInfo',\n              supergroup_id: type.supergroup_id\n            });\n\n          case 20:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 21:\n            return _context.abrupt(\"return\", null);\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getChatFullInfo.apply(this, arguments);\n}\n\nfunction hasBasicGroupId(chatId, basicGroupId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  var type = chat.type;\n  return type && type['@type'] === 'chatTypeBasicGroup' && type.basic_group_id === basicGroupId;\n}\n\nfunction isSupergroup(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  var type = chat.type;\n  return type && type['@type'] === 'chatTypeSupergroup';\n}\n\nfunction getSupergroupId(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  var type = chat.type;\n\n  if (type && type['@type'] === 'chatTypeSupergroup') {\n    return type.supergroup_id;\n  }\n\n  return 0;\n}\n\nfunction hasSupergroupId(chatId, supergroupId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  var type = chat.type;\n  return isSupergroup(chatId) && type.supergroup_id === supergroupId;\n}\n\nfunction hasUserId(chatId, userId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  var type = chat.type;\n  return type && (type['@type'] === 'chatTypePrivate' || type['@type'] === 'chatTypeSecret') && type.user_id === userId;\n}\n\nfunction getChatUserId(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return 0;\n  var type = chat.type;\n  return type && (type['@type'] === 'chatTypePrivate' || type['@type'] === 'chatTypeSecret') ? type.user_id : 0;\n}\n\nfunction getPhotoFromChat(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return null;\n\n  if (isPrivateChat(chatId)) {\n    var user = UserStore.get(getChatUserId(chatId));\n\n    if (user) {\n      return user.profile_photo;\n    }\n  }\n\n  return chat.photo;\n}\n\nfunction canSendMediaMessages(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  var type = chat.type,\n      globalPermissions = chat.permissions;\n  if (!type) return false;\n  if (!globalPermissions) return false;\n  var can_send_media_messages = globalPermissions.can_send_media_messages;\n\n  switch (type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        var basicGroup = BasicGroupStore.get(type.basic_group_id);\n        if (!basicGroup) return false;\n        var status = basicGroup.status;\n        if (!status) return false;\n        var is_member = status.is_member,\n            permissions = status.permissions;\n\n        switch (status['@type']) {\n          case 'chatMemberStatusAdministrator':\n            {\n              return true;\n            }\n\n          case 'chatMemberStatusBanned':\n            {\n              return false;\n            }\n\n          case 'chatMemberStatusCreator':\n            {\n              return is_member;\n            }\n\n          case 'chatMemberStatusLeft':\n            {\n              return false;\n            }\n\n          case 'chatMemberStatusMember':\n            {\n              return true;\n            }\n\n          case 'chatMemberStatusRestricted':\n            {\n              return is_member && permissions && permissions.can_send_media_messages;\n            }\n        }\n\n        break;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        return can_send_media_messages;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        var supergroup = SupergroupStore.get(chat.type.supergroup_id);\n        if (!supergroup) return false;\n        var _status = supergroup.status;\n        if (!_status) return false;\n        var _is_member = _status.is_member,\n            _permissions = _status.permissions;\n\n        switch (_status['@type']) {\n          case 'chatMemberStatusAdministrator':\n            {\n              return true;\n            }\n\n          case 'chatMemberStatusBanned':\n            {\n              return false;\n            }\n\n          case 'chatMemberStatusCreator':\n            {\n              return _is_member; //can_send_media_messages && is_member;\n            }\n\n          case 'chatMemberStatusLeft':\n            {\n              return false;\n            }\n\n          case 'chatMemberStatusMember':\n            {\n              return can_send_media_messages && !supergroup.is_channel;\n            }\n\n          case 'chatMemberStatusRestricted':\n            {\n              return can_send_media_messages && _is_member && _permissions && _permissions.can_send_media_messages;\n            }\n        }\n      }\n  }\n\n  return false;\n}\n\nfunction getChatShortTitle(chatId) {\n  var showSavedMessages = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var t = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (k) {\n    return k;\n  };\n\n  if (isMeChat(chatId) && showSavedMessages) {\n    return t('SavedMessages');\n  }\n\n  var chat = ChatStore.get(chatId);\n  if (!chat) return null;\n  if (!chat.type) return null;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        return chat.title;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        return chat.title;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        return getUserShortName(chat.type.user_id, t);\n      }\n  }\n\n  return null;\n}\n\nfunction getGroupChatMembersCount(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return null;\n  if (!chat.type) return null;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        var basicGroup = BasicGroupStore.get(chat.type.basic_group_id);\n\n        if (basicGroup) {\n          return basicGroup.member_count;\n        }\n\n        return 0;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        var supergroup = SupergroupStore.get(chat.type.supergroup_id);\n\n        if (supergroup) {\n          return supergroup.member_count;\n        }\n\n        return 0;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        return 0;\n      }\n  }\n\n  return 0;\n}\n\nfunction canClearHistory(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  if (!chat.type) return false;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        return true;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        var supergroup = SupergroupStore.get(chat.type.supergroup_id);\n\n        if (supergroup) {\n          return !Boolean(supergroup.username);\n        }\n\n        return true;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        return true;\n      }\n  }\n\n  return false;\n}\n\nfunction canDeleteChat(chatId) {\n  return !isMeChat(chatId);\n}\n\nfunction canSendPolls(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  var type = chat.type,\n      globalPermissions = chat.permissions;\n  if (!type) return false;\n  if (!globalPermissions) return false;\n  var can_send_polls = globalPermissions.can_send_polls;\n\n  switch (type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        var basicGroup = BasicGroupStore.get(type.basic_group_id);\n        if (!basicGroup) return false;\n        var status = basicGroup.status;\n        if (!status) return false;\n        var is_member = status.is_member,\n            permissions = status.permissions;\n\n        switch (status['@type']) {\n          case 'chatMemberStatusAdministrator':\n            {\n              return true;\n            }\n\n          case 'chatMemberStatusBanned':\n            {\n              return false;\n            }\n\n          case 'chatMemberStatusCreator':\n            {\n              return is_member;\n            }\n\n          case 'chatMemberStatusLeft':\n            {\n              return false;\n            }\n\n          case 'chatMemberStatusMember':\n            {\n              return true;\n            }\n\n          case 'chatMemberStatusRestricted':\n            {\n              return is_member && permissions && permissions.can_send_polls;\n            }\n        }\n\n        break;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        return can_send_polls;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        var supergroup = SupergroupStore.get(type.supergroup_id);\n        if (!supergroup) return false;\n        var _status2 = supergroup.status;\n        if (!_status2) return false;\n        var _is_member2 = _status2.is_member,\n            _permissions2 = _status2.permissions;\n\n        switch (_status2['@type']) {\n          case 'chatMemberStatusAdministrator':\n            {\n              return true;\n            }\n\n          case 'chatMemberStatusBanned':\n            {\n              return false;\n            }\n\n          case 'chatMemberStatusCreator':\n            {\n              return _is_member2; //can_send_polls && is_member;\n            }\n\n          case 'chatMemberStatusLeft':\n            {\n              return false;\n            }\n\n          case 'chatMemberStatusMember':\n            {\n              return can_send_polls && !supergroup.is_channel;\n            }\n\n          case 'chatMemberStatusRestricted':\n            {\n              return can_send_polls && _is_member2 && _permissions2 && _permissions2.can_send_polls;\n            }\n        }\n      }\n  }\n\n  return false;\n}\n\nfunction canSendMessages(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  var type = chat.type,\n      globalPermissions = chat.permissions;\n  if (!type) return false;\n  if (!globalPermissions) return false;\n  var can_send_messages = globalPermissions.can_send_messages;\n\n  switch (type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        var basicGroup = BasicGroupStore.get(type.basic_group_id);\n        if (!basicGroup) return false;\n        var status = basicGroup.status;\n        if (!status) return false;\n        var is_member = status.is_member,\n            permissions = status.permissions;\n\n        switch (status['@type']) {\n          case 'chatMemberStatusAdministrator':\n            {\n              return true;\n            }\n\n          case 'chatMemberStatusBanned':\n            {\n              return false;\n            }\n\n          case 'chatMemberStatusCreator':\n            {\n              return is_member;\n            }\n\n          case 'chatMemberStatusLeft':\n            {\n              return false;\n            }\n\n          case 'chatMemberStatusMember':\n            {\n              return true;\n            }\n\n          case 'chatMemberStatusRestricted':\n            {\n              return is_member && permissions && permissions.can_send_messages;\n            }\n        }\n\n        break;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        return can_send_messages;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        var supergroup = SupergroupStore.get(type.supergroup_id);\n        if (!supergroup) return false;\n        var _status3 = supergroup.status;\n        if (!_status3) return false;\n        var _is_member3 = _status3.is_member,\n            _permissions3 = _status3.permissions;\n\n        switch (_status3['@type']) {\n          case 'chatMemberStatusAdministrator':\n            {\n              return true;\n            }\n\n          case 'chatMemberStatusBanned':\n            {\n              return false;\n            }\n\n          case 'chatMemberStatusCreator':\n            {\n              return _is_member3; //can_send_messages && is_member;\n            }\n\n          case 'chatMemberStatusLeft':\n            {\n              return false;\n            }\n\n          case 'chatMemberStatusMember':\n            {\n              return can_send_messages && !supergroup.is_channel;\n            }\n\n          case 'chatMemberStatusRestricted':\n            {\n              return can_send_messages && _is_member3 && _permissions3 && _permissions3.can_send_messages;\n            }\n        }\n      }\n  }\n\n  return false;\n}\n\nfunction showChatDraft(chatId) {\n  var chat = ChatStore.get(chatId);\n  var draft = getChatDraft(chatId);\n  return draft && chat.unread_count === 0 && chat.unread_mention_count === 0;\n}\n\nfunction getChatDraft(chatId) {\n  var chat = ChatStore.get(chatId);\n\n  if (chat) {\n    var draft_message = chat.draft_message;\n\n    if (draft_message) {\n      var input_message_text = draft_message.input_message_text;\n\n      if (input_message_text) {\n        return input_message_text.text;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction getChatDraftReplyToMessageId(chatId) {\n  var replyToMessageId = 0;\n  var chat = ChatStore.get(chatId);\n\n  if (chat) {\n    var draft_message = chat.draft_message;\n\n    if (draft_message) {\n      replyToMessageId = draft_message.reply_to_message_id;\n    }\n  }\n\n  return replyToMessageId;\n}\n\nfunction canPinMessages(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  var type = chat.type,\n      globalPermissions = chat.permissions;\n  if (!type) return false;\n  if (!globalPermissions) return false;\n  var can_pin_messages = globalPermissions.can_pin_messages;\n\n  switch (type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        var basicGroup = BasicGroupStore.get(type.basic_group_id);\n        if (!basicGroup) return false;\n        var status = basicGroup.status;\n        if (!status) return false;\n        var is_member = status.is_member,\n            permissions = status.permissions;\n\n        switch (status['@type']) {\n          case 'chatMemberStatusAdministrator':\n            {\n              return status.can_pin_messages;\n            }\n\n          case 'chatMemberStatusBanned':\n            {\n              return false;\n            }\n\n          case 'chatMemberStatusCreator':\n            {\n              return false;\n            }\n\n          case 'chatMemberStatusLeft':\n            {\n              return false;\n            }\n\n          case 'chatMemberStatusMember':\n            {\n              return false;\n            }\n\n          case 'chatMemberStatusRestricted':\n            {\n              return is_member && permissions && permissions.can_pin_messages;\n            }\n        }\n\n        break;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        return can_pin_messages;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        var supergroup = SupergroupStore.get(type.supergroup_id);\n        if (!supergroup) return false;\n        var _status4 = supergroup.status;\n        if (!_status4) return false;\n        var _is_member4 = _status4.is_member,\n            _permissions4 = _status4.permissions;\n\n        switch (_status4['@type']) {\n          case 'chatMemberStatusAdministrator':\n            {\n              return can_pin_messages || _status4.can_pin_messages;\n            }\n\n          case 'chatMemberStatusBanned':\n            {\n              return false;\n            }\n\n          case 'chatMemberStatusCreator':\n            {\n              return _is_member4; //can_pin_messages && is_member;\n            }\n\n          case 'chatMemberStatusLeft':\n            {\n              return false;\n            }\n\n          case 'chatMemberStatusMember':\n            {\n              return false;\n            }\n\n          case 'chatMemberStatusRestricted':\n            {\n              return can_pin_messages && _is_member4 && _permissions4 && _permissions4.can_pin_messages;\n            }\n        }\n      }\n  }\n\n  return false;\n}\n\nfunction isChatVerified(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  var type = chat.type;\n  if (!type) return false;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        return false;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        var user = UserStore.get(type.user_id);\n        return user && user.is_verified;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        var supergroup = SupergroupStore.get(type.supergroup_id);\n        return supergroup && supergroup.is_verified;\n      }\n  }\n\n  return false;\n}\n\nfunction isChatSecret(chatId) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  var type = chat.type;\n  if (!type) return false;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        return false;\n      }\n\n    case 'chatTypePrivate':\n      {\n        return false;\n      }\n\n    case 'chatTypeSecret':\n      {\n        return true;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        return false;\n      }\n  }\n\n  return false;\n}\n\nexport { showChatDraft, getChatDraft, getChatDraftReplyToMessageId, getChatTypingString, showChatUnreadMessageIcon, showChatUnreadMentionCount, showChatUnreadCount, getChatMuteFor, getChatSubtitle, getChatSubtitleWithoutTyping, getLastMessageSenderName, getMessageSenderName, getMessageSenderFullName, getLastMessageContent, getLastMessageDate, getMessageDate, getChatLetters, isAccentChatSubtitle, isAccentChatSubtitleWithoutTyping, isChatMuted, getChatUsername, getChatPhoneNumber, getChatBio, isPrivateChat, isGroupChat, isChannelChat, isChatUnread, isChatMember, isChatVerified, isChatSecret, getChatTitle, getGroupChatMembers, getChatFullInfo, hasBasicGroupId, hasSupergroupId, isSupergroup, getSupergroupId, hasUserId, getChatUserId, getPhotoFromChat, getChatShortTitle, getGroupChatMembersCount, isMeChat, canClearHistory, canDeleteChat, canPinMessages, canSendMediaMessages, canSendMessages, canSendPolls };","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Utils/Chat.js"],"names":["React","dateFormat","getUserFullName","getUserShortName","getUserStatus","isUserOnline","getSupergroupStatus","getBasicGroupStatus","getLetters","getContent","isServiceMessage","formatPhoneNumber","getChannelStatus","SERVICE_NOTIFICATIONS_USER_ID","BasicGroupStore","ChatStore","NotificationStore","SupergroupStore","UserStore","TdLibController","canUnpinMessage","chatId","chat","get","pinned_message_id","isChatArchived","chat_list","canSetChatChatList","is_sponsored","isMeChat","draftEquals","draft1","draft2","inputMessageText1","input_message_text","replyToMessageId1","reply_to_message_id","inputMessageText2","replyToMessageId2","formattedText1","text","formattedText2","text1","entities1","entities","text2","entities2","entitiesEquals","length","map","Map","forEach","x","set","type","offset","every","has","getGroupChatTypingString","inputTypingManager","size","actions","firstUser","secondUser","keys","userId","first_name","second_name","action","values","next","value","getPrivateChatTypingString","getChatTypingString","typingManager","getTypingManager","id","typingString","getMessageSenderFullName","message","t","k","sender_user_id","getMessageSenderName","chat_id","getLastMessageSenderName","last_message","getLastMessageContent","key","showChatUnreadMessageIcon","is_marked_as_unread","last_read_outbox_message_id","is_outgoing","showChatDraft","showChatUnreadMentionCount","unread_mention_count","showChatUnreadCount","unread_count","isChatUnread","isChatMuted","getChatMuteFor","notification_settings","use_default_mute_for","mute_for","settings","getScopeNotificationSettings","isChannelChat","getMessageDate","date","Date","dayStart","setHours","now","day","getDay","weekStart","getDate","monday","setDate","getLastMessageDate","getChatSubtitleWithoutTyping","basicGroup","basic_group_id","user","user_id","supergroup","supergroup_id","is_channel","getChatSubtitle","showSavedMessages","chatTypingString","getChatLetters","title","letters","charAt","isAccentChatSubtitleWithoutTyping","isAccentChatSubtitle","getChatUsername","username","getChatPhoneNumber","phone_number","getChatBio","fullInfo","getFullInfo","description","bio","isPrivateChat","isGroupChat","isChatMember","status","is_member","getChatTitle","isDeletedPrivateChat","fallbackValue","getMyId","getGroupChatMembers","members","getChatFullInfo","send","hasBasicGroupId","basicGroupId","isSupergroup","getSupergroupId","hasSupergroupId","supergroupId","hasUserId","getChatUserId","getPhotoFromChat","profile_photo","photo","canSendMediaMessages","globalPermissions","permissions","can_send_media_messages","getChatShortTitle","getGroupChatMembersCount","member_count","canClearHistory","Boolean","canDeleteChat","canSendPolls","can_send_polls","canSendMessages","can_send_messages","draft","getChatDraft","draft_message","getChatDraftReplyToMessageId","replyToMessageId","canPinMessages","can_pin_messages","isChatVerified","is_verified","isChatSecret"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport dateFormat from '../Utils/Date';\nimport { getUserFullName, getUserShortName, getUserStatus, isUserOnline } from './User';\nimport { getSupergroupStatus } from './Supergroup';\nimport { getBasicGroupStatus } from './BasicGroup';\nimport { getLetters } from './Common';\nimport { getContent } from './Message';\nimport { isServiceMessage } from './ServiceMessage';\nimport { formatPhoneNumber } from './Phone';\nimport { getChannelStatus } from './Channel';\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../Constants';\nimport BasicGroupStore from '../Stores/BasicGroupStore';\nimport ChatStore from '../Stores/ChatStore';\nimport NotificationStore from '../Stores/NotificationStore';\nimport SupergroupStore from '../Stores/SupergroupStore';\nimport UserStore from '../Stores/UserStore';\nimport TdLibController from '../Controllers/TdLibController';\n\nexport function canUnpinMessage(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { pinned_message_id } = chat;\n\n    return pinned_message_id > 0;\n}\n\nexport function isChatArchived(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { chat_list } = chat;\n    if (!chat_list) return false;\n\n    return chat_list['@type'] === 'chatListArchive';\n}\n\nexport function canSetChatChatList(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { is_sponsored, chat_list } = chat;\n    if (is_sponsored) return false;\n    if (!chat_list) return false;\n\n    if (chat_list['@type'] === 'chatListMain') {\n        if (isMeChat(chatId) || chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function draftEquals(draft1, draft2) {\n    if (!draft1 && !draft2) return true;\n    if (draft1 && !draft2) return false;\n    if (draft2 && !draft1) return false;\n\n    const { input_message_text: inputMessageText1, reply_to_message_id: replyToMessageId1 } = draft1;\n    const { input_message_text: inputMessageText2, reply_to_message_id: replyToMessageId2 } = draft2;\n\n    if (replyToMessageId1 !== replyToMessageId2) {\n        return false;\n    }\n\n    if (inputMessageText1['@type'] !== inputMessageText2['@type']) {\n        return false;\n    }\n\n    if (inputMessageText1['@type'] !== 'inputMessageText') {\n        return true;\n    }\n\n    const { text: formattedText1 } = inputMessageText1;\n    const { text: formattedText2 } = inputMessageText2;\n\n    if (!formattedText1 && !formattedText2) return true;\n    if (formattedText1 && !formattedText2) return false;\n    if (formattedText2 && !formattedText1) return false;\n\n    const { text: text1, entities: entities1 } = formattedText1;\n    const { text: text2, entities: entities2 } = formattedText2;\n\n    if (text1 !== text2) {\n        return false;\n    }\n\n    return entitiesEquals(entities1, entities2);\n}\n\nfunction entitiesEquals(entities1, entities2) {\n    if (!entities1 && !entities2) return true;\n    if (entities1 && !entities2) return false;\n    if (entities2 && !entities1) return false;\n\n    if (entities1.length !== entities2.length) {\n        return false;\n    }\n\n    const map = new Map();\n    entities1.forEach(x => {\n        map.set(`${x.type['@type']}_${x.offset}_${x.length}`, x);\n    });\n\n    return entities2.every(x => map.has(`${x.type['@type']}_${x.offset}_${x.length}`));\n}\n\nfunction getGroupChatTypingString(inputTypingManager) {\n    if (!inputTypingManager) return null;\n\n    let size = inputTypingManager.actions.size;\n    if (size > 2) {\n        return `${size} people are typing`;\n    } else if (size > 1) {\n        let firstUser;\n        let secondUser;\n        for (let userId of inputTypingManager.actions.keys()) {\n            if (!firstUser) {\n                firstUser = UserStore.get(userId);\n            } else if (!secondUser) {\n                secondUser = UserStore.get(userId);\n                break;\n            }\n        }\n\n        if (!firstUser || !secondUser) {\n            return `${size} people are typing`;\n        }\n\n        firstUser = firstUser.first_name ? firstUser.first_name : firstUser.second_name;\n        secondUser = secondUser.first_name ? secondUser.first_name : secondUser.second_name;\n\n        if (!firstUser || !secondUser) {\n            return `${size} people are typing`;\n        }\n\n        return `${firstUser} and ${secondUser} are typing`;\n    } else {\n        let firstUser;\n        if (inputTypingManager.actions.size >= 1) {\n            for (let userId of inputTypingManager.actions.keys()) {\n                if (!firstUser) {\n                    firstUser = UserStore.get(userId);\n                    break;\n                }\n            }\n\n            if (!firstUser) {\n                return `1 person is typing`;\n            }\n\n            firstUser = firstUser.first_name ? firstUser.first_name : firstUser.second_name;\n\n            if (!firstUser) {\n                return `1 person is typing`;\n            }\n\n            let action = inputTypingManager.actions.values().next().value.action;\n            switch (action['@type']) {\n                case 'chatActionRecordingVideo':\n                    return `${firstUser} is recording a video`;\n                case 'chatActionRecordingVideoNote':\n                    return `${firstUser} is recording a video message`;\n                case 'chatActionRecordingVoiceNote':\n                    return `${firstUser} is recording a voice message`;\n                case 'chatActionStartPlayingGame':\n                    return `${firstUser} is playing a game`;\n                case 'chatActionUploadingDocument':\n                    return `${firstUser} is sending a file`;\n                case 'chatActionUploadingPhoto':\n                    return `${firstUser} is sending a photo`;\n                case 'chatActionUploadingVideo':\n                    return `${firstUser} is sending a video`;\n                case 'chatActionUploadingVideoNote':\n                    return `${firstUser} is sending a video message`;\n                case 'chatActionUploadingVoiceNote':\n                    return `${firstUser} is sending a voice message`;\n                case 'chatActionChoosingContact':\n                case 'chatActionChoosingLocation':\n                case 'chatActionTyping':\n                default:\n                    return `${firstUser} is typing`;\n            }\n        }\n    }\n\n    return null;\n}\n\nfunction getPrivateChatTypingString(inputTypingManager) {\n    if (!inputTypingManager) return null;\n\n    if (inputTypingManager.actions.size >= 1) {\n        let action = inputTypingManager.actions.values().next().value.action;\n        switch (action['@type']) {\n            case 'chatActionRecordingVideo':\n                return 'recording a video';\n            case 'chatActionRecordingVideoNote':\n                return 'recording a video message';\n            case 'chatActionRecordingVoiceNote':\n                return 'recording a voice message';\n            case 'chatActionStartPlayingGame':\n                return 'playing a game';\n            case 'chatActionUploadingDocument':\n                return 'sending a file';\n            case 'chatActionUploadingPhoto':\n                return 'sending a photo';\n            case 'chatActionUploadingVideo':\n                return 'sending a video';\n            case 'chatActionUploadingVideoNote':\n                return 'sending a video message';\n            case 'chatActionUploadingVoiceNote':\n                return 'sending a voice message';\n            case 'chatActionChoosingContact':\n            case 'chatActionChoosingLocation':\n            case 'chatActionTyping':\n            default:\n                return 'typing';\n        }\n    }\n\n    return null;\n}\n\nfunction getChatTypingString(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return null;\n    if (!chat.type) return null;\n\n    let typingManager = ChatStore.getTypingManager(chat.id);\n    if (!typingManager) return null;\n\n    switch (chat.type['@type']) {\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            const typingString = getPrivateChatTypingString(typingManager);\n            return typingString ? typingString + '...' : null;\n        }\n        case 'chatTypeBasicGroup':\n        case 'chatTypeSupergroup': {\n            const typingString = getGroupChatTypingString(typingManager);\n            return typingString ? typingString + '...' : null;\n        }\n    }\n\n    return null;\n}\n\nfunction getMessageSenderFullName(message, t = k => k) {\n    if (!message) return null;\n    if (isServiceMessage(message)) return null;\n    if (!message.sender_user_id) return null;\n\n    return getUserFullName(message.sender_user_id, null, t);\n}\n\nfunction getMessageSenderName(message, t = k => k) {\n    if (!message) return null;\n    if (isServiceMessage(message)) return null;\n\n    const chat = ChatStore.get(message.chat_id);\n    if (chat && chat.type['@type'] !== 'chatTypeBasicGroup' && chat.type['@type'] !== 'chatTypeSupergroup') {\n        return null;\n    }\n\n    return getUserShortName(message.sender_user_id, t);\n}\n\nfunction getLastMessageSenderName(chat, t = k => k) {\n    if (!chat) return null;\n\n    return getMessageSenderName(chat.last_message, t);\n}\n\nfunction getLastMessageContent(chat, t = key => key) {\n    if (!chat) return null;\n\n    const { last_message } = chat;\n    if (!last_message) return null;\n\n    return getContent(last_message, t);\n}\n\nfunction showChatUnreadMessageIcon(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { is_marked_as_unread, last_message, last_read_outbox_message_id } = chat;\n    if (!last_message) return false;\n\n    const { is_outgoing } = last_message;\n\n    return (\n        is_outgoing && last_message.id > last_read_outbox_message_id && !is_marked_as_unread && !showChatDraft(chatId)\n    );\n}\n\nfunction showChatUnreadMentionCount(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { unread_mention_count } = chat;\n\n    return unread_mention_count > 0;\n}\n\nfunction showChatUnreadCount(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { is_marked_as_unread, unread_count, unread_mention_count } = chat;\n\n    return (\n        unread_count > 1 ||\n        (unread_count === 1 && unread_mention_count === 0) ||\n        (is_marked_as_unread && unread_count === 0 && unread_mention_count === 0)\n    );\n}\n\nfunction isChatUnread(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { is_marked_as_unread, unread_count, unread_mention_count } = chat;\n\n    return is_marked_as_unread || unread_count > 0;\n}\n\nfunction isChatMuted(chatId) {\n    return getChatMuteFor(chatId) > 0;\n}\n\nfunction getChatMuteFor(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return 0;\n\n    const { notification_settings } = chat;\n    if (!notification_settings) return 0;\n\n    const { use_default_mute_for, mute_for } = notification_settings;\n\n    if (use_default_mute_for) {\n        const settings = getScopeNotificationSettings(chatId);\n\n        return settings ? settings.mute_for : false;\n    }\n\n    return mute_for;\n}\n\nexport function getScopeNotificationSettings(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return null;\n\n    switch (chat.type['@type']) {\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            return NotificationStore.settings.get('notificationSettingsScopePrivateChats');\n        }\n        case 'chatTypeBasicGroup':\n        case 'chatTypeSupergroup': {\n            let settings = null;\n            if (isChannelChat(chatId)) {\n                settings = NotificationStore.settings.get('notificationSettingsScopeChannelChats');\n            } else {\n                settings = NotificationStore.settings.get('notificationSettingsScopeGroupChats');\n            }\n            return settings;\n        }\n    }\n\n    return null;\n}\n\nfunction getMessageDate(message) {\n    const date = new Date(message.date * 1000);\n\n    const dayStart = new Date();\n    dayStart.setHours(0, 0, 0, 0);\n    if (date > dayStart) {\n        return dateFormat(date, 'H:MM');\n    }\n\n    const now = new Date();\n    const day = now.getDay();\n    const weekStart = now.getDate() - day + (day === 0 ? -6 : 1);\n    const monday = new Date(now.setDate(weekStart));\n    if (date > monday) {\n        return dateFormat(date, 'ddd');\n    }\n\n    return dateFormat(date, 'd.mm.yyyy');\n}\n\nfunction getLastMessageDate(chat) {\n    if (!chat) return null;\n    if (!chat.last_message) return null;\n    if (!chat.last_message.date) return null;\n    if (showChatDraft(chat.id)) return null;\n\n    return getMessageDate(chat.last_message);\n}\n\nfunction getChatSubtitleWithoutTyping(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return null;\n\n    const { type } = chat;\n    if (!type) return null;\n\n    switch (type['@type']) {\n        case 'chatTypeBasicGroup': {\n            const basicGroup = BasicGroupStore.get(type.basic_group_id);\n            if (basicGroup) {\n                return getBasicGroupStatus(basicGroup, chatId);\n            }\n\n            break;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            const user = UserStore.get(type.user_id);\n            if (user) {\n                return getUserStatus(user);\n            }\n\n            break;\n        }\n        case 'chatTypeSupergroup': {\n            const supergroup = SupergroupStore.get(type.supergroup_id);\n            if (supergroup) {\n                return supergroup.is_channel\n                    ? getChannelStatus(supergroup, chatId)\n                    : getSupergroupStatus(supergroup, chatId);\n            }\n\n            break;\n        }\n    }\n\n    return null;\n}\n\nfunction getChatSubtitle(chatId, showSavedMessages = false) {\n    if (isMeChat(chatId) && showSavedMessages) {\n        return null;\n    }\n\n    const chatTypingString = getChatTypingString(chatId);\n    if (chatTypingString) {\n        return chatTypingString;\n    }\n\n    return getChatSubtitleWithoutTyping(chatId);\n}\n\nfunction getChatLetters(chat, t) {\n    if (!chat) return null;\n\n    let title = chat.title || t('HiddenName');\n    if (title.length === 0) return null;\n\n    let letters = getLetters(title);\n    if (letters && letters.length > 0) {\n        return letters;\n    }\n\n    return chat.title.charAt(0);\n}\n\nfunction isAccentChatSubtitleWithoutTyping(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n    if (!chat.type) return false;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup': {\n            return false;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            const user = UserStore.get(chat.type.user_id);\n            if (user) {\n                return isUserOnline(user);\n            }\n\n            break;\n        }\n        case 'chatTypeSupergroup': {\n            return false;\n        }\n    }\n\n    return false;\n}\n\nfunction isAccentChatSubtitle(chatId) {\n    const typingString = getChatTypingString(chatId);\n    if (typingString) return false;\n\n    return isAccentChatSubtitleWithoutTyping(chatId);\n}\n\nfunction getChatUsername(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return null;\n    if (!chat.type) return null;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup': {\n            return null;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            const user = UserStore.get(chat.type.user_id);\n            if (user) {\n                return user.username;\n            }\n\n            break;\n        }\n        case 'chatTypeSupergroup': {\n            const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n            if (supergroup) {\n                return supergroup.username;\n            }\n            break;\n        }\n    }\n\n    return null;\n}\n\nfunction getChatPhoneNumber(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return null;\n    if (!chat.type) return null;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup': {\n            return null;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            const user = UserStore.get(chat.type.user_id);\n            if (user) {\n                return formatPhoneNumber(user.phone_number);\n            }\n\n            break;\n        }\n        case 'chatTypeSupergroup': {\n            return null;\n        }\n    }\n\n    return null;\n}\n\nfunction getChatBio(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return null;\n    if (!chat.type) return null;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup': {\n            const fullInfo = BasicGroupStore.getFullInfo(chat.type.basic_group_id);\n            if (fullInfo) {\n                return fullInfo.description;\n            }\n\n            break;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            const fullInfo = UserStore.getFullInfo(chat.type.user_id);\n            if (fullInfo) {\n                return fullInfo.bio;\n            }\n\n            break;\n        }\n        case 'chatTypeSupergroup': {\n            const fullInfo = SupergroupStore.getFullInfo(chat.type.supergroup_id);\n            if (fullInfo) {\n                return fullInfo.description;\n            }\n\n            break;\n        }\n    }\n\n    return null;\n}\n\nfunction isPrivateChat(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n    if (!chat.type) return false;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup':\n        case 'chatTypeSupergroup': {\n            return false;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction isGroupChat(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n    if (!chat.type) return false;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup':\n        case 'chatTypeSupergroup': {\n            return true;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            return false;\n        }\n    }\n\n    return false;\n}\n\nfunction isChannelChat(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n    if (!chat.type) return false;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeSupergroup': {\n            const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n\n            return supergroup && supergroup.is_channel;\n        }\n        case 'chatTypeBasicGroup':\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            return false;\n        }\n    }\n\n    return false;\n}\n\nfunction isChatMember(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { type } = chat;\n    if (!type) return false;\n\n    switch (type['@type']) {\n        case 'chatTypeSupergroup': {\n            const supergroup = SupergroupStore.get(type.supergroup_id);\n            if (supergroup && supergroup.status) {\n                switch (supergroup.status['@type']) {\n                    case 'chatMemberStatusAdministrator': {\n                        return true;\n                    }\n                    case 'chatMemberStatusBanned': {\n                        return false;\n                    }\n                    case 'chatMemberStatusCreator': {\n                        return supergroup.status.is_member;\n                    }\n                    case 'chatMemberStatusLeft': {\n                        return false;\n                    }\n                    case 'chatMemberStatusMember': {\n                        return true;\n                    }\n                    case 'chatMemberStatusRestricted': {\n                        return supergroup.status.is_member;\n                    }\n                }\n            }\n            break;\n        }\n        case 'chatTypeBasicGroup': {\n            const basicGroup = BasicGroupStore.get(type.basic_group_id);\n            if (basicGroup && basicGroup.status) {\n                switch (basicGroup.status['@type']) {\n                    case 'chatMemberStatusAdministrator': {\n                        return true;\n                    }\n                    case 'chatMemberStatusBanned': {\n                        return false;\n                    }\n                    case 'chatMemberStatusCreator': {\n                        return basicGroup.status.is_member;\n                    }\n                    case 'chatMemberStatusLeft': {\n                        return false;\n                    }\n                    case 'chatMemberStatusMember': {\n                        return true;\n                    }\n                    case 'chatMemberStatusRestricted': {\n                        return basicGroup.status.is_member;\n                    }\n                }\n            }\n            break;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction getChatTitle(chatId, showSavedMessages = false, t = key => key) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return null;\n\n    if (isMeChat(chatId) && showSavedMessages) {\n        return t('SavedMessages');\n    }\n\n    return chat.title || t('HiddenName');\n}\n\nexport function isDeletedPrivateChat(chatId) {\n    const fallbackValue = false;\n\n    const chat = ChatStore.get(chatId);\n    if (!chat) return fallbackValue;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup':\n        case 'chatTypeSupergroup': {\n            return false;\n        }\n        case 'chatTypeSecret':\n        case 'chatTypePrivate': {\n            const user = UserStore.get(chat.type.user_id);\n\n            return user && user.type['@type'] === 'userTypeDeleted';\n        }\n    }\n\n    return fallbackValue;\n}\n\nfunction isMeChat(chatId) {\n    const fallbackValue = false;\n\n    const chat = ChatStore.get(chatId);\n    if (!chat) return fallbackValue;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup':\n        case 'chatTypeSupergroup': {\n            return false;\n        }\n        case 'chatTypeSecret':\n        case 'chatTypePrivate': {\n            return UserStore.getMyId() === chat.type.user_id;\n        }\n    }\n\n    return fallbackValue;\n}\n\nfunction getGroupChatMembers(chatId) {\n    const fallbackValue = [];\n\n    const chat = ChatStore.get(chatId);\n    if (!chat) return fallbackValue;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup': {\n            const fullInfo = BasicGroupStore.getFullInfo(chat.type.basic_group_id);\n            if (fullInfo) {\n                return fullInfo.members || fallbackValue;\n            }\n\n            break;\n        }\n        case 'chatTypeSupergroup': {\n            break;\n        }\n        case 'chatTypeSecret':\n        case 'chatTypePrivate': {\n            break;\n        }\n    }\n\n    return fallbackValue;\n}\n\nasync function getChatFullInfo(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return null;\n\n    const { type } = chat;\n    if (!type) return null;\n\n    switch (type['@type']) {\n        case 'chatTypePrivate': {\n            return await TdLibController.send({\n                '@type': 'getUserFullInfo',\n                user_id: type.user_id\n            });\n        }\n        case 'chatTypeSecret': {\n            return await TdLibController.send({\n                '@type': 'getUserFullInfo',\n                user_id: type.user_id\n            });\n        }\n        case 'chatTypeBasicGroup': {\n            return await TdLibController.send({\n                '@type': 'getBasicGroupFullInfo',\n                basic_group_id: type.basic_group_id\n            });\n        }\n        case 'chatTypeSupergroup': {\n            return await TdLibController.send({\n                '@type': 'getSupergroupFullInfo',\n                supergroup_id: type.supergroup_id\n            });\n        }\n    }\n\n    return null;\n}\n\nfunction hasBasicGroupId(chatId, basicGroupId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { type } = chat;\n\n    return type && type['@type'] === 'chatTypeBasicGroup' && type.basic_group_id === basicGroupId;\n}\n\nfunction isSupergroup(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { type } = chat;\n\n    return type && type['@type'] === 'chatTypeSupergroup';\n}\n\nfunction getSupergroupId(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { type } = chat;\n\n    if (type && type['@type'] === 'chatTypeSupergroup') {\n        return type.supergroup_id;\n    }\n\n    return 0;\n}\n\nfunction hasSupergroupId(chatId, supergroupId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { type } = chat;\n\n    return isSupergroup(chatId) && type.supergroup_id === supergroupId;\n}\n\nfunction hasUserId(chatId, userId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { type } = chat;\n\n    return (\n        type && (type['@type'] === 'chatTypePrivate' || type['@type'] === 'chatTypeSecret') && type.user_id === userId\n    );\n}\n\nfunction getChatUserId(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return 0;\n\n    const { type } = chat;\n\n    return type && (type['@type'] === 'chatTypePrivate' || type['@type'] === 'chatTypeSecret') ? type.user_id : 0;\n}\n\nfunction getPhotoFromChat(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return null;\n\n    if (isPrivateChat(chatId)) {\n        const user = UserStore.get(getChatUserId(chatId));\n        if (user) {\n            return user.profile_photo;\n        }\n    }\n\n    return chat.photo;\n}\n\nfunction canSendMediaMessages(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { type, permissions: globalPermissions } = chat;\n    if (!type) return false;\n    if (!globalPermissions) return false;\n\n    const { can_send_media_messages } = globalPermissions;\n\n    switch (type['@type']) {\n        case 'chatTypeBasicGroup': {\n            const basicGroup = BasicGroupStore.get(type.basic_group_id);\n            if (!basicGroup) return false;\n\n            const { status } = basicGroup;\n            if (!status) return false;\n\n            const { is_member, permissions } = status;\n\n            switch (status['@type']) {\n                case 'chatMemberStatusAdministrator': {\n                    return true;\n                }\n                case 'chatMemberStatusBanned': {\n                    return false;\n                }\n                case 'chatMemberStatusCreator': {\n                    return is_member;\n                }\n                case 'chatMemberStatusLeft': {\n                    return false;\n                }\n                case 'chatMemberStatusMember': {\n                    return true;\n                }\n                case 'chatMemberStatusRestricted': {\n                    return is_member && permissions && permissions.can_send_media_messages;\n                }\n            }\n\n            break;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            return can_send_media_messages;\n        }\n        case 'chatTypeSupergroup': {\n            const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n            if (!supergroup) return false;\n\n            const { status } = supergroup;\n            if (!status) return false;\n\n            const { is_member, permissions } = status;\n\n            switch (status['@type']) {\n                case 'chatMemberStatusAdministrator': {\n                    return true;\n                }\n                case 'chatMemberStatusBanned': {\n                    return false;\n                }\n                case 'chatMemberStatusCreator': {\n                    return is_member; //can_send_media_messages && is_member;\n                }\n                case 'chatMemberStatusLeft': {\n                    return false;\n                }\n                case 'chatMemberStatusMember': {\n                    return can_send_media_messages && !supergroup.is_channel;\n                }\n                case 'chatMemberStatusRestricted': {\n                    return can_send_media_messages && is_member && permissions && permissions.can_send_media_messages;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\nfunction getChatShortTitle(chatId, showSavedMessages = false, t = k => k) {\n    if (isMeChat(chatId) && showSavedMessages) {\n        return t('SavedMessages');\n    }\n\n    const chat = ChatStore.get(chatId);\n    if (!chat) return null;\n    if (!chat.type) return null;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup': {\n            return chat.title;\n        }\n        case 'chatTypeSupergroup': {\n            return chat.title;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            return getUserShortName(chat.type.user_id, t);\n        }\n    }\n\n    return null;\n}\n\nfunction getGroupChatMembersCount(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return null;\n    if (!chat.type) return null;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup': {\n            const basicGroup = BasicGroupStore.get(chat.type.basic_group_id);\n            if (basicGroup) {\n                return basicGroup.member_count;\n            }\n\n            return 0;\n        }\n        case 'chatTypeSupergroup': {\n            const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n            if (supergroup) {\n                return supergroup.member_count;\n            }\n\n            return 0;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            return 0;\n        }\n    }\n\n    return 0;\n}\n\nfunction canClearHistory(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n    if (!chat.type) return false;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup': {\n            return true;\n        }\n        case 'chatTypeSupergroup': {\n            const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n            if (supergroup) {\n                return !Boolean(supergroup.username);\n            }\n\n            return true;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction canDeleteChat(chatId) {\n    return !isMeChat(chatId);\n}\n\nfunction canSendPolls(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { type, permissions: globalPermissions } = chat;\n    if (!type) return false;\n    if (!globalPermissions) return false;\n\n    const { can_send_polls } = globalPermissions;\n\n    switch (type['@type']) {\n        case 'chatTypeBasicGroup': {\n            const basicGroup = BasicGroupStore.get(type.basic_group_id);\n            if (!basicGroup) return false;\n\n            const { status } = basicGroup;\n            if (!status) return false;\n\n            const { is_member, permissions } = status;\n\n            switch (status['@type']) {\n                case 'chatMemberStatusAdministrator': {\n                    return true;\n                }\n                case 'chatMemberStatusBanned': {\n                    return false;\n                }\n                case 'chatMemberStatusCreator': {\n                    return is_member;\n                }\n                case 'chatMemberStatusLeft': {\n                    return false;\n                }\n                case 'chatMemberStatusMember': {\n                    return true;\n                }\n                case 'chatMemberStatusRestricted': {\n                    return is_member && permissions && permissions.can_send_polls;\n                }\n            }\n\n            break;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            return can_send_polls;\n        }\n        case 'chatTypeSupergroup': {\n            const supergroup = SupergroupStore.get(type.supergroup_id);\n            if (!supergroup) return false;\n\n            const { status } = supergroup;\n            if (!status) return false;\n\n            const { is_member, permissions } = status;\n\n            switch (status['@type']) {\n                case 'chatMemberStatusAdministrator': {\n                    return true;\n                }\n                case 'chatMemberStatusBanned': {\n                    return false;\n                }\n                case 'chatMemberStatusCreator': {\n                    return is_member; //can_send_polls && is_member;\n                }\n                case 'chatMemberStatusLeft': {\n                    return false;\n                }\n                case 'chatMemberStatusMember': {\n                    return can_send_polls && !supergroup.is_channel;\n                }\n                case 'chatMemberStatusRestricted': {\n                    return can_send_polls && is_member && permissions && permissions.can_send_polls;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\nfunction canSendMessages(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { type, permissions: globalPermissions } = chat;\n    if (!type) return false;\n    if (!globalPermissions) return false;\n\n    const { can_send_messages } = globalPermissions;\n\n    switch (type['@type']) {\n        case 'chatTypeBasicGroup': {\n            const basicGroup = BasicGroupStore.get(type.basic_group_id);\n            if (!basicGroup) return false;\n\n            const { status } = basicGroup;\n            if (!status) return false;\n\n            const { is_member, permissions } = status;\n\n            switch (status['@type']) {\n                case 'chatMemberStatusAdministrator': {\n                    return true;\n                }\n                case 'chatMemberStatusBanned': {\n                    return false;\n                }\n                case 'chatMemberStatusCreator': {\n                    return is_member;\n                }\n                case 'chatMemberStatusLeft': {\n                    return false;\n                }\n                case 'chatMemberStatusMember': {\n                    return true;\n                }\n                case 'chatMemberStatusRestricted': {\n                    return is_member && permissions && permissions.can_send_messages;\n                }\n            }\n\n            break;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            return can_send_messages;\n        }\n        case 'chatTypeSupergroup': {\n            const supergroup = SupergroupStore.get(type.supergroup_id);\n            if (!supergroup) return false;\n\n            const { status } = supergroup;\n            if (!status) return false;\n\n            const { is_member, permissions } = status;\n\n            switch (status['@type']) {\n                case 'chatMemberStatusAdministrator': {\n                    return true;\n                }\n                case 'chatMemberStatusBanned': {\n                    return false;\n                }\n                case 'chatMemberStatusCreator': {\n                    return is_member; //can_send_messages && is_member;\n                }\n                case 'chatMemberStatusLeft': {\n                    return false;\n                }\n                case 'chatMemberStatusMember': {\n                    return can_send_messages && !supergroup.is_channel;\n                }\n                case 'chatMemberStatusRestricted': {\n                    return can_send_messages && is_member && permissions && permissions.can_send_messages;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\nfunction showChatDraft(chatId) {\n    const chat = ChatStore.get(chatId);\n    const draft = getChatDraft(chatId);\n\n    return draft && chat.unread_count === 0 && chat.unread_mention_count === 0;\n}\n\nfunction getChatDraft(chatId) {\n    const chat = ChatStore.get(chatId);\n\n    if (chat) {\n        const { draft_message } = chat;\n        if (draft_message) {\n            const { input_message_text } = draft_message;\n            if (input_message_text) {\n                return input_message_text.text;\n            }\n        }\n    }\n\n    return null;\n}\n\nfunction getChatDraftReplyToMessageId(chatId) {\n    let replyToMessageId = 0;\n    const chat = ChatStore.get(chatId);\n    if (chat) {\n        const { draft_message } = chat;\n        if (draft_message) {\n            replyToMessageId = draft_message.reply_to_message_id;\n        }\n    }\n\n    return replyToMessageId;\n}\n\nfunction canPinMessages(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { type, permissions: globalPermissions } = chat;\n    if (!type) return false;\n    if (!globalPermissions) return false;\n\n    const { can_pin_messages } = globalPermissions;\n\n    switch (type['@type']) {\n        case 'chatTypeBasicGroup': {\n            const basicGroup = BasicGroupStore.get(type.basic_group_id);\n            if (!basicGroup) return false;\n\n            const { status } = basicGroup;\n            if (!status) return false;\n\n            const { is_member, permissions } = status;\n\n            switch (status['@type']) {\n                case 'chatMemberStatusAdministrator': {\n                    return status.can_pin_messages;\n                }\n                case 'chatMemberStatusBanned': {\n                    return false;\n                }\n                case 'chatMemberStatusCreator': {\n                    return false;\n                }\n                case 'chatMemberStatusLeft': {\n                    return false;\n                }\n                case 'chatMemberStatusMember': {\n                    return false;\n                }\n                case 'chatMemberStatusRestricted': {\n                    return is_member && permissions && permissions.can_pin_messages;\n                }\n            }\n\n            break;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            return can_pin_messages;\n        }\n        case 'chatTypeSupergroup': {\n            const supergroup = SupergroupStore.get(type.supergroup_id);\n            if (!supergroup) return false;\n\n            const { status } = supergroup;\n            if (!status) return false;\n\n            const { is_member, permissions } = status;\n\n            switch (status['@type']) {\n                case 'chatMemberStatusAdministrator': {\n                    return can_pin_messages || status.can_pin_messages;\n                }\n                case 'chatMemberStatusBanned': {\n                    return false;\n                }\n                case 'chatMemberStatusCreator': {\n                    return is_member; //can_pin_messages && is_member;\n                }\n                case 'chatMemberStatusLeft': {\n                    return false;\n                }\n                case 'chatMemberStatusMember': {\n                    return false;\n                }\n                case 'chatMemberStatusRestricted': {\n                    return can_pin_messages && is_member && permissions && permissions.can_pin_messages;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\nfunction isChatVerified(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { type } = chat;\n    if (!type) return false;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup': {\n            return false;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            const user = UserStore.get(type.user_id);\n\n            return user && user.is_verified;\n        }\n        case 'chatTypeSupergroup': {\n            const supergroup = SupergroupStore.get(type.supergroup_id);\n\n            return supergroup && supergroup.is_verified;\n        }\n    }\n\n    return false;\n}\n\nfunction isChatSecret(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { type } = chat;\n    if (!type) return false;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup': {\n            return false;\n        }\n        case 'chatTypePrivate': {\n            return false;\n        }\n        case 'chatTypeSecret': {\n            return true;\n        }\n        case 'chatTypeSupergroup': {\n            return false;\n        }\n    }\n\n    return false;\n}\n\nexport {\n    showChatDraft,\n    getChatDraft,\n    getChatDraftReplyToMessageId,\n    getChatTypingString,\n    showChatUnreadMessageIcon,\n    showChatUnreadMentionCount,\n    showChatUnreadCount,\n    getChatMuteFor,\n    getChatSubtitle,\n    getChatSubtitleWithoutTyping,\n    getLastMessageSenderName,\n    getMessageSenderName,\n    getMessageSenderFullName,\n    getLastMessageContent,\n    getLastMessageDate,\n    getMessageDate,\n    getChatLetters,\n    isAccentChatSubtitle,\n    isAccentChatSubtitleWithoutTyping,\n    isChatMuted,\n    getChatUsername,\n    getChatPhoneNumber,\n    getChatBio,\n    isPrivateChat,\n    isGroupChat,\n    isChannelChat,\n    isChatUnread,\n    isChatMember,\n    isChatVerified,\n    isChatSecret,\n    getChatTitle,\n    getGroupChatMembers,\n    getChatFullInfo,\n    hasBasicGroupId,\n    hasSupergroupId,\n    isSupergroup,\n    getSupergroupId,\n    hasUserId,\n    getChatUserId,\n    getPhotoFromChat,\n    getChatShortTitle,\n    getGroupChatMembersCount,\n    isMeChat,\n    canClearHistory,\n    canDeleteChat,\n    canPinMessages,\n    canSendMediaMessages,\n    canSendMessages,\n    canSendPolls\n};\n"]},"metadata":{},"sourceType":"module"}