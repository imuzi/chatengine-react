{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnLeft/Settings/ChatBackground.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowBackIcon from '../../../Assets/Icons/Back';\nimport Wallpaper from '../../Tile/Wallpaper';\nimport { getSrc, loadBackgroundContent, loadBackgroundsContent } from '../../../Utils/File';\nimport ChatStore from '../../../Stores/ChatStore';\nimport FileStore from '../../../Stores/FileStore';\nimport TdLibController from '../../../Controllers/TdLibController';\nimport './ChatBackground.css';\n\nvar ChatBackground =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ChatBackground, _React$Component);\n\n  function ChatBackground() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ChatBackground);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ChatBackground)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      selectedId: ChatStore.wallpaper ? ChatStore.wallpaper.id : -1\n    };\n\n    _this.handleClick = function (wallpaper) {\n      _this.setState({\n        selectedId: wallpaper.id\n      });\n\n      var document = wallpaper.document;\n      if (!document) return;\n      var thumbnail = document.thumbnail,\n          file = document.document;\n      if (!file) return;\n      var src = getSrc(file);\n\n      if (!src) {\n        var store = FileStore.getStore();\n        loadBackgroundContent(store, wallpaper, true);\n      }\n\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateChatBackground',\n        wallpaper: wallpaper\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ChatBackground, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadContent();\n    }\n  }, {\n    key: \"loadContent\",\n    value: function loadContent() {\n      var backgrounds = this.props.backgrounds;\n      if (!backgrounds) return;\n      var store = FileStore.getStore();\n      loadBackgroundsContent(store, backgrounds.backgrounds);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          t = _this$props.t,\n          backgrounds = _this$props.backgrounds,\n          onClose = _this$props.onClose;\n      var selectedId = this.state.selectedId;\n      var wallpapers = backgrounds.backgrounds.filter(function (x) {\n        return x.type['@type'] === 'backgroundTypeWallpaper';\n      });\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"header-master\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        className: \"header-left-button\",\n        onClick: onClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(ArrowBackIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"header-status grow cursor-pointer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"header-status-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, t('ChatBackground')))), React.createElement(\"div\", {\n        className: \"sidebar-page-content shared-media-list shared-photos-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, wallpapers.map(function (x) {\n        return React.createElement(Wallpaper, {\n          key: x.id,\n          wallpaper: x,\n          isSelected: x.id === selectedId,\n          onClick: _this2.handleClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return ChatBackground;\n}(React.Component);\n\nChatBackground.propTypes = {\n  backgrounds: PropTypes.object\n};\nexport default withTranslation()(ChatBackground);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnLeft/Settings/ChatBackground.js"],"names":["React","PropTypes","withTranslation","IconButton","ArrowBackIcon","Wallpaper","getSrc","loadBackgroundContent","loadBackgroundsContent","ChatStore","FileStore","TdLibController","ChatBackground","state","selectedId","wallpaper","id","handleClick","setState","document","thumbnail","file","src","store","getStore","clientUpdate","loadContent","backgrounds","props","t","onClose","wallpapers","filter","x","type","map","Component","propTypes","object"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowBackIcon from '../../../Assets/Icons/Back';\nimport Wallpaper from '../../Tile/Wallpaper';\nimport { getSrc, loadBackgroundContent, loadBackgroundsContent } from '../../../Utils/File';\nimport ChatStore from '../../../Stores/ChatStore';\nimport FileStore from '../../../Stores/FileStore';\nimport TdLibController from '../../../Controllers/TdLibController';\nimport './ChatBackground.css';\n\nclass ChatBackground extends React.Component {\n    state = {\n        selectedId: ChatStore.wallpaper ? ChatStore.wallpaper.id : -1\n    };\n\n    componentDidMount() {\n        this.loadContent();\n    }\n\n    loadContent() {\n        const { backgrounds } = this.props;\n        if (!backgrounds) return;\n\n        const store = FileStore.getStore();\n        loadBackgroundsContent(store, backgrounds.backgrounds);\n    }\n\n    handleClick = wallpaper => {\n        this.setState({\n            selectedId: wallpaper.id\n        });\n\n        const { document } = wallpaper;\n        if (!document) return;\n\n        const { thumbnail, document: file } = document;\n        if (!file) return;\n\n        const src = getSrc(file);\n        if (!src) {\n            const store = FileStore.getStore();\n            loadBackgroundContent(store, wallpaper, true);\n        }\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateChatBackground',\n            wallpaper\n        });\n    };\n\n    render() {\n        const { t, backgrounds, onClose } = this.props;\n        const { selectedId } = this.state;\n\n        const wallpapers = backgrounds.backgrounds.filter(x => x.type['@type'] === 'backgroundTypeWallpaper');\n\n        return (\n            <>\n                <div className='header-master'>\n                    <IconButton className='header-left-button' onClick={onClose}>\n                        <ArrowBackIcon />\n                    </IconButton>\n                    <div className='header-status grow cursor-pointer'>\n                        <span className='header-status-content'>{t('ChatBackground')}</span>\n                    </div>\n                </div>\n                <div className='sidebar-page-content shared-media-list shared-photos-list'>\n                    { wallpapers.map(x => (<Wallpaper key={x.id} wallpaper={x} isSelected={x.id === selectedId} onClick={this.handleClick}/>)) }\n                </div>\n            </>\n        );\n    }\n}\n\nChatBackground.propTypes = {\n    backgrounds: PropTypes.object\n};\n\nexport default withTranslation()(ChatBackground);"]},"metadata":{},"sourceType":"module"}