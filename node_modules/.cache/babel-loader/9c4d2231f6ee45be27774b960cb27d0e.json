{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Popup/ChatInfoDialog.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport ChatInfo from '../ColumnRight/ChatInfo';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './ChatInfoDialog.css';\n\nvar ChatInfoDialog =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ChatInfoDialog, _React$Component);\n\n  function ChatInfoDialog() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ChatInfoDialog);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ChatInfoDialog)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      chatId: ApplicationStore.dialogChatId\n    };\n\n    _this.onClientUpdateMediaViewerContent = function (update) {\n      if (ApplicationStore.mediaViewerContent) {\n        _this.handleClose();\n      }\n    };\n\n    _this.onClientUpdateDialogChatId = function (update) {\n      var chatId = update.chatId;\n\n      _this.setState({\n        chatId: chatId\n      });\n    };\n\n    _this.handleClose = function () {\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateDialogChatId',\n        chatId: 0\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ChatInfoDialog, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState, nextContext) {\n      var chatId = this.state.chatId;\n      return nextState.chatId !== chatId;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      ApplicationStore.on('clientUpdateDialogChatId', this.onClientUpdateDialogChatId);\n      ApplicationStore.on('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      ApplicationStore.off('clientUpdateDialogChatId', this.onClientUpdateDialogChatId);\n      ApplicationStore.off('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var chatId = this.state.chatId;\n      if (!chatId) return null;\n      return React.createElement(Dialog, {\n        open: true,\n        transitionDuration: 0,\n        onClose: this.handleClose,\n        classes: {\n          root: 'chat-info-dialog-root',\n          container: 'chat-info-dialog-container',\n          paper: 'chat-info-dialog-paper'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(ChatInfo, {\n        className: \"chat-info-dialog-content\",\n        chatId: chatId,\n        popup: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ChatInfoDialog;\n}(React.Component);\n\nChatInfoDialog.propTypes = {};\nexport default ChatInfoDialog;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Popup/ChatInfoDialog.js"],"names":["React","Dialog","ChatInfo","ApplicationStore","TdLibController","ChatInfoDialog","state","chatId","dialogChatId","onClientUpdateMediaViewerContent","update","mediaViewerContent","handleClose","onClientUpdateDialogChatId","setState","clientUpdate","nextProps","nextState","nextContext","on","off","root","container","paper","Component","propTypes"],"mappings":";;;;;;;AAAA;;;;;;AAOA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAO,sBAAP;;IAEMC,c;;;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACJC,MAAAA,MAAM,EAAEJ,gBAAgB,CAACK;AADrB,K;;UAoBRC,gC,GAAmC,UAAAC,MAAM,EAAI;AACzC,UAAIP,gBAAgB,CAACQ,kBAArB,EAAyC;AACrC,cAAKC,WAAL;AACH;AACJ,K;;UAEDC,0B,GAA6B,UAAAH,MAAM,EAAI;AAAA,UAC3BH,MAD2B,GAChBG,MADgB,CAC3BH,MAD2B;;AAGnC,YAAKO,QAAL,CAAc;AAAEP,QAAAA,MAAM,EAANA;AAAF,OAAd;AACH,K;;UAEDK,W,GAAc,YAAM;AAChBR,MAAAA,eAAe,CAACW,YAAhB,CAA6B;AACzB,iBAAS,0BADgB;AAEzBR,QAAAA,MAAM,EAAE;AAFiB,OAA7B;AAIH,K;;;;;;;0CAjCqBS,S,EAAWC,S,EAAWC,W,EAAa;AAAA,UAC7CX,MAD6C,GAClC,KAAKD,KAD6B,CAC7CC,MAD6C;AAGrD,aAAOU,SAAS,CAACV,MAAV,KAAqBA,MAA5B;AACH;;;wCAEmB;AAChBJ,MAAAA,gBAAgB,CAACgB,EAAjB,CAAoB,0BAApB,EAAgD,KAAKN,0BAArD;AACAV,MAAAA,gBAAgB,CAACgB,EAAjB,CAAoB,gCAApB,EAAsD,KAAKV,gCAA3D;AACH;;;2CAEsB;AACnBN,MAAAA,gBAAgB,CAACiB,GAAjB,CAAqB,0BAArB,EAAiD,KAAKP,0BAAtD;AACAV,MAAAA,gBAAgB,CAACiB,GAAjB,CAAqB,gCAArB,EAAuD,KAAKX,gCAA5D;AACH;;;6BAqBQ;AAAA,UACGF,MADH,GACc,KAAKD,KADnB,CACGC,MADH;AAEL,UAAI,CAACA,MAAL,EAAa,OAAO,IAAP;AAEb,aACI,oBAAC,MAAD;AACI,QAAA,IAAI,MADR;AAEI,QAAA,kBAAkB,EAAE,CAFxB;AAGI,QAAA,OAAO,EAAE,KAAKK,WAHlB;AAII,QAAA,OAAO,EAAE;AACLS,UAAAA,IAAI,EAAE,uBADD;AAELC,UAAAA,SAAS,EAAE,4BAFN;AAGLC,UAAAA,KAAK,EAAE;AAHF,SAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SASI,oBAAC,QAAD;AAAU,QAAA,SAAS,EAAC,0BAApB;AAA+C,QAAA,MAAM,EAAEhB,MAAvD;AAA+D,QAAA,KAAK,MAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATJ,CADJ;AAaH;;;;EAzDwBP,KAAK,CAACwB,S;;AA4DnCnB,cAAc,CAACoB,SAAf,GAA2B,EAA3B;AAEA,eAAepB,cAAf","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport ChatInfo from '../ColumnRight/ChatInfo';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './ChatInfoDialog.css';\n\nclass ChatInfoDialog extends React.Component {\n    state = {\n        chatId: ApplicationStore.dialogChatId\n    };\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { chatId } = this.state;\n\n        return nextState.chatId !== chatId;\n    }\n\n    componentDidMount() {\n        ApplicationStore.on('clientUpdateDialogChatId', this.onClientUpdateDialogChatId);\n        ApplicationStore.on('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.off('clientUpdateDialogChatId', this.onClientUpdateDialogChatId);\n        ApplicationStore.off('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n    }\n\n    onClientUpdateMediaViewerContent = update => {\n        if (ApplicationStore.mediaViewerContent) {\n            this.handleClose();\n        }\n    };\n\n    onClientUpdateDialogChatId = update => {\n        const { chatId } = update;\n\n        this.setState({ chatId });\n    };\n\n    handleClose = () => {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateDialogChatId',\n            chatId: 0\n        });\n    };\n\n    render() {\n        const { chatId } = this.state;\n        if (!chatId) return null;\n\n        return (\n            <Dialog\n                open\n                transitionDuration={0}\n                onClose={this.handleClose}\n                classes={{\n                    root: 'chat-info-dialog-root',\n                    container: 'chat-info-dialog-container',\n                    paper: 'chat-info-dialog-paper'\n                }}>\n                <ChatInfo className='chat-info-dialog-content' chatId={chatId} popup />\n            </Dialog>\n        );\n    }\n}\n\nChatInfoDialog.propTypes = {};\n\nexport default ChatInfoDialog;\n"]},"metadata":{},"sourceType":"module"}