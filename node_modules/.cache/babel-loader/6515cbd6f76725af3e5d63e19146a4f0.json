{"ast":null,"code":"import _slicedToArray from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Viewer/InstantViewMediaViewerContent.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport FileProgress from './FileProgress';\nimport MediaCaption from './MediaCaption';\nimport { getSrc, getViewerFile, getViewerThumbnail } from '../../Utils/File';\nimport { isBlurredThumbnail } from '../../Utils/Media';\nimport FileStore from '../../Stores/FileStore';\nimport PlayerStore from '../../Stores/PlayerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport Caption from '../InstantView/Blocks/Caption';\nimport { isEmptyText } from '../../Utils/InstantView';\nimport SafeLink from '../Additional/SafeLink';\n\nvar InstantViewMediaViewerContent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(InstantViewMediaViewerContent, _React$Component);\n\n  function InstantViewMediaViewerContent(props) {\n    var _this;\n\n    _classCallCheck(this, InstantViewMediaViewerContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InstantViewMediaViewerContent).call(this, props));\n\n    _this.onClientUpdateMediaBlob = function (update) {\n      var fileId = update.fileId;\n      var _this$props = _this.props,\n          media = _this$props.media,\n          size = _this$props.size;\n      var file = _this.state.file;\n\n      if (file && file.id === fileId) {\n        var _getViewerFile = getViewerFile(media, size),\n            _getViewerFile2 = _slicedToArray(_getViewerFile, 4),\n            width = _getViewerFile2[0],\n            height = _getViewerFile2[1],\n            _file = _getViewerFile2[2],\n            mimeType = _getViewerFile2[3];\n\n        _this.setState({\n          width: width,\n          height: height,\n          file: _file,\n          src: getSrc(_file),\n          mimeType: mimeType\n        });\n      }\n    };\n\n    _this.onClientUpdateMediaThumbnailBlob = function (update) {\n      var fileId = update.fileId;\n      var file = _this.state.thumbnail;\n\n      if (file && file.id === fileId) {\n        _this.forceUpdate();\n      }\n    };\n\n    _this.videoRef = React.createRef();\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(InstantViewMediaViewerContent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      FileStore.on('clientUpdatePhotoBlob', this.onClientUpdateMediaBlob);\n      FileStore.on('clientUpdateVideoBlob', this.onClientUpdateMediaBlob);\n      FileStore.on('clientUpdateAnimationBlob', this.onClientUpdateMediaBlob);\n      FileStore.on('clientUpdateVideoThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n      FileStore.on('clientUpdateAnimationThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      FileStore.off('clientUpdatePhotoBlob', this.onClientUpdateMediaBlob);\n      FileStore.off('clientUpdateVideoBlob', this.onClientUpdateMediaBlob);\n      FileStore.off('clientUpdateAnimationBlob', this.onClientUpdateMediaBlob);\n      FileStore.off('clientUpdateVideoThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n      FileStore.off('clientUpdateAnimationThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      var src = this.state.src;\n\n      if (prevState.src !== src) {\n        var player = this.videoRef.current;\n        if (!player) return;\n        player.load();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          media = _this$props2.media,\n          caption = _this$props2.caption,\n          url = _this$props2.url;\n      if (!media) return null;\n      var _this$state = this.state,\n          width = _this$state.width,\n          height = _this$state.height,\n          file = _this$state.file,\n          src = _this$state.src,\n          mimeType = _this$state.mimeType,\n          thumbnailWidth = _this$state.thumbnailWidth,\n          thumbnailHeight = _this$state.thumbnailHeight,\n          thumbnail = _this$state.thumbnail,\n          isPlaying = _this$state.isPlaying;\n      if (!file) return null;\n      var thumbnailBlob = thumbnail ? FileStore.getBlob(thumbnail.id) || thumbnail.blob : null;\n      var thumbnailSrc = FileStore.getBlobUrl(thumbnailBlob);\n      var isBlurred = isBlurredThumbnail({\n        width: thumbnailWidth,\n        height: thumbnailHeight\n      });\n      var videoWidth = width;\n      var videoHeight = height;\n\n      if (Math.max(videoWidth, videoHeight) > 640) {\n        var scale = 640 / Math.max(videoWidth, videoHeight);\n        videoWidth = videoWidth > videoHeight ? 640 : Math.floor(videoWidth * scale);\n        videoHeight = videoHeight > videoWidth ? 640 : Math.floor(videoHeight * scale);\n      }\n\n      var content = null;\n      var source = src ? React.createElement(\"source\", {\n        src: src,\n        type: mimeType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }) : null;\n\n      switch (media['@type']) {\n        case 'video':\n          {\n            content = React.createElement(\"div\", {\n              className: \"media-viewer-content-wrapper\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 138\n              },\n              __self: this\n            }, React.createElement(\"video\", {\n              ref: this.videoRef,\n              className: \"media-viewer-content-video-player\",\n              onClick: this.handleContentClick,\n              controls: true,\n              autoPlay: true,\n              width: videoWidth,\n              height: videoHeight,\n              onPlay: function onPlay() {\n                _this2.setState({\n                  isPlaying: true\n                });\n\n                TdLibController.clientUpdate({\n                  '@type': 'clientUpdateMediaViewerPlay'\n                });\n              },\n              onCanPlay: function onCanPlay() {\n                var player = _this2.videoRef.current;\n\n                if (player) {\n                  player.volume = PlayerStore.volume;\n                }\n              },\n              onPause: function onPause() {\n                TdLibController.clientUpdate({\n                  '@type': 'clientUpdateMediaViewerPause'\n                });\n              },\n              onEnded: function onEnded() {\n                TdLibController.clientUpdate({\n                  '@type': 'clientUpdateMediaViewerEnded'\n                });\n              },\n              onVolumeChange: function onVolumeChange() {\n                var player = _this2.videoRef.current;\n\n                if (player) {\n                  TdLibController.clientUpdate({\n                    '@type': 'clientUpdateMediaVolume',\n                    volume: player.volume\n                  });\n                }\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 139\n              },\n              __self: this\n            }, source), !isPlaying && (!src && thumbnailSrc ? React.createElement(\"img\", {\n              className: classNames('media-viewer-content-video-thumbnail', {\n                'media-blurred': isBlurred\n              }),\n              src: thumbnailSrc,\n              alt: \"\",\n              width: videoWidth,\n              height: videoHeight,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 183\n              },\n              __self: this\n            }) : React.createElement(\"div\", {\n              className: \"media-viewer-content-video-thumbnail\",\n              style: {\n                width: videoWidth,\n                height: videoHeight\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 193\n              },\n              __self: this\n            })));\n            break;\n          }\n\n        case 'animation':\n          {\n            content = React.createElement(\"div\", {\n              className: \"media-viewer-content-wrapper\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 207\n              },\n              __self: this\n            }, React.createElement(\"video\", {\n              ref: this.videoRef,\n              className: \"media-viewer-content-video-player\",\n              onClick: this.handleContentClick,\n              loop: true,\n              autoPlay: true,\n              width: videoWidth,\n              height: videoHeight,\n              onPlay: function onPlay() {\n                _this2.setState({\n                  isPlaying: true\n                });\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 208\n              },\n              __self: this\n            }, source), !isPlaying && (!src && thumbnailSrc ? React.createElement(\"img\", {\n              className: classNames('media-viewer-content-video-thumbnail', {\n                'media-blurred': isBlurred\n              }),\n              src: thumbnailSrc,\n              alt: \"\",\n              width: videoWidth,\n              height: videoHeight,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 224\n              },\n              __self: this\n            }) : React.createElement(\"div\", {\n              className: \"media-viewer-content-video-thumbnail\",\n              style: {\n                width: videoWidth,\n                height: videoHeight\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 234\n              },\n              __self: this\n            })));\n            break;\n          }\n\n        default:\n          {\n            content = React.createElement(\"img\", {\n              className: \"media-viewer-content-image\",\n              src: src,\n              alt: \"\",\n              onClick: this.handleContentClick,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 248\n              },\n              __self: this\n            });\n          }\n      }\n\n      return React.createElement(\"div\", {\n        className: \"media-viewer-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, content, React.createElement(FileProgress, {\n        file: file,\n        zIndex: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }), caption && (!isEmptyText(caption.text) || !isEmptyText(caption.credit) || url) && React.createElement(MediaCaption, {\n        text: React.createElement(React.Fragment, null, React.createElement(Caption, {\n          text: caption.text,\n          credit: caption.credit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 261\n          },\n          __self: this\n        }), React.createElement(SafeLink, {\n          url: url,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 262\n          },\n          __self: this\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var media = props.media,\n          size = props.size,\n          caption = props.caption,\n          url = props.url;\n\n      if (media !== state.prevMedia) {\n        var _getViewerFile3 = getViewerFile(media, size),\n            _getViewerFile4 = _slicedToArray(_getViewerFile3, 4),\n            width = _getViewerFile4[0],\n            height = _getViewerFile4[1],\n            file = _getViewerFile4[2],\n            mimeType = _getViewerFile4[3];\n\n        file = FileStore.get(file.id) || file;\n\n        var _getViewerThumbnail = getViewerThumbnail(media),\n            _getViewerThumbnail2 = _slicedToArray(_getViewerThumbnail, 3),\n            thumbnailWidth = _getViewerThumbnail2[0],\n            thumbnailHeight = _getViewerThumbnail2[1],\n            thumbnail = _getViewerThumbnail2[2];\n\n        thumbnail = FileStore.get(thumbnail.id) || thumbnail;\n        return {\n          prevMedia: media,\n          speed: 1,\n          isPlaying: false,\n          width: width,\n          height: height,\n          file: file,\n          src: getSrc(file),\n          mimeType: mimeType,\n          thumbnailWidth: thumbnailWidth,\n          thumbnailHeight: thumbnailHeight,\n          thumbnail: thumbnail\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return InstantViewMediaViewerContent;\n}(React.Component);\n\nInstantViewMediaViewerContent.propTypes = {\n  media: PropTypes.object.isRequired,\n  size: PropTypes.number.isRequired,\n  caption: PropTypes.object,\n  url: PropTypes.string\n};\nexport default InstantViewMediaViewerContent;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Viewer/InstantViewMediaViewerContent.js"],"names":["React","PropTypes","classNames","FileProgress","MediaCaption","getSrc","getViewerFile","getViewerThumbnail","isBlurredThumbnail","FileStore","PlayerStore","TdLibController","Caption","isEmptyText","SafeLink","InstantViewMediaViewerContent","props","onClientUpdateMediaBlob","update","fileId","media","size","file","state","id","width","height","mimeType","setState","src","onClientUpdateMediaThumbnailBlob","thumbnail","forceUpdate","videoRef","createRef","on","off","prevProps","prevState","snapshot","player","current","load","caption","url","thumbnailWidth","thumbnailHeight","isPlaying","thumbnailBlob","getBlob","blob","thumbnailSrc","getBlobUrl","isBlurred","videoWidth","videoHeight","Math","max","scale","floor","content","source","handleContentClick","clientUpdate","volume","text","credit","prevMedia","get","speed","Component","propTypes","object","isRequired","number","string"],"mappings":";;;;;;;;AAAA;;;;;;AAOA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,MAAT,EAAiBC,aAAjB,EAAgCC,kBAAhC,QAA0D,kBAA1D;AACA,SAASC,kBAAT,QAAmC,mBAAnC;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAOC,OAAP,MAAoB,+BAApB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,OAAOC,QAAP,MAAqB,wBAArB;;IAEMC,6B;;;;;AACF,yCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,uGAAMA,KAAN;;AADe,UAgEnBC,uBAhEmB,GAgEO,UAAAC,MAAM,EAAI;AAAA,UACxBC,MADwB,GACbD,MADa,CACxBC,MADwB;AAAA,wBAER,MAAKH,KAFG;AAAA,UAExBI,KAFwB,eAExBA,KAFwB;AAAA,UAEjBC,IAFiB,eAEjBA,IAFiB;AAAA,UAGxBC,IAHwB,GAGf,MAAKC,KAHU,CAGxBD,IAHwB;;AAKhC,UAAIA,IAAI,IAAIA,IAAI,CAACE,EAAL,KAAYL,MAAxB,EAAgC;AAAA,6BACYb,aAAa,CAACc,KAAD,EAAQC,IAAR,CADzB;AAAA;AAAA,YACrBI,KADqB;AAAA,YACdC,MADc;AAAA,YACNJ,KADM;AAAA,YACAK,QADA;;AAG5B,cAAKC,QAAL,CAAc;AACVH,UAAAA,KAAK,EAALA,KADU;AAEVC,UAAAA,MAAM,EAANA,MAFU;AAGVJ,UAAAA,IAAI,EAAJA,KAHU;AAIVO,UAAAA,GAAG,EAAExB,MAAM,CAACiB,KAAD,CAJD;AAKVK,UAAAA,QAAQ,EAARA;AALU,SAAd;AAOH;AACJ,KAhFkB;;AAAA,UAkFnBG,gCAlFmB,GAkFgB,UAAAZ,MAAM,EAAI;AAAA,UACjCC,MADiC,GACtBD,MADsB,CACjCC,MADiC;AAAA,UAEtBG,IAFsB,GAEb,MAAKC,KAFQ,CAEjCQ,SAFiC;;AAIzC,UAAIT,IAAI,IAAIA,IAAI,CAACE,EAAL,KAAYL,MAAxB,EAAgC;AAC5B,cAAKa,WAAL;AACH;AACJ,KAzFkB;;AAGf,UAAKC,QAAL,GAAgBjC,KAAK,CAACkC,SAAN,EAAhB;AAEA,UAAKX,KAAL,GAAa,EAAb;AALe;AAMlB;;;;wCA+BmB;AAChBd,MAAAA,SAAS,CAAC0B,EAAV,CAAa,uBAAb,EAAsC,KAAKlB,uBAA3C;AACAR,MAAAA,SAAS,CAAC0B,EAAV,CAAa,uBAAb,EAAsC,KAAKlB,uBAA3C;AACAR,MAAAA,SAAS,CAAC0B,EAAV,CAAa,2BAAb,EAA0C,KAAKlB,uBAA/C;AACAR,MAAAA,SAAS,CAAC0B,EAAV,CAAa,gCAAb,EAA+C,KAAKL,gCAApD;AACArB,MAAAA,SAAS,CAAC0B,EAAV,CAAa,oCAAb,EAAmD,KAAKL,gCAAxD;AACH;;;2CAEsB;AACnBrB,MAAAA,SAAS,CAAC2B,GAAV,CAAc,uBAAd,EAAuC,KAAKnB,uBAA5C;AACAR,MAAAA,SAAS,CAAC2B,GAAV,CAAc,uBAAd,EAAuC,KAAKnB,uBAA5C;AACAR,MAAAA,SAAS,CAAC2B,GAAV,CAAc,2BAAd,EAA2C,KAAKnB,uBAAhD;AACAR,MAAAA,SAAS,CAAC2B,GAAV,CAAc,gCAAd,EAAgD,KAAKN,gCAArD;AACArB,MAAAA,SAAS,CAAC2B,GAAV,CAAc,oCAAd,EAAoD,KAAKN,gCAAzD;AACH;;;uCAEkBO,S,EAAWC,S,EAAWC,Q,EAAU;AAAA,UACvCV,GADuC,GAC/B,KAAKN,KAD0B,CACvCM,GADuC;;AAG/C,UAAIS,SAAS,CAACT,GAAV,KAAkBA,GAAtB,EAA2B;AACvB,YAAMW,MAAM,GAAG,KAAKP,QAAL,CAAcQ,OAA7B;AACA,YAAI,CAACD,MAAL,EAAa;AAEbA,QAAAA,MAAM,CAACE,IAAP;AACH;AACJ;;;6BA6BQ;AAAA;;AAAA,yBAC2B,KAAK1B,KADhC;AAAA,UACGI,KADH,gBACGA,KADH;AAAA,UACUuB,OADV,gBACUA,OADV;AAAA,UACmBC,GADnB,gBACmBA,GADnB;AAEL,UAAI,CAACxB,KAAL,EAAY,OAAO,IAAP;AAFP,wBAIiG,KAAKG,KAJtG;AAAA,UAIGE,KAJH,eAIGA,KAJH;AAAA,UAIUC,MAJV,eAIUA,MAJV;AAAA,UAIkBJ,IAJlB,eAIkBA,IAJlB;AAAA,UAIwBO,GAJxB,eAIwBA,GAJxB;AAAA,UAI6BF,QAJ7B,eAI6BA,QAJ7B;AAAA,UAIuCkB,cAJvC,eAIuCA,cAJvC;AAAA,UAIuDC,eAJvD,eAIuDA,eAJvD;AAAA,UAIwEf,SAJxE,eAIwEA,SAJxE;AAAA,UAImFgB,SAJnF,eAImFA,SAJnF;AAKL,UAAI,CAACzB,IAAL,EAAW,OAAO,IAAP;AAEX,UAAM0B,aAAa,GAAGjB,SAAS,GAAGtB,SAAS,CAACwC,OAAV,CAAkBlB,SAAS,CAACP,EAA5B,KAAmCO,SAAS,CAACmB,IAAhD,GAAuD,IAAtF;AACA,UAAMC,YAAY,GAAG1C,SAAS,CAAC2C,UAAV,CAAqBJ,aAArB,CAArB;AACA,UAAMK,SAAS,GAAG7C,kBAAkB,CAAC;AAAEiB,QAAAA,KAAK,EAAEoB,cAAT;AAAyBnB,QAAAA,MAAM,EAAEoB;AAAjC,OAAD,CAApC;AAEA,UAAIQ,UAAU,GAAG7B,KAAjB;AACA,UAAI8B,WAAW,GAAG7B,MAAlB;;AACA,UAAI8B,IAAI,CAACC,GAAL,CAASH,UAAT,EAAqBC,WAArB,IAAoC,GAAxC,EAA6C;AACzC,YAAMG,KAAK,GAAG,MAAMF,IAAI,CAACC,GAAL,CAASH,UAAT,EAAqBC,WAArB,CAApB;AACAD,QAAAA,UAAU,GAAGA,UAAU,GAAGC,WAAb,GAA2B,GAA3B,GAAiCC,IAAI,CAACG,KAAL,CAAWL,UAAU,GAAGI,KAAxB,CAA9C;AACAH,QAAAA,WAAW,GAAGA,WAAW,GAAGD,UAAd,GAA2B,GAA3B,GAAiCE,IAAI,CAACG,KAAL,CAAWJ,WAAW,GAAGG,KAAzB,CAA/C;AACH;;AAED,UAAIE,OAAO,GAAG,IAAd;AACA,UAAMC,MAAM,GAAGhC,GAAG,GAAG;AAAQ,QAAA,GAAG,EAAEA,GAAb;AAAkB,QAAA,IAAI,EAAEF,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAH,GAAyC,IAA3D;;AACA,cAAQP,KAAK,CAAC,OAAD,CAAb;AACI,aAAK,OAAL;AAAc;AACVwC,YAAAA,OAAO,GACH;AAAK,cAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACI;AACI,cAAA,GAAG,EAAE,KAAK3B,QADd;AAEI,cAAA,SAAS,EAAC,mCAFd;AAGI,cAAA,OAAO,EAAE,KAAK6B,kBAHlB;AAII,cAAA,QAAQ,MAJZ;AAKI,cAAA,QAAQ,MALZ;AAMI,cAAA,KAAK,EAAER,UANX;AAOI,cAAA,MAAM,EAAEC,WAPZ;AAQI,cAAA,MAAM,EAAE,kBAAM;AACV,gBAAA,MAAI,CAAC3B,QAAL,CAAc;AAAEmB,kBAAAA,SAAS,EAAE;AAAb,iBAAd;;AACApC,gBAAAA,eAAe,CAACoD,YAAhB,CAA6B;AACzB,2BAAS;AADgB,iBAA7B;AAGH,eAbL;AAcI,cAAA,SAAS,EAAE,qBAAM;AACb,oBAAMvB,MAAM,GAAG,MAAI,CAACP,QAAL,CAAcQ,OAA7B;;AACA,oBAAID,MAAJ,EAAY;AACRA,kBAAAA,MAAM,CAACwB,MAAP,GAAgBtD,WAAW,CAACsD,MAA5B;AACH;AACJ,eAnBL;AAoBI,cAAA,OAAO,EAAE,mBAAM;AACXrD,gBAAAA,eAAe,CAACoD,YAAhB,CAA6B;AACzB,2BAAS;AADgB,iBAA7B;AAGH,eAxBL;AAyBI,cAAA,OAAO,EAAE,mBAAM;AACXpD,gBAAAA,eAAe,CAACoD,YAAhB,CAA6B;AACzB,2BAAS;AADgB,iBAA7B;AAGH,eA7BL;AA8BI,cAAA,cAAc,EAAE,0BAAM;AAClB,oBAAMvB,MAAM,GAAG,MAAI,CAACP,QAAL,CAAcQ,OAA7B;;AACA,oBAAID,MAAJ,EAAY;AACR7B,kBAAAA,eAAe,CAACoD,YAAhB,CAA6B;AACzB,6BAAS,yBADgB;AAEzBC,oBAAAA,MAAM,EAAExB,MAAM,CAACwB;AAFU,mBAA7B;AAIH;AACJ,eAtCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAwCKH,MAxCL,CADJ,EA2CK,CAACd,SAAD,KACI,CAAClB,GAAD,IAAQsB,YAAR,GACG;AACI,cAAA,SAAS,EAAEjD,UAAU,CAAC,sCAAD,EAAyC;AAC1D,iCAAiBmD;AADyC,eAAzC,CADzB;AAII,cAAA,GAAG,EAAEF,YAJT;AAKI,cAAA,GAAG,EAAC,EALR;AAMI,cAAA,KAAK,EAAEG,UANX;AAOI,cAAA,MAAM,EAAEC,WAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADH,GAWG;AACI,cAAA,SAAS,EAAC,sCADd;AAEI,cAAA,KAAK,EAAE;AACH9B,gBAAAA,KAAK,EAAE6B,UADJ;AAEH5B,gBAAAA,MAAM,EAAE6B;AAFL,eAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZP,CA3CL,CADJ;AAkEA;AACH;;AACD,aAAK,WAAL;AAAkB;AACdK,YAAAA,OAAO,GACH;AAAK,cAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACI;AACI,cAAA,GAAG,EAAE,KAAK3B,QADd;AAEI,cAAA,SAAS,EAAC,mCAFd;AAGI,cAAA,OAAO,EAAE,KAAK6B,kBAHlB;AAII,cAAA,IAAI,MAJR;AAKI,cAAA,QAAQ,MALZ;AAMI,cAAA,KAAK,EAAER,UANX;AAOI,cAAA,MAAM,EAAEC,WAPZ;AAQI,cAAA,MAAM,EAAE,kBAAM;AACV,gBAAA,MAAI,CAAC3B,QAAL,CAAc;AAAEmB,kBAAAA,SAAS,EAAE;AAAb,iBAAd;AACH,eAVL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAYKc,MAZL,CADJ,EAeK,CAACd,SAAD,KACI,CAAClB,GAAD,IAAQsB,YAAR,GACG;AACI,cAAA,SAAS,EAAEjD,UAAU,CAAC,sCAAD,EAAyC;AAC1D,iCAAiBmD;AADyC,eAAzC,CADzB;AAII,cAAA,GAAG,EAAEF,YAJT;AAKI,cAAA,GAAG,EAAC,EALR;AAMI,cAAA,KAAK,EAAEG,UANX;AAOI,cAAA,MAAM,EAAEC,WAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADH,GAWG;AACI,cAAA,SAAS,EAAC,sCADd;AAEI,cAAA,KAAK,EAAE;AACH9B,gBAAAA,KAAK,EAAE6B,UADJ;AAEH5B,gBAAAA,MAAM,EAAE6B;AAFL,eAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZP,CAfL,CADJ;AAsCA;AACH;;AACD;AAAS;AACLK,YAAAA,OAAO,GACH;AAAK,cAAA,SAAS,EAAC,4BAAf;AAA4C,cAAA,GAAG,EAAE/B,GAAjD;AAAsD,cAAA,GAAG,EAAC,EAA1D;AAA6D,cAAA,OAAO,EAAE,KAAKiC,kBAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAGH;AAnHL;;AAsHA,aACI;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKF,OADL,EAEI,oBAAC,YAAD;AAAc,QAAA,IAAI,EAAEtC,IAApB;AAA0B,QAAA,MAAM,EAAE,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGKqB,OAAO,KAAK,CAAC9B,WAAW,CAAC8B,OAAO,CAACsB,IAAT,CAAZ,IAA8B,CAACpD,WAAW,CAAC8B,OAAO,CAACuB,MAAT,CAA1C,IAA8DtB,GAAnE,CAAP,IACG,oBAAC,YAAD;AACI,QAAA,IAAI,EACA,0CACI,oBAAC,OAAD;AAAS,UAAA,IAAI,EAAED,OAAO,CAACsB,IAAvB;AAA6B,UAAA,MAAM,EAAEtB,OAAO,CAACuB,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,EAEI,oBAAC,QAAD;AAAU,UAAA,GAAG,EAAEtB,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ,CAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJR,CADJ;AAgBH;;;6CA9O+B5B,K,EAAOO,K,EAAO;AAAA,UAClCH,KADkC,GACJJ,KADI,CAClCI,KADkC;AAAA,UAC3BC,IAD2B,GACJL,KADI,CAC3BK,IAD2B;AAAA,UACrBsB,OADqB,GACJ3B,KADI,CACrB2B,OADqB;AAAA,UACZC,GADY,GACJ5B,KADI,CACZ4B,GADY;;AAG1C,UAAIxB,KAAK,KAAKG,KAAK,CAAC4C,SAApB,EAA+B;AAAA,8BACW7D,aAAa,CAACc,KAAD,EAAQC,IAAR,CADxB;AAAA;AAAA,YACtBI,KADsB;AAAA,YACfC,MADe;AAAA,YACPJ,IADO;AAAA,YACDK,QADC;;AAE3BL,QAAAA,IAAI,GAAGb,SAAS,CAAC2D,GAAV,CAAc9C,IAAI,CAACE,EAAnB,KAA0BF,IAAjC;;AAF2B,kCAIwBf,kBAAkB,CAACa,KAAD,CAJ1C;AAAA;AAAA,YAItByB,cAJsB;AAAA,YAINC,eAJM;AAAA,YAIWf,SAJX;;AAK3BA,QAAAA,SAAS,GAAGtB,SAAS,CAAC2D,GAAV,CAAcrC,SAAS,CAACP,EAAxB,KAA+BO,SAA3C;AAEA,eAAO;AACHoC,UAAAA,SAAS,EAAE/C,KADR;AAGHiD,UAAAA,KAAK,EAAE,CAHJ;AAIHtB,UAAAA,SAAS,EAAE,KAJR;AAKHtB,UAAAA,KAAK,EAALA,KALG;AAMHC,UAAAA,MAAM,EAANA,MANG;AAOHJ,UAAAA,IAAI,EAAJA,IAPG;AAQHO,UAAAA,GAAG,EAAExB,MAAM,CAACiB,IAAD,CARR;AASHK,UAAAA,QAAQ,EAARA,QATG;AAUHkB,UAAAA,cAAc,EAAdA,cAVG;AAWHC,UAAAA,eAAe,EAAfA,eAXG;AAYHf,UAAAA,SAAS,EAATA;AAZG,SAAP;AAcH;;AAED,aAAO,IAAP;AACH;;;;EApCuC/B,KAAK,CAACsE,S;;AA0PlDvD,6BAA6B,CAACwD,SAA9B,GAA0C;AACtCnD,EAAAA,KAAK,EAAEnB,SAAS,CAACuE,MAAV,CAAiBC,UADc;AAEtCpD,EAAAA,IAAI,EAAEpB,SAAS,CAACyE,MAAV,CAAiBD,UAFe;AAGtC9B,EAAAA,OAAO,EAAE1C,SAAS,CAACuE,MAHmB;AAItC5B,EAAAA,GAAG,EAAE3C,SAAS,CAAC0E;AAJuB,CAA1C;AAOA,eAAe5D,6BAAf","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport FileProgress from './FileProgress';\nimport MediaCaption from './MediaCaption';\nimport { getSrc, getViewerFile, getViewerThumbnail } from '../../Utils/File';\nimport { isBlurredThumbnail } from '../../Utils/Media';\nimport FileStore from '../../Stores/FileStore';\nimport PlayerStore from '../../Stores/PlayerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport Caption from '../InstantView/Blocks/Caption';\nimport { isEmptyText } from '../../Utils/InstantView';\nimport SafeLink from '../Additional/SafeLink';\n\nclass InstantViewMediaViewerContent extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.videoRef = React.createRef();\n\n        this.state = {};\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        const { media, size, caption, url } = props;\n\n        if (media !== state.prevMedia) {\n            let [width, height, file, mimeType] = getViewerFile(media, size);\n            file = FileStore.get(file.id) || file;\n\n            let [thumbnailWidth, thumbnailHeight, thumbnail] = getViewerThumbnail(media);\n            thumbnail = FileStore.get(thumbnail.id) || thumbnail;\n\n            return {\n                prevMedia: media,\n\n                speed: 1,\n                isPlaying: false,\n                width,\n                height,\n                file,\n                src: getSrc(file),\n                mimeType,\n                thumbnailWidth,\n                thumbnailHeight,\n                thumbnail\n            };\n        }\n\n        return null;\n    }\n\n    componentDidMount() {\n        FileStore.on('clientUpdatePhotoBlob', this.onClientUpdateMediaBlob);\n        FileStore.on('clientUpdateVideoBlob', this.onClientUpdateMediaBlob);\n        FileStore.on('clientUpdateAnimationBlob', this.onClientUpdateMediaBlob);\n        FileStore.on('clientUpdateVideoThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n        FileStore.on('clientUpdateAnimationThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n    }\n\n    componentWillUnmount() {\n        FileStore.off('clientUpdatePhotoBlob', this.onClientUpdateMediaBlob);\n        FileStore.off('clientUpdateVideoBlob', this.onClientUpdateMediaBlob);\n        FileStore.off('clientUpdateAnimationBlob', this.onClientUpdateMediaBlob);\n        FileStore.off('clientUpdateVideoThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n        FileStore.off('clientUpdateAnimationThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const { src } = this.state;\n\n        if (prevState.src !== src) {\n            const player = this.videoRef.current;\n            if (!player) return;\n\n            player.load();\n        }\n    }\n\n    onClientUpdateMediaBlob = update => {\n        const { fileId } = update;\n        const { media, size } = this.props;\n        const { file } = this.state;\n\n        if (file && file.id === fileId) {\n            const [width, height, file, mimeType] = getViewerFile(media, size);\n\n            this.setState({\n                width,\n                height,\n                file,\n                src: getSrc(file),\n                mimeType\n            });\n        }\n    };\n\n    onClientUpdateMediaThumbnailBlob = update => {\n        const { fileId } = update;\n        const { thumbnail: file } = this.state;\n\n        if (file && file.id === fileId) {\n            this.forceUpdate();\n        }\n    };\n\n    render() {\n        const { media, caption, url } = this.props;\n        if (!media) return null;\n\n        const { width, height, file, src, mimeType, thumbnailWidth, thumbnailHeight, thumbnail, isPlaying } = this.state;\n        if (!file) return null;\n\n        const thumbnailBlob = thumbnail ? FileStore.getBlob(thumbnail.id) || thumbnail.blob : null;\n        const thumbnailSrc = FileStore.getBlobUrl(thumbnailBlob);\n        const isBlurred = isBlurredThumbnail({ width: thumbnailWidth, height: thumbnailHeight });\n\n        let videoWidth = width;\n        let videoHeight = height;\n        if (Math.max(videoWidth, videoHeight) > 640) {\n            const scale = 640 / Math.max(videoWidth, videoHeight);\n            videoWidth = videoWidth > videoHeight ? 640 : Math.floor(videoWidth * scale);\n            videoHeight = videoHeight > videoWidth ? 640 : Math.floor(videoHeight * scale);\n        }\n\n        let content = null;\n        const source = src ? <source src={src} type={mimeType}/> : null;\n        switch (media['@type']) {\n            case 'video': {\n                content = (\n                    <div className='media-viewer-content-wrapper'>\n                        <video\n                            ref={this.videoRef}\n                            className='media-viewer-content-video-player'\n                            onClick={this.handleContentClick}\n                            controls\n                            autoPlay\n                            width={videoWidth}\n                            height={videoHeight}\n                            onPlay={() => {\n                                this.setState({ isPlaying: true });\n                                TdLibController.clientUpdate({\n                                    '@type': 'clientUpdateMediaViewerPlay'\n                                });\n                            }}\n                            onCanPlay={() => {\n                                const player = this.videoRef.current;\n                                if (player) {\n                                    player.volume = PlayerStore.volume;\n                                }\n                            }}\n                            onPause={() => {\n                                TdLibController.clientUpdate({\n                                    '@type': 'clientUpdateMediaViewerPause'\n                                });\n                            }}\n                            onEnded={() => {\n                                TdLibController.clientUpdate({\n                                    '@type': 'clientUpdateMediaViewerEnded'\n                                });\n                            }}\n                            onVolumeChange={() => {\n                                const player = this.videoRef.current;\n                                if (player) {\n                                    TdLibController.clientUpdate({\n                                        '@type': 'clientUpdateMediaVolume',\n                                        volume: player.volume\n                                    });\n                                }\n                            }}\n                        >\n                            {source}\n                        </video>\n                        {!isPlaying &&\n                            (!src && thumbnailSrc ? (\n                                <img\n                                    className={classNames('media-viewer-content-video-thumbnail', {\n                                        'media-blurred': isBlurred\n                                    })}\n                                    src={thumbnailSrc}\n                                    alt=''\n                                    width={videoWidth}\n                                    height={videoHeight}\n                                />\n                            ) : (\n                                <div\n                                    className='media-viewer-content-video-thumbnail'\n                                    style={{\n                                        width: videoWidth,\n                                        height: videoHeight\n                                    }}\n                                />\n                            ))}\n                    </div>\n                );\n                break;\n            }\n            case 'animation': {\n                content = (\n                    <div className='media-viewer-content-wrapper'>\n                        <video\n                            ref={this.videoRef}\n                            className='media-viewer-content-video-player'\n                            onClick={this.handleContentClick}\n                            loop\n                            autoPlay\n                            width={videoWidth}\n                            height={videoHeight}\n                            onPlay={() => {\n                                this.setState({ isPlaying: true });\n                            }}\n                        >\n                            {source}\n                        </video>\n                        {!isPlaying &&\n                            (!src && thumbnailSrc ? (\n                                <img\n                                    className={classNames('media-viewer-content-video-thumbnail', {\n                                        'media-blurred': isBlurred\n                                    })}\n                                    src={thumbnailSrc}\n                                    alt=''\n                                    width={videoWidth}\n                                    height={videoHeight}\n                                />\n                            ) : (\n                                <div\n                                    className='media-viewer-content-video-thumbnail'\n                                    style={{\n                                        width: videoWidth,\n                                        height: videoHeight\n                                    }}\n                                />\n                            ))}\n                    </div>\n                );\n                break;\n            }\n            default: {\n                content = (\n                    <img className='media-viewer-content-image' src={src} alt='' onClick={this.handleContentClick} />\n                );\n            }\n        }\n\n        return (\n            <div className='media-viewer-content'>\n                {content}\n                <FileProgress file={file} zIndex={2} />\n                {caption && (!isEmptyText(caption.text) || !isEmptyText(caption.credit) || url) && (\n                    <MediaCaption\n                        text={\n                            <>\n                                <Caption text={caption.text} credit={caption.credit} />\n                                <SafeLink url={url} />\n                            </>\n                        }\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nInstantViewMediaViewerContent.propTypes = {\n    media: PropTypes.object.isRequired,\n    size: PropTypes.number.isRequired,\n    caption: PropTypes.object,\n    url: PropTypes.string\n};\n\nexport default InstantViewMediaViewerContent;\n"]},"metadata":{},"sourceType":"module"}