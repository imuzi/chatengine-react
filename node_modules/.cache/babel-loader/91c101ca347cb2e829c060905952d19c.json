{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport EventEmitter from './EventEmitter';\nimport TdLibController from '../Controllers/TdLibController';\n\nvar SupergroupStore =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(SupergroupStore, _EventEmitter);\n\n  function SupergroupStore() {\n    var _this;\n\n    _classCallCheck(this, SupergroupStore);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SupergroupStore).call(this));\n\n    _this.reset = function () {\n      _this.items = new Map();\n      _this.fullInfoItems = new Map();\n    };\n\n    _this.onUpdate = function (update) {\n      switch (update['@type']) {\n        case 'updateAuthorizationState':\n          {\n            var authorization_state = update.authorization_state;\n            if (!authorization_state) break;\n\n            switch (authorization_state['@type']) {\n              case 'authorizationStateClosed':\n                {\n                  _this.reset();\n\n                  break;\n                }\n            }\n\n            break;\n          }\n\n        case 'updateSupergroup':\n          _this.set(update.supergroup);\n\n          _this.emit(update['@type'], update);\n\n          break;\n\n        case 'updateSupergroupFullInfo':\n          _this.setFullInfo(update.supergroup_id, update.supergroup_full_info);\n\n          _this.emit(update['@type'], update);\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    _this.onClientUpdate = function (update) {};\n\n    _this.addTdLibListener = function () {\n      TdLibController.on('update', _this.onUpdate);\n      TdLibController.on('clientUpdate', _this.onClientUpdate);\n    };\n\n    _this.removeTdLibListener = function () {\n      TdLibController.off('update', _this.onUpdate);\n      TdLibController.off('clientUpdate', _this.onClientUpdate);\n    };\n\n    _this.reset();\n\n    _this.addTdLibListener();\n\n    return _this;\n  }\n\n  _createClass(SupergroupStore, [{\n    key: \"get\",\n    value: function get(id) {\n      return this.items.get(id);\n    }\n  }, {\n    key: \"set\",\n    value: function set(supergroup) {\n      this.items.set(supergroup.id, supergroup);\n    }\n  }, {\n    key: \"getFullInfo\",\n    value: function getFullInfo(id) {\n      return this.fullInfoItems.get(id);\n    }\n  }, {\n    key: \"setFullInfo\",\n    value: function setFullInfo(id, fullInfo) {\n      this.fullInfoItems.set(id, fullInfo);\n    }\n  }]);\n\n  return SupergroupStore;\n}(EventEmitter);\n\nvar store = new SupergroupStore();\nwindow.supergroup = store;\nexport default store;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Stores/SupergroupStore.js"],"names":["EventEmitter","TdLibController","SupergroupStore","reset","items","Map","fullInfoItems","onUpdate","update","authorization_state","set","supergroup","emit","setFullInfo","supergroup_id","supergroup_full_info","onClientUpdate","addTdLibListener","on","removeTdLibListener","off","id","get","fullInfo","store","window"],"mappings":";;;;;;AAAA;;;;;;AAOA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,OAAOC,eAAP,MAA4B,gCAA5B;;IAEMC,e;;;;;AACF,6BAAc;AAAA;;AAAA;;AACV;;AADU,UAQdC,KARc,GAQN,YAAM;AACV,YAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACA,YAAKC,aAAL,GAAqB,IAAID,GAAJ,EAArB;AACH,KAXa;;AAAA,UAadE,QAbc,GAaH,UAAAC,MAAM,EAAI;AACjB,cAAQA,MAAM,CAAC,OAAD,CAAd;AACI,aAAK,0BAAL;AAAiC;AAAA,gBACrBC,mBADqB,GACGD,MADH,CACrBC,mBADqB;AAE7B,gBAAI,CAACA,mBAAL,EAA0B;;AAE1B,oBAAQA,mBAAmB,CAAC,OAAD,CAA3B;AACI,mBAAK,0BAAL;AAAiC;AAC7B,wBAAKN,KAAL;;AACA;AACH;AAJL;;AAOA;AACH;;AACD,aAAK,kBAAL;AACI,gBAAKO,GAAL,CAASF,MAAM,CAACG,UAAhB;;AAEA,gBAAKC,IAAL,CAAUJ,MAAM,CAAC,OAAD,CAAhB,EAA2BA,MAA3B;;AACA;;AACJ,aAAK,0BAAL;AACI,gBAAKK,WAAL,CAAiBL,MAAM,CAACM,aAAxB,EAAuCN,MAAM,CAACO,oBAA9C;;AAEA,gBAAKH,IAAL,CAAUJ,MAAM,CAAC,OAAD,CAAhB,EAA2BA,MAA3B;;AACA;;AACJ;AACI;AAzBR;AA2BH,KAzCa;;AAAA,UA2CdQ,cA3Cc,GA2CG,UAAAR,MAAM,EAAI,CAAE,CA3Cf;;AAAA,UA6CdS,gBA7Cc,GA6CK,YAAM;AACrBhB,MAAAA,eAAe,CAACiB,EAAhB,CAAmB,QAAnB,EAA6B,MAAKX,QAAlC;AACAN,MAAAA,eAAe,CAACiB,EAAhB,CAAmB,cAAnB,EAAmC,MAAKF,cAAxC;AACH,KAhDa;;AAAA,UAkDdG,mBAlDc,GAkDQ,YAAM;AACxBlB,MAAAA,eAAe,CAACmB,GAAhB,CAAoB,QAApB,EAA8B,MAAKb,QAAnC;AACAN,MAAAA,eAAe,CAACmB,GAAhB,CAAoB,cAApB,EAAoC,MAAKJ,cAAzC;AACH,KArDa;;AAGV,UAAKb,KAAL;;AAEA,UAAKc,gBAAL;;AALU;AAMb;;;;wBAiDGI,E,EAAI;AACJ,aAAO,KAAKjB,KAAL,CAAWkB,GAAX,CAAeD,EAAf,CAAP;AACH;;;wBAEGV,U,EAAY;AACZ,WAAKP,KAAL,CAAWM,GAAX,CAAeC,UAAU,CAACU,EAA1B,EAA8BV,UAA9B;AACH;;;gCAEWU,E,EAAI;AACZ,aAAO,KAAKf,aAAL,CAAmBgB,GAAnB,CAAuBD,EAAvB,CAAP;AACH;;;gCAEWA,E,EAAIE,Q,EAAU;AACtB,WAAKjB,aAAL,CAAmBI,GAAnB,CAAuBW,EAAvB,EAA2BE,QAA3B;AACH;;;;EAtEyBvB,Y;;AAyE9B,IAAMwB,KAAK,GAAG,IAAItB,eAAJ,EAAd;AACAuB,MAAM,CAACd,UAAP,GAAoBa,KAApB;AACA,eAAeA,KAAf","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport EventEmitter from './EventEmitter';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass SupergroupStore extends EventEmitter {\n    constructor() {\n        super();\n\n        this.reset();\n\n        this.addTdLibListener();\n    }\n\n    reset = () => {\n        this.items = new Map();\n        this.fullInfoItems = new Map();\n    };\n\n    onUpdate = update => {\n        switch (update['@type']) {\n            case 'updateAuthorizationState': {\n                const { authorization_state } = update;\n                if (!authorization_state) break;\n\n                switch (authorization_state['@type']) {\n                    case 'authorizationStateClosed': {\n                        this.reset();\n                        break;\n                    }\n                }\n\n                break;\n            }\n            case 'updateSupergroup':\n                this.set(update.supergroup);\n\n                this.emit(update['@type'], update);\n                break;\n            case 'updateSupergroupFullInfo':\n                this.setFullInfo(update.supergroup_id, update.supergroup_full_info);\n\n                this.emit(update['@type'], update);\n                break;\n            default:\n                break;\n        }\n    };\n\n    onClientUpdate = update => {};\n\n    addTdLibListener = () => {\n        TdLibController.on('update', this.onUpdate);\n        TdLibController.on('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.off('update', this.onUpdate);\n        TdLibController.off('clientUpdate', this.onClientUpdate);\n    };\n\n    get(id) {\n        return this.items.get(id);\n    }\n\n    set(supergroup) {\n        this.items.set(supergroup.id, supergroup);\n    }\n\n    getFullInfo(id) {\n        return this.fullInfoItems.get(id);\n    }\n\n    setFullInfo(id, fullInfo) {\n        this.fullInfoItems.set(id, fullInfo);\n    }\n}\n\nconst store = new SupergroupStore();\nwindow.supergroup = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}