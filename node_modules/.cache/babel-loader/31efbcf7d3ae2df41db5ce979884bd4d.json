{"ast":null,"code":"import _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nexport var KeyboardHandler = function KeyboardHandler(onKeyDown) {\n  _classCallCheck(this, KeyboardHandler);\n\n  this.onKeyDown = onKeyDown;\n};\n\nvar KeyboardManager =\n/*#__PURE__*/\nfunction () {\n  function KeyboardManager() {\n    var _this = this;\n\n    _classCallCheck(this, KeyboardManager);\n\n    this.handleKeyDown = function (event) {\n      var handlers = _this.handlers;\n      if (!handlers.length) return;\n      var handler = handlers[handlers.length - 1];\n\n      if (handler) {\n        // event.preventDefault();\n        // event.stopPropagation();\n        var onKeyDown = handler.onKeyDown;\n\n        if (onKeyDown) {\n          onKeyDown(event);\n        }\n      }\n    };\n\n    this.handlers = [];\n    document.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  _createClass(KeyboardManager, [{\n    key: \"add\",\n    value: function add(handler) {\n      // console.log('[sm] add', page);\n      this.handlers.push(handler);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(handler) {\n      // console.log('[sm] remove', page);\n      var index = this.handlers.indexOf(handler);\n      if (index === -1) return;\n      this.handlers.splice(index, 1);\n    }\n  }]);\n\n  return KeyboardManager;\n}();\n\nvar manager = new KeyboardManager();\nexport default manager;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Additional/KeyboardManager.js"],"names":["KeyboardHandler","onKeyDown","KeyboardManager","handleKeyDown","event","handlers","length","handler","document","addEventListener","push","index","indexOf","splice","manager"],"mappings":";;;AAAA;;;;;;AAOA,WAAaA,eAAb,GACI,yBAAYC,SAAZ,EAAuB;AAAA;;AACnB,OAAKA,SAAL,GAAiBA,SAAjB;AACH,CAHL;;IAMMC,e;;;AACF,6BAAc;AAAA;;AAAA;;AAAA,SAMdC,aANc,GAME,UAAAC,KAAK,EAAI;AAAA,UACbC,QADa,GACA,KADA,CACbA,QADa;AAErB,UAAI,CAACA,QAAQ,CAACC,MAAd,EAAsB;AAEtB,UAAMC,OAAO,GAAGF,QAAQ,CAACA,QAAQ,CAACC,MAAT,GAAkB,CAAnB,CAAxB;;AACA,UAAIC,OAAJ,EAAa;AACT;AACA;AAFS,YAIDN,SAJC,GAIaM,OAJb,CAIDN,SAJC;;AAKT,YAAIA,SAAJ,EAAe;AACXA,UAAAA,SAAS,CAACG,KAAD,CAAT;AACH;AACJ;AACJ,KApBa;;AACV,SAAKC,QAAL,GAAgB,EAAhB;AAEAG,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqC,KAAKN,aAA1C;AACH;;;;wBAkBGI,O,EAAS;AACT;AACA,WAAKF,QAAL,CAAcK,IAAd,CAAmBH,OAAnB;AACH;;;2BAEMA,O,EAAS;AACZ;AACA,UAAMI,KAAK,GAAG,KAAKN,QAAL,CAAcO,OAAd,CAAsBL,OAAtB,CAAd;AACA,UAAII,KAAK,KAAK,CAAC,CAAf,EAAkB;AAElB,WAAKN,QAAL,CAAcQ,MAAd,CAAqBF,KAArB,EAA4B,CAA5B;AACH;;;;;;AAGL,IAAMG,OAAO,GAAG,IAAIZ,eAAJ,EAAhB;AACA,eAAeY,OAAf","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport class KeyboardHandler {\n    constructor(onKeyDown) {\n        this.onKeyDown = onKeyDown;\n    }\n}\n\nclass KeyboardManager {\n    constructor() {\n        this.handlers = [];\n\n        document.addEventListener('keydown', this.handleKeyDown);\n    }\n\n    handleKeyDown = event => {\n        const { handlers } = this;\n        if (!handlers.length) return;\n\n        const handler = handlers[handlers.length - 1];\n        if (handler) {\n            // event.preventDefault();\n            // event.stopPropagation();\n\n            const { onKeyDown } = handler;\n            if (onKeyDown) {\n                onKeyDown(event);\n            }\n        }\n    };\n\n    add(handler) {\n        // console.log('[sm] add', page);\n        this.handlers.push(handler);\n    }\n\n    remove(handler) {\n        // console.log('[sm] remove', page);\n        const index = this.handlers.indexOf(handler);\n        if (index === -1) return;\n\n        this.handlers.splice(index, 1);\n    }\n}\n\nconst manager = new KeyboardManager();\nexport default manager;\n"]},"metadata":{},"sourceType":"module"}