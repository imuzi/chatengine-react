{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Tile/DialogMeta.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport Status from '../Message/Status';\nimport { getLastMessageDate, isMeChat } from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport './DialogMeta.css';\n\nvar DialogMeta =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DialogMeta, _React$Component);\n\n  function DialogMeta() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DialogMeta);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DialogMeta)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onClientUpdateClearHistory = function (update) {\n      var chatId = _this.props.chatId;\n\n      if (chatId === update.chatId) {\n        _this.clearHistory = update.inProgress;\n\n        _this.forceUpdate();\n      }\n    };\n\n    _this.onFastUpdatingComplete = function (update) {\n      _this.forceUpdate();\n    };\n\n    _this.onUpdate = function (update) {\n      var chatId = _this.props.chatId;\n      if (chatId !== update.chat_id) return;\n\n      _this.forceUpdate();\n    };\n\n    return _this;\n  }\n\n  _createClass(DialogMeta, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var chatId = this.props.chatId;\n\n      if (nextProps.chatId !== chatId) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n      ChatStore.on('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n      ChatStore.on('updateChatDraftMessage', this.onUpdate);\n      ChatStore.on('updateChatLastMessage', this.onUpdate);\n      ChatStore.on('updateChatReadInbox', this.onUpdate);\n      ChatStore.on('updateChatUnreadMentionCount', this.onUpdate);\n      ChatStore.on('updateMessageMentionRead', this.onUpdate);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      ChatStore.off('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n      ChatStore.off('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n      ChatStore.off('updateChatDraftMessage', this.onUpdate);\n      ChatStore.off('updateChatLastMessage', this.onUpdate);\n      ChatStore.off('updateChatReadInbox', this.onUpdate);\n      ChatStore.off('updateChatUnreadMentionCount', this.onUpdate);\n      ChatStore.off('updateMessageMentionRead', this.onUpdate);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.clearHistory) return null;\n      var chatId = this.props.chatId;\n      var chat = ChatStore.get(chatId);\n      if (!chat) return null;\n      var isMe = isMeChat(chatId);\n      var last_message = chat.last_message;\n      if (!last_message) return null;\n      var date = getLastMessageDate(chat);\n      if (!date) return null;\n      var id = last_message.id,\n          is_outgoing = last_message.is_outgoing;\n      return React.createElement(\"div\", {\n        className: \"dialog-meta\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, is_outgoing && !isMe && React.createElement(React.Fragment, null, React.createElement(Status, {\n        chatId: chatId,\n        messageId: id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \" \")), date);\n    }\n  }]);\n\n  return DialogMeta;\n}(React.Component);\n\nexport default DialogMeta;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Tile/DialogMeta.js"],"names":["React","Status","getLastMessageDate","isMeChat","ChatStore","DialogMeta","onClientUpdateClearHistory","update","chatId","props","clearHistory","inProgress","forceUpdate","onFastUpdatingComplete","onUpdate","chat_id","nextProps","nextState","on","off","chat","get","isMe","last_message","date","id","is_outgoing","Component"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport Status from '../Message/Status';\nimport { getLastMessageDate, isMeChat } from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport './DialogMeta.css';\n\nclass DialogMeta extends React.Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        const { chatId } = this.props;\n\n        if (nextProps.chatId !== chatId) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.on('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.on('updateChatDraftMessage', this.onUpdate);\n        ChatStore.on('updateChatLastMessage', this.onUpdate);\n        ChatStore.on('updateChatReadInbox', this.onUpdate);\n        ChatStore.on('updateChatUnreadMentionCount', this.onUpdate);\n        ChatStore.on('updateMessageMentionRead', this.onUpdate);\n    }\n\n    componentWillUnmount() {\n        ChatStore.off('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.off('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.off('updateChatDraftMessage', this.onUpdate);\n        ChatStore.off('updateChatLastMessage', this.onUpdate);\n        ChatStore.off('updateChatReadInbox', this.onUpdate);\n        ChatStore.off('updateChatUnreadMentionCount', this.onUpdate);\n        ChatStore.off('updateMessageMentionRead', this.onUpdate);\n    }\n\n    onClientUpdateClearHistory = update => {\n        const { chatId } = this.props;\n\n        if (chatId === update.chatId) {\n            this.clearHistory = update.inProgress;\n            this.forceUpdate();\n        }\n    };\n\n    onFastUpdatingComplete = update => {\n        this.forceUpdate();\n    };\n\n    onUpdate = update => {\n        const { chatId } = this.props;\n\n        if (chatId !== update.chat_id) return;\n\n        this.forceUpdate();\n    };\n\n    render() {\n        if (this.clearHistory) return null;\n\n        const { chatId } = this.props;\n\n        const chat = ChatStore.get(chatId);\n        if (!chat) return null;\n\n        const isMe = isMeChat(chatId);\n\n        const { last_message } = chat;\n        if (!last_message) return null;\n\n        const date = getLastMessageDate(chat);\n        if (!date) return null;\n\n        const { id, is_outgoing } = last_message;\n\n        return (\n            <div className='dialog-meta'>\n                {is_outgoing && !isMe && (\n                    <>\n                        <Status chatId={chatId} messageId={id} />\n                        <span> </span>\n                    </>\n                )}\n                {date}\n            </div>\n        );\n    }\n}\n\nexport default DialogMeta;\n"]},"metadata":{},"sourceType":"module"}