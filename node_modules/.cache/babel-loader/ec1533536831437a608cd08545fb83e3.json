{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Message/Reply.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport ReplyTile from '../Tile/ReplyTile';\nimport { getContent, getTitle, isDeletedMessage, getReplyPhotoSize, getReplyMinithumbnail } from '../../Utils/Message';\nimport { openChat } from '../../Actions/Client';\nimport MessageStore from '../../Stores/MessageStore';\nimport './Reply.css';\n\nvar Reply =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Reply, _React$Component);\n\n  function Reply() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Reply);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Reply)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onGetMessageResult = function (result) {\n      var _this$props = _this.props,\n          chatId = _this$props.chatId,\n          messageId = _this$props.messageId;\n\n      if (chatId === result.chat_id && messageId === result.id) {\n        _this.forceUpdate();\n      }\n    };\n\n    _this.handleClick = function (event) {\n      event.stopPropagation();\n    };\n\n    _this.handleOpen = function (event) {\n      if (event.button !== 0) return;\n      event.stopPropagation();\n      var _this$props2 = _this.props,\n          chatId = _this$props2.chatId,\n          messageId = _this$props2.messageId,\n          onClick = _this$props2.onClick;\n      var message = MessageStore.get(chatId, messageId);\n      if (!message) return null;\n      if (isDeletedMessage(message)) return null;\n      openChat(chatId, messageId, false);\n      if (onClick) onClick();\n    };\n\n    return _this;\n  }\n\n  _createClass(Reply, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      MessageStore.on('getMessageResult', this.onGetMessageResult);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      MessageStore.off('getMessageResult', this.onGetMessageResult);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          t = _this$props3.t,\n          chatId = _this$props3.chatId,\n          messageId = _this$props3.messageId;\n      var title = this.props.title;\n      var message = MessageStore.get(chatId, messageId);\n      title = title || getTitle(message, t);\n      var content = !message ? t('Loading') : getContent(message, t);\n      var photoSize = getReplyPhotoSize(chatId, messageId);\n      var minithumbnail = getReplyMinithumbnail(chatId, messageId);\n\n      if (isDeletedMessage(message)) {\n        title = null;\n        content = t('DeletedMessage');\n      }\n\n      return React.createElement(\"div\", {\n        className: \"reply\",\n        onMouseDown: this.handleOpen,\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"reply-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"border reply-border\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), photoSize && React.createElement(ReplyTile, {\n        chatId: chatId,\n        messageId: messageId,\n        photoSize: photoSize,\n        minithumbnail: minithumbnail,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"reply-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, title && React.createElement(\"div\", {\n        className: \"reply-content-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, title), React.createElement(\"div\", {\n        className: classNames('reply-content-subtitle'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, content))));\n    }\n  }]);\n\n  return Reply;\n}(React.Component);\n\nReply.propTypes = {\n  chatId: PropTypes.number.isRequired,\n  messageId: PropTypes.number.isRequired,\n  title: PropTypes.string,\n  onClick: PropTypes.func\n};\nexport default withTranslation()(Reply);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Message/Reply.js"],"names":["React","PropTypes","classNames","withTranslation","ReplyTile","getContent","getTitle","isDeletedMessage","getReplyPhotoSize","getReplyMinithumbnail","openChat","MessageStore","Reply","onGetMessageResult","result","props","chatId","messageId","chat_id","id","forceUpdate","handleClick","event","stopPropagation","handleOpen","button","onClick","message","get","on","off","t","title","content","photoSize","minithumbnail","Component","propTypes","number","isRequired","string","func"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport ReplyTile from '../Tile/ReplyTile';\nimport { getContent, getTitle, isDeletedMessage, getReplyPhotoSize, getReplyMinithumbnail } from '../../Utils/Message';\nimport { openChat } from '../../Actions/Client';\nimport MessageStore from '../../Stores/MessageStore';\nimport './Reply.css';\n\nclass Reply extends React.Component {\n    componentDidMount() {\n        MessageStore.on('getMessageResult', this.onGetMessageResult);\n    }\n\n    componentWillUnmount() {\n        MessageStore.off('getMessageResult', this.onGetMessageResult);\n    }\n\n    onGetMessageResult = result => {\n        const { chatId, messageId } = this.props;\n\n        if (chatId === result.chat_id && messageId === result.id) {\n            this.forceUpdate();\n        }\n    };\n\n    handleClick = event => {\n        event.stopPropagation();\n    };\n\n    handleOpen = event => {\n        if (event.button !== 0) return;\n\n        event.stopPropagation();\n\n        const { chatId, messageId, onClick } = this.props;\n\n        const message = MessageStore.get(chatId, messageId);\n        if (!message) return null;\n        if (isDeletedMessage(message)) return null;\n\n        openChat(chatId, messageId, false);\n        if (onClick) onClick();\n    };\n\n    render() {\n        const { t, chatId, messageId } = this.props;\n        let { title } = this.props;\n\n        const message = MessageStore.get(chatId, messageId);\n\n        title = title || getTitle(message, t);\n        let content = !message ? t('Loading') : getContent(message, t);\n        const photoSize = getReplyPhotoSize(chatId, messageId);\n        const minithumbnail = getReplyMinithumbnail(chatId, messageId);\n\n        if (isDeletedMessage(message)) {\n            title = null;\n            content = t('DeletedMessage');\n        }\n\n        return (\n            <div className='reply' onMouseDown={this.handleOpen} onClick={this.handleClick}>\n                <div className='reply-wrapper'>\n                    <div className='border reply-border' />\n                    {photoSize && (\n                        <ReplyTile\n                            chatId={chatId}\n                            messageId={messageId}\n                            photoSize={photoSize}\n                            minithumbnail={minithumbnail}\n                        />\n                    )}\n                    <div className='reply-content'>\n                        {title && <div className='reply-content-title'>{title}</div>}\n                        <div className={classNames('reply-content-subtitle')}>{content}</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nReply.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    messageId: PropTypes.number.isRequired,\n    title: PropTypes.string,\n    onClick: PropTypes.func\n};\n\nexport default withTranslation()(Reply);\n"]},"metadata":{},"sourceType":"module"}