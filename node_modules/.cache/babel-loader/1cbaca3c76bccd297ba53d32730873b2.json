{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { randomString } from './Helpers'; // eslint-disable-next-line import/no-webpack-loader-syntax\n\nimport PakoWorker from './pako.worker';\nvar worker = new PakoWorker();\nvar handlers = new Map();\n\nworker.onmessage = function (event) {\n  var data = event.data;\n  if (!data) return;\n  var key = data.key,\n      error = data.error,\n      result = data.result,\n      msg = data.msg;\n\n  var _handlers$get = handlers.get(key),\n      resolve = _handlers$get.resolve,\n      reject = _handlers$get.reject;\n\n  handlers.delete(key);\n\n  if (!error) {\n    resolve(result);\n  } else {\n    reject(msg);\n  }\n};\n\nexport function inflateBlob(_x) {\n  return _inflateBlob.apply(this, arguments);\n}\n\nfunction _inflateBlob() {\n  _inflateBlob = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(blob) {\n    var key;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            key = randomString();\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              handlers.set(key, {\n                resolve: resolve,\n                reject: reject\n              });\n              worker.postMessage({\n                key: key,\n                blob: blob\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _inflateBlob.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Workers/BlobInflator.js"],"names":["randomString","PakoWorker","worker","handlers","Map","onmessage","event","data","key","error","result","msg","get","resolve","reject","delete","inflateBlob","blob","Promise","set","postMessage"],"mappings":";;;AAAA;;;;;;AAOA,SAASA,YAAT,QAA6B,WAA7B,C,CACA;;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAEA,IAAMC,MAAM,GAAG,IAAID,UAAJ,EAAf;AACA,IAAME,QAAQ,GAAG,IAAIC,GAAJ,EAAjB;;AAEAF,MAAM,CAACG,SAAP,GAAmB,UAAAC,KAAK,EAAI;AAAA,MAChBC,IADgB,GACPD,KADO,CAChBC,IADgB;AAExB,MAAI,CAACA,IAAL,EAAW;AAFa,MAIhBC,GAJgB,GAIYD,IAJZ,CAIhBC,GAJgB;AAAA,MAIXC,KAJW,GAIYF,IAJZ,CAIXE,KAJW;AAAA,MAIJC,MAJI,GAIYH,IAJZ,CAIJG,MAJI;AAAA,MAIIC,GAJJ,GAIYJ,IAJZ,CAIII,GAJJ;;AAAA,sBAMIR,QAAQ,CAACS,GAAT,CAAaJ,GAAb,CANJ;AAAA,MAMhBK,OANgB,iBAMhBA,OANgB;AAAA,MAMPC,MANO,iBAMPA,MANO;;AAOxBX,EAAAA,QAAQ,CAACY,MAAT,CAAgBP,GAAhB;;AAEA,MAAI,CAACC,KAAL,EAAY;AACRI,IAAAA,OAAO,CAACH,MAAD,CAAP;AACH,GAFD,MAEO;AACHI,IAAAA,MAAM,CAACH,GAAD,CAAN;AACH;AACJ,CAdD;;AAgBA,gBAAsBK,WAAtB;AAAA;AAAA;;;;;2BAAO,iBAA2BC,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACGT,YAAAA,GADH,GACSR,YAAY,EADrB;AAAA,6CAEI,IAAIkB,OAAJ,CAAY,UAACL,OAAD,EAAUC,MAAV,EAAqB;AACpCX,cAAAA,QAAQ,CAACgB,GAAT,CAAaX,GAAb,EAAkB;AAAEK,gBAAAA,OAAO,EAAPA,OAAF;AAAWC,gBAAAA,MAAM,EAANA;AAAX,eAAlB;AACAZ,cAAAA,MAAM,CAACkB,WAAP,CAAmB;AAAEZ,gBAAAA,GAAG,EAAHA,GAAF;AAAOS,gBAAAA,IAAI,EAAJA;AAAP,eAAnB;AACH,aAHM,CAFJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { randomString } from './Helpers';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport PakoWorker from './pako.worker';\n\nconst worker = new PakoWorker();\nconst handlers = new Map();\n\nworker.onmessage = event => {\n    const { data } = event;\n    if (!data) return;\n\n    const { key, error, result, msg } = data;\n\n    const { resolve, reject } = handlers.get(key);\n    handlers.delete(key);\n\n    if (!error) {\n        resolve(result);\n    } else {\n        reject(msg);\n    }\n};\n\nexport async function inflateBlob(blob) {\n    const key = randomString();\n    return new Promise((resolve, reject) => {\n        handlers.set(key, { resolve, reject });\n        worker.postMessage({ key, blob });\n    });\n}\n"]},"metadata":{},"sourceType":"module"}