{"ast":null,"code":"import _defineProperty from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Auth/Phone.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport Country from './Country';\nimport HeaderProgress from '../ColumnMiddle/HeaderProgress';\nimport { KEY_SUGGESTED_LANGUAGE_PACK_ID } from '../../Constants';\nimport AppStore from '../../Stores/ApplicationStore';\nimport AuthStore from '../../Stores/AuthorizationStore';\nimport OptionStore from '../../Stores/OptionStore';\nimport LocalizationStore from '../../Stores/LocalizationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './Phone.css';\nexport function cleanProgressStatus(status) {\n  if (!status) return status;\n  return status.replace('...', '').replace('â€¦', '');\n}\nexport function isConnecting(state) {\n  if (!state) return false;\n\n  switch (state['@type']) {\n    case 'connectionStateConnecting':\n      {\n        return true;\n      }\n\n    case 'connectionStateConnectingToProxy':\n      {\n        return true;\n      }\n\n    case 'connectionStateReady':\n      {\n        return false;\n      }\n\n    case 'connectionStateUpdating':\n      {\n        return false;\n      }\n\n    case 'connectionStateWaitingForNetwork':\n      {\n        return false;\n      }\n  }\n\n  return false;\n}\n\nfunction isValidPhoneNumber(phoneNumber) {\n  if (!phoneNumber) return false;\n  var isBad = !phoneNumber.match(/^[\\d\\-+\\s]+$/);\n\n  if (!isBad) {\n    phoneNumber = phoneNumber.replace(/\\D/g, '');\n\n    if (phoneNumber.length < 7) {\n      isBad = true;\n    }\n  }\n\n  return !isBad;\n}\n\nfunction formatByPattern(phone, pattern) {\n  phone = clearPhone(phone);\n  var result = '';\n  var index = 0;\n\n  for (var i = 0; i < pattern.length && index < phone.length; i++) {\n    if (pattern[i] >= '0' && pattern[i] <= '9') {\n      result += pattern[i];\n\n      if (phone[index] === pattern[i]) {\n        index++;\n      }\n    } else if (pattern[i] === ' ') {\n      result += pattern[i];\n    } else if (pattern[i] === 'X') {\n      result += phone[index++];\n    }\n  }\n\n  result += ' ' + phone.substring(index);\n  return '+' + result;\n}\n\nexport function formatPhoneNumber(phone) {\n  var data = AuthStore.data;\n  if (!data) return phone;\n  var country = getCountryFromPhone(phone, data);\n  if (!country) return phone;\n  return formatByPattern(phone, country.pattern);\n}\n\nfunction phoneEquals(phone1, phone2) {\n  return clearPhone(phone1) === clearPhone(phone2);\n}\n\nfunction isWhitelistKey(key) {\n  if (key >= '0' && key <= '9') return true;\n  if (key === ' ') return true;\n  if (key === '+') return true;\n  return false;\n}\n\nfunction clearPhone(phone) {\n  if (!phone) return phone;\n  return phone.replace(/ /g, '').replace('+', '').toLowerCase();\n}\n\nfunction isPhoneWithOptionCode(phone, option) {\n  if (!phone) return false;\n  if (!option) return false;\n  phone = clearPhone(phone);\n  var code = clearPhone(option.phone);\n  return phone.startsWith(code);\n}\n\nfunction isValidOption(x, value) {\n  if (!x) return false;\n  if (!value) return true;\n\n  if (value.length > 0 && value[0] === '(') {\n    value = value.substring(1);\n  }\n\n  var names = x.name.toLowerCase().split(' ');\n\n  for (var i = 0; i < names.length; i++) {\n    if (names[i].length > 0 && names[i][0] === '(') {\n      names[i] = names[i].substring(1);\n    }\n  }\n\n  var phone = clearPhone(x.phone);\n  if (names.some(function (x) {\n    return x.startsWith(value);\n  })) return true;\n  if (phone.startsWith(value) || value.startsWith(phone)) return true;\n  return false;\n}\n\nfunction getCountryFromPhone(phone, data) {\n  if (!data) return null;\n  var index = data.findIndex(function (x) {\n    return isPhoneWithOptionCode(phone, x);\n  });\n  return index !== -1 ? data[index] : null;\n}\n\nfunction getCountryFromCode(code, data) {\n  if (!code) return null;\n  if (!data) return null;\n  var index = data.findIndex(function (x) {\n    return x.code.toLowerCase() === code.toLowerCase();\n  });\n  return index !== -1 ? data[index] : null;\n}\n\nvar Phone =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Phone, _React$Component);\n\n  function Phone(props) {\n    var _this;\n\n    _classCallCheck(this, Phone);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Phone).call(this, props));\n\n    _this.onUpdateConnectionState = function (update) {\n      var state = update.state;\n\n      if (state['@type'] === 'connectionStateReady') {\n        _this.setCountryCode();\n      }\n\n      _this.setState({\n        connecting: isConnecting(state)\n      });\n    };\n\n    _this.onClientUpdateSetPhoneCanceled = function (update) {\n      _this.setState({\n        loading: false\n      });\n    };\n\n    _this.onClientUpdateSetPhoneError = function (update) {\n      var error = update.error;\n      var errorString = null;\n\n      if (error && error['@type'] === 'error' && error.message) {\n        if (error.message === 'PHONE_NUMBER_INVALID') {\n          _this.setState({\n            error: {\n              code: 'InvalidPhoneNumber'\n            },\n            loading: false\n          });\n\n          return;\n        } else {\n          errorString = error.message;\n        }\n      } else {\n        errorString = JSON.stringify(error);\n      }\n\n      _this.setState({\n        error: {\n          string: errorString\n        },\n        loading: false\n      });\n    };\n\n    _this.onClientUpdateSetPhoneResult = function (update) {\n      _this.setState({\n        loading: false\n      });\n    };\n\n    _this.onUpdateOption = function (update) {\n      var name = update.name;\n\n      if (name === 'suggested_language_pack_id') {\n        _this.setSuggestedLanguagePackId();\n      }\n    };\n\n    _this.handleKeyPress = function (event) {\n      if (event.key === 'Enter') {\n        event.preventDefault();\n\n        _this.handleDone();\n      } else if (!isWhitelistKey(event.key)) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    };\n\n    _this.handleDone = function () {\n      var phone = _this.state.phone;\n\n      if (!isValidPhoneNumber(phone)) {\n        _this.setState({\n          error: {\n            code: 'InvalidPhoneNumber'\n          }\n        });\n\n        return;\n      }\n\n      _this.setState({\n        error: null,\n        loading: true\n      });\n\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateSetPhone',\n        phone: phone\n      });\n    };\n\n    _this.handleChangeLanguage = function () {\n      var i18n = _this.props.i18n;\n      var suggestedLanguage = _this.state.suggestedLanguage;\n      if (!i18n) return;\n      if (!suggestedLanguage) return;\n      var nextLanguage = suggestedLanguage === i18n.language ? LocalizationStore.fallbackLng : suggestedLanguage;\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateLanguageChange',\n        language: nextLanguage\n      });\n    };\n\n    _this.handleFilterOptions = function (options, _ref) {\n      var inputValue = _ref.inputValue;\n      if (!options) return;\n      var value = inputValue.toLowerCase().replace(/ /g, '');\n      value = value.length > 0 && value[0] === '+' ? value.substring(1) : value;\n      return options.filter(function (x) {\n        return isValidOption(x, value);\n      });\n    };\n\n    _this.handleCountryChange = function (event, nextCountry) {\n      if (!nextCountry) return;\n      var _this$state = _this.state,\n          phone = _this$state.phone,\n          country = _this$state.country;\n      var prevPhone = country ? phone.replace(country.phone, '') : phone;\n      var nextPhone = nextCountry.phone + ' ' + prevPhone.trimStart();\n\n      _this.setState({\n        country: nextCountry,\n        phone: nextPhone\n      }, function () {\n        _this.phoneInputRef.current.focus();\n      });\n    };\n\n    _this.handleKeepChange = function (event, value) {\n      _this.setState({\n        keep: !_this.state.keep\n      });\n    };\n\n    _this.handlePhoneChange = function (event) {\n      var nextPhone = event.target.value;\n      var data = _this.props.data;\n      var country = _this.state.country;\n\n      if (country) {\n        if (!nextPhone.startsWith(country.phone)) {\n          country = null;\n        }\n      }\n\n      if (!country && data && nextPhone) {\n        country = getCountryFromPhone(nextPhone, data);\n\n        if (country && phoneEquals(nextPhone, country.phone)) {\n          nextPhone = '+' + clearPhone(nextPhone) + ' ';\n        }\n      }\n\n      _this.setState({\n        phone: nextPhone,\n        country: country\n      });\n    };\n\n    _this.handlePaste = function (event) {\n      var plainText = event.clipboardData.getData('text/plain');\n\n      if (plainText) {\n        event.preventDefault(); // const phoneRegExp = '/^[+]*[(]{0,1}[0-9]{1,3}[)]{0,1}[-\\s\\./0-9]*$/g';\n\n        var phone = '';\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = plainText[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var ch = _step.value;\n\n            if (isWhitelistKey(ch)) {\n              phone += ch;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        document.execCommand('insertText', false, phone);\n      }\n    };\n\n    var defaultPhone = props.defaultPhone,\n        _data = props.data;\n\n    var _phone = defaultPhone || '';\n\n    var _country = getCountryFromPhone(_phone, _data);\n\n    var countryCode = null;\n    _this.state = {\n      connecting: isConnecting(AppStore.connectionState),\n      error: null,\n      loading: false,\n      suggestedLanguage: localStorage.getItem(KEY_SUGGESTED_LANGUAGE_PACK_ID),\n      keep: true,\n      phone: _phone,\n      country: _country,\n      countryCode: countryCode\n    };\n    _this.phoneInputRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(Phone, [{\n    key: \"setCountryCode\",\n    value: function () {\n      var _setCountryCode = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var countryCode, code, data, _this$state2, country, phone;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                countryCode = this.state.countryCode;\n\n                if (!countryCode) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                _context.next = 5;\n                return TdLibController.send({\n                  '@type': 'getCountryCode'\n                });\n\n              case 5:\n                code = _context.sent;\n\n                if (code) {\n                  _context.next = 8;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 8:\n                data = this.props.data;\n                _this$state2 = this.state, country = _this$state2.country, phone = _this$state2.phone;\n\n                if (!country && !phone && data) {\n                  country = getCountryFromCode(code.text, data);\n\n                  if (country) {\n                    phone = '+' + clearPhone(country.phone) + ' ';\n                  }\n                }\n\n                this.setState({\n                  phone: phone,\n                  country: country,\n                  countryCode: countryCode\n                });\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setCountryCode() {\n        return _setCountryCode.apply(this, arguments);\n      }\n\n      return setCountryCode;\n    }()\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState, nextContext) {\n      return true;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setSuggestedLanguagePackId();\n      AppStore.on('clientUpdateSetPhoneCanceled', this.onClientUpdateSetPhoneCanceled);\n      AppStore.on('clientUpdateSetPhoneError', this.onClientUpdateSetPhoneError);\n      AppStore.on('clientUpdateSetPhoneResult', this.onClientUpdateSetPhoneResult);\n      AppStore.on('updateConnectionState', this.onUpdateConnectionState);\n      OptionStore.on('updateOption', this.onUpdateOption);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      AppStore.off('clientUpdateSetPhoneCanceled', this.onClientUpdateSetPhoneCanceled);\n      AppStore.off('clientUpdateSetPhoneError', this.onClientUpdateSetPhoneError);\n      AppStore.off('clientUpdateSetPhoneResult', this.onClientUpdateSetPhoneResult);\n      AppStore.off('updateConnectionState', this.onUpdateConnectionState);\n      OptionStore.off('updateOption', this.onUpdateOption);\n    }\n  }, {\n    key: \"setSuggestedLanguagePackId\",\n    value: function () {\n      var _setSuggestedLanguagePackId = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var i18n, languagePackId, value;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                i18n = this.props.i18n;\n\n                if (i18n) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                languagePackId = OptionStore.get('suggested_language_pack_id');\n\n                if (languagePackId) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 6:\n                value = languagePackId.value;\n                _context2.next = 9;\n                return LocalizationStore.loadLanguage(value);\n\n              case 9:\n                this.setState({\n                  suggestedLanguage: value\n                });\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setSuggestedLanguagePackId() {\n        return _setSuggestedLanguagePackId.apply(this, arguments);\n      }\n\n      return setSuggestedLanguagePackId;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          data = _this$props.data,\n          i18n = _this$props.i18n,\n          t = _this$props.t;\n      var _this$state3 = this.state,\n          connecting = _this$state3.connecting,\n          loading = _this$state3.loading,\n          error = _this$state3.error,\n          suggestedLanguage = _this$state3.suggestedLanguage,\n          keep = _this$state3.keep,\n          phone = _this$state3.phone,\n          country = _this$state3.country;\n      var errorString = '';\n\n      if (error) {\n        var code = error.code,\n            string = error.string;\n\n        if (code) {\n          errorString = t(code);\n        } else {\n          errorString = string;\n        }\n      }\n\n      var title = connecting ? cleanProgressStatus(t('Connecting')) : t('SignInToNebulaChat');\n      var nextLanguage = suggestedLanguage === i18n.language ? LocalizationStore.fallbackLng : suggestedLanguage;\n      return React.createElement(\"form\", {\n        className: \"auth-root\",\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"body1\",\n        className: \"auth-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418\n        },\n        __self: this\n      }, title), connecting && React.createElement(HeaderProgress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419\n        },\n        __self: this\n      })), React.createElement(Typography, {\n        variant: \"body1\",\n        className: \"auth-subtitle\",\n        style: {\n          width: 254\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421\n        },\n        __self: this\n      }, t('StartText')), React.createElement(Autocomplete, {\n        debug: false,\n        id: \"country-select\",\n        noOptionsText: t('NoResult'),\n        options: data,\n        disabled: loading,\n        autoHighlight: true,\n        getOptionLabel: function getOptionLabel(option) {\n          return option.name;\n        },\n        renderOption: function renderOption(option) {\n          return React.createElement(Country, {\n            name: option.name,\n            emoji: option.emoji,\n            phone: option.phone,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 432\n            },\n            __self: this\n          });\n        },\n        renderInput: function renderInput(params) {\n          return React.createElement(TextField, Object.assign({\n            classes: {\n              root: 'auth-input'\n            }\n          }, params, {\n            label: t('Country'),\n            variant: \"outlined\",\n            inputProps: _objectSpread({}, params.inputProps),\n            fullWidth: true,\n            autoComplete: \"off\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 434\n            },\n            __self: this\n          }));\n        },\n        filterOptions: this.handleFilterOptions,\n        value: country,\n        onChange: this.handleCountryChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 424\n        },\n        __self: this\n      }), React.createElement(TextField, {\n        id: \"phoneNumber\",\n        classes: {\n          root: 'auth-input'\n        },\n        inputRef: this.phoneInputRef,\n        variant: \"outlined\",\n        color: \"primary\",\n        label: t('PhoneNumber'),\n        disabled: loading,\n        error: Boolean(errorString),\n        helperText: errorString,\n        fullWidth: true,\n        autoFocus: true,\n        autoComplete: \"off\",\n        value: phone,\n        onChange: this.handlePhoneChange,\n        onKeyPress: this.handleKeyPress,\n        onPaste: this.handlePaste,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 450\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"sign-in-keep\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 468\n        },\n        __self: this\n      }, React.createElement(Checkbox, {\n        color: \"primary\",\n        checked: keep,\n        disabled: loading,\n        onChange: this.handleKeepChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 469\n        },\n        __self: this\n      }), React.createElement(Typography, {\n        variant: \"body1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 470\n        },\n        __self: this\n      }, t('KeepMeSignedIn'))), React.createElement(Button, {\n        classes: {\n          root: 'auth-button'\n        },\n        variant: \"contained\",\n        disableElevation: true,\n        fullWidth: true,\n        color: \"primary\",\n        disabled: loading,\n        onClick: this.handleDone,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 472\n        },\n        __self: this\n      }, t('Next')), React.createElement(Typography, {\n        className: \"sign-in-continue-on\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 482\n        },\n        __self: this\n      }, React.createElement(Link, {\n        onClick: this.handleChangeLanguage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 483\n        },\n        __self: this\n      }, Boolean(nextLanguage) ? t('ContinueOnThisLanguage', {\n        lng: nextLanguage\n      }) : ' ')));\n    }\n  }]);\n\n  return Phone;\n}(React.Component);\n\nPhone.propTypes = {\n  defaultPhone: PropTypes.string\n};\nexport default withTranslation()(Phone);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Auth/Phone.js"],"names":["React","PropTypes","withTranslation","Autocomplete","Button","Checkbox","TextField","Link","Typography","Country","HeaderProgress","KEY_SUGGESTED_LANGUAGE_PACK_ID","AppStore","AuthStore","OptionStore","LocalizationStore","TdLibController","cleanProgressStatus","status","replace","isConnecting","state","isValidPhoneNumber","phoneNumber","isBad","match","length","formatByPattern","phone","pattern","clearPhone","result","index","i","substring","formatPhoneNumber","data","country","getCountryFromPhone","phoneEquals","phone1","phone2","isWhitelistKey","key","toLowerCase","isPhoneWithOptionCode","option","code","startsWith","isValidOption","x","value","names","name","split","some","findIndex","getCountryFromCode","Phone","props","onUpdateConnectionState","update","setCountryCode","setState","connecting","onClientUpdateSetPhoneCanceled","loading","onClientUpdateSetPhoneError","error","errorString","message","JSON","stringify","string","onClientUpdateSetPhoneResult","onUpdateOption","setSuggestedLanguagePackId","handleKeyPress","event","preventDefault","handleDone","stopPropagation","clientUpdate","handleChangeLanguage","i18n","suggestedLanguage","nextLanguage","language","fallbackLng","handleFilterOptions","options","inputValue","filter","handleCountryChange","nextCountry","prevPhone","nextPhone","trimStart","phoneInputRef","current","focus","handleKeepChange","keep","handlePhoneChange","target","handlePaste","plainText","clipboardData","getData","ch","document","execCommand","defaultPhone","countryCode","connectionState","localStorage","getItem","createRef","send","text","nextProps","nextState","nextContext","on","off","languagePackId","get","loadLanguage","t","title","width","emoji","params","root","inputProps","Boolean","lng","Component","propTypes"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport Country from './Country';\nimport HeaderProgress from '../ColumnMiddle/HeaderProgress';\nimport { KEY_SUGGESTED_LANGUAGE_PACK_ID } from '../../Constants';\nimport AppStore from '../../Stores/ApplicationStore';\nimport AuthStore from '../../Stores/AuthorizationStore';\nimport OptionStore from '../../Stores/OptionStore';\nimport LocalizationStore from '../../Stores/LocalizationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './Phone.css';\n\nexport function cleanProgressStatus(status) {\n    if (!status) return status;\n\n    return status.replace('...', '').replace('â€¦', '');\n}\n\nexport function isConnecting(state) {\n    if (!state) return false;\n\n    switch (state['@type']) {\n        case 'connectionStateConnecting': {\n            return true;\n        }\n        case 'connectionStateConnectingToProxy': {\n            return true;\n        }\n        case 'connectionStateReady': {\n            return false;\n        }\n        case 'connectionStateUpdating': {\n            return false;\n        }\n        case 'connectionStateWaitingForNetwork': {\n            return false;\n        }\n    }\n\n    return false;\n}\n\nfunction isValidPhoneNumber(phoneNumber) {\n    if (!phoneNumber) return false;\n\n    let isBad = !phoneNumber.match(/^[\\d\\-+\\s]+$/);\n    if (!isBad) {\n        phoneNumber = phoneNumber.replace(/\\D/g, '');\n        if (phoneNumber.length < 7) {\n            isBad = true;\n        }\n    }\n\n    return !isBad;\n}\n\nfunction formatByPattern(phone, pattern) {\n    phone = clearPhone(phone);\n\n    let result = '';\n    let index = 0;\n    for (let i = 0; i < pattern.length && index < phone.length; i++) {\n        if (pattern[i] >= '0' && pattern[i] <= '9') {\n            result += pattern[i];\n            if (phone[index] === pattern[i]) {\n                index++;\n            }\n        } else if (pattern[i] === ' ') {\n            result += pattern[i];\n        } else if (pattern[i] === 'X') {\n            result += phone[index++];\n        }\n    }\n\n    result += ' ' + phone.substring(index);\n\n    return '+' + result;\n}\n\nexport function formatPhoneNumber(phone) {\n    const { data } = AuthStore;\n    if (!data) return phone;\n\n    const country = getCountryFromPhone(phone, data);\n    if (!country) return phone;\n\n    return formatByPattern(phone, country.pattern);\n}\n\nfunction phoneEquals(phone1, phone2) {\n    return clearPhone(phone1) === clearPhone(phone2);\n}\n\nfunction isWhitelistKey(key) {\n    if (key >= '0' && key <= '9') return true;\n    if (key === ' ') return true;\n    if (key === '+') return true;\n\n    return false;\n}\n\nfunction clearPhone(phone) {\n    if (!phone) return phone;\n\n    return phone\n        .replace(/ /g, '')\n        .replace('+', '')\n        .toLowerCase();\n}\n\nfunction isPhoneWithOptionCode(phone, option) {\n    if (!phone) return false;\n    if (!option) return false;\n\n    phone = clearPhone(phone);\n    const code = clearPhone(option.phone);\n\n    return phone.startsWith(code);\n}\n\nfunction isValidOption(x, value) {\n    if (!x) return false;\n    if (!value) return true;\n\n    if (value.length > 0 && value[0] === '(') {\n        value = value.substring(1);\n    }\n\n    const names = x.name.toLowerCase().split(' ');\n    for (let i = 0; i < names.length; i++) {\n        if (names[i].length > 0 && names[i][0] === '(') {\n            names[i] = names[i].substring(1);\n        }\n    }\n    const phone = clearPhone(x.phone);\n\n    if (names.some(x => x.startsWith(value))) return true;\n    if (phone.startsWith(value) || value.startsWith(phone)) return true;\n\n    return false;\n}\n\nfunction getCountryFromPhone(phone, data) {\n    if (!data) return null;\n\n    const index = data.findIndex(x => isPhoneWithOptionCode(phone, x));\n\n    return index !== -1 ? data[index] : null;\n}\n\nfunction getCountryFromCode(code, data) {\n    if (!code) return null;\n    if (!data) return null;\n\n    const index = data.findIndex(x => x.code.toLowerCase() === code.toLowerCase());\n\n    return index !== -1 ? data[index] : null;\n}\n\nclass Phone extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const { defaultPhone, data } = props;\n\n        const phone = defaultPhone || '';\n        const country = getCountryFromPhone(phone, data);\n        const countryCode = null;\n\n        this.state = {\n            connecting: isConnecting(AppStore.connectionState),\n            error: null,\n            loading: false,\n            suggestedLanguage: localStorage.getItem(KEY_SUGGESTED_LANGUAGE_PACK_ID),\n            keep: true,\n\n            phone,\n            country,\n            countryCode\n        };\n\n        this.phoneInputRef = React.createRef();\n    }\n\n    async setCountryCode() {\n        const { countryCode } = this.state;\n        if (countryCode) return;\n\n        const code = await TdLibController.send({ '@type': 'getCountryCode' });\n        if (!code) return;\n\n        const { data } = this.props;\n        let { country, phone } = this.state;\n        if (!country && !phone && data) {\n            country = getCountryFromCode(code.text, data);\n            if (country) {\n                phone = '+' + clearPhone(country.phone) + ' ';\n            }\n        }\n\n        this.setState({ phone, country, countryCode });\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        return true;\n    }\n\n    componentDidMount() {\n        this.setSuggestedLanguagePackId();\n\n        AppStore.on('clientUpdateSetPhoneCanceled', this.onClientUpdateSetPhoneCanceled);\n        AppStore.on('clientUpdateSetPhoneError', this.onClientUpdateSetPhoneError);\n        AppStore.on('clientUpdateSetPhoneResult', this.onClientUpdateSetPhoneResult);\n        AppStore.on('updateConnectionState', this.onUpdateConnectionState);\n        OptionStore.on('updateOption', this.onUpdateOption);\n    }\n\n    componentWillUnmount() {\n        AppStore.off('clientUpdateSetPhoneCanceled', this.onClientUpdateSetPhoneCanceled);\n        AppStore.off('clientUpdateSetPhoneError', this.onClientUpdateSetPhoneError);\n        AppStore.off('clientUpdateSetPhoneResult', this.onClientUpdateSetPhoneResult);\n        AppStore.off('updateConnectionState', this.onUpdateConnectionState);\n        OptionStore.off('updateOption', this.onUpdateOption);\n    }\n\n    onUpdateConnectionState = update => {\n        const { state } = update;\n\n        if (state['@type'] === 'connectionStateReady') {\n            this.setCountryCode();\n        }\n\n        this.setState({ connecting: isConnecting(state) });\n    };\n\n    onClientUpdateSetPhoneCanceled = update => {\n        this.setState({ loading: false });\n    };\n\n    onClientUpdateSetPhoneError = update => {\n        const { error } = update;\n\n        let errorString = null;\n        if (error && error['@type'] === 'error' && error.message) {\n            if (error.message === 'PHONE_NUMBER_INVALID') {\n                this.setState({ error: { code: 'InvalidPhoneNumber' }, loading: false });\n                return;\n            } else {\n                errorString = error.message;\n            }\n        } else {\n            errorString = JSON.stringify(error);\n        }\n\n        this.setState({ error: { string: errorString }, loading: false });\n    };\n\n    onClientUpdateSetPhoneResult = update => {\n        this.setState({ loading: false });\n    };\n\n    onUpdateOption = update => {\n        const { name } = update;\n\n        if (name === 'suggested_language_pack_id') {\n            this.setSuggestedLanguagePackId();\n        }\n    };\n\n    async setSuggestedLanguagePackId() {\n        const { i18n } = this.props;\n        if (!i18n) return;\n\n        const languagePackId = OptionStore.get('suggested_language_pack_id');\n        if (!languagePackId) return;\n\n        const { value } = languagePackId;\n\n        await LocalizationStore.loadLanguage(value);\n\n        this.setState({ suggestedLanguage: value });\n    }\n\n    handleKeyPress = event => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.handleDone();\n        } else if (!isWhitelistKey(event.key)) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    };\n\n    handleDone = () => {\n        const { phone } = this.state;\n        if (!isValidPhoneNumber(phone)) {\n            this.setState({ error: { code: 'InvalidPhoneNumber' } });\n            return;\n        }\n\n        this.setState({ error: null, loading: true });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateSetPhone',\n            phone\n        });\n    };\n\n    handleChangeLanguage = () => {\n        const { i18n } = this.props;\n        const { suggestedLanguage } = this.state;\n\n        if (!i18n) return;\n        if (!suggestedLanguage) return;\n\n        const nextLanguage = suggestedLanguage === i18n.language ? LocalizationStore.fallbackLng : suggestedLanguage;\n\n        TdLibController.clientUpdate({ '@type': 'clientUpdateLanguageChange', language: nextLanguage });\n    };\n\n    handleFilterOptions = (options, { inputValue }) => {\n        if (!options) return;\n\n        let value = inputValue.toLowerCase().replace(/ /g, '');\n        value = value.length > 0 && value[0] === '+' ? value.substring(1) : value;\n\n        return options.filter(x => isValidOption(x, value));\n    };\n\n    handleCountryChange = (event, nextCountry) => {\n        if (!nextCountry) return;\n\n        const { phone, country } = this.state;\n\n        const prevPhone = country ? phone.replace(country.phone, '') : phone;\n        const nextPhone = nextCountry.phone + ' ' + prevPhone.trimStart();\n\n        this.setState({ country: nextCountry, phone: nextPhone }, () => {\n            this.phoneInputRef.current.focus();\n        });\n    };\n\n    handleKeepChange = (event, value) => {\n        this.setState({ keep: !this.state.keep });\n    };\n\n    handlePhoneChange = event => {\n        let nextPhone = event.target.value;\n\n        const { data } = this.props;\n        let { country } = this.state;\n        if (country) {\n            if (!nextPhone.startsWith(country.phone)) {\n                country = null;\n            }\n        }\n\n        if (!country && data && nextPhone) {\n            country = getCountryFromPhone(nextPhone, data);\n            if (country && phoneEquals(nextPhone, country.phone)) {\n                nextPhone = '+' + clearPhone(nextPhone) + ' ';\n            }\n        }\n\n        this.setState({ phone: nextPhone, country });\n    };\n\n    handlePaste = event => {\n        const plainText = event.clipboardData.getData('text/plain');\n        if (plainText) {\n            event.preventDefault();\n            // const phoneRegExp = '/^[+]*[(]{0,1}[0-9]{1,3}[)]{0,1}[-\\s\\./0-9]*$/g';\n\n            let phone = '';\n            for (let ch of plainText) {\n                if (isWhitelistKey(ch)) {\n                    phone += ch;\n                }\n            }\n\n            document.execCommand('insertText', false, phone);\n        }\n    };\n\n    render() {\n        const { data, i18n, t } = this.props;\n        const { connecting, loading, error, suggestedLanguage, keep, phone, country } = this.state;\n\n        let errorString = '';\n        if (error) {\n            const { code, string } = error;\n            if (code) {\n                errorString = t(code);\n            } else {\n                errorString = string;\n            }\n        }\n\n        const title = connecting ? cleanProgressStatus(t('Connecting')) : t('SignInToNebulaChat');\n        const nextLanguage = suggestedLanguage === i18n.language ? LocalizationStore.fallbackLng : suggestedLanguage;\n\n        return (\n            <form className='auth-root' autoComplete='off'>\n                <Typography variant='body1' className='auth-title'>\n                    <span>{title}</span>\n                    {connecting && <HeaderProgress />}\n                </Typography>\n                <Typography variant='body1' className='auth-subtitle' style={{ width: 254 }}>\n                    {t('StartText')}\n                </Typography>\n                <Autocomplete\n                    debug={false}\n                    id='country-select'\n                    noOptionsText={t('NoResult')}\n                    options={data}\n                    disabled={loading}\n                    autoHighlight\n                    getOptionLabel={option => option.name}\n                    renderOption={option => <Country name={option.name} emoji={option.emoji} phone={option.phone} />}\n                    renderInput={params => (\n                        <TextField\n                            classes={{ root: 'auth-input' }}\n                            {...params}\n                            label={t('Country')}\n                            variant='outlined'\n                            inputProps={{\n                                ...params.inputProps\n                            }}\n                            fullWidth\n                            autoComplete='off'\n                        />\n                    )}\n                    filterOptions={this.handleFilterOptions}\n                    value={country}\n                    onChange={this.handleCountryChange}\n                />\n                <TextField\n                    id='phoneNumber'\n                    classes={{ root: 'auth-input' }}\n                    inputRef={this.phoneInputRef}\n                    variant='outlined'\n                    color='primary'\n                    label={t('PhoneNumber')}\n                    disabled={loading}\n                    error={Boolean(errorString)}\n                    helperText={errorString}\n                    fullWidth\n                    autoFocus\n                    autoComplete='off'\n                    value={phone}\n                    onChange={this.handlePhoneChange}\n                    onKeyPress={this.handleKeyPress}\n                    onPaste={this.handlePaste}\n                />\n                <div className='sign-in-keep'>\n                    <Checkbox color='primary' checked={keep} disabled={loading} onChange={this.handleKeepChange} />\n                    <Typography variant='body1'>{t('KeepMeSignedIn')}</Typography>\n                </div>\n                <Button\n                    classes={{ root: 'auth-button' }}\n                    variant='contained'\n                    disableElevation\n                    fullWidth\n                    color='primary'\n                    disabled={loading}\n                    onClick={this.handleDone}>\n                    {t('Next')}\n                </Button>\n                <Typography className='sign-in-continue-on'>\n                    <Link onClick={this.handleChangeLanguage}>\n                        {Boolean(nextLanguage) ? t('ContinueOnThisLanguage', { lng: nextLanguage }) : ' '}\n                    </Link>\n                </Typography>\n            </form>\n        );\n    }\n}\n\nPhone.propTypes = {\n    defaultPhone: PropTypes.string\n};\n\nexport default withTranslation()(Phone);\n"]},"metadata":{},"sourceType":"module"}