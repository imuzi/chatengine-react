{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnLeft/DialogsHeader.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport MainMenuButton from './MainMenuButton';\nimport SearchInput from './Search/SearchInput';\nimport { isAuthorizationReady } from '../../Utils/Common';\nimport AppStore from '../../Stores/ApplicationStore';\nimport '../ColumnMiddle/Header.css';\n\nvar DialogsHeader =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DialogsHeader, _React$Component);\n\n  function DialogsHeader(props) {\n    var _this;\n\n    _classCallCheck(this, DialogsHeader);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DialogsHeader).call(this, props));\n\n    _this.onUpdateAuthorizationState = function (update) {\n      _this.setState({\n        authorizationState: update.authorization_state\n      });\n    };\n\n    _this.handleSearch = function () {\n      var _this$props = _this.props,\n          onSearch = _this$props.onSearch,\n          openSearch = _this$props.openSearch;\n      var authorizationState = _this.state.authorizationState;\n      if (!isAuthorizationReady(authorizationState)) return;\n      onSearch(!openSearch);\n    };\n\n    _this.handleSearchTextChange = function () {\n      var onSearchTextChange = _this.props.onSearchTextChange;\n      var element = _this.searchInputRef.current;\n      if (!element) return;\n      var innerHTML = element.innerHTML;\n\n      if (innerHTML === '<br>' || innerHTML === '<div><br></div>') {\n        element.innerHTML = null;\n      }\n\n      var innerText = element.innerText;\n      onSearchTextChange(innerText);\n    };\n\n    _this.handleCloseSearch = function () {\n      _this.handleSearch();\n    };\n\n    _this.handleFocus = function () {\n      _this.handleSearch();\n    };\n\n    _this.searchInputRef = React.createRef();\n    _this.state = {\n      authorizationState: AppStore.getAuthorizationState(),\n      open: false\n    };\n    return _this;\n  }\n\n  _createClass(DialogsHeader, [{\n    key: \"setInitQuery\",\n    value: function setInitQuery(query) {\n      var onSearchTextChange = this.props.onSearchTextChange;\n      var searchInput = this.searchInputRef.current;\n\n      if (searchInput) {\n        searchInput.innerText = query;\n\n        if (searchInput.childNodes.length > 0) {\n          var range = document.createRange();\n          range.setStart(searchInput.childNodes[0], searchInput.childNodes[0].length);\n          range.collapse(true);\n          var selection = window.getSelection();\n          selection.removeAllRanges();\n          selection.addRange(range);\n        }\n\n        searchInput.focus();\n        onSearchTextChange(query);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      var openSearch = this.props.openSearch;\n\n      if (openSearch !== prevProps.openSearch) {\n        if (openSearch) {\n          this.focusInput();\n        } else {\n          var searchInput = this.searchInputRef.current;\n\n          if (searchInput) {\n            searchInput.innerText = null;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"focusInput\",\n    value: function focusInput() {\n      var searchInput = this.searchInputRef.current;\n\n      if (searchInput) {\n        searchInput.focus();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.popup) {\n        this.focusInput();\n      }\n\n      AppStore.on('updateAuthorizationState', this.onUpdateAuthorizationState);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      AppStore.off('updateAuthorizationState', this.onUpdateAuthorizationState);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          openSearch = _this$props2.openSearch,\n          timeout = _this$props2.timeout,\n          popup = _this$props2.popup;\n      var content = null;\n      var showBack = false;\n\n      if (openSearch) {\n        showBack = true;\n        content = React.createElement(SearchInput, {\n          inputRef: this.searchInputRef,\n          onChange: this.handleSearchTextChange,\n          onClose: this.handleCloseSearch,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        });\n      } else {\n        content = React.createElement(SearchInput, {\n          inputRef: this.searchInputRef,\n          onFocus: this.handleFocus,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"header-master\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(MainMenuButton, {\n        timeout: timeout,\n        showClose: showBack,\n        popup: popup,\n        onClose: this.handleCloseSearch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }), content);\n    }\n  }]);\n\n  return DialogsHeader;\n}(React.Component);\n\nDialogsHeader.propTypes = {\n  openSearch: PropTypes.bool.isRequired,\n  onClick: PropTypes.func,\n  onSearch: PropTypes.func.isRequired,\n  onSearchTextChange: PropTypes.func.isRequired,\n  timeout: PropTypes.bool,\n  popup: PropTypes.bool\n};\nexport default DialogsHeader;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnLeft/DialogsHeader.js"],"names":["React","PropTypes","MainMenuButton","SearchInput","isAuthorizationReady","AppStore","DialogsHeader","props","onUpdateAuthorizationState","update","setState","authorizationState","authorization_state","handleSearch","onSearch","openSearch","state","handleSearchTextChange","onSearchTextChange","element","searchInputRef","current","innerHTML","innerText","handleCloseSearch","handleFocus","createRef","getAuthorizationState","open","query","searchInput","childNodes","length","range","document","createRange","setStart","collapse","selection","window","getSelection","removeAllRanges","addRange","focus","prevProps","prevState","snapshot","focusInput","popup","on","off","timeout","content","showBack","Component","propTypes","bool","isRequired","onClick","func"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport MainMenuButton from './MainMenuButton';\nimport SearchInput from './Search/SearchInput';\nimport { isAuthorizationReady } from '../../Utils/Common';\nimport AppStore from '../../Stores/ApplicationStore';\nimport '../ColumnMiddle/Header.css';\n\nclass DialogsHeader extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.searchInputRef = React.createRef();\n\n        this.state = {\n            authorizationState: AppStore.getAuthorizationState(),\n            open: false\n        };\n    }\n\n    setInitQuery(query) {\n        const { onSearchTextChange } = this.props;\n\n        const searchInput = this.searchInputRef.current;\n        if (searchInput) {\n            searchInput.innerText = query;\n            if (searchInput.childNodes.length > 0) {\n                const range = document.createRange();\n                range.setStart(searchInput.childNodes[0], searchInput.childNodes[0].length);\n                range.collapse(true);\n\n                const selection = window.getSelection();\n                selection.removeAllRanges();\n                selection.addRange(range);\n            }\n            searchInput.focus();\n            onSearchTextChange(query);\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const { openSearch } = this.props;\n\n        if (openSearch !== prevProps.openSearch) {\n            if (openSearch) {\n                this.focusInput();\n            } else {\n                const searchInput = this.searchInputRef.current;\n                if (searchInput) {\n                    searchInput.innerText = null;\n                }\n            }\n        }\n    }\n\n    focusInput() {\n        const searchInput = this.searchInputRef.current;\n        if (searchInput) {\n            searchInput.focus();\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.popup) {\n            this.focusInput();\n        }\n\n        AppStore.on('updateAuthorizationState', this.onUpdateAuthorizationState);\n    }\n\n    componentWillUnmount() {\n        AppStore.off('updateAuthorizationState', this.onUpdateAuthorizationState);\n    }\n\n    onUpdateAuthorizationState = update => {\n        this.setState({ authorizationState: update.authorization_state });\n    };\n\n    handleSearch = () => {\n        const { onSearch, openSearch } = this.props;\n        const { authorizationState } = this.state;\n        if (!isAuthorizationReady(authorizationState)) return;\n\n        onSearch(!openSearch);\n    };\n\n    handleSearchTextChange = () => {\n        const { onSearchTextChange } = this.props;\n\n        const element = this.searchInputRef.current;\n        if (!element) return;\n\n        const { innerHTML } = element;\n        if (innerHTML === '<br>' || innerHTML === '<div><br></div>') {\n            element.innerHTML = null;\n        }\n        const { innerText } = element;\n\n        onSearchTextChange(innerText);\n    };\n\n    handleCloseSearch = () => {\n        this.handleSearch();\n    };\n\n    handleFocus = () => {\n        this.handleSearch();\n    };\n\n    render() {\n        const { openSearch, timeout, popup } = this.props;\n\n        let content = null;\n        let showBack = false;\n        if (openSearch) {\n            showBack = true;\n            content = (\n                <SearchInput\n                    inputRef={this.searchInputRef}\n                    onChange={this.handleSearchTextChange}\n                    onClose={this.handleCloseSearch}\n                />\n            );\n        } else {\n            content = <SearchInput inputRef={this.searchInputRef} onFocus={this.handleFocus} />;\n        }\n\n        return (\n            <div className='header-master'>\n                <MainMenuButton timeout={timeout} showClose={showBack} popup={popup} onClose={this.handleCloseSearch} />\n                {content}\n            </div>\n        );\n    }\n}\n\nDialogsHeader.propTypes = {\n    openSearch: PropTypes.bool.isRequired,\n    onClick: PropTypes.func,\n    onSearch: PropTypes.func.isRequired,\n    onSearchTextChange: PropTypes.func.isRequired,\n    timeout: PropTypes.bool,\n    popup: PropTypes.bool\n};\n\nexport default DialogsHeader;\n"]},"metadata":{},"sourceType":"module"}