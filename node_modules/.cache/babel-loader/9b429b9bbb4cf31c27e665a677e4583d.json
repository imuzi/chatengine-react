{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnMiddle/Footer.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport InputBox from './InputBox';\nimport FooterCommand from './FooterCommand';\nimport NotificationsCommand from './NotificationsCommand';\nimport { hasBasicGroupId, hasSupergroupId } from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport BasicGroupStore from '../../Stores/BasicGroupStore';\nimport SupergroupStore from '../../Stores/SupergroupStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './Footer.css';\n\nvar Footer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Footer, _React$Component);\n\n  function Footer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Footer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Footer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onUpdateBasicGroup = function (update) {\n      var chatId = _this.props.chatId;\n\n      if (hasBasicGroupId(chatId, update.basic_group.id)) {\n        _this.forceUpdate();\n      }\n    };\n\n    _this.onUpdateSupergroup = function (update) {\n      var chatId = _this.props.chatId;\n\n      if (hasSupergroupId(chatId, update.supergroup.id)) {\n        _this.forceUpdate();\n      }\n    };\n\n    _this.handleJoin = function () {\n      var chatId = _this.props.chatId;\n      if (!chatId) return;\n      TdLibController.send({\n        '@type': 'joinChat',\n        chat_id: chatId\n      });\n    };\n\n    _this.handleDeleteAndExit = function () {\n      var chatId = _this.props.chatId;\n      if (!chatId) return;\n      TdLibController.send({\n        '@type': 'deleteChatHistory',\n        chat_id: chatId,\n        remove_from_chat_list: true\n      }); // TdLibController\n      //     .send({\n      //         '@type': 'leaveChat',\n      //         chat_id: this.props.chatId\n      //     });\n    };\n\n    return _this;\n  }\n\n  _createClass(Footer, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var _this$props = this.props,\n          t = _this$props.t,\n          chatId = _this$props.chatId;\n\n      if (nextProps.chatId !== chatId) {\n        return true;\n      }\n\n      if (nextProps.t !== t) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      BasicGroupStore.on('updateBasicGroup', this.onUpdateBasicGroup);\n      SupergroupStore.on('updateSupergroup', this.onUpdateSupergroup);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      BasicGroupStore.off('updateBasicGroup', this.onUpdateBasicGroup);\n      SupergroupStore.off('updateSupergroup', this.onUpdateSupergroup);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          chatId = _this$props2.chatId,\n          t = _this$props2.t;\n      var chat = ChatStore.get(chatId);\n      if (!chat) return null;\n      var type = chat.type;\n      if (!type) return null;\n\n      switch (type['@type']) {\n        case 'chatTypeBasicGroup':\n          {\n            var basicGroup = BasicGroupStore.get(type.basic_group_id);\n            if (!basicGroup) return null;\n            var status = basicGroup.status;\n            if (!status) return null;\n            var is_member = status.is_member,\n                permissions = status.permissions;\n\n            switch (status['@type']) {\n              case 'chatMemberStatusAdministrator':\n                {\n                  return React.createElement(InputBox, {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 108\n                    },\n                    __self: this\n                  });\n                }\n\n              case 'chatMemberStatusBanned':\n                {\n                  return React.createElement(FooterCommand, {\n                    command: t('DeleteChat'),\n                    onCommand: this.handleDeleteAndExit,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 111\n                    },\n                    __self: this\n                  });\n                }\n\n              case 'chatMemberStatusCreator':\n                {\n                  return is_member ? React.createElement(InputBox, {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 114\n                    },\n                    __self: this\n                  }) : null;\n                }\n\n              case 'chatMemberStatusLeft':\n                {\n                  return null;\n                }\n\n              case 'chatMemberStatusMember':\n                {\n                  return React.createElement(InputBox, {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 120\n                    },\n                    __self: this\n                  });\n                }\n\n              case 'chatMemberStatusRestricted':\n                {\n                  if (is_member) {\n                    return permissions && permissions.can_send_messages ? React.createElement(InputBox, {\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 124\n                      },\n                      __self: this\n                    }) : null;\n                  } else {\n                    return React.createElement(FooterCommand, {\n                      command: t('JoinGroup'),\n                      onCommand: this.handleJoin,\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 126\n                      },\n                      __self: this\n                    });\n                  }\n                }\n            }\n\n            break;\n          }\n\n        case 'chatTypePrivate':\n          {\n            return React.createElement(InputBox, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 133\n              },\n              __self: this\n            });\n          }\n\n        case 'chatTypeSecret':\n          {\n            return React.createElement(InputBox, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 136\n              },\n              __self: this\n            });\n          }\n\n        case 'chatTypeSupergroup':\n          {\n            var supergroup = SupergroupStore.get(type.supergroup_id);\n            if (!supergroup) return null;\n            var is_channel = supergroup.is_channel,\n                _status = supergroup.status;\n            if (!_status) return null;\n            var _is_member = _status.is_member,\n                _permissions = _status.permissions;\n\n            switch (_status['@type']) {\n              case 'chatMemberStatusAdministrator':\n                {\n                  return React.createElement(InputBox, {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 149\n                    },\n                    __self: this\n                  });\n                }\n\n              case 'chatMemberStatusBanned':\n                {\n                  return React.createElement(FooterCommand, {\n                    command: t('DeleteChat'),\n                    onCommand: this.handleDeleteAndExit,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 152\n                    },\n                    __self: this\n                  });\n                }\n\n              case 'chatMemberStatusCreator':\n                {\n                  return _is_member ? React.createElement(InputBox, {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 155\n                    },\n                    __self: this\n                  }) : null;\n                }\n\n              case 'chatMemberStatusLeft':\n                {\n                  return React.createElement(FooterCommand, {\n                    command: is_channel ? t('ChannelJoin') : t('JoinGroup'),\n                    onCommand: this.handleJoin,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 159\n                    },\n                    __self: this\n                  });\n                }\n\n              case 'chatMemberStatusMember':\n                {\n                  if (is_channel) {\n                    return React.createElement(NotificationsCommand, {\n                      chatId: chatId,\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 167\n                      },\n                      __self: this\n                    });\n                  } else {\n                    return React.createElement(InputBox, {\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 169\n                      },\n                      __self: this\n                    });\n                  }\n                }\n\n              case 'chatMemberStatusRestricted':\n                {\n                  if (_is_member) {\n                    return _permissions && _permissions.can_send_messages ? React.createElement(InputBox, {\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 174\n                      },\n                      __self: this\n                    }) : null;\n                  } else {\n                    return React.createElement(FooterCommand, {\n                      command: is_channel ? t('ChannelJoin') : t('JoinGroup'),\n                      onCommand: this.handleJoin,\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 177\n                      },\n                      __self: this\n                    });\n                  }\n                }\n            }\n          }\n      }\n\n      return null;\n    }\n  }]);\n\n  return Footer;\n}(React.Component);\n\nexport default withTranslation()(Footer);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnMiddle/Footer.js"],"names":["React","withTranslation","InputBox","FooterCommand","NotificationsCommand","hasBasicGroupId","hasSupergroupId","ChatStore","BasicGroupStore","SupergroupStore","TdLibController","Footer","onUpdateBasicGroup","update","chatId","props","basic_group","id","forceUpdate","onUpdateSupergroup","supergroup","handleJoin","send","chat_id","handleDeleteAndExit","remove_from_chat_list","nextProps","nextState","t","on","off","chat","get","type","basicGroup","basic_group_id","status","is_member","permissions","can_send_messages","supergroup_id","is_channel","Component"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport InputBox from './InputBox';\nimport FooterCommand from './FooterCommand';\nimport NotificationsCommand from './NotificationsCommand';\nimport { hasBasicGroupId, hasSupergroupId } from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport BasicGroupStore from '../../Stores/BasicGroupStore';\nimport SupergroupStore from '../../Stores/SupergroupStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './Footer.css';\n\nclass Footer extends React.Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        const { t, chatId } = this.props;\n\n        if (nextProps.chatId !== chatId) {\n            return true;\n        }\n\n        if (nextProps.t !== t) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        BasicGroupStore.on('updateBasicGroup', this.onUpdateBasicGroup);\n        SupergroupStore.on('updateSupergroup', this.onUpdateSupergroup);\n    }\n\n    componentWillUnmount() {\n        BasicGroupStore.off('updateBasicGroup', this.onUpdateBasicGroup);\n        SupergroupStore.off('updateSupergroup', this.onUpdateSupergroup);\n    }\n\n    onUpdateBasicGroup = update => {\n        const { chatId } = this.props;\n\n        if (hasBasicGroupId(chatId, update.basic_group.id)) {\n            this.forceUpdate();\n        }\n    };\n\n    onUpdateSupergroup = update => {\n        const { chatId } = this.props;\n\n        if (hasSupergroupId(chatId, update.supergroup.id)) {\n            this.forceUpdate();\n        }\n    };\n\n    handleJoin = () => {\n        const { chatId } = this.props;\n        if (!chatId) return;\n\n        TdLibController.send({\n            '@type': 'joinChat',\n            chat_id: chatId\n        });\n    };\n\n    handleDeleteAndExit = () => {\n        const { chatId } = this.props;\n        if (!chatId) return;\n\n        TdLibController.send({\n            '@type': 'deleteChatHistory',\n            chat_id: chatId,\n            remove_from_chat_list: true\n        });\n\n        // TdLibController\n        //     .send({\n        //         '@type': 'leaveChat',\n        //         chat_id: this.props.chatId\n        //     });\n    };\n\n    render() {\n        const { chatId, t } = this.props;\n        const chat = ChatStore.get(chatId);\n        if (!chat) return null;\n\n        const { type } = chat;\n        if (!type) return null;\n\n        switch (type['@type']) {\n            case 'chatTypeBasicGroup': {\n                const basicGroup = BasicGroupStore.get(type.basic_group_id);\n                if (!basicGroup) return null;\n\n                const { status } = basicGroup;\n                if (!status) return null;\n\n                const { is_member, permissions } = status;\n\n                switch (status['@type']) {\n                    case 'chatMemberStatusAdministrator': {\n                        return <InputBox />;\n                    }\n                    case 'chatMemberStatusBanned': {\n                        return <FooterCommand command={t('DeleteChat')} onCommand={this.handleDeleteAndExit} />;\n                    }\n                    case 'chatMemberStatusCreator': {\n                        return is_member ? <InputBox /> : null;\n                    }\n                    case 'chatMemberStatusLeft': {\n                        return null;\n                    }\n                    case 'chatMemberStatusMember': {\n                        return <InputBox />;\n                    }\n                    case 'chatMemberStatusRestricted': {\n                        if (is_member) {\n                            return permissions && permissions.can_send_messages ? <InputBox /> : null;\n                        } else {\n                            return <FooterCommand command={t('JoinGroup')} onCommand={this.handleJoin} />;\n                        }\n                    }\n                }\n                break;\n            }\n            case 'chatTypePrivate': {\n                return <InputBox />;\n            }\n            case 'chatTypeSecret': {\n                return <InputBox />;\n            }\n            case 'chatTypeSupergroup': {\n                const supergroup = SupergroupStore.get(type.supergroup_id);\n                if (!supergroup) return null;\n\n                const { is_channel, status } = supergroup;\n                if (!status) return null;\n\n                const { is_member, permissions } = status;\n\n                switch (status['@type']) {\n                    case 'chatMemberStatusAdministrator': {\n                        return <InputBox />;\n                    }\n                    case 'chatMemberStatusBanned': {\n                        return <FooterCommand command={t('DeleteChat')} onCommand={this.handleDeleteAndExit} />;\n                    }\n                    case 'chatMemberStatusCreator': {\n                        return is_member ? <InputBox /> : null;\n                    }\n                    case 'chatMemberStatusLeft': {\n                        return (\n                            <FooterCommand\n                                command={is_channel ? t('ChannelJoin') : t('JoinGroup')}\n                                onCommand={this.handleJoin}\n                            />\n                        );\n                    }\n                    case 'chatMemberStatusMember': {\n                        if (is_channel) {\n                            return <NotificationsCommand chatId={chatId} />;\n                        } else {\n                            return <InputBox />;\n                        }\n                    }\n                    case 'chatMemberStatusRestricted': {\n                        if (is_member) {\n                            return permissions && permissions.can_send_messages ? <InputBox /> : null;\n                        } else {\n                            return (\n                                <FooterCommand\n                                    command={is_channel ? t('ChannelJoin') : t('JoinGroup')}\n                                    onCommand={this.handleJoin}\n                                />\n                            );\n                        }\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n}\n\nexport default withTranslation()(Footer);\n"]},"metadata":{},"sourceType":"module"}