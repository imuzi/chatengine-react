{"ast":null,"code":"import _slicedToArray from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Viewer/FileProgress.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport CloseIcon from '../../Assets/Icons/Close';\nimport { ANIMATION_DURATION_300MS } from '../../Constants';\nimport FileStore from '../../Stores/FileStore';\nimport './FileProgress.css';\n\nvar FileProgress =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FileProgress, _React$Component);\n\n  function FileProgress(props) {\n    var _this;\n\n    _classCallCheck(this, FileProgress);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FileProgress).call(this, props));\n\n    _this.onUpdateFile = function (update) {\n      var currentFile = _this.state.file;\n      var nextFile = update.file;\n\n      if (currentFile && currentFile.id === nextFile.id) {\n        if (_this.fileEquals(nextFile, currentFile)) {// console.log('[fp] update equals', nextFile, currentFile);\n        } else {\n          // console.log('[fp] update', nextFile, currentFile);\n          _this.setState({\n            file: nextFile,\n            prevFile: currentFile\n          });\n        }\n      }\n    };\n\n    _this.isDownloading = function (file, prevFile) {\n      if (!_this.props.download) return false;\n      var wasActive = prevFile && prevFile.local && prevFile.local.is_downloading_active;\n      var isActive = file && file.local && file.local.is_downloading_active;\n      return wasActive || isActive;\n    };\n\n    _this.isUploading = function (file, prevFile) {\n      if (!_this.props.upload) return false;\n      var wasActive = prevFile && prevFile.remote && prevFile.remote.is_uploading_active;\n      var isActive = file && file.remote && file.remote.is_uploading_active;\n      return wasActive || isActive;\n    };\n\n    _this.getProgressParams = function (file, prevFile) {\n      var local = file.local,\n          remote = file.remote;\n      var wasActive = false;\n      var isActive = false;\n      var isCompleted = false;\n      var progressSize = 0;\n      var size = 0;\n\n      if (_this.isDownloading(file, prevFile)) {\n        wasActive = prevFile && prevFile.local && prevFile.local.is_downloading_active;\n        isActive = local.is_downloading_active;\n        isCompleted = local.is_downloading_completed;\n        progressSize = local.downloaded_size;\n        size = file.size; // console.log(\n        //     `FileProgress.getProgressParams isDownloading id=${\n        //         file.id\n        //     } was_active=${wasActive} is_active=${isActive} is_completed=${isCompleted} progress_size=${progressSize} size=${size}`,\n        //     file,\n        //     prevFile\n        // );\n      } else if (_this.isUploading(file, prevFile)) {\n        wasActive = prevFile && prevFile.remote && prevFile.remote.is_uploading_active;\n        isActive = remote.is_uploading_active;\n        isCompleted = remote.is_uploading_completed;\n        progressSize = remote.uploaded_size;\n        size = file.size; // console.log(\n        //     `FileProgress.getProgressParams isUploading id=${\n        //         file.id\n        //     } was_active=${wasActive} is_active=${isActive} is_completed=${isCompleted} progress_size=${progressSize} size=${size}`,\n        //     file,\n        //     prevFile\n        // );\n      } else {// console.log(\n          //     `FileProgress.getProgressParams none id=${file.id} download=${this.props.download} upload=${\n          //         this.props.upload\n          //     } was_active=${wasActive} is_active=${isActive} is_completed=${isCompleted} progress_size=${progressSize} size=${size}`,\n          //     file,\n          //     prevFile\n          // );\n        }\n\n      return [wasActive, isActive, isCompleted, progressSize, size];\n    };\n\n    _this.completeAnimation = false;\n    var _file = _this.props.file;\n    _this.state = {\n      prevPropsFile: _file,\n      prevFile: null,\n      file: FileStore.get(_file.id) || _file\n    };\n    return _this;\n  }\n\n  _createClass(FileProgress, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var _this$props = this.props,\n          download = _this$props.download,\n          upload = _this$props.upload,\n          icon = _this$props.icon,\n          thumbnailSrc = _this$props.thumbnailSrc;\n\n      if (nextProps.thumbnailSrc !== thumbnailSrc) {\n        return true;\n      }\n\n      if (nextProps.icon !== icon) {\n        return true;\n      }\n\n      if (this.isDownloading(nextState.file, nextState.prevFile) && !download) {\n        return false;\n      }\n\n      if (this.isUploading(nextState.file, nextState.prevFile) && !upload) {\n        return false;\n      }\n\n      var nextLocal = nextState.file ? nextState.file.local : null;\n      var nextIdbKey = nextState.file ? nextState.file.idb_key : null;\n      var prevLocal = this.state.prevFile ? this.state.prevFile.local : null;\n      var prevIdbKey = this.state.prevFile ? this.state.prevFile.idb_key : null;\n      var isDownloadingCompleted = prevLocal && nextLocal && !prevLocal.is_downloading_completed && nextLocal.is_downloading_completed;\n      var receiveIdbKey = nextIdbKey && !prevIdbKey;\n\n      if (nextState.file.id === this.state.file.id && isDownloadingCompleted && receiveIdbKey) {\n        return false;\n      }\n\n      if (nextState.file !== this.state.file) {\n        return true;\n      }\n\n      if (nextState.prevFile !== this.state.prevFile) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.mount = true;\n      FileStore.on('updateFile', this.onUpdateFile);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.mount = false;\n      FileStore.off('updateFile', this.onUpdateFile);\n    }\n  }, {\n    key: \"fileEquals\",\n    value: function fileEquals(file1, file2) {\n      if (file1 === file2 && file1 === null) return true;\n      if (file1 !== null && file2 === null) return false;\n      if (file1 === null && file2 !== null) return false;\n      var local1 = file1.local,\n          remote1 = file1.remote;\n      var local2 = file2.local,\n          remote2 = file2.remote;\n      if (local1.can_be_deleted !== local2.can_be_deleted) return false;\n      if (local1.can_be_downloaded !== local2.can_be_downloaded) return false;\n      if (local1.download_offset !== local2.download_offset) return false;\n      if (local1.downloaded_prefix_size !== local2.downloaded_prefix_size) return false;\n      if (local1.downloaded_size !== local2.downloaded_size) return false;\n      if (local1.is_downloading_active !== local2.is_downloading_active) return false;\n      if (local1.is_downloading_completed !== local2.is_downloading_completed) return false;\n      if (local1.path !== local2.path) return false;\n      if (remote1.id !== remote2.id) return false;\n      if (remote1.is_uploading_active !== remote2.is_uploading_active) return false;\n      if (remote1.is_uploading_completed !== remote2.is_uploading_completed) return false;\n      if (remote1.uploaded_size !== remote2.uploaded_size) return false;\n      return true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          thumbnailSrc = _this$props2.thumbnailSrc,\n          cancelButton = _this$props2.cancelButton,\n          zIndex = _this$props2.zIndex,\n          icon = _this$props2.icon,\n          completeIcon = _this$props2.completeIcon;\n      var _this$state = this.state,\n          file = _this$state.file,\n          prevFile = _this$state.prevFile;\n      if (!file) return null;\n\n      var _this$getProgressPara = this.getProgressParams(file, prevFile),\n          _this$getProgressPara2 = _slicedToArray(_this$getProgressPara, 5),\n          wasActive = _this$getProgressPara2[0],\n          isActive = _this$getProgressPara2[1],\n          isCompleted = _this$getProgressPara2[2],\n          progressSize = _this$getProgressPara2[3],\n          size = _this$getProgressPara2[4];\n\n      var inProgress = isActive;\n      var progress = 0;\n\n      if (isActive) {\n        progress = progressSize && size ? 100 - (size - progressSize) / size * 100 : 1;\n      }\n\n      var startCompleteAnimation = wasActive && !isActive;\n\n      if (startCompleteAnimation) {\n        this.completeAnimation = true; // console.log('FileProgress.render animationComplete=true');\n\n        progress = isCompleted ? 100 : 0;\n        inProgress = true;\n        setTimeout(function () {\n          _this2.completeAnimation = false;\n          if (!_this2.mount) return; // console.log('FileProgress.render animationComplete=false');\n\n          _this2.setState({\n            prevFile: null\n          });\n        }, ANIMATION_DURATION_300MS);\n      }\n\n      var style = {\n        zIndex: zIndex,\n        background: !thumbnailSrc && typeof thumbnailSrc !== 'undefined' ? null : 'rgba(0, 0, 0, 0.25)'\n      };\n      var isDownloadingCompleted = file && file.local && (file.local.is_downloading_completed || file.idb_key || file.local.is_uploading_completed) && !this.completeAnimation && !isActive; // console.log(\n      //     `[fp]] render \\\\\n      //     id=${file.id} showProgress=${inProgress} progress=${progress} \\\\\n      //     was_active=${wasActive} is_active=${isActive} is_completed=${isCompleted} \\\\\n      //     progress_size=${progressSize} size=${size} complete_animation=${this.completeAnimation} \\\\\n      //     is_downloading_completed=${isDownloadingCompleted}\n      //     completeIcon=${completeIcon}`,\n      //     file,\n      //     prevFile\n      // );\n      //cancelButton = true;\n      //inProgress = true;\n\n      if (isDownloadingCompleted) {\n        // console.log('FileProgress.render completeIcon');\n        if (completeIcon) {\n          return React.createElement(\"div\", {\n            className: classNames('file-progress', 'file-progress-complete'),\n            style: style,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 258\n            },\n            __self: this\n          }, completeIcon);\n        }\n\n        return null;\n      }\n\n      if (inProgress || this.completeAnimation) {\n        // console.log('FileProgress.render inProgressIcon');\n        return React.createElement(\"div\", {\n          className: \"file-progress\",\n          style: style,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 270\n          },\n          __self: this\n        }, React.createElement(CircularProgress, {\n          className: \"file-progress-indicator\",\n          classes: {\n            circle: 'file-progress-circle'\n          },\n          variant: \"static\",\n          value: progress,\n          size: 48,\n          thickness: 2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 271\n          },\n          __self: this\n        }), cancelButton && React.createElement(CloseIcon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 279\n          },\n          __self: this\n        }));\n      }\n\n      if (icon) {\n        // console.log('FileProgress.render icon');\n        return React.createElement(\"div\", {\n          className: \"file-progress\",\n          style: style,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 287\n          },\n          __self: this\n        }, icon);\n      }\n\n      return null;\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var file = props.file;\n      var prevPropsFile = state.prevPropsFile;\n\n      if (file && prevPropsFile && file.id !== prevPropsFile.id) {\n        return {\n          prevPropsFile: file,\n          prevFile: null,\n          file: FileStore.get(file.id) || file\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return FileProgress;\n}(React.Component);\n\nFileProgress.propTypes = {\n  file: PropTypes.object.isRequired,\n  thumbnailSrc: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  cancelButton: PropTypes.bool,\n  download: PropTypes.bool,\n  upload: PropTypes.bool,\n  zIndex: PropTypes.number,\n  icon: PropTypes.node,\n  completeIcon: PropTypes.node\n};\nFileProgress.defaultProps = {\n  cancelButton: false,\n  download: true,\n  upload: false\n};\nexport default FileProgress;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Viewer/FileProgress.js"],"names":["React","PropTypes","classNames","CircularProgress","CloseIcon","ANIMATION_DURATION_300MS","FileStore","FileProgress","props","onUpdateFile","update","currentFile","state","file","nextFile","id","fileEquals","setState","prevFile","isDownloading","download","wasActive","local","is_downloading_active","isActive","isUploading","upload","remote","is_uploading_active","getProgressParams","isCompleted","progressSize","size","is_downloading_completed","downloaded_size","is_uploading_completed","uploaded_size","completeAnimation","prevPropsFile","get","nextProps","nextState","icon","thumbnailSrc","nextLocal","nextIdbKey","idb_key","prevLocal","prevIdbKey","isDownloadingCompleted","receiveIdbKey","mount","on","off","file1","file2","local1","remote1","local2","remote2","can_be_deleted","can_be_downloaded","download_offset","downloaded_prefix_size","path","cancelButton","zIndex","completeIcon","inProgress","progress","startCompleteAnimation","setTimeout","style","background","circle","Component","propTypes","object","isRequired","oneOfType","string","bool","number","node","defaultProps"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport CloseIcon from '../../Assets/Icons/Close';\nimport { ANIMATION_DURATION_300MS } from '../../Constants';\nimport FileStore from '../../Stores/FileStore';\nimport './FileProgress.css';\n\nclass FileProgress extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.completeAnimation = false;\n        const { file } = this.props;\n        this.state = {\n            prevPropsFile: file,\n            prevFile: null,\n            file: FileStore.get(file.id) || file\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        const { file } = props;\n        const { prevPropsFile } = state;\n\n        if (file && prevPropsFile && file.id !== prevPropsFile.id) {\n            return {\n                prevPropsFile: file,\n                prevFile: null,\n                file: FileStore.get(file.id) || file\n            };\n        }\n\n        return null;\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const { download, upload, icon, thumbnailSrc } = this.props;\n\n        if (nextProps.thumbnailSrc !== thumbnailSrc) {\n            return true;\n        }\n\n        if (nextProps.icon !== icon) {\n            return true;\n        }\n\n        if (this.isDownloading(nextState.file, nextState.prevFile) && !download) {\n            return false;\n        }\n\n        if (this.isUploading(nextState.file, nextState.prevFile) && !upload) {\n            return false;\n        }\n\n        const nextLocal = nextState.file ? nextState.file.local : null;\n        const nextIdbKey = nextState.file ? nextState.file.idb_key : null;\n        const prevLocal = this.state.prevFile ? this.state.prevFile.local : null;\n        const prevIdbKey = this.state.prevFile ? this.state.prevFile.idb_key : null;\n        const isDownloadingCompleted =\n            prevLocal && nextLocal && !prevLocal.is_downloading_completed && nextLocal.is_downloading_completed;\n        const receiveIdbKey = nextIdbKey && !prevIdbKey;\n\n        if (nextState.file.id === this.state.file.id && isDownloadingCompleted && receiveIdbKey) {\n            return false;\n        }\n\n        if (nextState.file !== this.state.file) {\n            return true;\n        }\n\n        if (nextState.prevFile !== this.state.prevFile) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        this.mount = true;\n        FileStore.on('updateFile', this.onUpdateFile);\n    }\n\n    componentWillUnmount() {\n        this.mount = false;\n        FileStore.off('updateFile', this.onUpdateFile);\n    }\n\n    fileEquals(file1, file2) {\n        if (file1 === file2 && file1 === null) return true;\n        if (file1 !== null && file2 === null) return false;\n        if (file1 === null && file2 !== null) return false;\n\n        const { local: local1, remote: remote1 } = file1;\n        const { local: local2, remote: remote2 } = file2;\n\n        if (local1.can_be_deleted !== local2.can_be_deleted) return false;\n        if (local1.can_be_downloaded !== local2.can_be_downloaded) return false;\n        if (local1.download_offset !== local2.download_offset) return false;\n        if (local1.downloaded_prefix_size !== local2.downloaded_prefix_size) return false;\n        if (local1.downloaded_size !== local2.downloaded_size) return false;\n        if (local1.is_downloading_active !== local2.is_downloading_active) return false;\n        if (local1.is_downloading_completed !== local2.is_downloading_completed) return false;\n        if (local1.path !== local2.path) return false;\n\n        if (remote1.id !== remote2.id) return false;\n        if (remote1.is_uploading_active !== remote2.is_uploading_active) return false;\n        if (remote1.is_uploading_completed !== remote2.is_uploading_completed) return false;\n        if (remote1.uploaded_size !== remote2.uploaded_size) return false;\n\n        return true;\n    }\n\n    onUpdateFile = update => {\n        const currentFile = this.state.file;\n        const nextFile = update.file;\n\n        if (currentFile && currentFile.id === nextFile.id) {\n            if (this.fileEquals(nextFile, currentFile)) {\n                // console.log('[fp] update equals', nextFile, currentFile);\n            } else {\n                // console.log('[fp] update', nextFile, currentFile);\n                this.setState({ file: nextFile, prevFile: currentFile });\n            }\n        }\n    };\n\n    isDownloading = (file, prevFile) => {\n        if (!this.props.download) return false;\n\n        const wasActive = prevFile && prevFile.local && prevFile.local.is_downloading_active;\n        const isActive = file && file.local && file.local.is_downloading_active;\n\n        return wasActive || isActive;\n    };\n\n    isUploading = (file, prevFile) => {\n        if (!this.props.upload) return false;\n\n        const wasActive = prevFile && prevFile.remote && prevFile.remote.is_uploading_active;\n        const isActive = file && file.remote && file.remote.is_uploading_active;\n\n        return wasActive || isActive;\n    };\n\n    getProgressParams = (file, prevFile) => {\n        const { local, remote } = file;\n\n        let wasActive = false;\n        let isActive = false;\n        let isCompleted = false;\n        let progressSize = 0;\n        let size = 0;\n        if (this.isDownloading(file, prevFile)) {\n            wasActive = prevFile && prevFile.local && prevFile.local.is_downloading_active;\n            isActive = local.is_downloading_active;\n            isCompleted = local.is_downloading_completed;\n            progressSize = local.downloaded_size;\n            size = file.size;\n            // console.log(\n            //     `FileProgress.getProgressParams isDownloading id=${\n            //         file.id\n            //     } was_active=${wasActive} is_active=${isActive} is_completed=${isCompleted} progress_size=${progressSize} size=${size}`,\n            //     file,\n            //     prevFile\n            // );\n        } else if (this.isUploading(file, prevFile)) {\n            wasActive = prevFile && prevFile.remote && prevFile.remote.is_uploading_active;\n            isActive = remote.is_uploading_active;\n            isCompleted = remote.is_uploading_completed;\n            progressSize = remote.uploaded_size;\n            size = file.size;\n            // console.log(\n            //     `FileProgress.getProgressParams isUploading id=${\n            //         file.id\n            //     } was_active=${wasActive} is_active=${isActive} is_completed=${isCompleted} progress_size=${progressSize} size=${size}`,\n            //     file,\n            //     prevFile\n            // );\n        } else {\n            // console.log(\n            //     `FileProgress.getProgressParams none id=${file.id} download=${this.props.download} upload=${\n            //         this.props.upload\n            //     } was_active=${wasActive} is_active=${isActive} is_completed=${isCompleted} progress_size=${progressSize} size=${size}`,\n            //     file,\n            //     prevFile\n            // );\n        }\n\n        return [wasActive, isActive, isCompleted, progressSize, size];\n    };\n\n    render() {\n        let { thumbnailSrc, cancelButton, zIndex, icon, completeIcon } = this.props;\n        const { file, prevFile } = this.state;\n        if (!file) return null;\n\n        const [wasActive, isActive, isCompleted, progressSize, size] = this.getProgressParams(file, prevFile);\n\n        let inProgress = isActive;\n        let progress = 0;\n        if (isActive) {\n            progress = progressSize && size ? 100 - ((size - progressSize) / size) * 100 : 1;\n        }\n\n        const startCompleteAnimation = wasActive && !isActive;\n        if (startCompleteAnimation) {\n            this.completeAnimation = true;\n            // console.log('FileProgress.render animationComplete=true');\n            progress = isCompleted ? 100 : 0;\n            inProgress = true;\n            setTimeout(() => {\n                this.completeAnimation = false;\n                if (!this.mount) return;\n                // console.log('FileProgress.render animationComplete=false');\n\n                this.setState({ prevFile: null });\n            }, ANIMATION_DURATION_300MS);\n        }\n\n        const style = {\n            zIndex: zIndex,\n            background: !thumbnailSrc && typeof thumbnailSrc !== 'undefined' ? null : 'rgba(0, 0, 0, 0.25)'\n        };\n\n        const isDownloadingCompleted =\n            file &&\n            file.local &&\n            (file.local.is_downloading_completed || file.idb_key || file.local.is_uploading_completed) &&\n            !this.completeAnimation &&\n            !isActive;\n\n        // console.log(\n        //     `[fp]] render \\\\\n        //     id=${file.id} showProgress=${inProgress} progress=${progress} \\\\\n        //     was_active=${wasActive} is_active=${isActive} is_completed=${isCompleted} \\\\\n        //     progress_size=${progressSize} size=${size} complete_animation=${this.completeAnimation} \\\\\n        //     is_downloading_completed=${isDownloadingCompleted}\n        //     completeIcon=${completeIcon}`,\n        //     file,\n        //     prevFile\n        // );\n        //cancelButton = true;\n        //inProgress = true;\n\n        if (isDownloadingCompleted) {\n            // console.log('FileProgress.render completeIcon');\n            if (completeIcon) {\n                return (\n                    <div className={classNames('file-progress', 'file-progress-complete')} style={style}>\n                        {completeIcon}\n                    </div>\n                );\n            }\n\n            return null;\n        }\n\n        if (inProgress || this.completeAnimation) {\n            // console.log('FileProgress.render inProgressIcon');\n            return (\n                <div className='file-progress' style={style}>\n                    <CircularProgress\n                        className='file-progress-indicator'\n                        classes={{ circle: 'file-progress-circle' }}\n                        variant='static'\n                        value={progress}\n                        size={48}\n                        thickness={2}\n                    />\n                    {cancelButton && <CloseIcon />}\n                </div>\n            );\n        }\n\n        if (icon) {\n            // console.log('FileProgress.render icon');\n            return (\n                <div className='file-progress' style={style}>\n                    {icon}\n                </div>\n            );\n        }\n\n        return null;\n    }\n}\n\nFileProgress.propTypes = {\n    file: PropTypes.object.isRequired,\n    thumbnailSrc: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n    cancelButton: PropTypes.bool,\n    download: PropTypes.bool,\n    upload: PropTypes.bool,\n    zIndex: PropTypes.number,\n\n    icon: PropTypes.node,\n    completeIcon: PropTypes.node\n};\n\nFileProgress.defaultProps = {\n    cancelButton: false,\n    download: true,\n    upload: false\n};\n\nexport default FileProgress;\n"]},"metadata":{},"sourceType":"module"}