{"ast":null,"code":"import _defineProperty from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Tile/ChatTile.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport BookmarkBorderIcon from '../../Assets/Icons/Saved';\nimport DeletedAccountIcon from '../../Assets/Icons/DeletedAccount';\nimport OnlineStatus from './OnlineStatus';\nimport { getChatLetters, isMeChat, isPrivateChat, isDeletedPrivateChat } from '../../Utils/Chat';\nimport { getSrc, loadChatContent } from '../../Utils/File';\nimport ChatStore from '../../Stores/ChatStore';\nimport FileStore from '../../Stores/FileStore';\nimport './ChatTile.css';\n\nvar ChatTile =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ChatTile, _Component);\n\n  function ChatTile(props) {\n    var _this;\n\n    _classCallCheck(this, ChatTile);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChatTile).call(this, props));\n\n    _this.onFastUpdatingComplete = function (update) {\n      _this.forceUpdate();\n    };\n\n    _this.onClientUpdateChatBlob = function (update) {\n      var chatId = _this.props.chatId;\n      if (chatId !== update.chatId) return;\n\n      if (_this.state.loaded) {\n        _this.setState({\n          loaded: false\n        });\n      } else {\n        _this.forceUpdate();\n      }\n    };\n\n    _this.onUpdateChatPhoto = function (update) {\n      var chatId = _this.props.chatId;\n      var chat_id = update.chat_id,\n          photo = update.photo;\n      if (chat_id !== chatId) return;\n\n      if (_this.state.loaded) {\n        _this.setState({\n          loaded: false\n        });\n      } else {\n        _this.forceUpdate();\n      }\n\n      if (photo) {\n        var store = FileStore.getStore();\n        loadChatContent(store, chatId);\n      }\n    };\n\n    _this.onUpdateChatTitle = function (update) {\n      var chatId = _this.props.chatId;\n      var chat_id = update.chat_id;\n      if (chat_id !== chatId) return;\n\n      _this.forceUpdate();\n    };\n\n    _this.handleSelect = function (event) {\n      var _this$props = _this.props,\n          chatId = _this$props.chatId,\n          onSelect = _this$props.onSelect;\n      if (!onSelect) return;\n      event.stopPropagation();\n      onSelect(chatId);\n    };\n\n    _this.handleLoad = function () {\n      _this.setState({\n        loaded: true\n      });\n    };\n\n    _this.state = {\n      loaded: false\n    };\n    return _this;\n  }\n\n  _createClass(ChatTile, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var chatId = this.props.chatId;\n      var loaded = this.state.loaded;\n\n      if (nextProps.chatId !== chatId) {\n        return true;\n      }\n\n      if (nextState.loaded !== loaded) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n      ChatStore.on('updateChatPhoto', this.onUpdateChatPhoto);\n      ChatStore.on('updateChatTitle', this.onUpdateChatTitle);\n      FileStore.on('clientUpdateChatBlob', this.onClientUpdateChatBlob);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      ChatStore.off('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n      ChatStore.off('updateChatPhoto', this.onUpdateChatPhoto);\n      ChatStore.off('updateChatTitle', this.onUpdateChatTitle);\n      FileStore.off('clientUpdateChatBlob', this.onClientUpdateChatBlob);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          chatId = _this$props2.chatId,\n          showOnline = _this$props2.showOnline,\n          showSavedMessages = _this$props2.showSavedMessages,\n          onSelect = _this$props2.onSelect,\n          small = _this$props2.small,\n          dialog = _this$props2.dialog,\n          big = _this$props2.big,\n          size = _this$props2.size,\n          t = _this$props2.t;\n      var loaded = this.state.loaded;\n      var style = null;\n\n      if (size) {\n        style = {\n          width: size,\n          height: size\n        };\n      }\n\n      if (isDeletedPrivateChat(chatId)) {\n        return React.createElement(\"div\", {\n          className: classNames('chat-tile', {\n            'tile-small': small\n          }, {\n            'tile-dialog': dialog\n          }, {\n            'tile-big': big\n          }),\n          style: style,\n          onClick: this.handleSelect,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: classNames('tile-photo', 'tile_color_0', {\n            pointer: onSelect\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"tile-saved-messages\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }, React.createElement(DeletedAccountIcon, {\n          fontSize: big ? 'large' : 'default',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }))));\n      }\n\n      if (isMeChat(chatId) && showSavedMessages) {\n        return React.createElement(\"div\", {\n          className: classNames('chat-tile', {\n            'tile-small': small\n          }, {\n            'tile-dialog': dialog\n          }, {\n            'tile-big': big\n          }),\n          style: style,\n          onClick: this.handleSelect,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: classNames('tile-photo', 'tile_color_4', {\n            pointer: onSelect\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"tile-saved-messages\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        }, React.createElement(BookmarkBorderIcon, {\n          fontSize: big ? 'large' : 'default',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        }))));\n      }\n\n      var chat = ChatStore.get(chatId);\n      if (!chat) return null;\n      var photo = chat.photo;\n      var letters = getChatLetters(chat, t);\n      var src = getSrc(photo ? photo.small : null);\n      var tileLoaded = src && loaded;\n      var tileColor = \"tile_color_\".concat(Math.abs(chatId) % 8 + 1);\n      return React.createElement(\"div\", {\n        className: classNames('chat-tile', _defineProperty({}, tileColor, !tileLoaded), {\n          pointer: onSelect\n        }, {\n          'tile-dialog': dialog\n        }, {\n          'tile-small': small\n        }, {\n          'tile-big': big\n        }),\n        style: style,\n        onClick: this.handleSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, !tileLoaded && React.createElement(\"div\", {\n        className: \"tile-photo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"tile-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, letters)), src && React.createElement(\"img\", {\n        className: \"tile-photo\",\n        src: src,\n        onLoad: this.handleLoad,\n        draggable: false,\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }), showOnline && isPrivateChat(chatId) && React.createElement(OnlineStatus, {\n        chatId: chatId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ChatTile;\n}(Component);\n\nChatTile.propTypes = {\n  chatId: PropTypes.number.isRequired,\n  onSelect: PropTypes.func,\n  showSavedMessages: PropTypes.bool,\n  showOnline: PropTypes.bool,\n  size: PropTypes.number\n};\nChatTile.defaultProps = {\n  showSavedMessages: true,\n  showOnline: false\n};\nexport default withTranslation()(ChatTile);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Tile/ChatTile.js"],"names":["React","Component","PropTypes","classNames","withTranslation","BookmarkBorderIcon","DeletedAccountIcon","OnlineStatus","getChatLetters","isMeChat","isPrivateChat","isDeletedPrivateChat","getSrc","loadChatContent","ChatStore","FileStore","ChatTile","props","onFastUpdatingComplete","update","forceUpdate","onClientUpdateChatBlob","chatId","state","loaded","setState","onUpdateChatPhoto","chat_id","photo","store","getStore","onUpdateChatTitle","handleSelect","event","onSelect","stopPropagation","handleLoad","nextProps","nextState","on","off","showOnline","showSavedMessages","small","dialog","big","size","t","style","width","height","pointer","chat","get","letters","src","tileLoaded","tileColor","Math","abs","propTypes","number","isRequired","func","bool","defaultProps"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport BookmarkBorderIcon from '../../Assets/Icons/Saved';\nimport DeletedAccountIcon from '../../Assets/Icons/DeletedAccount';\nimport OnlineStatus from './OnlineStatus';\nimport { getChatLetters, isMeChat, isPrivateChat, isDeletedPrivateChat } from '../../Utils/Chat';\nimport { getSrc, loadChatContent } from '../../Utils/File';\nimport ChatStore from '../../Stores/ChatStore';\nimport FileStore from '../../Stores/FileStore';\nimport './ChatTile.css';\n\nclass ChatTile extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loaded: false\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const { chatId } = this.props;\n        const { loaded } = this.state;\n\n        if (nextProps.chatId !== chatId) {\n            return true;\n        }\n\n        if (nextState.loaded !== loaded) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.on('updateChatPhoto', this.onUpdateChatPhoto);\n        ChatStore.on('updateChatTitle', this.onUpdateChatTitle);\n        FileStore.on('clientUpdateChatBlob', this.onClientUpdateChatBlob);\n    }\n\n    componentWillUnmount() {\n        ChatStore.off('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.off('updateChatPhoto', this.onUpdateChatPhoto);\n        ChatStore.off('updateChatTitle', this.onUpdateChatTitle);\n        FileStore.off('clientUpdateChatBlob', this.onClientUpdateChatBlob);\n    }\n\n    onFastUpdatingComplete = update => {\n        this.forceUpdate();\n    };\n\n    onClientUpdateChatBlob = update => {\n        const { chatId } = this.props;\n\n        if (chatId !== update.chatId) return;\n\n        if (this.state.loaded) {\n            this.setState({ loaded: false });\n        } else {\n            this.forceUpdate();\n        }\n    };\n\n    onUpdateChatPhoto = update => {\n        const { chatId } = this.props;\n        const { chat_id, photo } = update;\n\n        if (chat_id !== chatId) return;\n\n        if (this.state.loaded) {\n            this.setState({ loaded: false });\n        } else {\n            this.forceUpdate();\n        }\n\n        if (photo) {\n            const store = FileStore.getStore();\n            loadChatContent(store, chatId);\n        }\n    };\n\n    onUpdateChatTitle = update => {\n        const { chatId } = this.props;\n        const { chat_id } = update;\n\n        if (chat_id !== chatId) return;\n\n        this.forceUpdate();\n    };\n\n    handleSelect = event => {\n        const { chatId, onSelect } = this.props;\n        if (!onSelect) return;\n\n        event.stopPropagation();\n        onSelect(chatId);\n    };\n\n    handleLoad = () => {\n        this.setState({ loaded: true });\n    };\n\n    render() {\n        const { chatId, showOnline, showSavedMessages, onSelect, small, dialog, big, size, t } = this.props;\n        const { loaded } = this.state;\n\n        let style = null;\n        if (size) {\n            style = {\n                width: size,\n                height: size\n            };\n        }\n\n        if (isDeletedPrivateChat(chatId)) {\n            return (\n                <div\n                    className={classNames(\n                        'chat-tile',\n                        { 'tile-small': small },\n                        { 'tile-dialog': dialog },\n                        { 'tile-big': big }\n                    )}\n                    style={style}\n                    onClick={this.handleSelect}>\n                    <div className={classNames('tile-photo', 'tile_color_0', { pointer: onSelect })}>\n                        <div className='tile-saved-messages'>\n                            <DeletedAccountIcon fontSize={big ? 'large' : 'default'} />\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        if (isMeChat(chatId) && showSavedMessages) {\n            return (\n                <div\n                    className={classNames(\n                        'chat-tile',\n                        { 'tile-small': small },\n                        { 'tile-dialog': dialog },\n                        { 'tile-big': big }\n                    )}\n                    style={style}\n                    onClick={this.handleSelect}>\n                    <div className={classNames('tile-photo', 'tile_color_4', { pointer: onSelect })}>\n                        <div className='tile-saved-messages'>\n                            <BookmarkBorderIcon fontSize={big ? 'large' : 'default'} />\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        const chat = ChatStore.get(chatId);\n        if (!chat) return null;\n\n        const { photo } = chat;\n\n        const letters = getChatLetters(chat, t);\n        const src = getSrc(photo ? photo.small : null);\n        const tileLoaded = src && loaded;\n\n        const tileColor = `tile_color_${(Math.abs(chatId) % 8) + 1}`;\n\n        return (\n            <div\n                className={classNames(\n                    'chat-tile',\n                    { [tileColor]: !tileLoaded },\n                    { pointer: onSelect },\n                    { 'tile-dialog': dialog },\n                    { 'tile-small': small },\n                    { 'tile-big': big }\n                )}\n                style={style}\n                onClick={this.handleSelect}>\n                {!tileLoaded && (\n                    <div className='tile-photo'>\n                        <span className='tile-text'>{letters}</span>\n                    </div>\n                )}\n                {src && <img className='tile-photo' src={src} onLoad={this.handleLoad} draggable={false} alt='' />}\n                {showOnline && isPrivateChat(chatId) && <OnlineStatus chatId={chatId} />}\n            </div>\n        );\n    }\n}\n\nChatTile.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    onSelect: PropTypes.func,\n    showSavedMessages: PropTypes.bool,\n    showOnline: PropTypes.bool,\n    size: PropTypes.number\n};\n\nChatTile.defaultProps = {\n    showSavedMessages: true,\n    showOnline: false\n};\n\nexport default withTranslation()(ChatTile);\n"]},"metadata":{},"sourceType":"module"}