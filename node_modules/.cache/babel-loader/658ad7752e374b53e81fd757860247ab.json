{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Additional/IframeResizer.js\";\n\n/**\n *\n * inject script to facilitate iframe resizing\n * https://github.com/davidjbradshaw/iframe-resizer\n *\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport { iframeResizer as iframeResizerLib } from 'iframe-resizer';\n\nvar IframeResizer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(IframeResizer, _React$Component);\n\n  function IframeResizer(_props) {\n    var _this;\n\n    _classCallCheck(this, IframeResizer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(IframeResizer).call(this, _props));\n\n    _this.updateIframe = function (props) {\n      // has src - no injected content\n      if (props.src) return; // do we have content to inject (content or children)\n\n      var content = props.content || props.children;\n      if (!content) return; // get frame to inject into\n\n      var frame = _this.frameRef.current;\n      if (!frame) return; // verify frame document access\n      // Due to browser security, this will fail with the following error\n      //   Uncaught DOMException: Failed to read the 'contentDocument' property from 'HTMLIFrameElement':\n      //   Blocked a frame with origin \"http://<hostname>\" from accessing a cross-origin frame.\n      // resolve this by loading documents from the same domain name,\n      // or injecting HTML `content` vs. loading via `src`\n\n      var doc = frame.contentDocument;\n      if (!doc) return; // replace iframe document content\n\n      if (typeof content === 'string') {\n        // assume this is a HTML block\n        //   we could send this in via REACT dangerously set HTML\n        //   but we are in an iframe anyway, already a red-headed step-child.\n        doc.open();\n        doc.write(content);\n        doc.close();\n      } else {\n        // assume this is a REACT component\n        doc.open();\n        doc.write('<div id=\"iframe-root\"></div>');\n        doc.close();\n        ReactDOM.render(content, doc.getElementById('iframe-root'));\n      }\n    };\n\n    _this.injectIframeResizerUrl = function () {\n      if (!_this.props.iframeResizerUrl) return;\n      var frame = _this.frameRef.current;\n      if (!frame) return; // verify frame document access\n      // Due to browser security, this will fail with the following error\n      //   Uncaught DOMException: Failed to read the 'contentDocument' property from 'HTMLIFrameElement':\n      //   Blocked a frame with origin \"http://<hostname>\" from accessing a cross-origin frame.\n      // resolve this by loading documents from the same domain name,\n      // or injecting HTML `content` vs. loading via `src`\n\n      var doc = frame.contentDocument;\n      if (!doc) return; // where can we insert into? (fail into whatever we can find)\n\n      var injectTarget = null;\n      ['head', 'HEAD', 'body', 'BODY', 'div', 'DIV'].forEach(function (tagName) {\n        if (injectTarget) return;\n        var found = doc.getElementsByTagName(tagName);\n        if (!(found && found.length)) return;\n        injectTarget = found[0];\n      });\n\n      if (!injectTarget) {\n        console.error('Unable to inject iframe resizer script');\n        return;\n      }\n\n      var resizerScriptElement = document.createElement('script');\n      resizerScriptElement.type = 'text/javascript';\n      resizerScriptElement.src = _this.props.iframeResizerUrl;\n      injectTarget.appendChild(resizerScriptElement);\n    };\n\n    _this.onLoad = function () {\n      _this.injectIframeResizerUrl(); // DISABLED because it's causing a loading loop :(\n      // if (this.props.onIframeLoaded) this.props.onIframeLoaded();\n\n    };\n\n    _this.resizeIframe = function (props) {\n      var frame = _this.frameRef.current;\n      if (!frame) return;\n\n      if (props.iframeResizerEnable) {\n        iframeResizerLib(props.iframeResizerOptions, frame);\n      }\n    };\n\n    _this.frameRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(IframeResizer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // can't update until we have a mounted iframe\n      this.updateIframe(this.props);\n      this.resizeIframe(this.props);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // React will remove the iframe, however we need to manually\n      // call iframe-resizer to stop its listeners\n      var frame = this.frameRef.current;\n      if (!frame) return;\n      var iframeResizer = frame.iframeResizer;\n      if (!iframeResizer) return;\n      iframeResizer.removeListeners();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      // can replace content if we got new props\n      this.updateIframe(nextProps);\n      this.resizeIframe(nextProps);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          src = _this$props.src,\n          id = _this$props.id,\n          frameBorder = _this$props.frameBorder,\n          className = _this$props.className,\n          style = _this$props.style;\n      return React.createElement(\"iframe\", {\n        ref: this.frameRef,\n        src: src,\n        id: id,\n        frameBorder: frameBorder,\n        className: className,\n        style: style,\n        onLoad: this.onLoad,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return IframeResizer;\n}(React.Component);\n\nIframeResizer.propTypes = {\n  // iframe content/document\n  // option 1. content of HTML to load in the iframe\n  content: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  // option 2. src to a URL to load in the iframe\n  src: PropTypes.string,\n  // iframe-resizer controls and helpers\n  iframeResizerEnable: PropTypes.bool,\n  iframeResizerOptions: PropTypes.object,\n  iframeResizerUrl: PropTypes.oneOfType([PropTypes.string, // URL to inject\n  PropTypes.bool // false = disable inject\n  ]),\n  // misc props to pass through to iframe\n  id: PropTypes.string,\n  frameBorder: PropTypes.number,\n  className: PropTypes.string,\n  style: PropTypes.object // optional extra callback when iframe is loaded\n  // onIframeLoaded: PropTypes.func,\n\n};\nIframeResizer.defaultProps = {\n  // resize iframe\n  iframeResizerEnable: true,\n  iframeResizerOptions: {// log: true,\n    // autoResize: true,\n    // checkOrigin: false,\n    // resizeFrom: 'parent',\n    // heightCalculationMethod: 'max',\n    // initCallback: () => { console.log('ready!'); },\n    // resizedCallback: () => { console.log('resized!'); },\n  },\n  iframeResizerUrl: 'https://cdnjs.cloudflare.com/ajax/libs/iframe-resizer/3.5.8/iframeResizer.contentWindow.min.js',\n  // misc props to pass through to iframe\n  frameBorder: 0,\n  style: {\n    width: '100%',\n    minHeight: 20\n  }\n};\nexport default IframeResizer;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Additional/IframeResizer.js"],"names":["React","PropTypes","ReactDOM","iframeResizer","iframeResizerLib","IframeResizer","props","updateIframe","src","content","children","frame","frameRef","current","doc","contentDocument","open","write","close","render","getElementById","injectIframeResizerUrl","iframeResizerUrl","injectTarget","forEach","tagName","found","getElementsByTagName","length","console","error","resizerScriptElement","document","createElement","type","appendChild","onLoad","resizeIframe","iframeResizerEnable","iframeResizerOptions","createRef","removeListeners","nextProps","id","frameBorder","className","style","Component","propTypes","oneOfType","string","element","bool","object","number","defaultProps","width","minHeight"],"mappings":"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","sourcesContent":["/**\n *\n * inject script to facilitate iframe resizing\n * https://github.com/davidjbradshaw/iframe-resizer\n *\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport { iframeResizer as iframeResizerLib } from 'iframe-resizer';\n\nclass IframeResizer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.frameRef = React.createRef();\n    }\n\n    componentDidMount() {\n        // can't update until we have a mounted iframe\n        this.updateIframe(this.props);\n        this.resizeIframe(this.props);\n    }\n\n    componentWillUnmount() {\n        // React will remove the iframe, however we need to manually\n        // call iframe-resizer to stop its listeners\n        const frame = this.frameRef.current;\n        if (!frame) return;\n\n        const { iframeResizer } = frame;\n        if (!iframeResizer) return;\n\n        iframeResizer.removeListeners();\n    }\n\n    componentWillReceiveProps(nextProps) {\n        // can replace content if we got new props\n        this.updateIframe(nextProps);\n        this.resizeIframe(nextProps);\n    }\n\n    updateIframe = props => {\n        // has src - no injected content\n        if (props.src) return;\n        // do we have content to inject (content or children)\n        const content = props.content || props.children;\n        if (!content) return;\n        // get frame to inject into\n        const frame = this.frameRef.current;\n        if (!frame) return;\n        // verify frame document access\n        // Due to browser security, this will fail with the following error\n        //   Uncaught DOMException: Failed to read the 'contentDocument' property from 'HTMLIFrameElement':\n        //   Blocked a frame with origin \"http://<hostname>\" from accessing a cross-origin frame.\n        // resolve this by loading documents from the same domain name,\n        // or injecting HTML `content` vs. loading via `src`\n        const doc = frame.contentDocument;\n        if (!doc) return;\n        // replace iframe document content\n        if (typeof content === 'string') {\n            // assume this is a HTML block\n            //   we could send this in via REACT dangerously set HTML\n            //   but we are in an iframe anyway, already a red-headed step-child.\n            doc.open();\n            doc.write(content);\n            doc.close();\n        } else {\n            // assume this is a REACT component\n            doc.open();\n            doc.write('<div id=\"iframe-root\"></div>');\n            doc.close();\n            ReactDOM.render(content, doc.getElementById('iframe-root'));\n        }\n    };\n\n    // inject the iframe resizer \"content window\" script\n    injectIframeResizerUrl = () => {\n        if (!this.props.iframeResizerUrl) return;\n        const frame = this.frameRef.current;\n        if (!frame) return;\n        // verify frame document access\n        // Due to browser security, this will fail with the following error\n        //   Uncaught DOMException: Failed to read the 'contentDocument' property from 'HTMLIFrameElement':\n        //   Blocked a frame with origin \"http://<hostname>\" from accessing a cross-origin frame.\n        // resolve this by loading documents from the same domain name,\n        // or injecting HTML `content` vs. loading via `src`\n        const doc = frame.contentDocument;\n        if (!doc) return;\n        // where can we insert into? (fail into whatever we can find)\n        let injectTarget = null;\n        ['head', 'HEAD', 'body', 'BODY', 'div', 'DIV'].forEach(tagName => {\n            if (injectTarget) return;\n            const found = doc.getElementsByTagName(tagName);\n            if (!(found && found.length)) return;\n            injectTarget = found[0];\n        });\n        if (!injectTarget) {\n            console.error('Unable to inject iframe resizer script');\n            return;\n        }\n        const resizerScriptElement = document.createElement('script');\n        resizerScriptElement.type = 'text/javascript';\n        resizerScriptElement.src = this.props.iframeResizerUrl;\n        injectTarget.appendChild(resizerScriptElement);\n    };\n\n    onLoad = () => {\n        this.injectIframeResizerUrl();\n        // DISABLED because it's causing a loading loop :(\n        // if (this.props.onIframeLoaded) this.props.onIframeLoaded();\n    };\n\n    resizeIframe = props => {\n        const frame = this.frameRef.current;\n        if (!frame) return;\n        if (props.iframeResizerEnable) {\n            iframeResizerLib(props.iframeResizerOptions, frame);\n        }\n    };\n\n    render() {\n        const { src, id, frameBorder, className, style } = this.props;\n        return (\n            <iframe\n                ref={this.frameRef}\n                src={src}\n                id={id}\n                frameBorder={frameBorder}\n                className={className}\n                style={style}\n                onLoad={this.onLoad}\n            />\n        );\n    }\n}\nIframeResizer.propTypes = {\n    // iframe content/document\n    // option 1. content of HTML to load in the iframe\n    content: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    // option 2. src to a URL to load in the iframe\n    src: PropTypes.string,\n    // iframe-resizer controls and helpers\n    iframeResizerEnable: PropTypes.bool,\n    iframeResizerOptions: PropTypes.object,\n    iframeResizerUrl: PropTypes.oneOfType([\n        PropTypes.string, // URL to inject\n        PropTypes.bool // false = disable inject\n    ]),\n    // misc props to pass through to iframe\n    id: PropTypes.string,\n    frameBorder: PropTypes.number,\n    className: PropTypes.string,\n    style: PropTypes.object\n    // optional extra callback when iframe is loaded\n    // onIframeLoaded: PropTypes.func,\n};\nIframeResizer.defaultProps = {\n    // resize iframe\n    iframeResizerEnable: true,\n    iframeResizerOptions: {\n        // log: true,\n        // autoResize: true,\n        // checkOrigin: false,\n        // resizeFrom: 'parent',\n        // heightCalculationMethod: 'max',\n        // initCallback: () => { console.log('ready!'); },\n        // resizedCallback: () => { console.log('resized!'); },\n    },\n    iframeResizerUrl: 'https://cdnjs.cloudflare.com/ajax/libs/iframe-resizer/3.5.8/iframeResizer.contentWindow.min.js',\n    // misc props to pass through to iframe\n    frameBorder: 0,\n    style: {\n        width: '100%',\n        minHeight: 20\n    }\n};\n\nexport default IframeResizer;\n"]},"metadata":{},"sourceType":"module"}