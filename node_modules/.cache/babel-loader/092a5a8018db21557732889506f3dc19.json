{"ast":null,"code":"import _defineProperty from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Tile/FoundMessage.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport ListItem from '@material-ui/core/ListItem';\nimport ChatTile from './ChatTile';\nimport UserTile from './UserTile';\nimport DialogTitle from './DialogTitle';\nimport { getMessageDate, getMessageSenderFullName, getMessageSenderName } from '../../Utils/Chat';\nimport { getContent } from '../../Utils/Message';\nimport AppStore from '../../Stores/ApplicationStore';\nimport MessageStore from '../../Stores/MessageStore';\nimport './FoundMessage.css';\n\nvar FoundMessage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FoundMessage, _React$Component);\n\n  function FoundMessage(props) {\n    var _this;\n\n    _classCallCheck(this, FoundMessage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FoundMessage).call(this, props));\n\n    _this.onClientUpdateChatId = function (update) {\n      _this.setState(_objectSpread({}, update));\n    };\n\n    _this.state = {\n      nextChatId: AppStore.getChatId(),\n      nextMessageId: AppStore.getMessageId()\n    };\n    return _this;\n  }\n\n  _createClass(FoundMessage, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var _this$props = this.props,\n          chatId = _this$props.chatId,\n          messageId = _this$props.messageId;\n\n      if (nextState.nextChatId === chatId && nextState.nextMessageId === messageId) {\n        return true;\n      }\n\n      if (nextState.previousChatId === chatId && nextState.previousMessageId === messageId) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      AppStore.on('clientUpdateChatId', this.onClientUpdateChatId);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      AppStore.off('clientUpdateChatId', this.onClientUpdateChatId);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          chatId = _this$props2.chatId,\n          messageId = _this$props2.messageId,\n          chatSearch = _this$props2.chatSearch,\n          onClick = _this$props2.onClick,\n          t = _this$props2.t;\n      var selectedChatId = this.state.nextChatId;\n      var selectedMessageId = this.state.nextMessageId;\n      var message = MessageStore.get(chatId, messageId);\n      var sender_user_id = message.sender_user_id;\n      var date = getMessageDate(message);\n      var senderName = getMessageSenderName(message, t);\n      var senderFullName = getMessageSenderFullName(message, t);\n      var content = getContent(message, t) || \"\\xA0\";\n      var selected = chatId === selectedChatId && messageId === selectedMessageId;\n      var tile = sender_user_id && chatSearch ? React.createElement(UserTile, {\n        userId: sender_user_id,\n        dialog: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }) : React.createElement(ChatTile, {\n        chatId: chatId,\n        dialog: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      });\n      return React.createElement(ListItem, {\n        button: true,\n        className: classNames('found-message', {\n          'item-selected': selected\n        }),\n        onClick: onClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"dialog-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, tile, React.createElement(\"div\", {\n        className: \"dialog-inner-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"tile-first-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, chatSearch && senderFullName ? React.createElement(\"div\", {\n        className: \"dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, senderFullName) : React.createElement(DialogTitle, {\n        chatId: chatId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"dialog-meta\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, date)), React.createElement(\"div\", {\n        className: \"tile-second-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"dialog-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(React.Fragment, null, !chatSearch && senderName && React.createElement(\"span\", {\n        className: \"dialog-content-accent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, senderName, \": \"), content))))));\n    }\n  }]);\n\n  return FoundMessage;\n}(React.Component);\n\nFoundMessage.propTypes = {\n  chatId: PropTypes.number.isRequired,\n  messageId: PropTypes.number.isRequired,\n  chatSearch: PropTypes.bool,\n  onClick: PropTypes.func\n};\nexport default withTranslation()(FoundMessage);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Tile/FoundMessage.js"],"names":["React","PropTypes","classNames","withTranslation","ListItem","ChatTile","UserTile","DialogTitle","getMessageDate","getMessageSenderFullName","getMessageSenderName","getContent","AppStore","MessageStore","FoundMessage","props","onClientUpdateChatId","update","setState","state","nextChatId","getChatId","nextMessageId","getMessageId","nextProps","nextState","chatId","messageId","previousChatId","previousMessageId","on","off","chatSearch","onClick","t","selectedChatId","selectedMessageId","message","get","sender_user_id","date","senderName","senderFullName","content","selected","tile","Component","propTypes","number","isRequired","bool","func"],"mappings":";;;;;;;;;;;;AAAA;;;;;;AAOA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,cAAT,EAAyBC,wBAAzB,EAAmDC,oBAAnD,QAA+E,kBAA/E;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,QAAP,MAAqB,+BAArB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAO,oBAAP;;IAEMC,Y;;;;;AACF,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,sFAAMA,KAAN;;AADe,UA+BnBC,oBA/BmB,GA+BI,UAAAC,MAAM,EAAI;AAC7B,YAAKC,QAAL,mBACOD,MADP;AAGH,KAnCkB;;AAGf,UAAKE,KAAL,GAAa;AACTC,MAAAA,UAAU,EAAER,QAAQ,CAACS,SAAT,EADH;AAETC,MAAAA,aAAa,EAAEV,QAAQ,CAACW,YAAT;AAFN,KAAb;AAHe;AAOlB;;;;0CAEqBC,S,EAAWC,S,EAAW;AAAA,wBACV,KAAKV,KADK;AAAA,UAChCW,MADgC,eAChCA,MADgC;AAAA,UACxBC,SADwB,eACxBA,SADwB;;AAGxC,UAAIF,SAAS,CAACL,UAAV,KAAyBM,MAAzB,IAAmCD,SAAS,CAACH,aAAV,KAA4BK,SAAnE,EAA8E;AAC1E,eAAO,IAAP;AACH;;AAED,UAAIF,SAAS,CAACG,cAAV,KAA6BF,MAA7B,IAAuCD,SAAS,CAACI,iBAAV,KAAgCF,SAA3E,EAAsF;AAClF,eAAO,IAAP;AACH;;AAED,aAAO,KAAP;AACH;;;wCAEmB;AAChBf,MAAAA,QAAQ,CAACkB,EAAT,CAAY,oBAAZ,EAAkC,KAAKd,oBAAvC;AACH;;;2CAEsB;AACnBJ,MAAAA,QAAQ,CAACmB,GAAT,CAAa,oBAAb,EAAmC,KAAKf,oBAAxC;AACH;;;6BAQQ;AAAA,yBACiD,KAAKD,KADtD;AAAA,UACGW,MADH,gBACGA,MADH;AAAA,UACWC,SADX,gBACWA,SADX;AAAA,UACsBK,UADtB,gBACsBA,UADtB;AAAA,UACkCC,OADlC,gBACkCA,OADlC;AAAA,UAC2CC,CAD3C,gBAC2CA,CAD3C;AAEL,UAAMC,cAAc,GAAG,KAAKhB,KAAL,CAAWC,UAAlC;AACA,UAAMgB,iBAAiB,GAAG,KAAKjB,KAAL,CAAWG,aAArC;AACA,UAAMe,OAAO,GAAGxB,YAAY,CAACyB,GAAb,CAAiBZ,MAAjB,EAAyBC,SAAzB,CAAhB;AAJK,UAMGY,cANH,GAMsBF,OANtB,CAMGE,cANH;AAQL,UAAMC,IAAI,GAAGhC,cAAc,CAAC6B,OAAD,CAA3B;AACA,UAAMI,UAAU,GAAG/B,oBAAoB,CAAC2B,OAAD,EAAUH,CAAV,CAAvC;AACA,UAAMQ,cAAc,GAAGjC,wBAAwB,CAAC4B,OAAD,EAAUH,CAAV,CAA/C;AACA,UAAMS,OAAO,GAAGhC,UAAU,CAAC0B,OAAD,EAAUH,CAAV,CAAV,IAA0B,MAA1C;AACA,UAAMU,QAAQ,GAAGlB,MAAM,KAAKS,cAAX,IAA6BR,SAAS,KAAKS,iBAA5D;AAEA,UAAMS,IAAI,GACNN,cAAc,IAAIP,UAAlB,GACI,oBAAC,QAAD;AAAU,QAAA,MAAM,EAAEO,cAAlB;AAAkC,QAAA,MAAM,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,GAGI,oBAAC,QAAD;AAAU,QAAA,MAAM,EAAEb,MAAlB;AAA0B,QAAA,MAAM,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJR;AAOA,aACI,oBAAC,QAAD;AAAU,QAAA,MAAM,MAAhB;AAAiB,QAAA,SAAS,EAAExB,UAAU,CAAC,eAAD,EAAkB;AAAE,2BAAiB0C;AAAnB,SAAlB,CAAtC;AAAwF,QAAA,OAAO,EAAEX,OAAjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKY,IADL,EAEI;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKb,UAAU,IAAIU,cAAd,GACG;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+BA,cAA/B,CADH,GAGG,oBAAC,WAAD;AAAa,QAAA,MAAM,EAAEhB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJR,EAMI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8Bc,IAA9B,CANJ,CADJ,EASI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEQ,0CACK,CAACR,UAAD,IAAeS,UAAf,IACG;AAAM,QAAA,SAAS,EAAC,uBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyCA,UAAzC,OAFR,EAIKE,OAJL,CAFR,CADJ,CATJ,CAFJ,CADJ,CADJ;AA6BH;;;;EAxFsB3C,KAAK,CAAC8C,S;;AA2FjChC,YAAY,CAACiC,SAAb,GAAyB;AACrBrB,EAAAA,MAAM,EAAEzB,SAAS,CAAC+C,MAAV,CAAiBC,UADJ;AAErBtB,EAAAA,SAAS,EAAE1B,SAAS,CAAC+C,MAAV,CAAiBC,UAFP;AAGrBjB,EAAAA,UAAU,EAAE/B,SAAS,CAACiD,IAHD;AAIrBjB,EAAAA,OAAO,EAAEhC,SAAS,CAACkD;AAJE,CAAzB;AAOA,eAAehD,eAAe,GAAGW,YAAH,CAA9B","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport ListItem from '@material-ui/core/ListItem';\nimport ChatTile from './ChatTile';\nimport UserTile from './UserTile';\nimport DialogTitle from './DialogTitle';\nimport { getMessageDate, getMessageSenderFullName, getMessageSenderName } from '../../Utils/Chat';\nimport { getContent } from '../../Utils/Message';\nimport AppStore from '../../Stores/ApplicationStore';\nimport MessageStore from '../../Stores/MessageStore';\nimport './FoundMessage.css';\n\nclass FoundMessage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            nextChatId: AppStore.getChatId(),\n            nextMessageId: AppStore.getMessageId()\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const { chatId, messageId } = this.props;\n\n        if (nextState.nextChatId === chatId && nextState.nextMessageId === messageId) {\n            return true;\n        }\n\n        if (nextState.previousChatId === chatId && nextState.previousMessageId === messageId) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        AppStore.on('clientUpdateChatId', this.onClientUpdateChatId);\n    }\n\n    componentWillUnmount() {\n        AppStore.off('clientUpdateChatId', this.onClientUpdateChatId);\n    }\n\n    onClientUpdateChatId = update => {\n        this.setState({\n            ...update\n        });\n    };\n\n    render() {\n        const { chatId, messageId, chatSearch, onClick, t } = this.props;\n        const selectedChatId = this.state.nextChatId;\n        const selectedMessageId = this.state.nextMessageId;\n        const message = MessageStore.get(chatId, messageId);\n\n        const { sender_user_id } = message;\n\n        const date = getMessageDate(message);\n        const senderName = getMessageSenderName(message, t);\n        const senderFullName = getMessageSenderFullName(message, t);\n        const content = getContent(message, t) || '\\u00A0';\n        const selected = chatId === selectedChatId && messageId === selectedMessageId;\n\n        const tile =\n            sender_user_id && chatSearch ? (\n                <UserTile userId={sender_user_id} dialog />\n            ) : (\n                <ChatTile chatId={chatId} dialog />\n            );\n\n        return (\n            <ListItem button className={classNames('found-message', { 'item-selected': selected })} onClick={onClick}>\n                <div className='dialog-wrapper'>\n                    {tile}\n                    <div className='dialog-inner-wrapper'>\n                        <div className='tile-first-row'>\n                            {chatSearch && senderFullName ? (\n                                <div className='dialog-title'>{senderFullName}</div>\n                            ) : (\n                                <DialogTitle chatId={chatId} />\n                            )}\n                            <div className='dialog-meta'>{date}</div>\n                        </div>\n                        <div className='tile-second-row'>\n                            <div className='dialog-content'>\n                                {\n                                    <>\n                                        {!chatSearch && senderName && (\n                                            <span className='dialog-content-accent'>{senderName}: </span>\n                                        )}\n                                        {content}\n                                    </>\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ListItem>\n        );\n    }\n}\n\nFoundMessage.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    messageId: PropTypes.number.isRequired,\n    chatSearch: PropTypes.bool,\n    onClick: PropTypes.func\n};\n\nexport default withTranslation()(FoundMessage);\n"]},"metadata":{},"sourceType":"module"}