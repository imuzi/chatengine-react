{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnMiddle/EmojiPickerButton.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from '../../Utils/HOC';\nimport withTheme from '@material-ui/core/styles/withTheme';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport InsertEmoticonIcon from '../../Assets/Icons/Smile';\nimport { Picker as EmojiPicker } from 'emoji-mart'; // import { NimblePicker as EmojiPicker } from 'emoji-mart';\n// import data from 'emoji-mart/data/messenger.json'\n\nimport StickerPreview from './StickerPreview';\nimport StickersPicker from './StickersPicker';\nimport { isAppleDevice } from '../../Utils/Common';\nimport { loadStickerThumbnailContent, loadStickerSetContent, loadRecentStickersContent } from '../../Utils/File';\nimport { EMOJI_PICKER_TIMEOUT_MS } from '../../Constants';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport FileStore from '../../Stores/FileStore';\nimport LocalizationStore from '../../Stores/LocalizationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './EmojiPickerButton.css';\n\nvar EmojiPickerButton =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EmojiPickerButton, _React$Component);\n\n  function EmojiPickerButton(props) {\n    var _this;\n\n    _classCallCheck(this, EmojiPickerButton);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EmojiPickerButton).call(this, props));\n\n    _this.onClientUpdateChange = function (update) {\n      _this.picker = null;\n    };\n\n    _this.handleButtonMouseEnter = function (event) {\n      _this.buttonEnter = true;\n      setTimeout(function () {\n        if (!_this.buttonEnter) return;\n\n        _this.updatePicker(true);\n\n        _this.loadStickerSets();\n      }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    _this.loadStickerSets =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var promises, node, store, previewSets, previewStickers;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!_this.sets) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              _context.next = 4;\n              return TdLibController.send({\n                '@type': 'getRecentStickers',\n                is_attached: false\n              });\n\n            case 4:\n              _this.recent = _context.sent;\n              _context.next = 7;\n              return TdLibController.send({\n                '@type': 'getInstalledStickerSets',\n                is_masks: false\n              });\n\n            case 7:\n              _this.stickerSets = _context.sent;\n              promises = [];\n\n              _this.stickerSets.sets.forEach(function (x) {\n                promises.push(TdLibController.send({\n                  '@type': 'getStickerSet',\n                  set_id: x.id\n                }));\n              });\n\n              _context.next = 12;\n              return Promise.all(promises);\n\n            case 12:\n              _this.sets = _context.sent;\n              node = _this.stickersPickerRef.current;\n              store = FileStore.getStore();\n              loadRecentStickersContent(store, _this.recent);\n              previewSets = _this.sets.slice(0, 5).reverse();\n              previewSets.forEach(function (x) {\n                loadStickerSetContent(store, x);\n                node.loadedSets.set(x.id, x.id);\n              });\n              previewStickers = _this.sets.reduce(function (stickers, set) {\n                if (set.stickers.length > 0) {\n                  stickers.push(set.stickers[0]);\n                }\n\n                return stickers;\n              }, []);\n              previewStickers.forEach(function (x) {\n                loadStickerThumbnailContent(store, x);\n              });\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    _this.handleButtonMouseLeave = function () {\n      _this.buttonEnter = false;\n      setTimeout(function () {\n        _this.tryClosePicker();\n      }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    _this.tryClosePicker = function () {\n      var sticker = _this.state.sticker;\n      if (_this.paperEnter || _this.buttonEnter || sticker) return;\n\n      _this.updatePicker(false);\n    };\n\n    _this.handlePaperMouseEnter = function () {\n      _this.paperEnter = true;\n    };\n\n    _this.handlePaperMouseLeave = function () {\n      // return;\n      _this.paperEnter = false;\n      setTimeout(function () {\n        _this.tryClosePicker();\n      }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    _this.updatePicker = function (open) {\n      _this.setState({\n        open: open\n      });\n    };\n\n    _this.handleEmojiClick = function () {\n      _this.setState({\n        tab: 0\n      });\n    };\n\n    _this.handleStickersClick = function () {\n      var stickersPicker = _this.stickersPickerRef.current;\n      var tab = _this.state.tab;\n      stickersPicker.loadContent(_this.recent, _this.stickerSets, _this.sets);\n\n      _this.setState({\n        tab: 1\n      });\n\n      if (tab === 1) {\n        stickersPicker.scrollTop();\n      }\n    };\n\n    _this.handleStickerSend = function (sticker) {\n      if (!sticker) return;\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateStickerSend',\n        sticker: sticker\n      });\n\n      _this.updatePicker(false);\n    };\n\n    _this.handleStickerPreview = function (sticker) {\n      _this.setState({\n        sticker: sticker\n      });\n\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateStickerPreview',\n        sticker: sticker\n      });\n\n      if (!sticker) {\n        _this.tryClosePicker();\n      }\n    };\n\n    _this.state = {\n      open: false,\n      tab: 0\n    };\n    _this.emojiPickerRef = React.createRef();\n    _this.stickersPickerRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(EmojiPickerButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      ApplicationStore.on('clientUpdateThemeChange', this.onClientUpdateChange);\n      LocalizationStore.on('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      ApplicationStore.off('clientUpdateThemeChange', this.onClientUpdateChange);\n      LocalizationStore.off('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          t = _this$props.t;\n      var _this$state = this.state,\n          open = _this$state.open,\n          tab = _this$state.tab,\n          sticker = _this$state.sticker;\n\n      if (open && !this.picker) {\n        var i18n = {\n          search: t('Search'),\n          notfound: t('NotEmojiFound'),\n          skintext: t('ChooseDefaultSkinTone'),\n          categories: {\n            search: t('SearchResults'),\n            recent: t('Recent'),\n            people: t('SmileysPeople'),\n            nature: t('AnimalsNature'),\n            foods: t('FoodDrink'),\n            activity: t('Activity'),\n            places: t('TravelPlaces'),\n            objects: t('Objects'),\n            symbols: t('Symbols'),\n            flags: t('Flags'),\n            custom: t('Custom')\n          }\n        };\n        this.picker = React.createElement(EmojiPicker, {\n          ref: this.emojiPickerRef // data={data}\n          ,\n          set: \"apple\",\n          showPreview: false,\n          showSkinTones: false,\n          onSelect: this.props.onSelect,\n          color: theme.palette.primary.dark,\n          i18n: i18n,\n          native: isAppleDevice(),\n          style: {\n            width: 338,\n            overflowX: 'hidden'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209\n          },\n          __self: this\n        });\n        this.stickersPicker = React.createElement(StickersPicker, {\n          ref: this.stickersPickerRef,\n          onSelect: this.handleStickerSend,\n          onPreview: this.handleStickerPreview,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(\"link\", {\n        rel: \"stylesheet\",\n        type: \"text/css\",\n        href: theme.palette.type === 'dark' ? 'emoji-mart.dark.css' : 'emoji-mart.light.css',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }), React.createElement(IconButton, {\n        className: \"inputbox-icon-button\",\n        \"aria-label\": \"Emoticon\",\n        onMouseEnter: this.handleButtonMouseEnter,\n        onMouseLeave: this.handleButtonMouseLeave,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, React.createElement(InsertEmoticonIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: classNames('emoji-picker-root', {\n          'emoji-picker-root-opened': open\n        }),\n        onMouseEnter: this.handlePaperMouseEnter,\n        onMouseLeave: this.handlePaperMouseLeave,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"emoji-picker-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: tab === 0 ? 'primary' : 'default',\n        className: \"emoji-picker-header-button\",\n        onClick: this.handleEmojiClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, t('Emoji')), React.createElement(Button, {\n        color: tab === 1 ? 'primary' : 'default',\n        className: \"emoji-picker-header-button\",\n        onClick: this.handleStickersClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, t('Stickers'))), React.createElement(\"div\", {\n        className: classNames('emoji-picker-content', {\n          'emoji-picker-content-stickers': tab === 1\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, this.picker, this.stickersPicker), Boolean(sticker) && React.createElement(StickerPreview, {\n        sticker: sticker,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return EmojiPickerButton;\n}(React.Component);\n\nvar enhance = compose(withTranslation(), withTheme);\nexport default enhance(EmojiPickerButton);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnMiddle/EmojiPickerButton.js"],"names":["React","classNames","compose","withTheme","withTranslation","Button","IconButton","InsertEmoticonIcon","Picker","EmojiPicker","StickerPreview","StickersPicker","isAppleDevice","loadStickerThumbnailContent","loadStickerSetContent","loadRecentStickersContent","EMOJI_PICKER_TIMEOUT_MS","ApplicationStore","FileStore","LocalizationStore","TdLibController","EmojiPickerButton","props","onClientUpdateChange","update","picker","handleButtonMouseEnter","event","buttonEnter","setTimeout","updatePicker","loadStickerSets","sets","send","is_attached","recent","is_masks","stickerSets","promises","forEach","x","push","set_id","id","Promise","all","node","stickersPickerRef","current","store","getStore","previewSets","slice","reverse","loadedSets","set","previewStickers","reduce","stickers","length","handleButtonMouseLeave","tryClosePicker","sticker","state","paperEnter","handlePaperMouseEnter","handlePaperMouseLeave","open","setState","handleEmojiClick","tab","handleStickersClick","stickersPicker","loadContent","scrollTop","handleStickerSend","clientUpdate","handleStickerPreview","emojiPickerRef","createRef","on","off","theme","t","i18n","search","notfound","skintext","categories","people","nature","foods","activity","places","objects","symbols","flags","custom","onSelect","palette","primary","dark","width","overflowX","type","Boolean","Component","enhance"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from '../../Utils/HOC';\nimport withTheme from '@material-ui/core/styles/withTheme';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport InsertEmoticonIcon from '../../Assets/Icons/Smile';\nimport { Picker as EmojiPicker } from 'emoji-mart';\n// import { NimblePicker as EmojiPicker } from 'emoji-mart';\n// import data from 'emoji-mart/data/messenger.json'\nimport StickerPreview from './StickerPreview';\nimport StickersPicker from './StickersPicker';\nimport { isAppleDevice } from '../../Utils/Common';\nimport { loadStickerThumbnailContent, loadStickerSetContent, loadRecentStickersContent } from '../../Utils/File';\nimport { EMOJI_PICKER_TIMEOUT_MS } from '../../Constants';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport FileStore from '../../Stores/FileStore';\nimport LocalizationStore from '../../Stores/LocalizationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './EmojiPickerButton.css';\n\nclass EmojiPickerButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: false,\n            tab: 0\n        };\n\n        this.emojiPickerRef = React.createRef();\n        this.stickersPickerRef = React.createRef();\n    }\n\n    componentDidMount() {\n        ApplicationStore.on('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.on('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.off('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.off('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    onClientUpdateChange = update => {\n        this.picker = null;\n    };\n\n    handleButtonMouseEnter = event => {\n        this.buttonEnter = true;\n        setTimeout(() => {\n            if (!this.buttonEnter) return;\n\n            this.updatePicker(true);\n            this.loadStickerSets();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    loadStickerSets = async () => {\n        if (this.sets) return;\n\n        this.recent = await TdLibController.send({\n            '@type': 'getRecentStickers',\n            is_attached: false\n        });\n\n        this.stickerSets = await TdLibController.send({\n            '@type': 'getInstalledStickerSets',\n            is_masks: false\n        });\n\n        const promises = [];\n        this.stickerSets.sets.forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        this.sets = await Promise.all(promises);\n\n        const node = this.stickersPickerRef.current;\n\n        const store = FileStore.getStore();\n        loadRecentStickersContent(store, this.recent);\n\n        const previewSets = this.sets.slice(0, 5).reverse();\n        previewSets.forEach(x => {\n            loadStickerSetContent(store, x);\n            node.loadedSets.set(x.id, x.id);\n        });\n\n        const previewStickers = this.sets.reduce((stickers, set) => {\n            if (set.stickers.length > 0) {\n                stickers.push(set.stickers[0]);\n            }\n            return stickers;\n        }, []);\n        previewStickers.forEach(x => {\n            loadStickerThumbnailContent(store, x);\n        });\n    };\n\n    handleButtonMouseLeave = () => {\n        this.buttonEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    tryClosePicker = () => {\n        const { sticker } = this.state;\n        if (this.paperEnter || this.buttonEnter || sticker) return;\n\n        this.updatePicker(false);\n    };\n\n    handlePaperMouseEnter = () => {\n        this.paperEnter = true;\n    };\n\n    handlePaperMouseLeave = () => {\n        // return;\n\n        this.paperEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    updatePicker = open => {\n        this.setState({ open });\n    };\n\n    handleEmojiClick = () => {\n        this.setState({ tab: 0 });\n    };\n\n    handleStickersClick = () => {\n        const stickersPicker = this.stickersPickerRef.current;\n        const { tab } = this.state;\n\n        stickersPicker.loadContent(this.recent, this.stickerSets, this.sets);\n\n        this.setState({ tab: 1 });\n        if (tab === 1) {\n            stickersPicker.scrollTop();\n        }\n    };\n\n    handleStickerSend = sticker => {\n        if (!sticker) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSend',\n            sticker\n        });\n\n        this.updatePicker(false);\n    };\n\n    handleStickerPreview = sticker => {\n        this.setState({ sticker });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerPreview',\n            sticker\n        });\n\n        if (!sticker) {\n            this.tryClosePicker();\n        }\n    };\n\n    render() {\n        const { theme, t } = this.props;\n        const { open, tab, sticker } = this.state;\n\n        if (open && !this.picker) {\n            const i18n = {\n                search: t('Search'),\n                notfound: t('NotEmojiFound'),\n                skintext: t('ChooseDefaultSkinTone'),\n                categories: {\n                    search: t('SearchResults'),\n                    recent: t('Recent'),\n                    people: t('SmileysPeople'),\n                    nature: t('AnimalsNature'),\n                    foods: t('FoodDrink'),\n                    activity: t('Activity'),\n                    places: t('TravelPlaces'),\n                    objects: t('Objects'),\n                    symbols: t('Symbols'),\n                    flags: t('Flags'),\n                    custom: t('Custom')\n                }\n            };\n\n            this.picker = (\n                <EmojiPicker\n                    ref={this.emojiPickerRef}\n                    // data={data}\n                    set='apple'\n                    showPreview={false}\n                    showSkinTones={false}\n                    onSelect={this.props.onSelect}\n                    color={theme.palette.primary.dark}\n                    i18n={i18n}\n                    native={isAppleDevice()}\n                    style={{ width: 338, overflowX: 'hidden' }}\n                />\n            );\n\n            this.stickersPicker = (\n                <StickersPicker\n                    ref={this.stickersPickerRef}\n                    onSelect={this.handleStickerSend}\n                    onPreview={this.handleStickerPreview}\n                />\n            );\n        }\n\n        return (\n            <>\n                <link\n                    rel='stylesheet'\n                    type='text/css'\n                    href={theme.palette.type === 'dark' ? 'emoji-mart.dark.css' : 'emoji-mart.light.css'}\n                />\n                <IconButton\n                    className='inputbox-icon-button'\n                    aria-label='Emoticon'\n                    onMouseEnter={this.handleButtonMouseEnter}\n                    onMouseLeave={this.handleButtonMouseLeave}>\n                    <InsertEmoticonIcon />\n                </IconButton>\n                <div\n                    className={classNames('emoji-picker-root', { 'emoji-picker-root-opened': open })}\n                    onMouseEnter={this.handlePaperMouseEnter}\n                    onMouseLeave={this.handlePaperMouseLeave}>\n                    <div className='emoji-picker-header'>\n                        <Button\n                            color={tab === 0 ? 'primary' : 'default'}\n                            className='emoji-picker-header-button'\n                            onClick={this.handleEmojiClick}>\n                            {t('Emoji')}\n                        </Button>\n                        <Button\n                            color={tab === 1 ? 'primary' : 'default'}\n                            className='emoji-picker-header-button'\n                            onClick={this.handleStickersClick}>\n                            {t('Stickers')}\n                        </Button>\n                    </div>\n                    <div className={classNames('emoji-picker-content', { 'emoji-picker-content-stickers': tab === 1 })}>\n                        {this.picker}\n                        {this.stickersPicker}\n                    </div>\n                    {Boolean(sticker) && <StickerPreview sticker={sticker} />}\n                </div>\n            </>\n        );\n    }\n}\n\nconst enhance = compose(\n    withTranslation(),\n    withTheme\n);\n\nexport default enhance(EmojiPickerButton);\n"]},"metadata":{},"sourceType":"module"}