{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnMiddle/ActionBar.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport CloseIcon from '../../Assets/Icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport { getChatUserId } from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport UserStore from '../../Stores/UserStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './ActionBar.css';\n\nvar ActionBar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ActionBar, _React$Component);\n\n  function ActionBar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ActionBar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ActionBar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onUpdateChatActionBar = function (update) {\n      var chatId = _this.props.chatId;\n      var chat_id = update.chat_id;\n      if (chat_id !== chatId) return;\n\n      _this.forceUpdate();\n    };\n\n    _this.handleClose = function () {\n      var chatId = _this.props.chatId;\n      var chat = ChatStore.get(chatId);\n      if (!chat) return null;\n      TdLibController.send({\n        '@type': 'removeChatActionBar',\n        chat_id: chatId\n      });\n    };\n\n    _this.handleReportSpam = function () {\n      var chatId = _this.props.chatId;\n      var chat = ChatStore.get(chatId);\n      if (!chat) return null;\n      TdLibController.send({\n        '@type': 'reportChat',\n        chat_id: chatId,\n        reason: {\n          '@type': 'chatReportReasonSpam'\n        },\n        message_ids: []\n      });\n    };\n\n    _this.handleReportUnrelatedLocation = function () {\n      var chatId = _this.props.chatId;\n      var chat = ChatStore.get(chatId);\n      if (!chat) return null;\n      TdLibController.send({\n        '@type': 'reportChat',\n        chat_id: chatId,\n        reason: {\n          '@type': 'chatReportReasonUnrelatedLocation'\n        },\n        message_ids: []\n      });\n    };\n\n    _this.handleSharePhoneNumber = function () {\n      var chatId = _this.props.chatId;\n      var userId = getChatUserId(chatId);\n      if (!userId) return;\n      TdLibController.send({\n        '@type': 'sharePhoneNumber',\n        user_id: userId\n      });\n    };\n\n    _this.handleAddContact = function () {\n      var chatId = _this.props.chatId;\n      var userId = getChatUserId(chatId);\n      if (!userId) return;\n      var user = UserStore.get(userId);\n      if (!user) return;\n      var user_id = user.user_id,\n          phone_number = user.phone_number,\n          first_name = user.first_name,\n          last_name = user.last_name;\n      TdLibController.send({\n        '@type': 'addContact',\n        contact: {\n          '@type': 'contact',\n          phone_number: phone_number,\n          first_name: first_name,\n          last_name: last_name,\n          vcard: '',\n          user_id: user_id\n        },\n        share_phone_number: false\n      });\n    };\n\n    _this.handleBlockUser = function () {\n      var chatId = _this.props.chatId;\n      var userId = getChatUserId(chatId);\n      if (!userId) return;\n      TdLibController.send({\n        '@type': 'blockUser',\n        user_id: userId\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ActionBar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      ChatStore.on('updateChatActionBar', this.onUpdateChatActionBar);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      ChatStore.off('updateChatActionBar', this.onUpdateChatActionBar);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          chatId = _this$props.chatId,\n          t = _this$props.t;\n      if (!chatId) return null;\n      var chat = ChatStore.get(chatId);\n      if (!chat) return null;\n      var action_bar = chat.action_bar;\n      if (!action_bar) return null;\n      var content = null;\n\n      switch (action_bar['@type']) {\n        case 'chatActionBarSharePhoneNumber':\n          {\n            content = React.createElement(Button, {\n              color: \"primary\",\n              className: \"header-command-button\",\n              onClick: this.handleSharePhoneNumber,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 139\n              },\n              __self: this\n            }, t('ShareMyPhone'));\n            break;\n          }\n\n        case 'chatActionBarAddContact':\n          {\n            content = React.createElement(Button, {\n              color: \"primary\",\n              className: \"header-command-button\",\n              onClick: this.handleAddContact,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 147\n              },\n              __self: this\n            }, t('AddContactChat'));\n            break;\n          }\n\n        case 'chatActionBarReportAddBlock':\n          {\n            content = React.createElement(React.Fragment, null, React.createElement(Button, {\n              color: \"primary\",\n              className: \"header-command-button\",\n              onClick: this.handleAddContact,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 156\n              },\n              __self: this\n            }, t('AddContactChat')), React.createElement(Button, {\n              color: \"secondary\",\n              className: \"header-command-button\",\n              onClick: this.handleBlockUser,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 159\n              },\n              __self: this\n            }, t('ReportSpamUser')));\n            break;\n          }\n\n        case 'chatActionBarUnrelatedLocation':\n          {\n            content = React.createElement(Button, {\n              color: \"secondary\",\n              className: \"header-command-button\",\n              onClick: this.handleReportUnrelatedLocation,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 168\n              },\n              __self: this\n            }, t('ReportSpamLocation'));\n            break;\n          }\n\n        case 'chatActionBarReportSpam':\n          {\n            content = React.createElement(Button, {\n              color: \"secondary\",\n              className: \"header-command-button\",\n              onClick: this.handleReportSpam,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 179\n              },\n              __self: this\n            }, t('ReportSpam'));\n            break;\n          }\n      }\n\n      return React.createElement(\"div\", {\n        className: \"action-bar\",\n        onMouseDown: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"action-bar-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, content), React.createElement(\"div\", {\n        className: \"action-bar-close-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        onClick: this.handleClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(CloseIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return ActionBar;\n}(React.Component);\n\nActionBar.propTypes = {\n  chatId: PropTypes.number\n};\nexport default withTranslation()(ActionBar);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnMiddle/ActionBar.js"],"names":["React","PropTypes","withTranslation","Button","CloseIcon","IconButton","getChatUserId","ChatStore","UserStore","TdLibController","ActionBar","onUpdateChatActionBar","update","chatId","props","chat_id","forceUpdate","handleClose","chat","get","send","handleReportSpam","reason","message_ids","handleReportUnrelatedLocation","handleSharePhoneNumber","userId","user_id","handleAddContact","user","phone_number","first_name","last_name","contact","vcard","share_phone_number","handleBlockUser","on","off","t","action_bar","content","handleClick","Component","propTypes","number"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport CloseIcon from '../../Assets/Icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport { getChatUserId } from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport UserStore from '../../Stores/UserStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './ActionBar.css';\n\nclass ActionBar extends React.Component {\n    componentDidMount() {\n        ChatStore.on('updateChatActionBar', this.onUpdateChatActionBar);\n    }\n\n    componentWillUnmount() {\n        ChatStore.off('updateChatActionBar', this.onUpdateChatActionBar);\n    }\n\n    onUpdateChatActionBar = update => {\n        const { chatId } = this.props;\n        const { chat_id } = update;\n\n        if (chat_id !== chatId) return;\n\n        this.forceUpdate();\n    };\n\n    handleClose = () => {\n        const { chatId } = this.props;\n        const chat = ChatStore.get(chatId);\n        if (!chat) return null;\n\n        TdLibController.send({\n            '@type': 'removeChatActionBar',\n            chat_id: chatId\n        });\n    };\n\n    handleReportSpam = () => {\n        const { chatId } = this.props;\n        const chat = ChatStore.get(chatId);\n        if (!chat) return null;\n\n        TdLibController.send({\n            '@type': 'reportChat',\n            chat_id: chatId,\n            reason: {\n                '@type': 'chatReportReasonSpam'\n            },\n            message_ids: []\n        });\n    };\n\n    handleReportUnrelatedLocation = () => {\n        const { chatId } = this.props;\n        const chat = ChatStore.get(chatId);\n        if (!chat) return null;\n\n        TdLibController.send({\n            '@type': 'reportChat',\n            chat_id: chatId,\n            reason: {\n                '@type': 'chatReportReasonUnrelatedLocation'\n            },\n            message_ids: []\n        });\n    };\n\n    handleSharePhoneNumber = () => {\n        const { chatId } = this.props;\n        const userId = getChatUserId(chatId);\n        if (!userId) return;\n\n        TdLibController.send({\n            '@type': 'sharePhoneNumber',\n            user_id: userId\n        });\n    };\n\n    handleAddContact = () => {\n        const { chatId } = this.props;\n        const userId = getChatUserId(chatId);\n        if (!userId) return;\n\n        const user = UserStore.get(userId);\n        if (!user) return;\n\n        const { user_id, phone_number, first_name, last_name } = user;\n\n        TdLibController.send({\n            '@type': 'addContact',\n            contact: {\n                '@type': 'contact',\n                phone_number,\n                first_name,\n                last_name,\n                vcard: '',\n                user_id\n            },\n            share_phone_number: false\n        });\n    };\n\n    handleBlockUser = () => {\n        const { chatId } = this.props;\n        const userId = getChatUserId(chatId);\n        if (!userId) return;\n\n        TdLibController.send({\n            '@type': 'blockUser',\n            user_id: userId\n        });\n    };\n\n    render() {\n        const { chatId, t } = this.props;\n        if (!chatId) return null;\n\n        const chat = ChatStore.get(chatId);\n        if (!chat) return null;\n\n        const { action_bar } = chat;\n        if (!action_bar) return null;\n\n        let content = null;\n        switch (action_bar['@type']) {\n            case 'chatActionBarSharePhoneNumber': {\n                content = (\n                    <Button color='primary' className='header-command-button' onClick={this.handleSharePhoneNumber}>\n                        {t('ShareMyPhone')}\n                    </Button>\n                );\n                break;\n            }\n            case 'chatActionBarAddContact': {\n                content = (\n                    <Button color='primary' className='header-command-button' onClick={this.handleAddContact}>\n                        {t('AddContactChat')}\n                    </Button>\n                );\n                break;\n            }\n            case 'chatActionBarReportAddBlock': {\n                content = (\n                    <>\n                        <Button color='primary' className='header-command-button' onClick={this.handleAddContact}>\n                            {t('AddContactChat')}\n                        </Button>\n                        <Button color='secondary' className='header-command-button' onClick={this.handleBlockUser}>\n                            {t('ReportSpamUser')}\n                        </Button>\n                    </>\n                );\n                break;\n            }\n            case 'chatActionBarUnrelatedLocation': {\n                content = (\n                    <Button\n                        color='secondary'\n                        className='header-command-button'\n                        onClick={this.handleReportUnrelatedLocation}>\n                        {t('ReportSpamLocation')}\n                    </Button>\n                );\n                break;\n            }\n            case 'chatActionBarReportSpam': {\n                content = (\n                    <Button color='secondary' className='header-command-button' onClick={this.handleReportSpam}>\n                        {t('ReportSpam')}\n                    </Button>\n                );\n                break;\n            }\n        }\n\n        return (\n            <div className='action-bar' onMouseDown={this.handleClick}>\n                <div className='action-bar-content'>{content}</div>\n                <div className='action-bar-close-button'>\n                    <IconButton onClick={this.handleClose}>\n                        <CloseIcon />\n                    </IconButton>\n                </div>\n            </div>\n        );\n    }\n}\n\nActionBar.propTypes = {\n    chatId: PropTypes.number\n};\n\nexport default withTranslation()(ActionBar);\n"]},"metadata":{},"sourceType":"module"}