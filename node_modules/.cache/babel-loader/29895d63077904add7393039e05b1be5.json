{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Message/Media/Contact.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport UserTile from '../../Tile/UserTile';\nimport { formatPhoneNumber } from '../../../Utils/Phone';\nimport { getUserFullName } from '../../../Utils/User';\nimport UserStore from '../../../Stores/UserStore';\nimport './Contact.css';\n\nvar Contact =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Contact, _React$Component);\n\n  function Contact() {\n    _classCallCheck(this, Contact);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Contact).apply(this, arguments));\n  }\n\n  _createClass(Contact, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          contact = _this$props.contact,\n          title = _this$props.title,\n          openMedia = _this$props.openMedia,\n          meta = _this$props.meta,\n          caption = _this$props.caption,\n          t = _this$props.t;\n      if (!contact) return null;\n      var id = contact.user_id,\n          first_name = contact.first_name,\n          last_name = contact.last_name,\n          phone_number = contact.phone_number;\n      var user = UserStore.get(id) || {\n        '@type': 'user',\n        type: {\n          '@type': 'userTypeRegular'\n        },\n        id: id,\n        first_name: first_name,\n        last_name: last_name\n      };\n      var fullName = getUserFullName(id, user, t);\n      var number = formatPhoneNumber(phone_number);\n      return React.createElement(\"div\", {\n        className: classNames('contact', {\n          'media-title': title\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"contact-tile\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(UserTile, {\n        userId: id,\n        firstName: first_name,\n        lastName: last_name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"contact-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"contact-name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, id > 0 ? React.createElement(\"a\", {\n        onClick: openMedia,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, fullName) : React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, fullName)), React.createElement(\"div\", {\n        className: \"contact-phone\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, number, !caption && meta)));\n    }\n  }]);\n\n  return Contact;\n}(React.Component);\n\nContact.propTypes = {\n  chatId: PropTypes.number.isRequired,\n  messageId: PropTypes.number.isRequired,\n  contact: PropTypes.object.isRequired,\n  openMedia: PropTypes.func\n};\nexport default withTranslation()(Contact);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Message/Media/Contact.js"],"names":["React","PropTypes","classNames","withTranslation","UserTile","formatPhoneNumber","getUserFullName","UserStore","Contact","props","contact","title","openMedia","meta","caption","t","id","user_id","first_name","last_name","phone_number","user","get","type","fullName","number","Component","propTypes","chatId","isRequired","messageId","object","func"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport UserTile from '../../Tile/UserTile';\nimport { formatPhoneNumber } from '../../../Utils/Phone';\nimport { getUserFullName } from '../../../Utils/User';\nimport UserStore from '../../../Stores/UserStore';\nimport './Contact.css';\n\nclass Contact extends React.Component {\n    render() {\n        const { contact, title, openMedia, meta, caption, t } = this.props;\n        if (!contact) return null;\n\n        const { user_id: id, first_name, last_name, phone_number } = contact;\n\n        const user = UserStore.get(id) || {\n            '@type': 'user',\n            type: { '@type': 'userTypeRegular' },\n            id,\n            first_name,\n            last_name\n        };\n\n        const fullName = getUserFullName(id, user, t);\n        const number = formatPhoneNumber(phone_number);\n\n        return (\n            <div className={classNames('contact', { 'media-title': title })}>\n                <div className='contact-tile'>\n                    <UserTile userId={id} firstName={first_name} lastName={last_name} />\n                </div>\n                <div className='contact-content'>\n                    <div className='contact-name'>\n                        {id > 0 ? <a onClick={openMedia}>{fullName}</a> : <span>{fullName}</span>}\n                    </div>\n                    <div className='contact-phone'>\n                        {number}\n                        {!caption && meta}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nContact.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    messageId: PropTypes.number.isRequired,\n    contact: PropTypes.object.isRequired,\n    openMedia: PropTypes.func\n};\n\nexport default withTranslation()(Contact);\n"]},"metadata":{},"sourceType":"module"}