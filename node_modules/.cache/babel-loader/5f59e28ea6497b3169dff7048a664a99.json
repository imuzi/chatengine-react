{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport TdLibController from '../Controllers/TdLibController';\nimport ChatStore from '../Stores/ChatStore';\nimport { isChatMuted } from '../Utils/Chat';\nimport { MUTED_VALUE_MAX, MUTED_VALUE_MIN } from '../Constants';\nexport function getChat(_x) {\n  return _getChat.apply(this, arguments);\n}\n\nfunction _getChat() {\n  _getChat = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(chatId) {\n    var chat;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            chat = TdLibController.send({\n              '@type': 'getChat',\n              chat_id: chatId\n            });\n            ChatStore.set(chat);\n            return _context.abrupt(\"return\", chat);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getChat.apply(this, arguments);\n}\n\nexport function setChatChatList(chatId, chatList) {\n  TdLibController.send({\n    '@type': 'setChatChatList',\n    chat_id: chatId,\n    chat_list: chatList\n  });\n}\nexport function toggleChatIsPinned(chatId, isPinned) {\n  TdLibController.send({\n    '@type': 'toggleChatIsPinned',\n    chat_id: chatId,\n    is_pinned: isPinned\n  });\n}\nexport function toggleChatIsMarkedAsUnread(chatId, isMarkedAsUnread) {\n  TdLibController.send({\n    '@type': 'toggleChatIsMarkedAsUnread',\n    chat_id: chatId,\n    is_marked_as_unread: isMarkedAsUnread\n  });\n}\nexport function toggleChatNotificationSettings(chatId, isMuted) {\n  var chat = ChatStore.get(chatId);\n  if (!chat) return;\n  var notification_settings = chat.notification_settings;\n  if (!notification_settings) return;\n  var isMutedPrev = isChatMuted(chatId);\n\n  if (isMutedPrev === isMuted) {\n    return;\n  }\n\n  var muteFor = isMuted ? MUTED_VALUE_MAX : MUTED_VALUE_MIN;\n\n  var newNotificationSettings = _objectSpread({}, chat.notification_settings, {\n    use_default_mute_for: false,\n    mute_for: muteFor\n  });\n\n  TdLibController.send({\n    '@type': 'setChatNotificationSettings',\n    chat_id: chatId,\n    notification_settings: newNotificationSettings\n  });\n}\nexport function getChatCounters(_x2) {\n  return _getChatCounters.apply(this, arguments);\n}\n\nfunction _getChatCounters() {\n  _getChatCounters = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(chatId) {\n    var chat, promises, photoCounter, videoCounter, documentCounter, audioCounter, urlCounter, voiceAndVideoNoteCounter;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            chat = ChatStore.get(chatId);\n\n            if (chat) {\n              _context2.next = 3;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 3:\n            promises = [];\n            photoCounter = TdLibController.send({\n              '@type': 'getChatMessageCount',\n              chat_id: chatId,\n              filter: {\n                '@type': 'searchMessagesFilterPhoto'\n              },\n              return_local: false\n            }).then(function (result) {\n              return result ? result.count : 0;\n            }).catch(function () {\n              return 0;\n            });\n            promises.push(photoCounter);\n            videoCounter = TdLibController.send({\n              '@type': 'getChatMessageCount',\n              chat_id: chatId,\n              filter: {\n                '@type': 'searchMessagesFilterVideo'\n              },\n              return_local: false\n            }).then(function (result) {\n              return result ? result.count : 0;\n            }).catch(function () {\n              return 0;\n            });\n            promises.push(videoCounter);\n            documentCounter = TdLibController.send({\n              '@type': 'getChatMessageCount',\n              chat_id: chatId,\n              filter: {\n                '@type': 'searchMessagesFilterDocument'\n              },\n              return_local: false\n            }).then(function (result) {\n              return result ? result.count : 0;\n            }).catch(function () {\n              return 0;\n            });\n            promises.push(documentCounter);\n            audioCounter = TdLibController.send({\n              '@type': 'getChatMessageCount',\n              chat_id: chatId,\n              filter: {\n                '@type': 'searchMessagesFilterAudio'\n              },\n              return_local: false\n            }).then(function (result) {\n              return result ? result.count : 0;\n            }).catch(function () {\n              return 0;\n            });\n            promises.push(audioCounter);\n            urlCounter = TdLibController.send({\n              '@type': 'getChatMessageCount',\n              chat_id: chatId,\n              filter: {\n                '@type': 'searchMessagesFilterUrl'\n              },\n              return_local: false\n            }).then(function (result) {\n              return result ? result.count : 0;\n            }).catch(function () {\n              return 0;\n            });\n            promises.push(urlCounter);\n            voiceAndVideoNoteCounter = TdLibController.send({\n              '@type': 'getChatMessageCount',\n              chat_id: chatId,\n              filter: {\n                '@type': 'searchMessagesFilterVoiceNote'\n              },\n              return_local: false\n            }).then(function (result) {\n              return result ? result.count : 0;\n            }).catch(function () {\n              return 0;\n            });\n            promises.push(voiceAndVideoNoteCounter);\n            _context2.next = 18;\n            return Promise.all(promises);\n\n          case 18:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getChatCounters.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Actions/Chat.js"],"names":["TdLibController","ChatStore","isChatMuted","MUTED_VALUE_MAX","MUTED_VALUE_MIN","getChat","chatId","chat","send","chat_id","set","setChatChatList","chatList","chat_list","toggleChatIsPinned","isPinned","is_pinned","toggleChatIsMarkedAsUnread","isMarkedAsUnread","is_marked_as_unread","toggleChatNotificationSettings","isMuted","get","notification_settings","isMutedPrev","muteFor","newNotificationSettings","use_default_mute_for","mute_for","getChatCounters","promises","photoCounter","filter","return_local","then","result","count","catch","push","videoCounter","documentCounter","audioCounter","urlCounter","voiceAndVideoNoteCounter","Promise","all"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport TdLibController from '../Controllers/TdLibController';\nimport ChatStore from '../Stores/ChatStore';\nimport { isChatMuted } from '../Utils/Chat';\nimport { MUTED_VALUE_MAX, MUTED_VALUE_MIN } from '../Constants';\n\nexport async function getChat(chatId) {\n    const chat = TdLibController.send({\n        '@type': 'getChat',\n        chat_id: chatId\n    });\n    ChatStore.set(chat);\n\n    return chat;\n}\n\nexport function setChatChatList(chatId, chatList) {\n    TdLibController.send({\n        '@type': 'setChatChatList',\n        chat_id: chatId,\n        chat_list: chatList\n    });\n}\n\nexport function toggleChatIsPinned(chatId, isPinned) {\n    TdLibController.send({\n        '@type': 'toggleChatIsPinned',\n        chat_id: chatId,\n        is_pinned: isPinned\n    });\n}\n\nexport function toggleChatIsMarkedAsUnread(chatId, isMarkedAsUnread) {\n    TdLibController.send({\n        '@type': 'toggleChatIsMarkedAsUnread',\n        chat_id: chatId,\n        is_marked_as_unread: isMarkedAsUnread\n    });\n}\n\nexport function toggleChatNotificationSettings(chatId, isMuted) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return;\n\n    const { notification_settings } = chat;\n    if (!notification_settings) return;\n\n    const isMutedPrev = isChatMuted(chatId);\n    if (isMutedPrev === isMuted) {\n        return;\n    }\n\n    const muteFor = isMuted ? MUTED_VALUE_MAX : MUTED_VALUE_MIN;\n    const newNotificationSettings = {\n        ...chat.notification_settings,\n        use_default_mute_for: false,\n        mute_for: muteFor\n    };\n\n    TdLibController.send({\n        '@type': 'setChatNotificationSettings',\n        chat_id: chatId,\n        notification_settings: newNotificationSettings\n    });\n}\n\nexport async function getChatCounters(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return;\n\n    const promises = [];\n\n    const photoCounter = TdLibController.send({\n        '@type': 'getChatMessageCount',\n        chat_id: chatId,\n        filter: { '@type': 'searchMessagesFilterPhoto' },\n        return_local: false\n    })\n        .then(result => {\n            return result ? result.count : 0;\n        })\n        .catch(() => {\n            return 0;\n        });\n    promises.push(photoCounter);\n\n    const videoCounter = TdLibController.send({\n        '@type': 'getChatMessageCount',\n        chat_id: chatId,\n        filter: { '@type': 'searchMessagesFilterVideo' },\n        return_local: false\n    })\n        .then(result => {\n            return result ? result.count : 0;\n        })\n        .catch(() => {\n            return 0;\n        });\n    promises.push(videoCounter);\n\n    const documentCounter = TdLibController.send({\n        '@type': 'getChatMessageCount',\n        chat_id: chatId,\n        filter: { '@type': 'searchMessagesFilterDocument' },\n        return_local: false\n    })\n        .then(result => {\n            return result ? result.count : 0;\n        })\n        .catch(() => {\n            return 0;\n        });\n    promises.push(documentCounter);\n\n    const audioCounter = TdLibController.send({\n        '@type': 'getChatMessageCount',\n        chat_id: chatId,\n        filter: { '@type': 'searchMessagesFilterAudio' },\n        return_local: false\n    })\n        .then(result => {\n            return result ? result.count : 0;\n        })\n        .catch(() => {\n            return 0;\n        });\n    promises.push(audioCounter);\n\n    const urlCounter = TdLibController.send({\n        '@type': 'getChatMessageCount',\n        chat_id: chatId,\n        filter: { '@type': 'searchMessagesFilterUrl' },\n        return_local: false\n    })\n        .then(result => {\n            return result ? result.count : 0;\n        })\n        .catch(() => {\n            return 0;\n        });\n    promises.push(urlCounter);\n\n    const voiceAndVideoNoteCounter = TdLibController.send({\n        '@type': 'getChatMessageCount',\n        chat_id: chatId,\n        filter: { '@type': 'searchMessagesFilterVoiceNote' },\n        return_local: false\n    })\n        .then(result => {\n            return result ? result.count : 0;\n        })\n        .catch(() => {\n            return 0;\n        });\n    promises.push(voiceAndVideoNoteCounter);\n\n    return await Promise.all(promises);\n}\n"]},"metadata":{},"sourceType":"module"}