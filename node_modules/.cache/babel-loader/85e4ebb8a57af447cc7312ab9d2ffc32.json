{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnRight/SharedMedia/SharedLinks.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport SharedMediaBase from './SharedMediaBase';\nimport SharedLink from '../../Tile/SharedMedia/SharedLink';\nimport { openMedia as _openMedia } from '../../../Utils/Message';\nimport './SharedLinks.css';\n\nvar SharedLinks =\n/*#__PURE__*/\nfunction (_SharedMediaBase) {\n  _inherits(SharedLinks, _SharedMediaBase);\n\n  function SharedLinks() {\n    _classCallCheck(this, SharedLinks);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SharedLinks).apply(this, arguments));\n  }\n\n  _createClass(SharedLinks, [{\n    key: \"isValidContent\",\n    value: function isValidContent(content) {\n      if (!content) return false;\n      var web_page = content.web_page,\n          text = content.text;\n      if (web_page) return true;\n      if (!text) return false;\n      var entities = text.entities;\n      if (!entities) return false;\n      return entities.find(function (x) {\n        return x.type['@type'] === 'textEntityTypeUrl' || x.type['@type'] === 'textEntityTypeTextUrl' || x.type['@type'] === 'textEntityTypeEmailAddress';\n      });\n    }\n  }, {\n    key: \"getSearchFilter\",\n    value: function getSearchFilter() {\n      return {\n        '@type': 'searchMessagesFilterUrl'\n      };\n    }\n  }, {\n    key: \"getHeader\",\n    value: function getHeader() {\n      var t = this.props.t;\n      return t('LinksTitle');\n    }\n  }, {\n    key: \"getItemTemplate\",\n    value: function getItemTemplate(message) {\n      var migratedChatId = this.props.migratedChatId;\n      var chat_id = message.chat_id,\n          content = message.content,\n          id = message.id;\n      return React.createElement(SharedLink, {\n        key: \"chat_id=\".concat(chat_id, \"_message_id=\").concat(id),\n        chatId: chat_id,\n        messageId: id,\n        webPage: content.web_page,\n        openMedia: function openMedia() {\n          return _openMedia(chat_id, id, false);\n        },\n        showOpenMessage: chat_id !== migratedChatId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return SharedLinks;\n}(SharedMediaBase);\n\nSharedLinks.propTypes = {\n  chatId: PropTypes.number.isRequired,\n  migratedChatId: PropTypes.number,\n  onClose: PropTypes.func.isRequired,\n  popup: PropTypes.bool,\n  minHeight: PropTypes.number\n};\nSharedLinks.defaultProps = {\n  popup: false,\n  minHeight: 0\n};\nexport default withTranslation()(SharedLinks);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/ColumnRight/SharedMedia/SharedLinks.js"],"names":["React","PropTypes","withTranslation","SharedMediaBase","SharedLink","openMedia","SharedLinks","content","web_page","text","entities","find","x","type","t","props","message","migratedChatId","chat_id","id","propTypes","chatId","number","isRequired","onClose","func","popup","bool","minHeight","defaultProps"],"mappings":";;;;;;;AAAA;;;;;;AAOA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,UAAP,MAAuB,mCAAvB;AACA,SAASC,SAAS,IAATA,UAAT,QAA0B,wBAA1B;AACA,OAAO,mBAAP;;IAEMC,W;;;;;;;;;;;;;mCACaC,O,EAAS;AACpB,UAAI,CAACA,OAAL,EAAc,OAAO,KAAP;AADM,UAGZC,QAHY,GAGOD,OAHP,CAGZC,QAHY;AAAA,UAGFC,IAHE,GAGOF,OAHP,CAGFE,IAHE;AAIpB,UAAID,QAAJ,EAAc,OAAO,IAAP;AACd,UAAI,CAACC,IAAL,EAAW,OAAO,KAAP;AALS,UAOZC,QAPY,GAOCD,IAPD,CAOZC,QAPY;AAQpB,UAAI,CAACA,QAAL,EAAe,OAAO,KAAP;AAEf,aAAOA,QAAQ,CAACC,IAAT,CACH,UAAAC,CAAC;AAAA,eACGA,CAAC,CAACC,IAAF,CAAO,OAAP,MAAoB,mBAApB,IACAD,CAAC,CAACC,IAAF,CAAO,OAAP,MAAoB,uBADpB,IAEAD,CAAC,CAACC,IAAF,CAAO,OAAP,MAAoB,4BAHvB;AAAA,OADE,CAAP;AAMH;;;sCAEiB;AACd,aAAO;AAAE,iBAAS;AAAX,OAAP;AACH;;;gCAEW;AAAA,UACAC,CADA,GACM,KAAKC,KADX,CACAD,CADA;AAGR,aAAOA,CAAC,CAAC,YAAD,CAAR;AACH;;;oCAEeE,O,EAAS;AAAA,UACbC,cADa,GACM,KAAKF,KADX,CACbE,cADa;AAAA,UAEbC,OAFa,GAEYF,OAFZ,CAEbE,OAFa;AAAA,UAEJX,OAFI,GAEYS,OAFZ,CAEJT,OAFI;AAAA,UAEKY,EAFL,GAEYH,OAFZ,CAEKG,EAFL;AAIrB,aACI,oBAAC,UAAD;AACI,QAAA,GAAG,oBAAaD,OAAb,yBAAmCC,EAAnC,CADP;AAEI,QAAA,MAAM,EAAED,OAFZ;AAGI,QAAA,SAAS,EAAEC,EAHf;AAII,QAAA,OAAO,EAAEZ,OAAO,CAACC,QAJrB;AAKI,QAAA,SAAS,EAAE;AAAA,iBAAMH,UAAS,CAACa,OAAD,EAAUC,EAAV,EAAc,KAAd,CAAf;AAAA,SALf;AAMI,QAAA,eAAe,EAAED,OAAO,KAAKD,cANjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAUH;;;;EA3CqBd,e;;AA8C1BG,WAAW,CAACc,SAAZ,GAAwB;AACpBC,EAAAA,MAAM,EAAEpB,SAAS,CAACqB,MAAV,CAAiBC,UADL;AAEpBN,EAAAA,cAAc,EAAEhB,SAAS,CAACqB,MAFN;AAGpBE,EAAAA,OAAO,EAAEvB,SAAS,CAACwB,IAAV,CAAeF,UAHJ;AAIpBG,EAAAA,KAAK,EAAEzB,SAAS,CAAC0B,IAJG;AAKpBC,EAAAA,SAAS,EAAE3B,SAAS,CAACqB;AALD,CAAxB;AAQAhB,WAAW,CAACuB,YAAZ,GAA2B;AACvBH,EAAAA,KAAK,EAAE,KADgB;AAEvBE,EAAAA,SAAS,EAAE;AAFY,CAA3B;AAKA,eAAe1B,eAAe,GAAGI,WAAH,CAA9B","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport SharedMediaBase from './SharedMediaBase';\nimport SharedLink from '../../Tile/SharedMedia/SharedLink';\nimport { openMedia } from '../../../Utils/Message';\nimport './SharedLinks.css';\n\nclass SharedLinks extends SharedMediaBase {\n    isValidContent(content) {\n        if (!content) return false;\n\n        const { web_page, text } = content;\n        if (web_page) return true;\n        if (!text) return false;\n\n        const { entities } = text;\n        if (!entities) return false;\n\n        return entities.find(\n            x =>\n                x.type['@type'] === 'textEntityTypeUrl' ||\n                x.type['@type'] === 'textEntityTypeTextUrl' ||\n                x.type['@type'] === 'textEntityTypeEmailAddress'\n        );\n    }\n\n    getSearchFilter() {\n        return { '@type': 'searchMessagesFilterUrl' };\n    }\n\n    getHeader() {\n        const { t } = this.props;\n\n        return t('LinksTitle');\n    }\n\n    getItemTemplate(message) {\n        const { migratedChatId } = this.props;\n        const { chat_id, content, id } = message;\n\n        return (\n            <SharedLink\n                key={`chat_id=${chat_id}_message_id=${id}`}\n                chatId={chat_id}\n                messageId={id}\n                webPage={content.web_page}\n                openMedia={() => openMedia(chat_id, id, false)}\n                showOpenMessage={chat_id !== migratedChatId}\n            />\n        );\n    }\n}\n\nSharedLinks.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    migratedChatId: PropTypes.number,\n    onClose: PropTypes.func.isRequired,\n    popup: PropTypes.bool,\n    minHeight: PropTypes.number\n};\n\nSharedLinks.defaultProps = {\n    popup: false,\n    minHeight: 0\n};\n\nexport default withTranslation()(SharedLinks);\n"]},"metadata":{},"sourceType":"module"}