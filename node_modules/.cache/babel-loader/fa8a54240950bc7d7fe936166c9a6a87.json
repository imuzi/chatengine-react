{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Auth/Password.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Button from '@material-ui/core/Button';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport HeaderProgress from '../ColumnMiddle/HeaderProgress';\nimport { cleanProgressStatus, isConnecting } from './Phone';\nimport AppStore from '../../Stores/ApplicationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './Password.css';\n\nfunction debounce(func, wait, immediate) {\n  var timeout;\n  return function () {\n    var context = this,\n        args = arguments;\n\n    var later = function later() {\n      timeout = null;\n\n      if (!immediate) {\n        func.apply(context, args);\n      }\n    };\n\n    var callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n\n    if (callNow) {\n      func.apply(context, args);\n    }\n  };\n}\n\nvar Password =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Password, _React$Component);\n\n  function Password(props) {\n    var _this;\n\n    _classCallCheck(this, Password);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Password).call(this, props));\n\n    _this.onUpdateConnectionState = function (update) {\n      var state = update.state;\n\n      _this.setState({\n        connecting: isConnecting(state)\n      });\n    };\n\n    _this.handleNext = function () {\n      if (_this.password) {\n        _this.setState({\n          error: ''\n        });\n\n        _this.handleDone();\n      } else {\n        _this.setState({\n          error: 'Invalid password. Please try again.'\n        });\n      }\n    };\n\n    _this.handleBack = function () {\n      _this.props.onChangePhone();\n    };\n\n    _this.handleDone = function () {\n      var password = _this.password;\n\n      _this.setState({\n        loading: true\n      });\n\n      TdLibController.send({\n        '@type': 'checkAuthenticationPassword',\n        password: password\n      }).then(function (result) {}).catch(function (error) {\n        var errorString = null;\n\n        if (error && error['@type'] === 'error' && error.message) {\n          errorString = error.message;\n        } else {\n          errorString = JSON.stringify(error);\n        }\n\n        _this.setState({\n          error: errorString\n        }, function () {\n          setTimeout(function () {\n            return _this.inputRef.current.focus();\n          }, 100);\n        });\n      }).finally(function () {\n        _this.setState({\n          loading: false\n        });\n      });\n    };\n\n    _this.handleMouseDownPassword = function (event) {\n      event.preventDefault();\n    };\n\n    _this.handleClickShowPassword = function () {\n      _this.setState({\n        showPassword: !_this.state.showPassword\n      });\n\n      _this.sendMonkeyPeek();\n    };\n\n    _this.handleChange = function (e) {\n      _this.password = e.target.value;\n    };\n\n    _this.handleKeyPress = function (e) {\n      if (e.key === 'Enter') {\n        e.preventDefault();\n\n        _this.handleNext();\n      }\n    };\n\n    _this.state = {\n      connecting: isConnecting(AppStore.connectionState),\n      password: '',\n      showPassword: false,\n      error: ''\n    };\n    _this.inputRef = React.createRef();\n    _this.sendMonkeyPeek = debounce(_this.sendMonkeyPeek, 200, false);\n    return _this;\n  }\n\n  _createClass(Password, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMonkeyClose'\n      });\n      AppStore.on('updateConnectionState', this.onUpdateConnectionState);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      AppStore.off('updateConnectionState', this.onUpdateConnectionState);\n    }\n  }, {\n    key: \"sendMonkeyPeek\",\n    value: function sendMonkeyPeek() {\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMonkeyPeek',\n        peek: this.state.showPassword\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          passwordHint = _this$props.passwordHint,\n          t = _this$props.t;\n      var _this$state = this.state,\n          connecting = _this$state.connecting,\n          loading = _this$state.loading,\n          error = _this$state.error,\n          showPassword = _this$state.showPassword;\n      var title = t('EnterPassword');\n\n      if (connecting) {\n        title = cleanProgressStatus(t('Connecting'));\n      }\n\n      return React.createElement(\"form\", {\n        className: \"auth-root\",\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"body1\",\n        className: \"auth-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, title), connecting && React.createElement(HeaderProgress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      })), React.createElement(Typography, {\n        variant: \"body1\",\n        className: \"auth-subtitle\",\n        style: {\n          width: 235\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, t('YourAccountProtectedWithPassword')), React.createElement(FormControl, {\n        className: \"auth-input\",\n        fullWidth: true,\n        variant: \"outlined\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(InputLabel, {\n        htmlFor: \"adornment-password\",\n        error: Boolean(error),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, t('LoginPassword')), React.createElement(OutlinedInput, {\n        fullWidth: true,\n        autoFocus: true,\n        autoComplete: \"off\",\n        id: \"adornment-password\",\n        inputRef: this.inputRef,\n        type: showPassword ? 'text' : 'password',\n        disabled: loading,\n        error: Boolean(error),\n        onChange: this.handleChange,\n        onKeyPress: this.handleKeyPress,\n        endAdornment: React.createElement(InputAdornment, {\n          position: \"end\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        }, React.createElement(IconButton, {\n          \"aria-label\": \"Toggle password visibility\",\n          onClick: this.handleClickShowPassword,\n          onMouseDown: this.handleMouseDownPassword,\n          edge: \"end\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181\n          },\n          __self: this\n        }, showPassword ? React.createElement(Visibility, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186\n          },\n          __self: this\n        }) : React.createElement(VisibilityOff, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186\n          },\n          __self: this\n        }))),\n        labelWidth: 70,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }), passwordHint && React.createElement(FormHelperText, {\n        id: \"password-hint-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, passwordHint), error && React.createElement(FormHelperText, {\n        id: \"password-error-text\",\n        error: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, error)), React.createElement(Button, {\n        classes: {\n          root: 'auth-button'\n        },\n        fullWidth: true,\n        color: \"primary\",\n        variant: \"contained\",\n        disableElevation: true,\n        onClick: this.handleNext,\n        disabled: loading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, t('Next')));\n    }\n  }]);\n\n  return Password;\n}(React.Component);\n\nexport default withTranslation()(Password);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Auth/Password.js"],"names":["React","withTranslation","IconButton","InputAdornment","InputLabel","OutlinedInput","Typography","FormControl","FormHelperText","Button","Visibility","VisibilityOff","HeaderProgress","cleanProgressStatus","isConnecting","AppStore","TdLibController","debounce","func","wait","immediate","timeout","context","args","arguments","later","apply","callNow","clearTimeout","setTimeout","Password","props","onUpdateConnectionState","update","state","setState","connecting","handleNext","password","error","handleDone","handleBack","onChangePhone","loading","send","then","result","catch","errorString","message","JSON","stringify","inputRef","current","focus","finally","handleMouseDownPassword","event","preventDefault","handleClickShowPassword","showPassword","sendMonkeyPeek","handleChange","e","target","value","handleKeyPress","key","connectionState","createRef","clientUpdate","on","off","peek","passwordHint","t","title","width","Boolean","root","Component"],"mappings":";;;;;;;AAAA;;;;;;AAOA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,SAASC,mBAAT,EAA8BC,YAA9B,QAAkD,SAAlD;AACA,OAAOC,QAAP,MAAqB,+BAArB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAO,gBAAP;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,IAAxB,EAA8BC,SAA9B,EAAyC;AACrC,MAAIC,OAAJ;AACA,SAAO,YAAW;AACd,QAAIC,OAAO,GAAG,IAAd;AAAA,QACIC,IAAI,GAAGC,SADX;;AAEA,QAAIC,KAAK,GAAG,SAARA,KAAQ,GAAW;AACnBJ,MAAAA,OAAO,GAAG,IAAV;;AACA,UAAI,CAACD,SAAL,EAAgB;AACZF,QAAAA,IAAI,CAACQ,KAAL,CAAWJ,OAAX,EAAoBC,IAApB;AACH;AACJ,KALD;;AAMA,QAAII,OAAO,GAAGP,SAAS,IAAI,CAACC,OAA5B;AACAO,IAAAA,YAAY,CAACP,OAAD,CAAZ;AACAA,IAAAA,OAAO,GAAGQ,UAAU,CAACJ,KAAD,EAAQN,IAAR,CAApB;;AACA,QAAIQ,OAAJ,EAAa;AACTT,MAAAA,IAAI,CAACQ,KAAL,CAAWJ,OAAX,EAAoBC,IAApB;AACH;AACJ,GAfD;AAgBH;;IAEKO,Q;;;;;AACF,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,kFAAMA,KAAN;;AADe,UA0BnBC,uBA1BmB,GA0BO,UAAAC,MAAM,EAAI;AAAA,UACxBC,KADwB,GACdD,MADc,CACxBC,KADwB;;AAGhC,YAAKC,QAAL,CAAc;AAAEC,QAAAA,UAAU,EAAEtB,YAAY,CAACoB,KAAD;AAA1B,OAAd;AACH,KA9BkB;;AAAA,UAgCnBG,UAhCmB,GAgCN,YAAM;AACf,UAAI,MAAKC,QAAT,EAAmB;AACf,cAAKH,QAAL,CAAc;AAAEI,UAAAA,KAAK,EAAE;AAAT,SAAd;;AACA,cAAKC,UAAL;AACH,OAHD,MAGO;AACH,cAAKL,QAAL,CAAc;AAAEI,UAAAA,KAAK,EAAE;AAAT,SAAd;AACH;AACJ,KAvCkB;;AAAA,UAyCnBE,UAzCmB,GAyCN,YAAM;AACf,YAAKV,KAAL,CAAWW,aAAX;AACH,KA3CkB;;AAAA,UA6CnBF,UA7CmB,GA6CN,YAAM;AACf,UAAMF,QAAQ,GAAG,MAAKA,QAAtB;;AAEA,YAAKH,QAAL,CAAc;AAAEQ,QAAAA,OAAO,EAAE;AAAX,OAAd;;AACA3B,MAAAA,eAAe,CAAC4B,IAAhB,CAAqB;AACjB,iBAAS,6BADQ;AAEjBN,QAAAA,QAAQ,EAAEA;AAFO,OAArB,EAIKO,IAJL,CAIU,UAAAC,MAAM,EAAI,CAAE,CAJtB,EAKKC,KALL,CAKW,UAAAR,KAAK,EAAI;AACZ,YAAIS,WAAW,GAAG,IAAlB;;AACA,YAAIT,KAAK,IAAIA,KAAK,CAAC,OAAD,CAAL,KAAmB,OAA5B,IAAuCA,KAAK,CAACU,OAAjD,EAA0D;AACtDD,UAAAA,WAAW,GAAGT,KAAK,CAACU,OAApB;AACH,SAFD,MAEO;AACHD,UAAAA,WAAW,GAAGE,IAAI,CAACC,SAAL,CAAeZ,KAAf,CAAd;AACH;;AAED,cAAKJ,QAAL,CAAc;AAAEI,UAAAA,KAAK,EAAES;AAAT,SAAd,EAAsC,YAAM;AACxCnB,UAAAA,UAAU,CAAC;AAAA,mBAAM,MAAKuB,QAAL,CAAcC,OAAd,CAAsBC,KAAtB,EAAN;AAAA,WAAD,EAAsC,GAAtC,CAAV;AACH,SAFD;AAGH,OAhBL,EAiBKC,OAjBL,CAiBa,YAAM;AACX,cAAKpB,QAAL,CAAc;AAAEQ,UAAAA,OAAO,EAAE;AAAX,SAAd;AACH,OAnBL;AAoBH,KArEkB;;AAAA,UAuEnBa,uBAvEmB,GAuEO,UAAAC,KAAK,EAAI;AAC/BA,MAAAA,KAAK,CAACC,cAAN;AACH,KAzEkB;;AAAA,UA2EnBC,uBA3EmB,GA2EO,YAAM;AAC5B,YAAKxB,QAAL,CAAc;AAAEyB,QAAAA,YAAY,EAAE,CAAC,MAAK1B,KAAL,CAAW0B;AAA5B,OAAd;;AAEA,YAAKC,cAAL;AACH,KA/EkB;;AAAA,UAwFnBC,YAxFmB,GAwFJ,UAAAC,CAAC,EAAI;AAChB,YAAKzB,QAAL,GAAgByB,CAAC,CAACC,MAAF,CAASC,KAAzB;AACH,KA1FkB;;AAAA,UA4FnBC,cA5FmB,GA4FF,UAAAH,CAAC,EAAI;AAClB,UAAIA,CAAC,CAACI,GAAF,KAAU,OAAd,EAAuB;AACnBJ,QAAAA,CAAC,CAACL,cAAF;;AACA,cAAKrB,UAAL;AACH;AACJ,KAjGkB;;AAGf,UAAKH,KAAL,GAAa;AACTE,MAAAA,UAAU,EAAEtB,YAAY,CAACC,QAAQ,CAACqD,eAAV,CADf;AAET9B,MAAAA,QAAQ,EAAE,EAFD;AAGTsB,MAAAA,YAAY,EAAE,KAHL;AAITrB,MAAAA,KAAK,EAAE;AAJE,KAAb;AAOA,UAAKa,QAAL,GAAgBpD,KAAK,CAACqE,SAAN,EAAhB;AACA,UAAKR,cAAL,GAAsB5C,QAAQ,CAAC,MAAK4C,cAAN,EAAsB,GAAtB,EAA2B,KAA3B,CAA9B;AAXe;AAYlB;;;;wCAEmB;AAChB7C,MAAAA,eAAe,CAACsD,YAAhB,CAA6B;AACzB,iBAAS;AADgB,OAA7B;AAIAvD,MAAAA,QAAQ,CAACwD,EAAT,CAAY,uBAAZ,EAAqC,KAAKvC,uBAA1C;AACH;;;2CAEsB;AACnBjB,MAAAA,QAAQ,CAACyD,GAAT,CAAa,uBAAb,EAAsC,KAAKxC,uBAA3C;AACH;;;qCAyDgB;AACbhB,MAAAA,eAAe,CAACsD,YAAhB,CAA6B;AACzB,iBAAS,wBADgB;AAEzBG,QAAAA,IAAI,EAAE,KAAKvC,KAAL,CAAW0B;AAFQ,OAA7B;AAIH;;;6BAaQ;AAAA,wBACuB,KAAK7B,KAD5B;AAAA,UACG2C,YADH,eACGA,YADH;AAAA,UACiBC,CADjB,eACiBA,CADjB;AAAA,wBAEgD,KAAKzC,KAFrD;AAAA,UAEGE,UAFH,eAEGA,UAFH;AAAA,UAEeO,OAFf,eAEeA,OAFf;AAAA,UAEwBJ,KAFxB,eAEwBA,KAFxB;AAAA,UAE+BqB,YAF/B,eAE+BA,YAF/B;AAIL,UAAIgB,KAAK,GAAGD,CAAC,CAAC,eAAD,CAAb;;AACA,UAAIvC,UAAJ,EAAgB;AACZwC,QAAAA,KAAK,GAAG/D,mBAAmB,CAAC8D,CAAC,CAAC,YAAD,CAAF,CAA3B;AACH;;AAED,aACI;AAAM,QAAA,SAAS,EAAC,WAAhB;AAA4B,QAAA,YAAY,EAAC,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,UAAD;AAAY,QAAA,OAAO,EAAC,OAApB;AAA4B,QAAA,SAAS,EAAC,YAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOC,KAAP,CADJ,EAEKxC,UAAU,IAAI,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFnB,CADJ,EAKI,oBAAC,UAAD;AAAY,QAAA,OAAO,EAAC,OAApB;AAA4B,QAAA,SAAS,EAAC,eAAtC;AAAsD,QAAA,KAAK,EAAE;AAAEyC,UAAAA,KAAK,EAAE;AAAT,SAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKF,CAAC,CAAC,kCAAD,CADN,CALJ,EAQI,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAC,YAAvB;AAAoC,QAAA,SAAS,MAA7C;AAA8C,QAAA,OAAO,EAAC,UAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,UAAD;AAAY,QAAA,OAAO,EAAC,oBAApB;AAAyC,QAAA,KAAK,EAAEG,OAAO,CAACvC,KAAD,CAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKoC,CAAC,CAAC,eAAD,CADN,CADJ,EAII,oBAAC,aAAD;AACI,QAAA,SAAS,MADb;AAEI,QAAA,SAAS,MAFb;AAGI,QAAA,YAAY,EAAC,KAHjB;AAII,QAAA,EAAE,EAAC,oBAJP;AAKI,QAAA,QAAQ,EAAE,KAAKvB,QALnB;AAMI,QAAA,IAAI,EAAEQ,YAAY,GAAG,MAAH,GAAY,UANlC;AAOI,QAAA,QAAQ,EAAEjB,OAPd;AAQI,QAAA,KAAK,EAAEmC,OAAO,CAACvC,KAAD,CARlB;AASI,QAAA,QAAQ,EAAE,KAAKuB,YATnB;AAUI,QAAA,UAAU,EAAE,KAAKI,cAVrB;AAWI,QAAA,YAAY,EACR,oBAAC,cAAD;AAAgB,UAAA,QAAQ,EAAC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,UAAD;AACI,wBAAW,4BADf;AAEI,UAAA,OAAO,EAAE,KAAKP,uBAFlB;AAGI,UAAA,WAAW,EAAE,KAAKH,uBAHtB;AAII,UAAA,IAAI,EAAC,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAKKI,YAAY,GAAG,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAH,GAAoB,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UALrC,CADJ,CAZR;AAsBI,QAAA,UAAU,EAAE,EAtBhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,EA4BKc,YAAY,IAAI,oBAAC,cAAD;AAAgB,QAAA,EAAE,EAAC,oBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyCA,YAAzC,CA5BrB,EA6BKnC,KAAK,IACF,oBAAC,cAAD;AAAgB,QAAA,EAAE,EAAC,qBAAnB;AAAyC,QAAA,KAAK,MAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKA,KADL,CA9BR,CARJ,EA2CI,oBAAC,MAAD;AACI,QAAA,OAAO,EAAE;AAAEwC,UAAAA,IAAI,EAAE;AAAR,SADb;AAEI,QAAA,SAAS,MAFb;AAGI,QAAA,KAAK,EAAC,SAHV;AAII,QAAA,OAAO,EAAC,WAJZ;AAKI,QAAA,gBAAgB,MALpB;AAMI,QAAA,OAAO,EAAE,KAAK1C,UANlB;AAOI,QAAA,QAAQ,EAAEM,OAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQKgC,CAAC,CAAC,MAAD,CARN,CA3CJ,CADJ;AAwDH;;;;EArKkB3E,KAAK,CAACgF,S;;AAwK7B,eAAe/E,eAAe,GAAG6B,QAAH,CAA9B","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Button from '@material-ui/core/Button';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport HeaderProgress from '../ColumnMiddle/HeaderProgress';\nimport { cleanProgressStatus, isConnecting } from './Phone';\nimport AppStore from '../../Stores/ApplicationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './Password.css';\n\nfunction debounce(func, wait, immediate) {\n    let timeout;\n    return function() {\n        let context = this,\n            args = arguments;\n        let later = function() {\n            timeout = null;\n            if (!immediate) {\n                func.apply(context, args);\n            }\n        };\n        let callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) {\n            func.apply(context, args);\n        }\n    };\n}\n\nclass Password extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            connecting: isConnecting(AppStore.connectionState),\n            password: '',\n            showPassword: false,\n            error: ''\n        };\n\n        this.inputRef = React.createRef();\n        this.sendMonkeyPeek = debounce(this.sendMonkeyPeek, 200, false);\n    }\n\n    componentDidMount() {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMonkeyClose'\n        });\n\n        AppStore.on('updateConnectionState', this.onUpdateConnectionState);\n    }\n\n    componentWillUnmount() {\n        AppStore.off('updateConnectionState', this.onUpdateConnectionState);\n    }\n\n    onUpdateConnectionState = update => {\n        const { state } = update;\n\n        this.setState({ connecting: isConnecting(state) });\n    };\n\n    handleNext = () => {\n        if (this.password) {\n            this.setState({ error: '' });\n            this.handleDone();\n        } else {\n            this.setState({ error: 'Invalid password. Please try again.' });\n        }\n    };\n\n    handleBack = () => {\n        this.props.onChangePhone();\n    };\n\n    handleDone = () => {\n        const password = this.password;\n\n        this.setState({ loading: true });\n        TdLibController.send({\n            '@type': 'checkAuthenticationPassword',\n            password: password\n        })\n            .then(result => {})\n            .catch(error => {\n                let errorString = null;\n                if (error && error['@type'] === 'error' && error.message) {\n                    errorString = error.message;\n                } else {\n                    errorString = JSON.stringify(error);\n                }\n\n                this.setState({ error: errorString }, () => {\n                    setTimeout(() => this.inputRef.current.focus(), 100);\n                });\n            })\n            .finally(() => {\n                this.setState({ loading: false });\n            });\n    };\n\n    handleMouseDownPassword = event => {\n        event.preventDefault();\n    };\n\n    handleClickShowPassword = () => {\n        this.setState({ showPassword: !this.state.showPassword });\n\n        this.sendMonkeyPeek();\n    };\n\n    sendMonkeyPeek() {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMonkeyPeek',\n            peek: this.state.showPassword\n        });\n    }\n\n    handleChange = e => {\n        this.password = e.target.value;\n    };\n\n    handleKeyPress = e => {\n        if (e.key === 'Enter') {\n            e.preventDefault();\n            this.handleNext();\n        }\n    };\n\n    render() {\n        const { passwordHint, t } = this.props;\n        const { connecting, loading, error, showPassword } = this.state;\n\n        let title = t('EnterPassword');\n        if (connecting) {\n            title = cleanProgressStatus(t('Connecting'));\n        }\n\n        return (\n            <form className='auth-root' autoComplete='off'>\n                <Typography variant='body1' className='auth-title'>\n                    <span>{title}</span>\n                    {connecting && <HeaderProgress />}\n                </Typography>\n                <Typography variant='body1' className='auth-subtitle' style={{ width: 235 }}>\n                    {t('YourAccountProtectedWithPassword')}\n                </Typography>\n                <FormControl className='auth-input' fullWidth variant='outlined'>\n                    <InputLabel htmlFor='adornment-password' error={Boolean(error)}>\n                        {t('LoginPassword')}\n                    </InputLabel>\n                    <OutlinedInput\n                        fullWidth\n                        autoFocus\n                        autoComplete='off'\n                        id='adornment-password'\n                        inputRef={this.inputRef}\n                        type={showPassword ? 'text' : 'password'}\n                        disabled={loading}\n                        error={Boolean(error)}\n                        onChange={this.handleChange}\n                        onKeyPress={this.handleKeyPress}\n                        endAdornment={\n                            <InputAdornment position='end'>\n                                <IconButton\n                                    aria-label='Toggle password visibility'\n                                    onClick={this.handleClickShowPassword}\n                                    onMouseDown={this.handleMouseDownPassword}\n                                    edge='end'>\n                                    {showPassword ? <Visibility /> : <VisibilityOff />}\n                                </IconButton>\n                            </InputAdornment>\n                        }\n                        labelWidth={70}\n                    />\n                    {passwordHint && <FormHelperText id='password-hint-text'>{passwordHint}</FormHelperText>}\n                    {error && (\n                        <FormHelperText id='password-error-text' error>\n                            {error}\n                        </FormHelperText>\n                    )}\n                </FormControl>\n                <Button\n                    classes={{ root: 'auth-button' }}\n                    fullWidth\n                    color='primary'\n                    variant='contained'\n                    disableElevation\n                    onClick={this.handleNext}\n                    disabled={loading}>\n                    {t('Next')}\n                </Button>\n            </form>\n        );\n    }\n}\n\nexport default withTranslation()(Password);\n"]},"metadata":{},"sourceType":"module"}