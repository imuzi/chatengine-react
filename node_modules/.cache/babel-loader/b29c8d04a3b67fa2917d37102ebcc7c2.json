{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Popup/PollOptionResults.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport PollOptionResult from './PollOptionResult';\nimport { loadUsersContent } from '../../Utils/File';\nimport { POLL_RESULTS_FIRST_SLICE_LENGTH, POLL_RESULTS_LEAVE_LENGTH, POLL_RESULTS_SLICE_LENGTH } from '../../Constants';\nimport FileStore from '../../Stores/FileStore';\nimport UserStore from '../../Stores/UserStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './PollOptionResults.css';\n\nvar PollOptionResults =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PollOptionResults, _React$Component);\n\n  function PollOptionResults(props) {\n    var _this;\n\n    _classCallCheck(this, PollOptionResults);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PollOptionResults).call(this, props));\n\n    _this.handleShowMore = function () {\n      var option = _this.props.option;\n      var count = _this.state.count;\n      var newOffset = count;\n      var newCount = Math.min(option.voter_count, count + POLL_RESULTS_SLICE_LENGTH);\n\n      _this.setState({\n        offset: newOffset,\n        count: newCount\n      }, function () {\n        _this.updateVoters(newOffset, newCount, true);\n      });\n    };\n\n    _this.handleCollapse = function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n      var option = _this.props.option;\n      var count = option && option.voter_count <= POLL_RESULTS_FIRST_SLICE_LENGTH ? option.voter_count : POLL_RESULTS_FIRST_SLICE_LENGTH - POLL_RESULTS_LEAVE_LENGTH;\n\n      _this.setState({\n        voters: _this.state.voters.slice(0, count),\n        offset: 0,\n        count: count\n      });\n    };\n\n    var _option = _this.props.option;\n\n    var _count = _option && _option.voter_count <= POLL_RESULTS_FIRST_SLICE_LENGTH ? _option.voter_count : POLL_RESULTS_FIRST_SLICE_LENGTH - POLL_RESULTS_LEAVE_LENGTH;\n\n    _this.state = {\n      voters: [],\n      offset: 0,\n      count: _count\n    };\n    return _this;\n  }\n\n  _createClass(PollOptionResults, [{\n    key: \"updateVoters\",\n    value: function () {\n      var _updateVoters = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(offset, count, loadMore) {\n        var _this2 = this;\n\n        var _this$props, chatId, messageId, optionId, option, voters, limit, result, store;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$props = this.props, chatId = _this$props.chatId, messageId = _this$props.messageId, optionId = _this$props.optionId, option = _this$props.option;\n                voters = this.state.voters;\n\n                if (!(count <= 0)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 4:\n                limit = count - offset; // console.log(`[poll] getPollVoters start option_id=${optionId} offset=${offset} limit=${limit}`);\n\n                _context2.next = 7;\n                return TdLibController.send({\n                  '@type': 'getPollVoters',\n                  chat_id: chatId,\n                  message_id: messageId,\n                  option_id: optionId,\n                  offset: offset,\n                  limit: limit\n                });\n\n              case 7:\n                result = _context2.sent;\n\n                if (!(this.props.option !== option)) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 10:\n                store = FileStore.getStore();\n                loadUsersContent(store, result.user_ids);\n                this.setState({\n                  voters: [].concat(_toConsumableArray(voters), _toConsumableArray(result.user_ids))\n                },\n                /*#__PURE__*/\n                _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee() {\n                  var offset2;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          if (result.user_ids.length < limit && loadMore) {\n                            offset2 = offset + result.user_ids.length;\n\n                            _this2.updateVoters(offset2, count, false);\n                          }\n\n                        case 1:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                })));\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function updateVoters(_x, _x2, _x3) {\n        return _updateVoters.apply(this, arguments);\n      }\n\n      return updateVoters;\n    }()\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$state = this.state,\n          offset = _this$state.offset,\n          count = _this$state.count;\n      this.updateVoters(offset, count, true);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          option = _this$props2.option,\n          isQuiz = _this$props2.isQuiz,\n          t = _this$props2.t;\n      var _this$state2 = this.state,\n          voters = _this$state2.voters,\n          count = _this$state2.count;\n      var text = option.text,\n          voter_count = option.voter_count,\n          vote_percentage = option.vote_percentage;\n\n      if (voter_count === 0) {\n        return null;\n      }\n\n      var results = [];\n\n      for (var i = 0; i < count; i++) {\n        var userId = i < voters.length ? voters[i] : null;\n        results.push(React.createElement(PollOptionResult, {\n          key: \"\".concat(i, \"_userId=\").concat(userId),\n          index: i,\n          userId: userId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }));\n      }\n\n      var voterCount = isQuiz ? voter_count !== 1 ? \"\".concat(voter_count, \" answers\") : \"\".concat(voter_count, \" answer\") : voter_count !== 1 ? \"\".concat(voter_count, \" votes\") : \"\".concat(voter_count, \" vote\");\n      var showMoreButton = null;\n      var showMoreCount = voter_count - count;\n\n      if (showMoreCount > 0) {\n        var showMore = isQuiz ? showMoreCount !== 1 ? \"\".concat(showMoreCount, \" answers\") : \"\".concat(showMoreCount, \" answer\") : showMoreCount !== 1 ? \"\".concat(showMoreCount, \" votes\") : \"\".concat(showMoreCount, \" vote\");\n        showMoreButton = React.createElement(Button, {\n          classes: {\n            root: 'poll-option-results-button'\n          },\n          color: \"primary\",\n          fullWidth: true,\n          onClick: this.handleShowMore,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        }, t('ShowVotesOT').replace('%1$d', showMore));\n      }\n\n      var showCollapse = count > POLL_RESULTS_FIRST_SLICE_LENGTH - POLL_RESULTS_LEAVE_LENGTH && voter_count > POLL_RESULTS_FIRST_SLICE_LENGTH;\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"poll-option-results-caption\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"poll-option-results-answer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, \"\".concat(text, \" \\u2014 \").concat(vote_percentage, \"%\")), showCollapse ? React.createElement(\"a\", {\n        onClick: this.handleCollapse,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, t('PollCollapse')) : React.createElement(\"div\", {\n        className: \"poll-option-results-count\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, voterCount)), results, showMoreButton);\n    }\n  }]);\n\n  return PollOptionResults;\n}(React.Component);\n\nPollOptionResults.propTypes = {\n  chatId: PropTypes.number.isRequired,\n  messageId: PropTypes.number.isRequired,\n  optionId: PropTypes.number.isRequired,\n  option: PropTypes.object.isRequired,\n  isQuiz: PropTypes.bool.isRequired\n};\nexport default withTranslation()(PollOptionResults);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Popup/PollOptionResults.js"],"names":["React","PropTypes","withTranslation","Button","PollOptionResult","loadUsersContent","POLL_RESULTS_FIRST_SLICE_LENGTH","POLL_RESULTS_LEAVE_LENGTH","POLL_RESULTS_SLICE_LENGTH","FileStore","UserStore","TdLibController","PollOptionResults","props","handleShowMore","option","count","state","newOffset","newCount","Math","min","voter_count","setState","offset","updateVoters","handleCollapse","event","preventDefault","stopPropagation","voters","slice","loadMore","chatId","messageId","optionId","limit","send","chat_id","message_id","option_id","result","store","getStore","user_ids","length","offset2","isQuiz","t","text","vote_percentage","results","i","userId","push","voterCount","showMoreButton","showMoreCount","showMore","root","replace","showCollapse","Component","propTypes","number","isRequired","object","bool"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport PollOptionResult from './PollOptionResult';\nimport { loadUsersContent } from '../../Utils/File';\nimport { POLL_RESULTS_FIRST_SLICE_LENGTH, POLL_RESULTS_LEAVE_LENGTH, POLL_RESULTS_SLICE_LENGTH } from '../../Constants';\nimport FileStore from '../../Stores/FileStore';\nimport UserStore from '../../Stores/UserStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './PollOptionResults.css';\n\nclass PollOptionResults extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const { option } = this.props;\n\n        const count =\n            option && option.voter_count <= POLL_RESULTS_FIRST_SLICE_LENGTH\n                ? option.voter_count\n                : POLL_RESULTS_FIRST_SLICE_LENGTH - POLL_RESULTS_LEAVE_LENGTH;\n\n        this.state = {\n            voters: [],\n            offset: 0,\n            count\n        };\n    }\n\n    async updateVoters(offset, count, loadMore) {\n        const { chatId, messageId, optionId, option } = this.props;\n        const { voters } = this.state;\n        if (count <= 0) return;\n\n        const limit = count - offset;\n        // console.log(`[poll] getPollVoters start option_id=${optionId} offset=${offset} limit=${limit}`);\n        const result = await TdLibController.send({\n            '@type': 'getPollVoters',\n            chat_id: chatId,\n            message_id: messageId,\n            option_id: optionId,\n            offset,\n            limit\n        });\n        // console.log(`[poll] getPollVoters end option_id=${optionId} offset=${offset} limit=${limit}`, result, result.user_ids.map(x => UserStore.get(x)));\n\n        if (this.props.option !== option) {\n            return;\n        }\n\n        const store = FileStore.getStore();\n        loadUsersContent(store, result.user_ids);\n\n        this.setState(\n            {\n                voters: [...voters, ...result.user_ids]\n            },\n            async () => {\n                if (result.user_ids.length < limit && loadMore) {\n                    const offset2 = offset + result.user_ids.length;\n\n                    this.updateVoters(offset2, count, false);\n                }\n            }\n        );\n    }\n\n    componentDidMount() {\n        const { offset, count } = this.state;\n\n        this.updateVoters(offset, count, true);\n    }\n\n    handleShowMore = () => {\n        const { option } = this.props;\n        const { count } = this.state;\n\n        const newOffset = count;\n        const newCount = Math.min(option.voter_count, count + POLL_RESULTS_SLICE_LENGTH);\n\n        this.setState(\n            {\n                offset: newOffset,\n                count: newCount\n            },\n            () => {\n                this.updateVoters(newOffset, newCount, true);\n            }\n        );\n    };\n\n    handleCollapse = event => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const { option } = this.props;\n\n        const count =\n            option && option.voter_count <= POLL_RESULTS_FIRST_SLICE_LENGTH\n                ? option.voter_count\n                : POLL_RESULTS_FIRST_SLICE_LENGTH - POLL_RESULTS_LEAVE_LENGTH;\n\n        this.setState({\n            voters: this.state.voters.slice(0, count),\n            offset: 0,\n            count\n        });\n    };\n\n    render() {\n        const { option, isQuiz, t } = this.props;\n        const { voters, count } = this.state;\n\n        const { text, voter_count, vote_percentage } = option;\n        if (voter_count === 0) {\n            return null;\n        }\n\n        const results = [];\n        for (let i = 0; i < count; i++) {\n            const userId = i < voters.length ? voters[i] : null;\n            results.push(<PollOptionResult key={`${i}_userId=${userId}`} index={i} userId={userId} />);\n        }\n\n        const voterCount = isQuiz\n            ? voter_count !== 1\n                ? `${voter_count} answers`\n                : `${voter_count} answer`\n            : voter_count !== 1\n            ? `${voter_count} votes`\n            : `${voter_count} vote`;\n\n        let showMoreButton = null;\n        const showMoreCount = voter_count - count;\n        if (showMoreCount > 0) {\n            const showMore = isQuiz\n                ? showMoreCount !== 1\n                    ? `${showMoreCount} answers`\n                    : `${showMoreCount} answer`\n                : showMoreCount !== 1\n                ? `${showMoreCount} votes`\n                : `${showMoreCount} vote`;\n\n            showMoreButton = (\n                <Button\n                    classes={{ root: 'poll-option-results-button' }}\n                    color='primary'\n                    fullWidth\n                    onClick={this.handleShowMore}>\n                    {t('ShowVotesOT').replace('%1$d', showMore)}\n                </Button>\n            );\n        }\n        const showCollapse =\n            count > POLL_RESULTS_FIRST_SLICE_LENGTH - POLL_RESULTS_LEAVE_LENGTH &&\n            voter_count > POLL_RESULTS_FIRST_SLICE_LENGTH;\n\n        return (\n            <>\n                <div className='poll-option-results-caption'>\n                    <div className='poll-option-results-answer'>{`${text} — ${vote_percentage}%`}</div>\n                    {showCollapse ? (\n                        <a onClick={this.handleCollapse}>{t('PollCollapse')}</a>\n                    ) : (\n                        <div className='poll-option-results-count'>{voterCount}</div>\n                    )}\n                </div>\n                {results}\n                {showMoreButton}\n            </>\n        );\n    }\n}\n\nPollOptionResults.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    messageId: PropTypes.number.isRequired,\n    optionId: PropTypes.number.isRequired,\n    option: PropTypes.object.isRequired,\n    isQuiz: PropTypes.bool.isRequired\n};\n\nexport default withTranslation()(PollOptionResults);\n"]},"metadata":{},"sourceType":"module"}