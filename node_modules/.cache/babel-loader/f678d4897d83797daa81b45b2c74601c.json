{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wubenqi/nebula-chat/telegram-react/src/Components/Popup/ShareStickerSetButton.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport { copy } from '../../Utils/Text';\nimport { compose } from '../../Utils/HOC';\nimport { withTranslation } from 'react-i18next';\nimport { withSnackbar } from 'notistack';\nimport CloseIcon from '../../Assets/Icons/Close';\nimport LinkIcon from '@material-ui/icons/Link';\nimport MoreIcon from '../../Assets/Icons/More';\nimport IconButton from '@material-ui/core/IconButton';\nimport ShareIcon from '@material-ui/icons/Share';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { forward } from '../../Actions/Client';\nimport { NOTIFICATION_AUTO_HIDE_DURATION_MS } from '../../Constants';\nimport OptionStore from '../../Stores/OptionStore';\nimport StickerStore from '../../Stores/StickerStore';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport TdLibController from '../../Controllers/TdLibController';\n\nvar ShareStickerSetButton =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ShareStickerSetButton, _React$Component);\n\n  function ShareStickerSetButton() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ShareStickerSetButton);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ShareStickerSetButton)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      anchorEl: null\n    };\n\n    _this.handleMenuClick = function (event) {\n      _this.handleOpen(event.currentTarget);\n    };\n\n    _this.handleOpen = function (anchorEl) {\n      _this.setState({\n        anchorEl: anchorEl\n      });\n    };\n\n    _this.handleClose = function () {\n      _this.setState({\n        anchorEl: null\n      });\n    };\n\n    _this.handleCopyLink = function () {\n      _this.handleClose();\n\n      var t = _this.props.t;\n\n      var link = _this.getStickersLink(StickerStore.stickerSet);\n\n      if (!link) return;\n      copy(link);\n      var key = \"\".concat(link, \"_copy_stickers_link\");\n      var message = t('LinkCopied');\n      var action = null;\n\n      _this.handleScheduledAction(key, message, action);\n    };\n\n    _this.getStickersLink = function (stickerSet) {\n      if (!stickerSet) return '';\n      var name = stickerSet.name;\n      if (!name) return '';\n      var telegramUrlOption = OptionStore.get('t_me_url');\n      return (telegramUrlOption ? telegramUrlOption.value : 'https://nebula.chat/') + 'addstickers/' + name;\n    };\n\n    _this.handleScheduledAction = function (key, message, action) {\n      if (!key) return;\n      var _this$props = _this.props,\n          enqueueSnackbar = _this$props.enqueueSnackbar,\n          classes = _this$props.classes,\n          t = _this$props.t;\n      if (!enqueueSnackbar) return;\n      var TRANSITION_DELAY = 150;\n\n      if (ApplicationStore.addScheduledAction(key, NOTIFICATION_AUTO_HIDE_DURATION_MS + 2 * TRANSITION_DELAY, action)) {\n        enqueueSnackbar(message, {\n          autoHideDuration: NOTIFICATION_AUTO_HIDE_DURATION_MS,\n          action: [React.createElement(IconButton, {\n            key: \"close\",\n            \"aria-label\": \"Close\",\n            color: \"inherit\",\n            className: \"notification-close-button\",\n            onClick: function onClick() {\n              return ApplicationStore.removeScheduledAction(key);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87\n            },\n            __self: this\n          }, React.createElement(CloseIcon, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93\n            },\n            __self: this\n          }))]\n        });\n      }\n    };\n\n    _this.handleShare = function () {\n      _this.handleClose();\n\n      var link = _this.getStickersLink(StickerStore.stickerSet);\n\n      if (!link) return;\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateStickerSet',\n        stickerSet: null\n      });\n      var inputMessageContent = {\n        '@type': 'inputMessageText',\n        text: {\n          '@type': 'formattedText',\n          text: link,\n          entities: null\n        },\n        disable_web_page_preview: false,\n        clear_draft: false\n      };\n      forward(inputMessageContent);\n    };\n\n    return _this;\n  }\n\n  _createClass(ShareStickerSetButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          t = _this$props2.t,\n          className = _this$props2.className;\n      var anchorEl = this.state.anchorEl;\n      return React.createElement(React.Fragment, null, React.createElement(IconButton, {\n        className: className,\n        \"aria-label\": \"Share\",\n        open: Boolean(anchorEl),\n        onClick: this.handleMenuClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(MoreIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      })), React.createElement(Menu, {\n        id: \"attach-menu\",\n        anchorEl: anchorEl,\n        open: Boolean(anchorEl),\n        getContentAnchorEl: null,\n        disableAutoFocusItem: true,\n        disableRestoreFocus: true,\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'right'\n        },\n        transformOrigin: {\n          vertical: 'top',\n          horizontal: 'right'\n        },\n        onClose: this.handleClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(MenuItem, {\n        onClick: this.handleCopyLink,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(ListItemIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(LinkIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      })), React.createElement(ListItemText, {\n        primary: t('CopyLink'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      })), React.createElement(MenuItem, {\n        onClick: this.handleShare,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(ListItemIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(ShareIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      })), React.createElement(ListItemText, {\n        primary: t('StickersShare'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return ShareStickerSetButton;\n}(React.Component);\n\nShareStickerSetButton.propTypes = {};\nvar enhance = compose(withTranslation(), withSnackbar);\nexport default enhance(ShareStickerSetButton);","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Components/Popup/ShareStickerSetButton.js"],"names":["React","copy","compose","withTranslation","withSnackbar","CloseIcon","LinkIcon","MoreIcon","IconButton","ShareIcon","ListItemIcon","ListItemText","Menu","MenuItem","forward","NOTIFICATION_AUTO_HIDE_DURATION_MS","OptionStore","StickerStore","ApplicationStore","TdLibController","ShareStickerSetButton","state","anchorEl","handleMenuClick","event","handleOpen","currentTarget","setState","handleClose","handleCopyLink","t","props","link","getStickersLink","stickerSet","key","message","action","handleScheduledAction","name","telegramUrlOption","get","value","enqueueSnackbar","classes","TRANSITION_DELAY","addScheduledAction","autoHideDuration","removeScheduledAction","handleShare","clientUpdate","inputMessageContent","text","entities","disable_web_page_preview","clear_draft","className","Boolean","vertical","horizontal","Component","propTypes","enhance"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport { copy } from '../../Utils/Text';\nimport { compose } from '../../Utils/HOC';\nimport { withTranslation } from 'react-i18next';\nimport { withSnackbar } from 'notistack';\nimport CloseIcon from '../../Assets/Icons/Close';\nimport LinkIcon from '@material-ui/icons/Link';\nimport MoreIcon from '../../Assets/Icons/More';\nimport IconButton from '@material-ui/core/IconButton';\nimport ShareIcon from '@material-ui/icons/Share';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { forward } from '../../Actions/Client';\nimport { NOTIFICATION_AUTO_HIDE_DURATION_MS } from '../../Constants';\nimport OptionStore from '../../Stores/OptionStore';\nimport StickerStore from '../../Stores/StickerStore';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport TdLibController from '../../Controllers/TdLibController';\n\nclass ShareStickerSetButton extends React.Component {\n    state = {\n        anchorEl: null\n    };\n\n    handleMenuClick = event => {\n        this.handleOpen(event.currentTarget);\n    };\n\n    handleOpen = anchorEl => {\n        this.setState({ anchorEl });\n    };\n\n    handleClose = () => {\n        this.setState({ anchorEl: null });\n    };\n\n    handleCopyLink = () => {\n        this.handleClose();\n\n        const { t } = this.props;\n\n        const link = this.getStickersLink(StickerStore.stickerSet);\n        if (!link) return;\n\n        copy(link);\n\n        const key = `${link}_copy_stickers_link`;\n        const message = t('LinkCopied');\n        const action = null;\n\n        this.handleScheduledAction(key, message, action);\n    };\n\n    getStickersLink = stickerSet => {\n        if (!stickerSet) return '';\n\n        const { name } = stickerSet;\n        if (!name) return '';\n\n        const telegramUrlOption = OptionStore.get('t_me_url');\n\n        return (telegramUrlOption ? telegramUrlOption.value : 'https://nebula.chat/') + 'addstickers/' + name;\n    };\n\n    handleScheduledAction = (key, message, action) => {\n        if (!key) return;\n\n        const { enqueueSnackbar, classes, t } = this.props;\n        if (!enqueueSnackbar) return;\n\n        const TRANSITION_DELAY = 150;\n        if (\n            ApplicationStore.addScheduledAction(key, NOTIFICATION_AUTO_HIDE_DURATION_MS + 2 * TRANSITION_DELAY, action)\n        ) {\n            enqueueSnackbar(message, {\n                autoHideDuration: NOTIFICATION_AUTO_HIDE_DURATION_MS,\n                action: [\n                    <IconButton\n                        key='close'\n                        aria-label='Close'\n                        color='inherit'\n                        className='notification-close-button'\n                        onClick={() => ApplicationStore.removeScheduledAction(key)}>\n                        <CloseIcon />\n                    </IconButton>\n                ]\n            });\n        }\n    };\n\n    handleShare = () => {\n        this.handleClose();\n\n        const link = this.getStickersLink(StickerStore.stickerSet);\n        if (!link) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSet',\n            stickerSet: null\n        });\n\n        const inputMessageContent = {\n            '@type': 'inputMessageText',\n            text: {\n                '@type': 'formattedText',\n                text: link,\n                entities: null\n            },\n            disable_web_page_preview: false,\n            clear_draft: false\n        };\n\n        forward(inputMessageContent);\n    };\n\n    render() {\n        const { t, className } = this.props;\n        const { anchorEl } = this.state;\n\n        return (\n            <>\n                <IconButton\n                    className={className}\n                    aria-label='Share'\n                    open={Boolean(anchorEl)}\n                    onClick={this.handleMenuClick}>\n                    <MoreIcon />\n                </IconButton>\n                <Menu\n                    id='attach-menu'\n                    anchorEl={anchorEl}\n                    open={Boolean(anchorEl)}\n                    getContentAnchorEl={null}\n                    disableAutoFocusItem\n                    disableRestoreFocus={true}\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'right'\n                    }}\n                    transformOrigin={{\n                        vertical: 'top',\n                        horizontal: 'right'\n                    }}\n                    onClose={this.handleClose}>\n                    <MenuItem onClick={this.handleCopyLink}>\n                        <ListItemIcon>\n                            <LinkIcon />\n                        </ListItemIcon>\n                        <ListItemText primary={t('CopyLink')} />\n                    </MenuItem>\n                    <MenuItem onClick={this.handleShare}>\n                        <ListItemIcon>\n                            <ShareIcon />\n                        </ListItemIcon>\n                        <ListItemText primary={t('StickersShare')} />\n                    </MenuItem>\n                </Menu>\n            </>\n        );\n    }\n}\n\nShareStickerSetButton.propTypes = {};\n\nconst enhance = compose(\n    withTranslation(),\n    withSnackbar\n);\n\nexport default enhance(ShareStickerSetButton);\n"]},"metadata":{},"sourceType":"module"}