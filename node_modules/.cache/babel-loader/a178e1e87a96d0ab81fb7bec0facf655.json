{"ast":null,"code":"import _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport EventEmitter from './EventEmitter';\nimport OptionStore from '../Stores/OptionStore';\nimport TdLibController from '../Controllers/TdLibController';\n\nvar UserStore =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(UserStore, _EventEmitter);\n\n  function UserStore() {\n    var _this;\n\n    _classCallCheck(this, UserStore);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UserStore).call(this));\n\n    _this.reset = function () {\n      _this.items = new Map();\n      _this.fullInfoItems = new Map();\n    };\n\n    _this.onUpdate = function (update) {\n      switch (update['@type']) {\n        case 'updateAuthorizationState':\n          {\n            var authorization_state = update.authorization_state;\n            if (!authorization_state) break;\n\n            switch (authorization_state['@type']) {\n              case 'authorizationStateClosed':\n                {\n                  _this.reset();\n\n                  break;\n                }\n            }\n\n            break;\n          }\n\n        case 'updateUser':\n          {\n            _this.set(update.user);\n\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        case 'updateUserFullInfo':\n          _this.setFullInfo(update.user_id, update.user_full_info);\n\n          _this.emit(update['@type'], update);\n\n          break;\n\n        case 'updateUserStatus':\n          {\n            var user = _this.get(update.user_id);\n\n            if (user) {\n              _this.assign(user, {\n                status: update.status\n              });\n            }\n\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    _this.onClientUpdate = function (update) {\n      switch (update['@type']) {\n        case 'clientUpdateOpenUser':\n          {\n            _this.emit(update['@type'], update);\n\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    _this.addTdLibListener = function () {\n      TdLibController.on('update', _this.onUpdate);\n      TdLibController.on('clientUpdate', _this.onClientUpdate);\n    };\n\n    _this.removeTdLibListener = function () {\n      TdLibController.off('update', _this.onUpdate);\n      TdLibController.off('clientUpdate', _this.onClientUpdate);\n    };\n\n    _this.reset();\n\n    _this.addTdLibListener();\n\n    return _this;\n  }\n\n  _createClass(UserStore, [{\n    key: \"assign\",\n    value: function assign(source1, source2) {\n      Object.assign(source1, source2); //this.set(Object.assign({}, source1, source2));\n    }\n  }, {\n    key: \"getMyId\",\n    value: function getMyId() {\n      var myId = OptionStore.get('my_id');\n      if (!myId) return null;\n      if (!myId.value) return null;\n      return myId.value;\n    }\n  }, {\n    key: \"get\",\n    value: function get(userId) {\n      return this.items.get(userId);\n    }\n  }, {\n    key: \"set\",\n    value: function set(user) {\n      this.items.set(user.id, user);\n    }\n  }, {\n    key: \"getFullInfo\",\n    value: function getFullInfo(id) {\n      return this.fullInfoItems.get(id);\n    }\n  }, {\n    key: \"setFullInfo\",\n    value: function setFullInfo(id, fullInfo) {\n      this.fullInfoItems.set(id, fullInfo);\n    }\n  }]);\n\n  return UserStore;\n}(EventEmitter);\n\nvar store = new UserStore();\nwindow.user = store;\nexport default store;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Stores/UserStore.js"],"names":["EventEmitter","OptionStore","TdLibController","UserStore","reset","items","Map","fullInfoItems","onUpdate","update","authorization_state","set","user","emit","setFullInfo","user_id","user_full_info","get","assign","status","onClientUpdate","addTdLibListener","on","removeTdLibListener","off","source1","source2","Object","myId","value","userId","id","fullInfo","store","window"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport EventEmitter from './EventEmitter';\nimport OptionStore from '../Stores/OptionStore';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass UserStore extends EventEmitter {\n    constructor() {\n        super();\n\n        this.reset();\n\n        this.addTdLibListener();\n    }\n\n    reset = () => {\n        this.items = new Map();\n        this.fullInfoItems = new Map();\n    };\n\n    onUpdate = update => {\n        switch (update['@type']) {\n            case 'updateAuthorizationState': {\n                const { authorization_state } = update;\n                if (!authorization_state) break;\n\n                switch (authorization_state['@type']) {\n                    case 'authorizationStateClosed': {\n                        this.reset();\n                        break;\n                    }\n                }\n\n                break;\n            }\n            case 'updateUser': {\n                this.set(update.user);\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'updateUserFullInfo':\n                this.setFullInfo(update.user_id, update.user_full_info);\n\n                this.emit(update['@type'], update);\n                break;\n            case 'updateUserStatus': {\n                let user = this.get(update.user_id);\n                if (user) {\n                    this.assign(user, { status: update.status });\n                }\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    onClientUpdate = update => {\n        switch (update['@type']) {\n            case 'clientUpdateOpenUser': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    addTdLibListener = () => {\n        TdLibController.on('update', this.onUpdate);\n        TdLibController.on('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.off('update', this.onUpdate);\n        TdLibController.off('clientUpdate', this.onClientUpdate);\n    };\n\n    assign(source1, source2) {\n        Object.assign(source1, source2);\n        //this.set(Object.assign({}, source1, source2));\n    }\n\n    getMyId() {\n        const myId = OptionStore.get('my_id');\n        if (!myId) return null;\n        if (!myId.value) return null;\n\n        return myId.value;\n    }\n\n    get(userId) {\n        return this.items.get(userId);\n    }\n\n    set(user) {\n        this.items.set(user.id, user);\n    }\n\n    getFullInfo(id) {\n        return this.fullInfoItems.get(id);\n    }\n\n    setFullInfo(id, fullInfo) {\n        this.fullInfoItems.set(id, fullInfo);\n    }\n}\n\nconst store = new UserStore();\nwindow.user = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}