{"ast":null,"code":"import _toConsumableArray from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/wubenqi/nebula-chat/telegram-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport EventEmitter from './EventEmitter';\nimport TdLibController from '../Controllers/TdLibController';\nimport { isValidPoll } from '../Utils/Poll';\n\nvar PollStore =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(PollStore, _EventEmitter);\n\n  function PollStore() {\n    var _this;\n\n    _classCallCheck(this, PollStore);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PollStore).call(this));\n\n    _this.reset = function () {\n      _this.poll = null;\n    };\n\n    _this.onUpdate = function (update) {\n      switch (update['@type']) {\n        case 'updateAuthorizationState':\n          {\n            var authorization_state = update.authorization_state;\n            if (!authorization_state) break;\n\n            switch (authorization_state['@type']) {\n              case 'authorizationStateClosed':\n                {\n                  _this.reset();\n\n                  break;\n                }\n            }\n\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    _this.onClientUpdate = function (update) {\n      switch (update['@type']) {\n        case 'clientUpdateClosePollResults':\n          {\n            _this.emit('clientUpdateClosePollResults', update);\n\n            break;\n          }\n\n        case 'clientUpdateNewPoll':\n          {\n            _this.set({\n              type: {\n                '@type': 'pollTypeRegular',\n                allow_multiple_answers: false\n              },\n              id: Date.now(),\n              question: '',\n              options: [],\n              is_anonymous: true\n            });\n\n            _this.emit('clientUpdateNewPoll', update);\n\n            break;\n          }\n\n        case 'clientUpdatePollChangeAnonymous':\n          {\n            var _assertThisInitialize = _assertThisInitialized(_this),\n                poll = _assertThisInitialize.poll;\n\n            var isAnonymous = poll && poll.is_anonymous;\n\n            _this.assign(_this.poll, {\n              is_anonymous: !isAnonymous\n            });\n\n            _this.emit('clientUpdatePollChangeAnonymous', update);\n\n            break;\n          }\n\n        case 'clientUpdatePollChangeAllowMultipleAnswers':\n          {\n            var _assertThisInitialize2 = _assertThisInitialized(_this),\n                _poll = _assertThisInitialize2.poll;\n\n            var type = _poll.type;\n\n            if (type['@type'] === 'pollTypeRegular') {\n              var allowMultipleAnswers = _poll && _poll.type.allow_multiple_answers;\n\n              var newType = _objectSpread({}, type, {\n                allow_multiple_answers: !allowMultipleAnswers\n              });\n\n              _this.assign(_this.poll, {\n                type: newType\n              });\n            }\n\n            _this.emit('clientUpdatePollChangeAllowMultipleAnswers', update);\n\n            break;\n          }\n\n        case 'clientUpdatePollChangeType':\n          {\n            var _assertThisInitialize3 = _assertThisInitialized(_this),\n                _poll2 = _assertThisInitialize3.poll;\n\n            var _type = _poll2.type;\n\n            if (_type['@type'] === 'pollTypeRegular') {\n              var _newType = {\n                '@type': 'pollTypeQuiz',\n                correct_option_id: -1\n              };\n\n              _this.assign(_this.poll, {\n                type: _newType\n              });\n            } else {\n              var _newType2 = {\n                '@type': 'pollTypeRegular',\n                allow_multiple_answers: false\n              };\n\n              _this.assign(_this.poll, {\n                type: _newType2\n              });\n            }\n\n            _this.emit('clientUpdatePollChangeType', update);\n\n            break;\n          }\n\n        case 'clientUpdatePollChooseOption':\n          {\n            var id = update.id;\n            var options = _this.poll.options;\n\n            _this.assign(_this.poll, {\n              options: options.map(function (x) {\n                return x.id === id ? _objectSpread({}, x, {\n                  is_chosen: true\n                }) : _objectSpread({}, x, {\n                  is_chosen: false\n                });\n              })\n            });\n\n            _this.emit('clientUpdatePollChooseOption', update);\n\n            break;\n          }\n\n        case 'clientUpdatePollQuestion':\n          {\n            var question = update.question;\n\n            _this.assign(_this.poll, {\n              question: question\n            });\n\n            _this.emit('clientUpdatePollQuestion', update);\n\n            break;\n          }\n\n        case 'clientUpdatePollOption':\n          {\n            var _id = update.id,\n                text = update.text;\n            var _options = _this.poll.options;\n\n            _this.assign(_this.poll, {\n              options: _options.map(function (x) {\n                return x.id === _id ? _objectSpread({}, x, {\n                  text: text\n                }) : _objectSpread({}, x);\n              })\n            });\n\n            _this.emit('clientUpdatePollOption', update);\n\n            break;\n          }\n\n        case 'clientUpdateNewPollOption':\n          {\n            var option = update.option;\n            var _options2 = _this.poll.options;\n\n            _this.assign(_this.poll, {\n              options: [].concat(_toConsumableArray(_options2), [option])\n            });\n\n            _this.emit('clientUpdateNewPollOption', update);\n\n            break;\n          }\n\n        case 'clientUpdateDeletePollOption':\n          {\n            var _id2 = update.id;\n            var _options3 = _this.poll.options;\n\n            _this.assign(_this.poll, {\n              options: _options3.filter(function (x) {\n                return x.id !== _id2;\n              })\n            });\n\n            _this.emit('clientUpdateDeletePollOption', update);\n\n            break;\n          }\n\n        case 'clientUpdateDeletePoll':\n          {\n            _this.set(null);\n\n            _this.emit('clientUpdateDeletePoll', update);\n\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    _this.addTdLibListener = function () {\n      TdLibController.on('update', _this.onUpdate);\n      TdLibController.on('clientUpdate', _this.onClientUpdate);\n    };\n\n    _this.removeTdLibListener = function () {\n      TdLibController.off('update', _this.onUpdate);\n      TdLibController.off('clientUpdate', _this.onClientUpdate);\n    };\n\n    _this.reset();\n\n    _this.addTdLibListener();\n\n    return _this;\n  }\n\n  _createClass(PollStore, [{\n    key: \"assign\",\n    value: function assign(source1, source2) {\n      this.set(Object.assign({}, source1, source2));\n    }\n  }, {\n    key: \"set\",\n    value: function set(poll) {\n      this.poll = poll;\n    }\n  }, {\n    key: \"getInputMessagePoll\",\n    value: function getInputMessagePoll() {\n      if (!this.poll) return null;\n      if (!isValidPoll(this.poll)) return null;\n      var _this$poll = this.poll,\n          question = _this$poll.question,\n          options = _this$poll.options,\n          type = _this$poll.type,\n          is_anonymous = _this$poll.is_anonymous;\n\n      if (type['@type'] === 'pollTypeQuiz') {\n        type.correct_option_id = options.findIndex(function (x) {\n          return x.is_chosen;\n        });\n\n        if (type.correct_option_id === -1) {\n          return null;\n        }\n      }\n\n      return {\n        '@type': 'inputMessagePoll',\n        question: question,\n        options: options.filter(function (x) {\n          return Boolean(x.text);\n        }).map(function (x) {\n          return x.text;\n        }),\n        is_anonymous: is_anonymous,\n        type: type,\n        is_closed: false\n      };\n    }\n  }]);\n\n  return PollStore;\n}(EventEmitter);\n\nvar store = new PollStore();\nwindow.poll = store;\nexport default store;","map":{"version":3,"sources":["/Users/wubenqi/nebula-chat/telegram-react/src/Stores/PollStore.js"],"names":["EventEmitter","TdLibController","isValidPoll","PollStore","reset","poll","onUpdate","update","authorization_state","onClientUpdate","emit","set","type","allow_multiple_answers","id","Date","now","question","options","is_anonymous","isAnonymous","assign","allowMultipleAnswers","newType","correct_option_id","map","x","is_chosen","text","option","filter","addTdLibListener","on","removeTdLibListener","off","source1","source2","Object","findIndex","Boolean","is_closed","store","window"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport EventEmitter from './EventEmitter';\nimport TdLibController from '../Controllers/TdLibController';\nimport { isValidPoll } from '../Utils/Poll';\n\nclass PollStore extends EventEmitter {\n    constructor() {\n        super();\n\n        this.reset();\n\n        this.addTdLibListener();\n    }\n\n    reset = () => {\n        this.poll = null;\n    };\n\n    onUpdate = update => {\n        switch (update['@type']) {\n            case 'updateAuthorizationState': {\n                const { authorization_state } = update;\n                if (!authorization_state) break;\n\n                switch (authorization_state['@type']) {\n                    case 'authorizationStateClosed': {\n                        this.reset();\n                        break;\n                    }\n                }\n\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    onClientUpdate = update => {\n        switch (update['@type']) {\n            case 'clientUpdateClosePollResults': {\n                this.emit('clientUpdateClosePollResults', update);\n                break;\n            }\n            case 'clientUpdateNewPoll': {\n                this.set({\n                    type: {\n                        '@type': 'pollTypeRegular',\n                        allow_multiple_answers: false\n                    },\n                    id: Date.now(),\n                    question: '',\n                    options: [],\n                    is_anonymous: true\n                });\n\n                this.emit('clientUpdateNewPoll', update);\n                break;\n            }\n            case 'clientUpdatePollChangeAnonymous': {\n                const { poll } = this;\n                const isAnonymous = poll && poll.is_anonymous;\n\n                this.assign(this.poll, { is_anonymous: !isAnonymous });\n\n                this.emit('clientUpdatePollChangeAnonymous', update);\n                break;\n            }\n            case 'clientUpdatePollChangeAllowMultipleAnswers': {\n                const { poll } = this;\n                const { type } = poll;\n                if (type['@type'] === 'pollTypeRegular') {\n                    const allowMultipleAnswers = poll && poll.type.allow_multiple_answers;\n\n                    const newType = { ...type, allow_multiple_answers: !allowMultipleAnswers };\n\n                    this.assign(this.poll, { type: newType });\n                }\n\n                this.emit('clientUpdatePollChangeAllowMultipleAnswers', update);\n                break;\n            }\n            case 'clientUpdatePollChangeType': {\n                const { poll } = this;\n                const { type } = poll;\n                if (type['@type'] === 'pollTypeRegular') {\n                    const newType = { '@type': 'pollTypeQuiz', correct_option_id: -1 };\n\n                    this.assign(this.poll, { type: newType });\n                } else {\n                    const newType = { '@type': 'pollTypeRegular', allow_multiple_answers: false };\n\n                    this.assign(this.poll, { type: newType });\n                }\n\n                this.emit('clientUpdatePollChangeType', update);\n                break;\n            }\n            case 'clientUpdatePollChooseOption': {\n                const { id } = update;\n                const { options } = this.poll;\n\n                this.assign(this.poll, {\n                    options: options.map(x => (x.id === id ? { ...x, is_chosen: true } : { ...x, is_chosen: false }))\n                });\n\n                this.emit('clientUpdatePollChooseOption', update);\n                break;\n            }\n            case 'clientUpdatePollQuestion': {\n                const { question } = update;\n\n                this.assign(this.poll, { question });\n\n                this.emit('clientUpdatePollQuestion', update);\n                break;\n            }\n            case 'clientUpdatePollOption': {\n                const { id, text } = update;\n                const { options } = this.poll;\n\n                this.assign(this.poll, { options: options.map(x => (x.id === id ? { ...x, text } : { ...x })) });\n\n                this.emit('clientUpdatePollOption', update);\n                break;\n            }\n            case 'clientUpdateNewPollOption': {\n                const { option } = update;\n                const { options } = this.poll;\n\n                this.assign(this.poll, { options: [...options, option] });\n                this.emit('clientUpdateNewPollOption', update);\n                break;\n            }\n            case 'clientUpdateDeletePollOption': {\n                const { id } = update;\n                const { options } = this.poll;\n\n                this.assign(this.poll, { options: options.filter(x => x.id !== id) });\n                this.emit('clientUpdateDeletePollOption', update);\n                break;\n            }\n            case 'clientUpdateDeletePoll': {\n                this.set(null);\n\n                this.emit('clientUpdateDeletePoll', update);\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    addTdLibListener = () => {\n        TdLibController.on('update', this.onUpdate);\n        TdLibController.on('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.off('update', this.onUpdate);\n        TdLibController.off('clientUpdate', this.onClientUpdate);\n    };\n\n    assign(source1, source2) {\n        this.set(Object.assign({}, source1, source2));\n    }\n\n    set(poll) {\n        this.poll = poll;\n    }\n\n    getInputMessagePoll() {\n        if (!this.poll) return null;\n        if (!isValidPoll(this.poll)) return null;\n        const { question, options, type, is_anonymous } = this.poll;\n\n        if (type['@type'] === 'pollTypeQuiz') {\n            type.correct_option_id = options.findIndex(x => x.is_chosen);\n\n            if (type.correct_option_id === -1) {\n                return null;\n            }\n        }\n\n        return {\n            '@type': 'inputMessagePoll',\n            question,\n            options: options.filter(x => Boolean(x.text)).map(x => x.text),\n            is_anonymous,\n            type,\n            is_closed: false\n        };\n    }\n}\n\nconst store = new PollStore();\nwindow.poll = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}